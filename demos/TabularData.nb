(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1669718,      30049]
NotebookOptionsPosition[   1664741,      29956]
NotebookOutlinePosition[   1665179,      29973]
CellTagsIndexPosition[   1665136,      29970]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardenNet", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardenNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9, 
   3.8690237136048*^9, 3.869041334767592*^9, 3.869042729449026*^9, 
   3.8691052086388483`*^9, {3.869119717935349*^9, 3.8691197334997396`*^9}, 
   3.869212277532627*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"a8160bde-1394-4ad9-99de-aba1517fc23d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076311837203559612771654019538047733440425727513536347048], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076311837203559612771654019538047733440425727513536347048,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"256", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 3.869215497105235*^9}, {
   3.869215546879163*^9, 3.8692155519349546`*^9}, {3.8692161044615107`*^9, 
   3.869216107132107*^9}, {3.8692167279588547`*^9, 3.8692167436075907`*^9}, {
   3.869217032457283*^9, 3.8692170459859877`*^9}, {3.869217373494234*^9, 
   3.8692173782740717`*^9}, {3.869217516946954*^9, 3.869217517213879*^9}, {
   3.869217724899954*^9, 3.86921773656007*^9}, {3.86921777789679*^9, 
   3.8692177779781427`*^9}, {3.869217825227951*^9, 3.869217842059514*^9}, {
   3.869218068966909*^9, 
   3.869218073431982*^9}},ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-\
4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[225]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->
  "In[230]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "cd0f4aea-803f-4056-98a7-a376ca125b0d"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"77.2", "2.3"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    77.1676300578034783939`3., 2.2598703804321758071`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5940682726981285633`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0247587093714646822`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5445508539551991989`3.", "\", \"", 
                    "0.6435856914410579277`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.5445508539551991989`3., ", ", 0.6435856914410579277`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5207610290220295868`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0416644832451760205`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4374320625316775457`3.", "\", \"", 
                    "0.6040899955123816278`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.4374320625316775457`3., ", ", 0.6040899955123816278`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"8.7`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"793.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQe8eO6Hv/Mt/ZF05crSdz5q39kreiCkcbX9lfauSS
X9X01n65yHrTH4mv7F0eiSrwLXho78sT5uax+629dof345fmr+0n58w93nXm
sT0DGHzAoI9PW5j77PNb+/W/n0+4zfvG/vE3lXz2n0/tA1uOF6q9eWP/Y15v
adDv5/Ybgyb/kMy/YS+x99ymmwpv7A+d8XR2aXpi3zBF9sqqnqM4zSdEP6wS
Wef+8BaUz8DQmzSJY+nkN/YOir8PuVU8s8/40W51tuaSPa5wwGWurZ7A9gTD
d/ZvZPkbtb69sQ9K7qvwCH1hfze568hBp7f2vLOdllQVvLTv4Cw/fTX8Hk5z
AEyZl7U=
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.8333333333333334`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07352941176470588`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.8333333333333334}], 
                    Row[{"Row fraction = ", 0.07352941176470588}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.07142857142857142}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "very good", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.00796812749003984}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["223", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "223", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8884462151394422`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8884462151394422`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8884462151394422`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{223, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8884462151394422}], 
                    Row[{"Recall = ", 0.8884462151394422}], 
                    Row[{"FScore = ", 0.8884462151394422}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["19", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07569721115537849`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.27941176470588236`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.07569721115537849}], 
                    Row[{"Row fraction = ", 0.27941176470588236`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.027888446215139442`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.5`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{7, " examples of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.027888446215139442`}], 
                    Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.125}], 
                    Row[{"Row fraction = ", 0.8461538461538461}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["27", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "27", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.3068181818181818`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.10756972111553785`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{27, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.3068181818181818}], 
                    Row[{"Row fraction = ", 0.10756972111553785`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["44", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "44", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6470588235294118`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5641025641025641`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{44, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5}], 
                    Row[{"Recall = ", 0.6470588235294118}], 
                    Row[{"FScore = ", 0.5641025641025641}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06818181818181818`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.42857142857142855`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.06818181818181818}], 
                    Row[{"Row fraction = ", 0.42857142857142855`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "1.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 1.}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", "good", " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8884462151394422`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.8884462151394422}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6470588235294118`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.6470588235294118}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{6, " example", "s", " classified as ", "very good"}], 
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8884462151394422`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{251, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.8884462151394422}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "88", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{88, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example", "", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["6", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["251", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["88", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
Zg==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVl3c8198fxQkZUSmUiBISqZDi836dtxFCkpaRSlRkJBUVpSR7ZpO9lR0i
o4wQaUmaQru0Vd9U9PP75z7u/e/ex32dc55nocOBTY5TuLi4DgtMLpvsj+od
OmTvvXnq/w977d001N24J7d+QlxcLl2ZILspEL3JxXr2aSD4YDU9lk5vLL11
oHGNjXbDqhFxWvfenUzZ1dCyWoGshOmco9e3IX+7DFaX22HV6wQEvJ2Pebat
ZBmaBhEHLUr5KwIVlzIaZr7ix6keCo8+g51rrqEurxbCA0ch/DoZieJ7SJR3
CxmHZKBsZiOcx4xIPiUchevj8boxgAKDqtFo24AD3eGw9e+kqi8/wRW1AYH2
adDkm40ascv091oCHt0LxpzvMqx+1X7sTo7Cq5sCCP5SRU8dsvGZP4ceL3hI
j/dkYNNFEU49/qPvuyJRkPCQ9O5Y4oBCA5YMi5Jalj5jEL+JvGLO0fmRJKxt
qKGI27UYnRqM/mfPaK5RFpLaXenR1jpkxOrDyyEQ60VTUNMXBepqxDvvtaTZ
m02jvS0ofJ9Mf46MUvydz/QjMBP/NeyC4/g7Ei3gZZLclmDLdBEEqKrDJOss
begvZIyDKvB31zXY9D9EaVYaDIWayWRHPpZOe8UUpXiiIUaDRO7EYVvPBvgP
mpDk6XL8ipcmK74PkJuVjAUWc8B7OIE054fjiA0PsqWscXnzVHQO8sNSvQ/K
FSlo7jAiJ4dKbZf0c/TkYzLGazI44rsCUNS3EBYPk6EQP85pf5YOxZDTyG5x
xYriJHA3GILmzcfLpQdhEC2NnX7XsO1TOqJ3fqGqswI0tX4vsVyVsHY62+ie
6Qobv3gmXuwyPmVNxz6VfLy5FoBrPUdI53k0RTjvQ6KoLnx63zMaWmEY+WqL
Fw+34YeOGuz8MhDy2gHvf7Zqv5h6BX28i3EhfC6FfL6OI1c7ySJ4IXa9yIaV
SxvNvxIKg4FIiFUFoCPqMMUdb6Z7ol1YzJ+LJeZxsNe2A/Olkj515GLVphgm
QjQPdZeeYZljCibeJ8Hp0VWSkAtlhDV5KYlLFYrjfFC7HQDD8ReMWnlJ/d+f
FZT93B+9QS9o2OckOiqbYWsiCN5Cbci2KzceMPGBgLYQPTA6xhi7L0OeAC/O
6BRA7GUwgiLyMX9NC4nrD9MB1Q/k8jOb4VVqgGZMOCSsTGDuJMjab29mrFR5
oPzwMjICWqGhEEcphT2YsysEr9LdqCarBg719vBJUKadWc9o7HsFnoZz49Yv
H+brzyhqUl5B754ewPkrLg06lTJUXRWKHZG7MdIQiHbzKVhYPZVsjSTwcbM1
Xp2WpO/fztOV74vxbpVqg2F8GYwKrLF16CP5Om6nxtJSeO4NYcKWXAVzXAfd
b+RI7ZALbixwxu38RITYGlFvyFz81lJh/5y8TaHqJXhhFAYB41waFb9PpkMH
SeWpNWnxBOPk5nXUd6wAN7NskJTxHN9aDtByCUWMi17EgrXZbJbhFmSErKZT
XAlstso17O/0w4zPSXigUkCzDebT5l1FpPytlVxWdNHxahOsdErGx/rfCNIx
hp1gHUQqB8nLyJ/sTtxhbA5y4Ui2E2LrzJFocwm+YmZ0fEpmfUJpFgILz5Cg
029a6eSHZ2NheC43xvzbzQfbiVzmj3xQY1tTCpxGRhjjYz+ouLodx+KscTT8
GVlbGcBh/Q6kXD2PO+pTWIOsIDye00eROxjYl2uyUS5CDKdXibHJ9Ydo2U2K
VFDFGtOt6JZVwK3Dyvj8txqys+4gsvcM+pI+ULxmN0J9FrOpfc9IvKsW8pmN
kLETwmBMBngvHIbKcQ7ENM2wT8wSHhZ1iDmWjfn2JfhzYg9Z8SjhpecbKtBZ
z+Z5rqY9NgkY21GO+XnRiLsxTpfzu2jwbhSKn6aT09B6/DIGnLXC2G+1/Lgd
EU7fez3QaBeNYSEPxM0QhMG2MmxFD83dbYFj97YjP5OH4V+phWXmrvg0XRf6
2dIIXxUOkVxZDH+SROTbItqhJIcOXQ+afboNSy5XQOigBhLj1iKul4X0u6u0
KDgbOCwGY70i6G1cyV5SScC8vcGYLsOyLRZaOBeSzbnz1Qt7ZQTw608dpAVz
kDIYjceNe6B9NZOVDdqIBKfTWNfPD3c5Pxiw4WgbfouXjDK2G5eyYhHAqa1x
9F9CJ7NvTSuu+aRDU1gJARUCrCi7CDv87ZE7RZJyHiwk+zZ3HB1Oxzzpqdis
sZqzzEMNU/3UmKDEIyS14iI+zfZgk17vwp2SVTQ2rRsjuhexK94ODlXJaL0R
jQHuOZjLycHaCX1k1apMeo0fou20MPW2Nq6HFEPuujsdzmVxj6OFaVuqqSLv
N0nfK0VFzSVaOhpNWq5OuGBQzOzo18BH1zK6GOqCO49u4MT7DNz65Ie5jfNR
fKMLVwRaECL+kHjjD6DBOA/c4nkoT78E758bMbRJCG7rOvF03zK2Sq0Z87/q
wGbuMowV5mHTl+nUZ1ZKivLGePu5Azb3lNjvG1sYHeUm5r+T1zH/hQyGrOKh
NS+QrEuicE78Ai0XFKU5Tyagd6qOQvT8oB9Ti712K1ixAGdykbaiNfZt4BHv
xO+UDGpadhyqOQnIfSaKHYcugmmUZI3fxIFbpZdSlvyktpzj2Nw8zuiUOUPQ
wxlKtVNxdZo+LpqexOnztdgT5wPnmkjk+xuSWZM15kxrpDL1Ieh1paDCsxrL
a/zgcTMVYjvcsVX3HHRSpbF/vjAyj0ThXU0T0sucoMgTD5GMSKiWt1G1eAZ9
speAndgMKI3vR8TtLZNzVQjzhgvguvuA7KZLMxPnz+Ly1zucvufdONkhgH3K
dRT8Rx+LApLwSL2NAkfdMc25lfoqtmDuSwfkl+XTEq96PG+WxfS3cSg3yeU4
r/9CRYoWtIjhYhQZOYilRiEshQeqDQNMg5MkO23pb/xRUMDf0RbUv+HH9zm8
mPd9NySuJ+Kx7wvaX/SU5Dw90C8jxP7N6uSon1KAtJkhMm5PMOYGU/EqJQr7
DS6i//cxusVMY31V4rGHc5TlrBVgX85zJAmfSS8q8EfQCmF206cbML34lS62
FKG72R/sYwds0FoKRZYHjsld1H5KnVG+8piM7tyluI4wkiudx8FOrsZfQmtg
NV8SBoFS6P5kgRgbWQSUVlOAhAOuz9VmvbiTsNtJBdZuZbizyY0dsL2OOfVA
insXVrx8T6cfPaL85Y5oE87GGhMxnL6rTwfl03DMppIpiZhDlWSEj+wIR2ZT
JxiDXGjfkCHjfk1U/OVlt0V+5gQdSSbK5mL/JUVi9YNg8tv3hvPbn4tVf3gU
fkcVEGujhYbVCynRvwzCdcZgdIthVeKFHydPUbDyYgxEf4V7wzb8Wm7BcnW6
kt/dObC/sQsjrq4YnumKG9zSLL+gMp3h9iLhL1uYFzNVYZHmz77MrWXy7udR
9tBhZshSBItkbjF8A8+olssA/feMsPFlOY5FLIdH2xx8OteE3c02FPFxFga7
pdGfUQbTv2G4n1GERyPSVH3VB+NuT+mOTR0ePd6NNQuOU3S/Hpke78Kc8nN4
li/M5DgzOBqgh0wVe4jxsJix0R5x42ehPyOFzsZXMapZ7+jltxONMi7iMH14
GK8OF2HvdUcQ3yU0KR+h7b9XYsbt3aR26wTuTTXH41UH4KK3CkF3OXDcmwSz
WmVs9inGYD4XPkpeZq6dycGeretpvDWJpt/TQbTHVIhvigJ3aB3S32ohayCH
7O+l4+W7EBSESYH381boSwhA8kwiVJZI4IRiIl6u1caf1d7I3TgBpXZ+nFTl
QNp7Hd3z/4dDX39Qw2FBOHFfJc+3O9h98XFwDJkONxN9NoJrUo9SUbjUNQ3z
apRglRqB90LWjNHsAIhv8ISEWTMKdC+Bc8gawp7euFDfR1sHa8FbkYD5o3VY
vaYU3nw1UNseTyNFZ2jx/Z90bNU2usFtgj9TYybfchxHSwUx95U3M7+5k/gW
vEZUrENj0LMq0vomiCPdYdDVzAL36ExULrNDE89Pqlu/iHZMk8Y2ph23Cpxx
mMeHs1YqASsm/cdhxl4INzch89Z2aB6sR+x5c7TW1OC/8EL8gQg1h8xA0Vsh
iHpewOqkNMYq0w0bgzmIk1XDnZPZkLoki6CyGpRIHsQWJQvMOFSP6yfboTMn
BntiA+D3tBX1Rr3MpQEzml+9AkquzRgqbkFLehnCnduBo4X0+oIHVLJ3QcWt
j+6c9sLsn/KYpynP7H6ZxgSMCbI8vk6o3JiO1iUKUPa6AFI6i0Vq7zncuvza
Wwf1EHMklNk1KstcL/EAz5A9pQpvg3dyIC2eGQu91fvhtCObpGsvkbzeR0be
0g8B6ryQM7gJmVlrad/GMzjBc6CxvCcXMeU+2KceD56nXqzkmv3o3puHkUnW
3JWQi7lS/5gpkkmIDIqgJx1LcGbCtyF3axHut4jhIlc1+uQS0Xc8EU6781Gy
UZXpCv2AbyVrYGgdgZ0LeMlqTSCUvLtJr/gXPdAa1A7JbwV/bCTOPG7G3Ydn
oNgWAtuUQ7hx6Q1tXpGKBJGdSLctY7Jb9WFe+JrWPV9L45cfUqTLCLP2Vx5b
8igCYwtioLl6GjZkMdCdtQ3T5COox7gJYvILaPWgH+s4yZDMkUDsc49gNx0I
RW7GC7rpGQjJwodMxmYtVMzuolANbXxdWo1qkyzquhsHmeBM3O6Xg/x5FvUJ
7bj+nCjmyxP6JH8Yn+uLqPnvVPBuFKWKCzl0KquLOvWa0XAqD6INIXSyuAyu
DzLg3HcafLIG2LHJDG3RgWhwDWBjErjYCLN+XLi0DM5b9MhNNwTMwlyU38rG
Lo18Gtt4CiqWJ9iD++7SHZlh0vhWQkrhhUyeey3WhfnB3aKOPh1ox/ThCSZq
4CtcGq5itOIwDAtrqGJDLGKTLsG60JHz/HM7hFSU0OofiOdlfrB02Qojs3ZK
cbehs6d+0OGSLHik5+LdeA/zaCgUES/DqP3gY1owZom4WgXIvntBqd4jlLrm
FHENr6Lxi9wYrYrFcoGD6K9djnzm7mVc7MDLWzPw4jwXiWYIwSZHBW9Lpzfe
G5RCh40EjPf5IV1/BImJanTlSwte5Urh97Ic6GnkYf7LRGxaFIpDtsHIP+GP
qoGDjKngOrzW70KabiF8F3Qj6KMiU71Em/58isKUyD6UNLQxHj2NGJz052vu
Z/F41kMqTzNE4Y0kHCsZpRH9q/jvWADi3hQiTKmF+aq/lhnYIkxZP7sZY4ck
LNtZSf8+tkLTtgfLxYJwKnYyw73WofOPGnXahkBLL4RzzraWWriPYV/accz/
lwq/606Iz++mImF36CrsonCVeGaoOR5zx0KR9FmAPtetQidPOXR0SvBM4g65
R1zGcT0uiE0UgHvWatI8eA2ST5XpxN8ztOeEN7aEJGDXt266ZHiPzPgyEap0
A0mKDtBe8o3eP/1OxWXnsfKICy7sMoXGFxvwzKnFRDWDeB8lWugdgsEcS/pr
VwH/ox0w9+8mnaoBRs1uIR75nedwP7IE34ezKA6eAte8NI5GbiDF+1+E0wl1
PDyugaB2DVQZJuCSTiweKSky/mmfiV6m0OOjOZSx1Bndv/+Rk5EbJEruk8Cs
IvhhEWLBje8J4bRQv50OdjnAs0W9QTMzjR4ZRWG2z17UeN2hdxkXyLgzlI0M
WYDA00HgvOdhjnKG6dSpcG3WQ5ldZdLEaFivgMmHApIMFaRci4WIDRNg1Q/Y
YH+AIowXlUFwbT6M391qeKefjGuneifnMhmz/wnR58Y5WDczCJ1iggjNKKC+
I9/oH38McvQzKLHECgqL26FUvBZ1oxrU0dIF7lZBBFjtxy/NMBS9eUPLD57C
k5oeerasDcrf6innWBy0slxQ+jeNahJUmOc+/PhbXg7RR6K422sFFX9P/Iop
hbDNNnq66DSezrSn79lLcWx/HOK84mAx0oS2XyF4mRSDjcKFiA5sRnKvK8TF
ozCg/ZlOattTfUIeZtZnQGHzMM2YqwXlawYoFjxKO1bX4cbKVujrjZP2it8U
n3wfT/mWoH13AQRdL0CSn8N8q9Mjc1cWatPUYOKyCE4btVjF8xx2wYt1kF52
j2L9rsOoWARLpWbhOD9fY0CIDNt+TQ01Zf2M64qzGH5lRSa1LShdvQRHNK/S
ysbdGJM3wdbAGezv3hmoHDele7tN6DmTB5WBU7DszaWFaWewq9yMGm4lQmHn
BlwyL8eeu+shfiwCcVpFODpwGd+bLOmfgjUK+/8jOdeZOKn/D7/aAzH1XhKi
eDWROtyL3BvC9Ng0EI/eiaEgaTYmXjvDV98YReZ1cNyaS/HuxggIEcal7hHq
f2TA8J1yZedHsGTp3YKYD4l0M6MUnlM1MW88CtHvE5H5aB5cwU07ddxI2O4G
JJ7IsjymLijw246ohLl48PkO46vbBfBtw9KWczAom8W+jxphVvr4Q6tUDues
uLDl8nmcI1X4v8/FAe2jMOVbSA9tzRD2djnLCv+iU0c6SEdZhy1emoCUlAuY
YsaPgGw9THuQjEXJQkxx6UXSdcmD3rdUzHm+gdx8xWnGolK6Vt0IPDqOJUat
8JE/Q9V6axERbwCLX130YVMCzkqEYfSmP0SqAxB8SA/7ZYo5R2YX0brsUfp6
cy9OiOsRVy83BIb4wOy9iD1NN7BHUBKCis3IeH0Z0iotSJuaDu+FHWSX95VU
KhLRZVBAhSr1NLFcEwGmOliqbEfNsufQe5mXib34ijTSNTFr5mpsVItAyfd+
xqy+C4us/ZDy4T5npuwh5pS9Eknxr8GIFT/2513GqIEAJJLLcaOyChapUng3
8zltqYvGJ8NiGilUQwrvGJ3tD0LftjBILjxDyV7AxLVU6OQ4QOndOrzdX43d
FWZ4TPnQGBggP8ErpJOcDMXqE/AcrcEJO2HUtnnglnQ2Vr7nIwlNPlaX7xDE
jTNg+lGWPV5Qgdn9u+HaokXxJevxZP0ZdqLiNzGz5uD3zyrw2oRDVUMCgfYr
yJxfg/qGTPEytQFpO0NwO3Q51A1F2UPLozHUZo9S/3gMJo6RgZ46s/D4JGPv
0cTgfUl8W78Cd1of0pLlflBXjcPciUnWmZeKa5HPyPK2IVYXPEbN/XekahmA
+t9ZsP0TjS3e70ghNRSspxwdigtAmpkQjLZuZf7k5tC/f/54o/SQBuWrsDhy
JhmFlEC3oQRph9qw0lkXXyY1dtXPEAoagegf20rqMqY03LYPeiJ8eDyzDuMK
qhi7kYMm1fu0eVcwk8n1iYpM9uO/Befpn0cWHt+smcy3+ThzJFw7wWwPRqVk
YWq8FdJVBvTWlYcVaDfCM98LUDFfiRVv5tKBTXE4+U6A9ofPxdn1hEM1mmjQ
fgu1zx/xujaCJixmoWyFOZvYvo+GVlyh6eNdiEkfRJ5gKXY6/6RCQTdIMVFU
PaCNi7Kx+MQzDR7Jp1Eb+5gMb42RQ+QY6nmKKfejMVFYFI5+EKTTNv7Q33YR
O+P9YHA7k3G4kUrXH16FR8tL5k9hLinNysT972PMP49lNOORLLPwYw5d4Q7D
ozcbsfSgJUp6WqnIM5uTqilMdz7oQPvbUaj9KkSKtyOqEkPALSCIWZlHScGh
Gpn3/nICDIPxp7oAC7gboHazHJ1H3tKvvRNQ27yQ5fb+zVQEyqNlsRvGhC9i
SHQlev4m4LSBCuZPD4Kj+Til1ptSuh3D5DTWwcAjFbku5bAfW45si5V4tsEW
7zcpo/6LAqzmNNAmR252yvUgOHsWkpJzJa1sfsjcN76HovBGuNV+pCdPO5EV
qQZb/gRqUo2G+HYFyEjlYKQ/hL1xYzU885NprCgK+r9kSL12OZWftkTf0jD2
v3070So4E3cPncLP3izUDE7BzwVy0Jq3V3vHYQXMtElFQVw5Vtq+ZltTE2jz
j1YUfX5Jl477QNSxYdIv1BGy8yrDd9QbPLdOkMJTyUb50VJ2W0UpEhp20PVQ
IwyLWNK35RtIwL0SMpb36XphKx30tsT2HzMZVUMBGnhwFItUBykl5gfdXroB
s63FULU4Cz6bjuLXZSV2+Isrth9bjZ1rmsjVaT6Wpf6E+iwNaj1ciFV3nlDy
y2DObd185P/JhFRxEIbyLqA11Au+zhUQskiC7Hd5XPXXwb2/Dtgxvo+Wm+ki
qEcciTwaeBk9Qcr7WzDPXA9xJ/Kp6eoBYt2SYa5SCnl3OxRtv0qHgnPosfZd
GurdiQZZS8iY7yJLgQjcf5BP7r4dtGtXEZ64KxF/5WxUM5WUMjFBH3PamJol
R+jDpL4jh3diwVYJehfjj58zJBoTuQvh7qkC/cp8aJWIMNPqm3C3YAc1TOFm
fsin0ZwZfMj1qCUum3RIPRmm3vsExdm8WPvkNL6aq2gv3maOzU6hZMNnCnm9
JjQLDTKyceGTTBeBnrIPJPwpBi8Vn5HSyH485lEEz/szqDY3w4P6cmS3rsTR
I62MZMM/jl+YHtw1k7Brgz+EXrTC9NZcFD61xUn7OJy+608ls5/QbRFDpD1Z
iEDHCCqrScZXe3W8UHbBbj5eZIgvYv+N89Bf8Sp0b+vAtm0FEB4/RfG/eTHv
dSU+F9lC8vUZ3Dhxh3i2noSP0QkkW+UhOHYmiSYM4HC8K7beHabjm3LRoWPP
zNatwQ++M5Bz3geRSebxTWgDu62fpoc8oUz/LtJhp0C65TXtLNVjHD2cwNmX
RvL616DvkoVZ0oZYI/me+q5epKr1EbRqLxdN0TkPcbdoJGa+JaFjw0znkBf9
aPjHcNfPx7wfX5gOlwy0fZmCLjEZ/HvQMMkqEdDcmUAOi90o3YgPz79yYBAL
3PMJwEfFP9j2PQZDukUYen2KDRU1YKdv84OQnQeW7z0Lgav2cBCzxRxpHUif
bMP5n8BV9iaFiw6T1gcR6F+ym+xEubjXPw1R8lKosfOEjG0LnrzIxuPaMvzm
ica9C9dxbEkRsuPt8Vyxh3Evq4fEj32g0ZsMq5WEvRmpeD6ZPXpLi5gnKmmw
n1DEk1pPpG4MxuZXXbCU9CZmdxaeV16C556L8NPTQ/l/pkj1r6etiydZpuoZ
Rq8mIE5qD7RkWMagxw4891nO8yl5OJMuTddnRkBa/QdN9b9F63wXoIStwuH3
amRn2wojLxlKmJFGCWEFePVqPrvjBwO3mCBmapI1c/dFPdVNqUOYZzZlNRmy
cx7eQCSnGzPupmlH37qC06VcOL8kGI2vyoir9QQCL3Kw/PMO+jIrhfL5iijs
4XQoPi+nsNs/aeR2JFYHPKUq31KsOWlKUyeSsbKUg6prAbBoLqQZDU7ktVYY
3zKWN5bPm+yWRdfxou8ZhT9OhKlOAO3yC8PPX6Xw+7kG5+TbEZB8hap7DJA0
pYjmXKpFtMk55DBtsLiniVGvw5jl8Z5x+XgcowM5sFRvJ9NNUWwbp4Dhjsxj
xqflIdHFhqncUgDPPNPGbY/mw4BXAHsmc/6v/Ak4D+tP5tExuG48DsvQQbI6
pkVTTyUi3Fubbnf/I1erGMQe1MKOaJayNNIo3+4lajRd6OvihWzemm6K9MhH
wWR/5hspwb4Nl2DxJhpF07TwpaUPbroa2OfSgPDTusg5P8wxufKX+TIezTzQ
WIDOGmfqrF4MkdmNnIGiF3ROOhFBP/jpnU0sFBuM6FyYCKo+hNKPPkuydDBl
hjum41m+BcPZPUwrZttga+QZPPhF8NkdjNlLd1GUezRpL41kvnCL4eXTuXBW
E0XHkmj0/HFC4egSnOXngpK0LC2U+0Z/7OvR05jFdFUkw/rMV1pp+ETbM1QO
o4dKgG991LvqL1MlZIqTAyKs6WAQAouD6PBgFiPLqNDtcFn4W0Zg56MZcPqd
xoyMmuPmgtUYO5jCBJT3QOSCHL6LmCFOVBl9MlyID76Ejk2B6AkNRlTmpBBF
T6NMvnhSc/2U7hfJUSrIQrHAXkTvLAJ5SiI8nuBm7kD9fHKYt7SCNBYcxt3w
NSioyEGijgBbVp1Aa3pSCXPT2ff83hgwtyUNk6dMe8gmGOyY7Da722j9snPU
vfsubVs0G3l3y7Bmqyf8/nLowDYPzExpQ5erBtrEK0mzbUHjik5+yJ04SgJH
8ujKrBhsU3MmtY+LISgXSvI/0lnpQ92NszvFG81ucTcsMc9pHFyxsN4kPKDR
xeBWw6jMysZ48c2NRb2ZDVt2BjSuSH3aGOli2KAdEN5wvF2g4aS1YKPgJ9nG
HXxvGhxHhho7uVwbRfn9G6V8l+N6AT/0JixhNK7IjhYGIH5/Ni7E5dLNJlu8
zgbnbN40dKzuwWdWmU0N88CT7mzaoPqSmp4tR+nWAGjNjMKMuDC8bX5D8zrf
0jPzdjx17MIcDy0Y3dLC9wdFuL0rmWLvmuFh13mEb9xHTpM9sPTid2qqDMcb
+w1MlJYl4+NyBBH+G/BQci7NGgpF59pkHEz2gOx+VQrZI8f+7vSAm/pi8rbi
g1ruJQrXP4rv3ywgrv2T6bt2kZkRaEFFWdaQkhBkffs6mM+5uQgVyISgQDKM
/S0nx2knSMhp0ucCqP8FPxm4yTNCkbrYf7QL8wJ4EZDKwHhCAmoGxehZMIZN
UXNhNzmvVVP3w+M/f/C9msy/zpXkuvUqWUftYS9fuEyvk1Swr4YDB+UJqrm4
iswsypEYEAmnKcZMv44PvH5Ho+pJDmpFkuBkVgCu+9Nhu2kDhDeawzwCdECi
API/a7A7Lwbr5n2h6Ib1aFXbgnnTuShan4PXl9cyFpNZGC83i9SCJohbYUj7
bpggTnvy4tQCQ7hIpeFs6DcCVwwT5fOAElbFIIRnFnQnM/3B+G+SWpaM02sF
IdNQQgHioVDwScDhhZEUtyeQHQ99VT/raxlmlexDU4U5uv5ZNNTd/UltTk3s
0YyUxrl9+yD9xxd2NysxfiUMURavscqGC9/OZ02yViDWfQ2njWLbETLQSye9
Hdk9/RmQq+vmtC+uZTwNQ/DN8QQ0gkDNEmFMu0ESuFr8sX5UjzbcmopAFWHU
r1eB0qc9eHdvI8TGY8mk6wgG309hK7d14tzWNTAvSoO8sh3idPTIa04GFv48
yLytOo4o51H6Im6EYy9MGi3WF8BfdQ0nPTmM5C5LsEpj3bjhbMRSWSROPzxO
Uk+j8eo7g2vHM3CbfuLIltOYmDFAWY4CpGx7AZ9U39C9G45QkQ8hwXXn8Lbz
NKLFBUnS9TL+TvjBqyIDf1ZxY/mOY7jGew6xOvPIzF8a6xTHaNS7g4TMjoF7
bSBih1aCU5wJgRZBnJzshQsltPHCPBiqf21gfLqJlZ1xjw6Zn6czd/3ISzoC
C97Ew6EzFBt7O3D+lisr/0MRQfsrSdFuLisxySat507RwRQf8tO8Qw+EHpOv
JBeMmB7oZiyB7wcGJpssUcc/B5/dVejmTC30jDNUeLMFyx0vMG1vO6E+/xpu
z5+LwZYodBmehbWGLIl0s4j3E0D+Cl2okhp6W6qwQegG/H1L6OEKV/RYhCBq
ywt6FzVMeisWAyZu+GphQN3bD+GJV/Uk867Cc5XrsJQqI/crpTi/yw6St3Px
TTOUU8u64UGHHX4M2VFm03J4Xs7CC9lybJZNwdQYfixPK2POgbCk8ippO+fA
oSgbzs1nUMH/lzL5MxjPH1pIqWmC9aQHP7dWoIwFe5AclkJ5lXVkt/gjrbUS
wBchF+RLXIP7lV4mfLwQaQ9ayOhkBGZ/EADn+Vz0FZ5lTp5MQYSmEWPe14TD
PctgsdYP+imuyI2+gS37eWAQooK/M0/jpzkf6/gxDBmDvyh7YAHm9oSgaqYD
bv9aR7rhxoxfxxzsLTsJW5FvzJ3HvFCUm4e3rzJxy2GUKeOTR054K+x97kD9
WTutt5fE8XV5eP0klpN+2Qgm18UgmG6I+w4lWOw9hT0iF4dDi+pIMOwcR/i/
FAyN7yAe0fe4k7WJ8gQvrHKq08QZn+NkwImmJt9riLxvg6JJ3mu5JorO5Wdx
bvFqPF3dSlMO8MNcrh3K2zfBf08lbJ+6QXdvNy7XSsBw9yUcbSinOcd+QHNe
CfbYxcExcTZNiU1uSJjnixmMPInaBlJ89hRGJy8NDi/2Y8L0PGO90AzHFg6S
8UQ+sv3UaKVUDUQVypj8wCZ8vhsHteNFZBwa1fA6/y2Jqb2ijxrSCHnEh7P/
HrHXdliC57AIfswcwaF680ktnSITq0hwCXynqSMfOPNvdsLXvQEdOX5IX5yN
Ja+Uaf2h05SQVgQrq2Y6oReFimoRxNfVUNH5ZI7shvPoyD2EwapAREjnIkRr
NvxvC0zy6jlKNXpWn2axBo8Oq8FqbAkbxbUSQq06jOTWHviekGHnhk9BmWIt
AleMM19/xKLfy5tmyLXi0sQ2zCo4giLfK1AVySErhzMYrJ+Bw7kDTLb2IHY+
mElZF4/hUkA58g6cI5u9AmhyW47gU/V49E6aAlx/01/Bb9RX3MRY23dCatSE
TAwO0bfLZcTsyCTj7dWIr/VCWv8ymnN2GZpP7IXPSXuIVS7GLNPH2smsI15a
GkLGl+jzsb0we6KOqEb1yVxMQAHvBhpbk42lso40Xp6H3ths+r6zhxlR/Ul5
OW/IKy2G3rbEgs9x8k5yNRhadpLyDVShuWuUo2LuB+/SNgQcS8eoSBjyM/2Z
Wb32uNtcwvn1mh/LvNzw+OdpeC2+SzfODlK000MKUB8mO7WtJBa3D6K3zlJh
1jkEO9ohqo4beYLPmJJTk33cYG+jc4eO9snENXheMUDv2RjmzmQnLhKdggw+
X5gMKyJ1hTyNNUlDp74dEkdm4P7RXOz/eZ4RGEvFwqCZ4FpZg3j3bkjFNWMj
c45JCVKCobc4LIwEsDvVCaL1kz6zII6sU6ywPsYbg1c3M2HFAnCDCBZ8N6eE
8o8wWlaMXxMRFP2Dl666zMSduGFym3KTGNkh6rgyZ5LNFrBCFg2QdpKCgmg2
qyvTTAkXpXFzbRx8KJZjXu0OpfQrdHFFL7193EobWlvItzcL3wdiScpaGK84
nZhbEEGfFK7A/L9YVOV34f2TJvhoi+N3TiSyNoVDIrASwsUzcGbyP0QXJ6P/
0TP6HwWlG3A=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwBKgLV/SFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwBAAAA
gAAAAN2DED/7oIE+d3XIPgDJ2z6PUv0+ZNIzPc35lbtfjFc+xa24Pq9x0Luk
QZ268qeavMeIzrvo7jE+H5owvAM6UT6Z4LY++yI9uym4wjwFlGG71LZDPoPr
2TsHWZ8++9W0u31Npz6SpqE+R6bEPi0QGT4tHFg9H4tDu8U0Hbofz5s+aP8b
vMxvFT7q0UO71xvHPqfmSzwtkpE+FHK1Pf4Aoz3Ckv27ahwKvPhvAbzwiTU+
0RDNu1X2Gz0oWZU9SOitPhuUI7wd0Eo99scFPx+Mtz7v4/A+K7lzPqsmT7vp
OpE9U9RDPrp9rD6vWf09m7JgPk2aqz7HScw9opE3PuTS8D3+qs8+4u02Phon
oT43kck88ZuiPqvBTz66P5M8vteGuh+7sLt1GZI+Y3PQPU+fwz7Nj867qBbB
utrTzT7oSMs+jyO4u9Kl7D5mD9s+4+qPPYs6nz28nI4+q2Cru/Lp3z6XDwg/
OHNlu5LLUrxE73Y+Jq6NPbokeD7RVeQ++0gDP0/3JD6CUye7hoR3u3CHgT8m
YYo+k3v+PUzs2D4irO67NNH4Pi6WqT7ovZU9402PPQwo/T3ZzbU+oSyWuhSS
Bz2Rtg8+ACQ8vAHt6jyp4tM+vtn3PKkqFj4KNS+7uyNwPtCKOT44KUg9hKGX
PsAFqj7HYQK8ic6CPfjKjD5Xwaw+QwAFbA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwBKgLV/SFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwBAAAA
gAAAAO2WbD5YSvm8tDCDPVMBpz1VZA0+mDrFPajc5LreTjI93WADPQ/1qrwN
cUO7BTHsujx5CryyX8I94aulu1iDDj7NwkY9T+RKvLgMNT0xRFq7NnYhvBaa
qj3/mQo9Ie7Iu7JsOT1W0cI9h9PnO+J++zyiYL672mMLu5v5rz08BO09vciM
u6KSCD3huwy739xSvGuLij1CTgo9/T06PedHXD1wZgo86J3zuwstULy85N48
7gwaPXoHVjxh0IG8xxUmu4CNhbpg9Rg9pN0Quyehej2XMBK60PEhPeQhGbvU
WQi8gB8VPVJIuLu1YwO8PzEVu21oTLyadpY9iCL9PdVTzLxP1sc87wSZPa77
nT0X1yS8SZl3vGUKmrsY+a68gukJPdphqz0bQ4Q8MvjnPRQduTwhCHq7+DaV
POt2rrwCpzc9VcSvvLBkoD0THp092jyhPWefKD0Od+G7qkHCvN3RGj0H/Pw9
8v9ZPHEidbxw6Mg9gcChu3X+vDwvoGA92NLjPeMDuj1QwXO7ryslvIDEFLyZ
3X+7FJXEPaPlGD4qZzy6mICuPLopjj2C76271O+xPU7cWD60tdo9eT+nPQVe
mD3yHAg9hSB3vKs10Dv0hQe8Ouztu683Wj1KHkW7bAgiO//EYT2J2o89kZ7r
Ox28nT2MvAS8w69SvGfbsD0z3pA8M5gA+w==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
QMt2fEGb+3L6H9CGfWo=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
wlN3Fr1c+Z7hrnqM49UpKJkT1LR6Kg7/A/5IV8k=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/9" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/10" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/11" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
jT7WRtFahrj4L5F0z8jyHtYeQFBpAhk+CsM45QSkl1pBgl1FkuUa0Ju3ClK8
M3gRpUlKGYfpplu14NoyWfR6mGCclS8OBaxGzZ86uhJ/jBtKt6C+2PlQtd+D
qXlx8OEn0tL8YDr4lsPPOXbUfH4mM9uslpnuNY4ejHGA1nUBM3lbLfyX9lP2
q/HMt/HzeP6WDKJ7lZmJxhPputAuSl0XTzeDFzClkSspqGQ82gykoL/JGJ8l
7jDRV4SxpLKYjMT20qgxJrDeuQ5FM1ahecSfPvW8pRilv1DetZ52iJzib1r7
nh59u80YKQj4F29GMzO+fiftNY545vSXzWrOEliK/qa2rKvk5xeHkJWJgoDu
U2zCf+lkk/WAMftSQwFC9wQ14edpSD6mcckgoVgvjuZwl0h+cz9LwXXs3uUi
SOyuFtzoOCaYkVPMXUwpo7kZh0hEPId2JOTwjFR+NGkO7mfWmOeS5dE7lDE1
kJaZrqRjCpZo/xFC1Y61lHqVONV1gqbclFjsMpXDnmOTuJTgV8zd9BKcNd1O
TZEBKDJ/xNk+0kWAVQz9bUtg/739TB3z39DdYwfpfnQXO36NBm7OXICUMGWu
Z1w0ml1r6DMng9V25lxoUbLg5kgwSbNd7IqQxey7nxNxf8J9QfDSUlqrfose
/lyAnb9ekvj8MvLgGSCqdCl9fnmROaBYSde3FrJ3ouw5jTwzzm/Rf7jgpU6z
t/ymGuWT7MaGbBK5nkoiPU6c+cMPjHXafm7j7jjS/yTVJGQ1llY85vNk402Z
gq1HBFN8TAVztp4mB1ULHt8pEjeCLzOq5nbcR3kTpvJiLl3zUECcXi4VTXOx
cHWezO76EieYk5/NxnUoM50pRrwArph777VVsGHqRaZokTUTYzwbx0WdqFN0
JvwNjghYzVescJOt4PPm25QTN44r2TCV5JxnY1vKdfby8330tuUhE6SVzfLS
RNAvKkMB3D5k7hbixKxKkFF5ELFOkzCsFY+/Iz1Qe8FiQeEajA7toHqlsygc
Fc0EB6nDdU8NRnV/ZgRSeVQhm4/Fy/gYGnMWW5Sl+QbHa9E47jifdzoPbaVm
iG8XIHt0KSTP6dOKnZ+pqamZ9HjPaLZgJa5tGAV/Vx3E79nLv7ukCqqmYRi9
RhtbZ6ugRVUHow1OU9G/P/SzN4y4kgnoj06m4GI1NHhfwvmuI/DcdZam7yum
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
oTA5lA6pIz8ij553jOd/PuSK+CWhMB29l1OqFuKMKn8xz1Uv0FY4cvMbb9Lu
XYsZa+cz7LRLaYI38jXck3tBtD57FXuk51zTbyd9zjXAQPBA/Qr3VcsFDpXf
mmIdrzCqq93pw3pDDEueYXR2zeE+XjolWCobyk1qDWeN5uaxor/lOZfF8Ra5
EyzZXNFmwU++EpsXocQemhUtGIrNYfN6NS1KGtZxWcd7WaeCKtKZwgn8XrbT
g3NJTfxpHtzuSbH0+9oPgY1sF6XHN3Azx8dx0y5cYm2HJ3Pvz1xh/cayXK/k
Q4Fc42/Wc5Y1mxEpzN1vPsaVeZiyl826uV/9cYKOAW12e/NM5tyhYmaJWgzx
lYaZJpPLTeFf97DhgRns2tdW9Gp3ITfvWzKzw6eYJD7pCmbejmP3hF3jMr82
cOqaMfQkdQdzXug15ahvahI9YsgMXewTeK0wY288t+Q0OWnBrKRyrl7yEPsk
mQ8FlyesXfM8Nrj6pcCFH8KVi12gnBu9NKF4AtfqWsG18pMFXS/yBNeUDnFi
HSTwstzHTrjN43wvVHLK6ziu6dUuTmXKYoF2SDw3ZHuKC9ST45n8m4HBZ3dY
+1Ha3PfkQWb+7s+CQ+s82ebdTwVd6/oFemNMBYOCa5ysXjN3q76QrW69y9W6
yHCTkqewTgGL2JQma87TOo1zfa3Hfi9LFWgdecGpae4niwALTm2YYZcIN3A7
R4UgTXsh9Cv/sEIrezivSivwj8nhWiOPfbPjP7Iwd2fNbReesa4OR8S/HVzX
GBH2QqYMbbc2guiuTnZBnhymat4UPNunx6nOiUCq/W6Sj7RkHHROCfY62HF/
ekrIxV8Ph+36GXv9rY2bu14xScoZ7L5yQ+7xAgl278+JgseGezi740J45FJK
XwqbsODrI3LpFmMXf9XA91W72InfVWm67rAg6tpz2vl+D09a/YyFZ1806yRW
TJMyp+BtQTO7hrJZkWEPeEtNxN/L4Yh8s0CQKaLL1BxwR9rsaqpQFcfBnCAu
UNacrsls4C7YuCJ0YRKKe2aga6siCS2Po+ejtmOXuBUn6T0dmtl3mO8n2rk2
cwsciZVBv/AGyvLdz/pMKG56+qKXrpfa0ODhmdj7agK34Icma1hVwVy46A52
7klao6VFrt8qaTqfzym/qWGW3k5AzMBySF8dYifMTIBNbgv38+dP8lhowv6V
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
VtrO9K9FCmsqCT8X8nbo8TC9ijHC/wBmAag+
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/12" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/18" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/19" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/20" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/21" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/22" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/23" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/24" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{16384}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/25" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/26" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/27" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/28" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/29" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/30" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/31" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/32" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/33" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/34" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRQ0QWUUwABQsirsW6sCgqyr66BRJA
ia0KttZi64LWqu3rggUXUGRVqQKiWMGyC4oWIVgQ0AD5n7k3idDv/Z7v9z3P
7/n3eeXOzD0zc/ZzZjJzX4vA8BWBJAzD2oIxzMW1sHGuIYZpQT2QyZ/0xdq7
W8SKHL+xyyVeCMaCiWGnOBg2lmyBkaE+Hv7RpbwjojLqEhpL4PgtKYU5WYth
PJH6TaDEdBHZ5duxLm0sgaEDg+OpLYiSeUSUWvDc9FMPskTfkjeXMa4Zcl0X
y7h/kARRKZzpVtPTbfZmrT/CfVAG4x7gYthmeAosy8ZwAxdjFjMmZZhaTIY/
xlOZ+86l+0dtXs+dtDUpc/x+7DVDKCVHU/357hIWaXbw11YB//zy1n7Z1xaW
blVnGYUryCwqLVmUyeJSzF4zyF9wWiIytf4RfVKa8UkzSMx3hmysRzmNa1Wa
uYgtGZpBsp43XJeozdC22bac6q/8AvvmsDLWUjdVKJmw2MHhjTQsfTiR7lX4
BUZxWkQtHPwX5IcC/cKzrQccMDLpaw6Je+aAsf4B6uoQfuYjhoQtoD/lBPC5
h6cJ9rlwRRNdTWkkknSbUCuaCcMLbS2/ZdN4guOBPoyD2ikC1y18y3Ebnxou
L26L1u3hjmXvWt7mVmA7GQZ4bkpKOWq76Ch/qPSDW0GzrcETrxXaZKslK93G
fLds/bJeTyisnE6bRW5ZxP/6+Jlx3z0pZ14ukmxfXMZ8s+VrtxCW0KcSGmRx
i2VmF7cmUYa8jkxjkcdo61I5FnMmnTUWSMnGq7lCD30vkukZPhebO0Y028zK
5+gaW63lIP8AkIuJrFkJ/9G5TDuWCzbJRGaBHdPRfY/aKP7aEnMsEfPAtHqL
aD8PoDYSXwtBLsZ8TTJa8Y6ZOthKbBBLlzjXSrikdGyskG6S7obp+5N+00lx
wfZmFfnSUJlmgI31CeVPIPlKtie3GBaSV5kcfICNz/yrWYjGWYidxwZIGL3Q
HNOvghGs0AgXdfYbwoCh3ClkXzuWIaCXPp0Yef9kbExWSPoV1NUcR0BCadbD
xjAomXrYvFpuwL/H9CEFYEDFVAVOxTZKoSG2EJuEA/tvI2VhMVnSF8PwKhF7
iXXjQ71J1mH243yoohF8EJqHcPOw5mSdlKnYI9pLYqh0O5Y/C9uaJWUkkxzg
FYdRaBzCvZ+JVfpTRDRaBM0kQ8DAVmCVXEY6VydTZ58xVSQJsaoUMsibKVIa
NYKGLQFZmIAsDFKEGVxqSYokg2VokFKYITT1OOvF+jrIZTn/UI8XK3NbMXdm
dQr3ON/n+7kWt6ZQa1Msqo+OKbILaJ4X7tK9lOXMz2BJiqhS7eQxVI6siJNe
lEJi3pcwp1CD+BaZUxhbImgGZNsMlgycgMHEvYUUpwEtp8xkO0lq5DZKnAc9
/iJ9b62/9qsqWmcmHf52c+nxGH03nx6VSY/m0kMxvagIeiReRo0EAJT96TGZ
9DghPTRdF/6iahXttYQekUmP5NJ3VtG6JPTdLHoc0RF/m82iR0noX+gx2Pou
+w8exUi2LhknuoquO+692RIct1b364r1NkbMzQmPROU5tw/TWyLtWA8X7zhQ
3WvI+OXS7UeZGYe0vi3a/PvRjspGC9IDi5Qi4B4L/lHpWa7zzrl10zBMAlWu
g8Ri9WJraIcKGTwRByskMX/N2yqSTIIWBvwr5GK6/h73aPJurtASIyBBnnT+
ub8OrM1gcdmoJ/zjMyQUzorc1JUkEh9T/2damP71wotjGZoGrBnbv4qvHyzE
sSHjTTCU9ndfU8iZKhwxDLD6/uTmiSyMpu6GsNq4iEIBZKCGfDSGpvvlm0U0
IcYdOdSnHxz5FAzTR2AsFdgfOikwkpWKRhxM/6SHDsZdq+qJ0zjXqdoUZkJ0
S1TIP9x7dh5GloxE7M8ht3iMKqRg+LQYFoG5Tjfc/Q/OK0yoodF+VSdMTyXY
TOBfa/U3heijwf/Dk7MkklDFaXxG7e/PLsTIhaQRM66etfwMRi2kqHkBM/4W
Z0lZAZiT1W0IzCvgPCBGHQmW87sXiSHRsL8Zm2THMHxdimFlZITDGBR3JmZw
jNle6QfHTHG/T3WdYEievBjbLtG+kUGZdxBLD0TjXQP7OwnPOQyJaWmL6RZD
0gKZq0NKyUEXCX3XTnp0RiTzNabXydLtlejOYbpMLC4yqzxjuoWvhYMlm5RT
FpS5LjhIWVC+82BMBH0Pg77LIzUigr47ghK3MzWCm2pcztZ9l67bwtcL4+u1
dut2++jOYZWaNVqY1lqYFQdM3MI/4HQn2anK1TGHMv9O8vwUilN5t2GcP33P
Nrr9ttQo+CtJjUhPjfCnx1nR4wa0YNh4SaofIzWSkxqVkborQ2rd1a3b1az7
oVD3HZ8SWHbGtO2MaTn+tz7A9KGFaanU7GEA7Xm6q2OZq2MG/vdWicNRVwcZ
xeloyWyYdDDJ6RnFKauE+SA4NcI3NSoiOWYbfad/agwnNSYz1bhypV4XpveP
j25bum6rUK+Fq/sOqOBamdUXTSwWTXxqYVovnVjfbNrWYvY3aeIWznIHMMUT
yU7lPpNUhPinxu+k78xY7tWbroc4MHH7xIcBpm8szBqLzBJIExHCFmbdAbRV
+5IdykucslwXAEMGi+e3uTrJoFpy8J42UJoaD/gw6Lut6FEZ0vWtLN13hbqv
fHR7+Lyip6KJbS1GtS1mjYCAh7FTVvKCnGSTlBKHg66O5SXzbxU5lpUAjfPL
PXIiGXTAKhIY6JtqXHdf952/Xmcz+DO9V3y9V1y9Ph/dMJZuK18Xqj3NtLfN
um0+ugN83st3AabFUrPaFqN3FmavLcxKLcxAgm8szLdwTzrdcV1wi+J4NNmx
3PcOSB+I3Q14eqTGRwD3UnVfsXS7cWzlfN2edN1eH2Tq2C4wGU94Rk304LrK
mMZjogQeXJ704JEjT9wyWVab59sIXA6nW/y8jRtGWmni/9UNUOwvw0O2RAWE
cl3DQyOCQ4KiuIJZNnNm2czic7eER3G9gsNid3J3OthxrexsZwYGx0BK9EVs
WBDXxs6aK+ALBNNWbYvl2thwRbFb8TrXxnaejWCeDT8kJC50Vkh4eMSsuKBN
MeFRwbuDZgWFBQSGBP23N/HBm2O2fX6xOTg6Jio4MDZG3QfDeIwD9kn8iDnU
IqaU78ov57IeMF2k5VxO6kHqFKtxdna37X6w/V1gn7ecPOn0bXu7OblZdka3
Bbm5OfY3lydN+kXddC3P1u732Xk5N35fTkY57a9grxbwHKsdZQV2QN/tG5EB
vC8BjXOsKkl6bXr/jM4bETLT10g4SL/G27b667b7gNrqtSHl1Wv30e3Nkkjp
u6xwq9qZGknolG/EiRKHHJLTueQFR0vIO8BATetbTOu5pm0B6O8b6cTiANOq
M6ZlhCKQnoAfQ26cXj7/XLLTCTAmyoLM5PlgWOklyAcFgHz19CDeUrn6Y6mE
JzS0kk7gkKxkLlaZ5GnkCYZuYw5ihkvZR0V/GC4aA53eQ4RZAnCW7mXpy7VT
wpCegAPC/Fbuio4JCvXzWxoQ4bfYz8/Vz88nYNOOoM2iqKiAXX4rggJC7Gz9
bP7HjYL/3vh/ZZZ53MlxAVE2dnxbDJuR8matjQc7Jykj4/5akY9X6yXu9POR
a1jjqx1myL4JPjGOet+2Utty04StWmdsDmUn1SKwCK/WEMYkbA67opB2jm9g
wwwRas9h38MrbKJykZ9FmlbuxqSYpBd7udngFSpUyO+LpAc5hhgjiTQtXcTZ
vKKWTaFgIj5fS5CV5KXtFOiPcRm08z403/QlAe5MJkYtKjQsF44VTHsnk5Ik
XE5GsXGIaMo+Mxs+xqJSVgqTrcvOZfFoNCzJ3187uFDruGFcaSEmZDG9RDp3
uN8VH+ZwYDLptEtFRjFtVRISJ32aqcccZhCXZqJFdhFJ0qebetgzpcYSkhYp
SjShMItkQ6Xy67mXSJyDHI4+I0n0vbbUtFxAdeEH+ngBbhOmc1ZRy6ylfB82
g0Re303jhwi5JJIK+E9t8G3ZTAobiDSAee9rP7QmPdFJ7qEFC0WS9Vw6QDNJ
JKY9IwajEWj7/OGSBV3usb2ifbgyzsCZe8W2nhG9931oMYW0EpqbhE6tMkk2
fiY1YZqwRG5Yvs0JqVlWURaJXU8i9d6X0OJxMCG70Ja+L4lxdn5uOu0ctUxr
D1ZCoxqwCiOSq+j+fIKxf86inuM/KnQoEt47MqeHb29hE87PcsHK9a0pc+nm
pnub71SE3tHx7i6a3U2y94keKGqhV96qv3+rOcV8MMk8AoCsTDOby0tCyyne
5SWzJWQAkhVbaFcuq7+/rLl02WCSFQKaZnqu+d390Hc073f3Z6cjoIziAG1v
p/rFj5pTpg0mTUNA000vNtdXhuYwvTOLZ2cioIvFZ7S9O+sXdzanTB9Mmo6A
Zphean72JPQS0zureHYWArpV3KLtPb/h/sPmlBmDSTMQkLVpYLOsKFRG8pYV
zZYhxMuKLcZ6m9QvNml2MxlMskZAM01zmi8VhV4ieV8qmn2JZK8hfBydM+mE
wCfyxBfF0yjjHszEKwfd8IofXin1RBX3O3jlDl55cHtEJdUcr7iNucBcZboM
tVyS0MdciClpfucy04fFNRogg+hchViJDtlBUkQo8qph1okS6xIDrWpTQ4al
TsK2oW56NrXSli5Jkp2ztpTS8HZWwrZhYYW+WwO/W+Twjgw6SnLU6GgGBeko
qLdokb7IqVzgtVoYD7NlUmC2XSwk+UxdteTHfUF9z3/kH1BkS9dKYuwz/2vJ
0WJr0Z86lAu6bUgzq3Q1minXaOZ1N3+9bOaL8bhmrh84cy1lRrm+f4nOf1h6
20CNYvHBZPvNv/KUFVkXPddx5RQmz0MEl1PUBLss0BA8h90NBBvRoBeWJONY
rfc6V5JFChj7uxCr4Pv2desaMjzcdV9J9D4JXSTQ30WIVU8ax7CcmCAhLc1x
XfCGfM0FENUDRG+5oLGLF2rGXsDOKLUu4RwV8StEUi6ZNnDmPdW0yoCbTQ1A
hupfGGoko8KYK3AhLNH0C2RfKrVONs4UFeLs3iwx/8r3IOVPF0m5/tEi4SJu
urRtQ4Q+zNiMz+jyhabnVnZhqbXrhEvEjFEw4/F9E8v1M0X2zPh0fZ4IeFqo
r+HpLJKap9cW+RhkMyO4dIJ5E5pTb4zv5Htm0Rr4PrOk+oZUBk1AIpXQSlks
7MU9aUwJq4zqiXj6jKrmafFShIWFFLCIZQ+UWlNMckRq77QB904iE+YqKtmE
uyOiyBvURQrqEujvAe9Xb5Tt8y0X3CoyofJo96hJ/pkt+wSe3bRSXfB+ywC0
RRfHd6EG3w+L/MdnM6N9CHw9TJtT7xtd5nty6Q38O8XL2qigklJfjUqma6lV
cvKEoq/KBbWkiVScszHA2W0HqX+6AmefIc5WSXtpRie0gKYBXFXTx2ucVDA1
wuZROn0PC9e7elLCtvNHxmZTd1bpUGadu+eLmJGlpWZG0jqNSC6xn92zpkBw
x0Vylj5w5vJiz3L9dySpSOLPMmKBNGQiIbbKhP5Ux5VltAPJSGikkVEconk/
8MTnyeIqo2zm3ip6kUxkA2zelh3gwwZdEiNd2it5V6S1GyRE1WcVqsRwiz3h
jM2jZnoiS+X340weWheZV30BfngvgLp54twZ0HDnnokouFxwkDyd4M4Ziflf
YTkl1lIrHzPokonkb4Z3kdHUXbQmiraXC44WTyO6nIMu4SlaFW7A0MxiXJem
NafSJr7ne0ZoN/ALS7b1aiHZBGtkk6kZKmhi0Y5ywbni6VTKOGkfnTkNOQz2
BGr6zjP1ARTybN9kbL+ODJvNaE75UxJASZpKJnPCOF9RmIvxiJz5VZrEboux
b9G4pGBdbSp7daHe0gW9Acf8x+UFlKU+d9DRJreRa6FjIIPhf0uUrsPn4OE6
Wds5qT4jaOc+X8Z5RyuW21ekhTn9sm/Wkr/krmCwmNsp5P06jJUMhuShpXBW
lg7HjltpyZW00Ej2hf5EUJ+uYCRsOiYav80i43WmkCXVGqz6O3nSljGB0o0W
wllVqEugBeoi/dxliHF/07Ez48OILsehyz+bZm8Zs0263kLIH9BhQB9/Cy62
+xssF5vvXyuRfSPB9ptQ32PJRGpyUTjJI20tbX3VPv8fk8mi0vHdrgq9jIzJ
t/YBS1zm70xOwnIzUUcO4hKrUsOl6UcKF2wx3llkhHPpyPpCvUNuXpuOCY3y
AhwO9DD0tMnU5A8SFZsm3CeLNht1JzMXUyeuSlpQ62oftemWBUePnxGEwWoT
59du4Jdh7oG1ZL/MSEb62HoKCCkKZ7FET83ih4uSFBlBVqnR0AVjuVWJWnzb
5pct1j1nsl/oXIvj6qzBtQvHdQzg+tuRwoVbjItFpkns5ECyiF+1rTTTUrhl
TGlApiWrmERKHdsHszEmcSVsiiu8vxjl5ua2+ViAaZkFx8ZqCqRiOu5H15Kj
uM8BsU8ItAZHbECD2G/uZIPjQR6psQQt5aSFthODv1mbFM2thS4uVOjyAu/C
Yau7TPcijzse5E+PZ+xEnHcz63alGLzPmOybGqP3qlL/TgnukZyaU8dPabXx
bNZ1MwB9PwD6HmCAG7QVWe3Eji/ptsxmwhoTPI/QtcNHP9vGJ7Kwcl4IepZV
zpP8EQKhOydb9z98E4jnnZdKviq/L7wndeqImJgtusXmppiQBPVcKkQ9vl4v
4ZdKKQnbwiwnZFP/qdIp2Vha9jXyS1UMjV86pPFLMfq9ZdauC+pdwS+d4Sbp
/RE9darLGzbXqA1B/81G7i+Lp3Z/q09RAwWP0vUUxDS1MM3OFTBNv3AHdOlF
XULxLt2fu5ymbhE8KtQbZsWU+A95HEaYyMZoco7jGkzO6l/6w7pkYYob4SH1
Bs7seygDD0l54Sbxx6YgD9nsJsQa+DFbyFMMwRMFk/FIhBCcopntN2qU4BFX
fxKRsfYCgheLTbKpw+CfQy8tOY5mv/V59hOa2a/o1/9h7brkBDE7WX/gzPWH
xuX6KaUo6WF8MembS9tw18aTmv/4n8wia9KSmJJCy8jfcUxiNJj4T9UkNZep
YmCV/gwCkwxqwrbsfwCTqZBxh9eOOYEwadNgUnxKg0muvuyhNcXzlhugbPpu
yUk8SfuM8kUN4F39Ew+tSzxLVQwDlD88PFyuf8nNnnkVm74bFhDr+dM1EeQX
jcId8iycns0UiAyIqOnZnDplVifoqH4DP8v918ExKJH7TeOZL2qrPfO+WaJL
5YJnpUsJJ8+Xmv+VO1hkLfI6YZWlzbSnbg2kZTMdjhDDlnk1px6bdZvvKTRo
MwLV/w8MSJqAY5KlwSTXM2JGNnNeEdFFtrQ59fmsfhvPCAPqROhyCbpYTMS7
5Gi6/OGZBV0WvDfAMzWGr5XpnYwv7Jn/8ZlxFREsmaEhOE/Tp8WTNSubGWAz
nsDMuzk1bnaz6BKKmvNtIGo6FT0p1cpHMtyBkzyoIfnP2dLcckHmvq8Ikp2l
5hMKCsusi5aV67fRlyG5yrQStg2ugAxgk+gam8uRjUWZUDabhR0vR/mRbOxV
JL+jYzWCztXkR5MNbj2ypqw9ukidH/1B5EdrUX60lrspsihvdH70sOybO+WC
jHtr1fnRmYMCz4jxDfzB4ryjY1FAva0RW+FYNQ2vBEX55YJLi9YRNARLzb96
VPvAWvoV2KNu99lZSIF7NArsM1uT6pRTBwWPmsdHEAqcBYQKvtPNpoaK/IGi
ekRRIJEdfe5SQeXOecQyiia63IEudj3QJeKJDmV326M7iBXdGlYkFWhUeb7B
0XJrysY3i3BVtjQaONPJXFCuX65V5A7ZkQDZfpk7ZEd2eHYkUCBRCwUaUU+h
qLOjI0urBNnMmOVG6uxo0yY8O4pFco6Rlt/Tmk4ZlR1tM5hjM+eRv1G8elUc
ZwfZ0YaYkiq96a4CxJuZFDVvugUaN1NHtZvzKMsokyC0DQgNaTXPpu5+olMS
fsfrISK0jKmx2QoNoVEG78qtXf0GCUKLgdB7FUvK9SX3cQPwg3Bh32bj2W3k
RgNpVqBwQcMpdKColfnF0u452cwzNhNglS0S8F1hJZ1SdotMgsnmWgiowp9h
6jdo6l9wnAvnqHH+vpG6ac4j4YTzBM4yWsK2XTyDbOrPT3RcvboPViCcBzU4
u9RqcE40yKywLgk+txjHecWEgTMfK5aW62fQKjwk/kI7JJxnHkKsTRvS9BfI
zMfiKG/VoPy9d7NdNvO3ognEAm97c+riefNFnpAcnrsP2XYmbe4Eo4s6MLM3
zq06zcy/GZRXWLvuuEPM/DvM/Mth33L9LNpHmLkbn1myRIjZ6oHHqoeZl+vh
M0dpZi7yTrfPZmZZmBAOZkdzat+8rcDfCZMAWVIDdBFpE/m1pssT7yrokhNA
dPEIaU61c9ph48k1aeBnpDQU6miRkqSNQpWd6URLuQKTARHt956p067Z71lp
t3lOPatMh1MuuFMSShjcdXAaXaX3rKWhMSXd4/estEdKlaBRKmyeRkBy6oU5
jyQmeSAgjCt7t7/4fWUDoV8gq7srjbKpeaJrIKWDusjHEOaq6f3nAPXSnEeF
JnfZ3Tji4eDWnfeAWzeJmUqKKnoLGB+ZitP6q4bWk8swp2xmAXsiIZidzalb
nK+67NEHg2lBBtMsHbivdQlQTTmNO5Vbupo1grOos1wgo+8iaGyFWPCp6qE1
aRf4vAlXkuchGq9paOQ7aQxnkJo355HPxHZVVKQnbOveBAlEu+gXfVhGIsIu
6KMuEZ+7DFHvAlsm/k10OQddeqtnZFP/Blt7XO/9DuntG12Nrck12vPJ4OBj
65LdOe6ErU0cOPNK70W5fg79T3fJ+mYnUJ56d7zLwOd9D4MTj62T9xQSXf6B
Lh/0ynwSwCuT9oJXLt7D7YwsGgBWFpnjrHylYeUhn0LnbOZ7G3NC0/YC910m
z/Hkm8fMAO5/RNyfgXd5+5n7PtjCbGZvANHFQwzcd5ELPP3Nf3XS7CFmnu4Z
syL+897jwrcG57o024hFCc+nejR83n4cylqWnrdSs205uPw0N/aCZgfyY7Wz
6G9vzc5lb7s46dlJzSbkO71BKiRykJ10lT7+hOeLehpPPYRzKAU4ZGvYCxxK
eOfOV21StT0Qas1gDJzZuhD8yEBz2iDq+k7T1UWp6epkmF5lTUnsdYd452PB
oP2oe/yxdVFCTAlfMBS9EDQmwrV7IS51ePmnnpaV7aNmcyXyy6sAwdeuf8/x
rDKPpkkFqu56J8utixLf/ZFCIWHdDAx7vSRilTCmQxyWSXXXcrvZKJ9qxmJX
SAx3P+65NVxj38WbOpG7lP6Ee6+h3alJOfeKosyYk9DK+sH/NNlby21XWo3z
ip68NN8c4QoSu7IuJy2jAQph8lvLFLK52pPGsV7F+ilkRXRUiklUlE1eVC2y
9Tgiv+lds/CwQraUeNGokI0ZC6WW+WLopuswjvU29rHCo0HuHJhJeSZksItY
Fb3ubha2KxMUsny6D8XCjepqW23O3lflFSvnfWmEMNS6UpfXoFR08p7PTl8l
PNox1MU75oxK7bFdPNpCoU4Ki8184pXoZugypzMn7USc0M2WsqI+/6580K81
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/35" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/36" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/37" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/38" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/39" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRQ0QWUUwABQsirsW6sCgqyr66BRJA
ia0KttZi64LWqu3rggUXUGRVqQKiWMGyC4oWIVgQ0AD5n7k3idDv/Z7v9z3P
7/n3eeXOzD0zc/ZzZjJzX4vA8BWBJAzD2oIxzMW1sHGuIYZpQT2QyZ/0xdq7
W8SKHL+xyyVeCMaCiWGnOBg2lmyBkaE+Hv7RpbwjojLqEhpL4PgtKYU5WYth
PJH6TaDEdBHZ5duxLm0sgaEDg+OpLYiSeUSUWvDc9FMPskTfkjeXMa4Zcl0X
y7h/kARRKZzpVtPTbfZmrT/CfVAG4x7gYthmeAosy8ZwAxdjFjMmZZhaTIY/
xlOZ+86l+0dtXs+dtDUpc/x+7DVDKCVHU/357hIWaXbw11YB//zy1n7Z1xaW
blVnGYUryCwqLVmUyeJSzF4zyF9wWiIytf4RfVKa8UkzSMx3hmysRzmNa1Wa
uYgtGZpBsp43XJeozdC22bac6q/8AvvmsDLWUjdVKJmw2MHhjTQsfTiR7lX4
BUZxWkQtHPwX5IcC/cKzrQccMDLpaw6Je+aAsf4B6uoQfuYjhoQtoD/lBPC5
h6cJ9rlwRRNdTWkkknSbUCuaCcMLbS2/ZdN4guOBPoyD2ikC1y18y3Ebnxou
L26L1u3hjmXvWt7mVmA7GQZ4bkpKOWq76Ch/qPSDW0GzrcETrxXaZKslK93G
fLds/bJeTyisnE6bRW5ZxP/6+Jlx3z0pZ14ukmxfXMZ8s+VrtxCW0KcSGmRx
i2VmF7cmUYa8jkxjkcdo61I5FnMmnTUWSMnGq7lCD30vkukZPhebO0Y028zK
5+gaW63lIP8AkIuJrFkJ/9G5TDuWCzbJRGaBHdPRfY/aKP7aEnMsEfPAtHqL
aD8PoDYSXwtBLsZ8TTJa8Y6ZOthKbBBLlzjXSrikdGyskG6S7obp+5N+00lx
wfZmFfnSUJlmgI31CeVPIPlKtie3GBaSV5kcfICNz/yrWYjGWYidxwZIGL3Q
HNOvghGs0AgXdfYbwoCh3ClkXzuWIaCXPp0Yef9kbExWSPoV1NUcR0BCadbD
xjAomXrYvFpuwL/H9CEFYEDFVAVOxTZKoSG2EJuEA/tvI2VhMVnSF8PwKhF7
iXXjQ71J1mH243yoohF8EJqHcPOw5mSdlKnYI9pLYqh0O5Y/C9uaJWUkkxzg
FYdRaBzCvZ+JVfpTRDRaBM0kQ8DAVmCVXEY6VydTZ58xVSQJsaoUMsibKVIa
NYKGLQFZmIAsDFKEGVxqSYokg2VokFKYITT1OOvF+jrIZTn/UI8XK3NbMXdm
dQr3ON/n+7kWt6ZQa1Msqo+OKbILaJ4X7tK9lOXMz2BJiqhS7eQxVI6siJNe
lEJi3pcwp1CD+BaZUxhbImgGZNsMlgycgMHEvYUUpwEtp8xkO0lq5DZKnAc9
/iJ9b62/9qsqWmcmHf52c+nxGH03nx6VSY/m0kMxvagIeiReRo0EAJT96TGZ
9DghPTRdF/6iahXttYQekUmP5NJ3VtG6JPTdLHoc0RF/m82iR0noX+gx2Pou
+w8exUi2LhknuoquO+692RIct1b364r1NkbMzQmPROU5tw/TWyLtWA8X7zhQ
3WvI+OXS7UeZGYe0vi3a/PvRjspGC9IDi5Qi4B4L/lHpWa7zzrl10zBMAlWu
g8Ri9WJraIcKGTwRByskMX/N2yqSTIIWBvwr5GK6/h73aPJurtASIyBBnnT+
ub8OrM1gcdmoJ/zjMyQUzorc1JUkEh9T/2damP71wotjGZoGrBnbv4qvHyzE
sSHjTTCU9ndfU8iZKhwxDLD6/uTmiSyMpu6GsNq4iEIBZKCGfDSGpvvlm0U0
IcYdOdSnHxz5FAzTR2AsFdgfOikwkpWKRhxM/6SHDsZdq+qJ0zjXqdoUZkJ0
S1TIP9x7dh5GloxE7M8ht3iMKqRg+LQYFoG5Tjfc/Q/OK0yoodF+VSdMTyXY
TOBfa/U3heijwf/Dk7MkklDFaXxG7e/PLsTIhaQRM66etfwMRi2kqHkBM/4W
Z0lZAZiT1W0IzCvgPCBGHQmW87sXiSHRsL8Zm2THMHxdimFlZITDGBR3JmZw
jNle6QfHTHG/T3WdYEievBjbLtG+kUGZdxBLD0TjXQP7OwnPOQyJaWmL6RZD
0gKZq0NKyUEXCX3XTnp0RiTzNabXydLtlejOYbpMLC4yqzxjuoWvhYMlm5RT
FpS5LjhIWVC+82BMBH0Pg77LIzUigr47ghK3MzWCm2pcztZ9l67bwtcL4+u1
dut2++jOYZWaNVqY1lqYFQdM3MI/4HQn2anK1TGHMv9O8vwUilN5t2GcP33P
Nrr9ttQo+CtJjUhPjfCnx1nR4wa0YNh4SaofIzWSkxqVkborQ2rd1a3b1az7
oVD3HZ8SWHbGtO2MaTn+tz7A9KGFaanU7GEA7Xm6q2OZq2MG/vdWicNRVwcZ
xeloyWyYdDDJ6RnFKauE+SA4NcI3NSoiOWYbfad/agwnNSYz1bhypV4XpveP
j25bum6rUK+Fq/sOqOBamdUXTSwWTXxqYVovnVjfbNrWYvY3aeIWznIHMMUT
yU7lPpNUhPinxu+k78xY7tWbroc4MHH7xIcBpm8szBqLzBJIExHCFmbdAbRV
+5IdykucslwXAEMGi+e3uTrJoFpy8J42UJoaD/gw6Lut6FEZ0vWtLN13hbqv
fHR7+Lyip6KJbS1GtS1mjYCAh7FTVvKCnGSTlBKHg66O5SXzbxU5lpUAjfPL
PXIiGXTAKhIY6JtqXHdf952/Xmcz+DO9V3y9V1y9Ph/dMJZuK18Xqj3NtLfN
um0+ugN83st3AabFUrPaFqN3FmavLcxKLcxAgm8szLdwTzrdcV1wi+J4NNmx
3PcOSB+I3Q14eqTGRwD3UnVfsXS7cWzlfN2edN1eH2Tq2C4wGU94Rk304LrK
mMZjogQeXJ704JEjT9wyWVab59sIXA6nW/y8jRtGWmni/9UNUOwvw0O2RAWE
cl3DQyOCQ4KiuIJZNnNm2czic7eER3G9gsNid3J3OthxrexsZwYGx0BK9EVs
WBDXxs6aK+ALBNNWbYvl2thwRbFb8TrXxnaejWCeDT8kJC50Vkh4eMSsuKBN
MeFRwbuDZgWFBQSGBP23N/HBm2O2fX6xOTg6Jio4MDZG3QfDeIwD9kn8iDnU
IqaU78ov57IeMF2k5VxO6kHqFKtxdna37X6w/V1gn7ecPOn0bXu7OblZdka3
Bbm5OfY3lydN+kXddC3P1u732Xk5N35fTkY57a9grxbwHKsdZQV2QN/tG5EB
vC8BjXOsKkl6bXr/jM4bETLT10g4SL/G27b667b7gNrqtSHl1Wv30e3Nkkjp
u6xwq9qZGknolG/EiRKHHJLTueQFR0vIO8BATetbTOu5pm0B6O8b6cTiANOq
M6ZlhCKQnoAfQ26cXj7/XLLTCTAmyoLM5PlgWOklyAcFgHz19CDeUrn6Y6mE
JzS0kk7gkKxkLlaZ5GnkCYZuYw5ihkvZR0V/GC4aA53eQ4RZAnCW7mXpy7VT
wpCegAPC/Fbuio4JCvXzWxoQ4bfYz8/Vz88nYNOOoM2iqKiAXX4rggJC7Gz9
bP7HjYL/3vh/ZZZ53MlxAVE2dnxbDJuR8matjQc7Jykj4/5akY9X6yXu9POR
a1jjqx1myL4JPjGOet+2Utty04StWmdsDmUn1SKwCK/WEMYkbA67opB2jm9g
wwwRas9h38MrbKJykZ9FmlbuxqSYpBd7udngFSpUyO+LpAc5hhgjiTQtXcTZ
vKKWTaFgIj5fS5CV5KXtFOiPcRm08z403/QlAe5MJkYtKjQsF44VTHsnk5Ik
XE5GsXGIaMo+Mxs+xqJSVgqTrcvOZfFoNCzJ3187uFDruGFcaSEmZDG9RDp3
uN8VH+ZwYDLptEtFRjFtVRISJ32aqcccZhCXZqJFdhFJ0qebetgzpcYSkhYp
SjShMItkQ6Xy67mXSJyDHI4+I0n0vbbUtFxAdeEH+ngBbhOmc1ZRy6ylfB82
g0Re303jhwi5JJIK+E9t8G3ZTAobiDSAee9rP7QmPdFJ7qEFC0WS9Vw6QDNJ
JKY9IwajEWj7/OGSBV3usb2ifbgyzsCZe8W2nhG9931oMYW0EpqbhE6tMkk2
fiY1YZqwRG5Yvs0JqVlWURaJXU8i9d6X0OJxMCG70Ja+L4lxdn5uOu0ctUxr
D1ZCoxqwCiOSq+j+fIKxf86inuM/KnQoEt47MqeHb29hE87PcsHK9a0pc+nm
pnub71SE3tHx7i6a3U2y94keKGqhV96qv3+rOcV8MMk8AoCsTDOby0tCyyne
5SWzJWQAkhVbaFcuq7+/rLl02WCSFQKaZnqu+d390Hc073f3Z6cjoIziAG1v
p/rFj5pTpg0mTUNA000vNtdXhuYwvTOLZ2cioIvFZ7S9O+sXdzanTB9Mmo6A
Zphean72JPQS0zureHYWArpV3KLtPb/h/sPmlBmDSTMQkLVpYLOsKFRG8pYV
zZYhxMuKLcZ6m9QvNml2MxlMskZAM01zmi8VhV4ieV8qmn2JZK8hfBydM+mE
wCfyxBfF0yjjHszEKwfd8IofXin1RBX3O3jlDl55cHtEJdUcr7iNucBcZboM
tVyS0MdciClpfucy04fFNRogg+hchViJDtlBUkQo8qph1okS6xIDrWpTQ4al
TsK2oW56NrXSli5Jkp2ztpTS8HZWwrZhYYW+WwO/W+Twjgw6SnLU6GgGBeko
qLdokb7IqVzgtVoYD7NlUmC2XSwk+UxdteTHfUF9z3/kH1BkS9dKYuwz/2vJ
0WJr0Z86lAu6bUgzq3Q1minXaOZ1N3+9bOaL8bhmrh84cy1lRrm+f4nOf1h6
20CNYvHBZPvNv/KUFVkXPddx5RQmz0MEl1PUBLss0BA8h90NBBvRoBeWJONY
rfc6V5JFChj7uxCr4Pv2desaMjzcdV9J9D4JXSTQ30WIVU8ax7CcmCAhLc1x
XfCGfM0FENUDRG+5oLGLF2rGXsDOKLUu4RwV8StEUi6ZNnDmPdW0yoCbTQ1A
hupfGGoko8KYK3AhLNH0C2RfKrVONs4UFeLs3iwx/8r3IOVPF0m5/tEi4SJu
urRtQ4Q+zNiMz+jyhabnVnZhqbXrhEvEjFEw4/F9E8v1M0X2zPh0fZ4IeFqo
r+HpLJKap9cW+RhkMyO4dIJ5E5pTb4zv5Htm0Rr4PrOk+oZUBk1AIpXQSlks
7MU9aUwJq4zqiXj6jKrmafFShIWFFLCIZQ+UWlNMckRq77QB904iE+YqKtmE
uyOiyBvURQrqEujvAe9Xb5Tt8y0X3CoyofJo96hJ/pkt+wSe3bRSXfB+ywC0
RRfHd6EG3w+L/MdnM6N9CHw9TJtT7xtd5nty6Q38O8XL2qigklJfjUqma6lV
cvKEoq/KBbWkiVScszHA2W0HqX+6AmefIc5WSXtpRie0gKYBXFXTx2ucVDA1
wuZROn0PC9e7elLCtvNHxmZTd1bpUGadu+eLmJGlpWZG0jqNSC6xn92zpkBw
x0Vylj5w5vJiz3L9dySpSOLPMmKBNGQiIbbKhP5Ux5VltAPJSGikkVEconk/
8MTnyeIqo2zm3ip6kUxkA2zelh3gwwZdEiNd2it5V6S1GyRE1WcVqsRwiz3h
jM2jZnoiS+X340weWheZV30BfngvgLp54twZ0HDnnokouFxwkDyd4M4Ziflf
YTkl1lIrHzPokonkb4Z3kdHUXbQmiraXC44WTyO6nIMu4SlaFW7A0MxiXJem
NafSJr7ne0ZoN/ALS7b1aiHZBGtkk6kZKmhi0Y5ywbni6VTKOGkfnTkNOQz2
BGr6zjP1ARTybN9kbL+ODJvNaE75UxJASZpKJnPCOF9RmIvxiJz5VZrEboux
b9G4pGBdbSp7daHe0gW9Acf8x+UFlKU+d9DRJreRa6FjIIPhf0uUrsPn4OE6
Wds5qT4jaOc+X8Z5RyuW21ekhTn9sm/Wkr/krmCwmNsp5P06jJUMhuShpXBW
lg7HjltpyZW00Ej2hf5EUJ+uYCRsOiYav80i43WmkCXVGqz6O3nSljGB0o0W
wllVqEugBeoi/dxliHF/07Ez48OILsehyz+bZm8Zs0263kLIH9BhQB9/Cy62
+xssF5vvXyuRfSPB9ptQ32PJRGpyUTjJI20tbX3VPv8fk8mi0vHdrgq9jIzJ
t/YBS1zm70xOwnIzUUcO4hKrUsOl6UcKF2wx3llkhHPpyPpCvUNuXpuOCY3y
AhwO9DD0tMnU5A8SFZsm3CeLNht1JzMXUyeuSlpQ62oftemWBUePnxGEwWoT
59du4Jdh7oG1ZL/MSEb62HoKCCkKZ7FET83ih4uSFBlBVqnR0AVjuVWJWnzb
5pct1j1nsl/oXIvj6qzBtQvHdQzg+tuRwoVbjItFpkns5ECyiF+1rTTTUrhl
TGlApiWrmERKHdsHszEmcSVsiiu8vxjl5ua2+ViAaZkFx8ZqCqRiOu5H15Kj
uM8BsU8ItAZHbECD2G/uZIPjQR6psQQt5aSFthODv1mbFM2thS4uVOjyAu/C
Yau7TPcijzse5E+PZ+xEnHcz63alGLzPmOybGqP3qlL/TgnukZyaU8dPabXx
bNZ1MwB9PwD6HmCAG7QVWe3Eji/ptsxmwhoTPI/QtcNHP9vGJ7Kwcl4IepZV
zpP8EQKhOydb9z98E4jnnZdKviq/L7wndeqImJgtusXmppiQBPVcKkQ9vl4v
4ZdKKQnbwiwnZFP/qdIp2Vha9jXyS1UMjV86pPFLMfq9ZdauC+pdwS+d4Sbp
/RE9darLGzbXqA1B/81G7i+Lp3Z/q09RAwWP0vUUxDS1MM3OFTBNv3AHdOlF
XULxLt2fu5ymbhE8KtQbZsWU+A95HEaYyMZoco7jGkzO6l/6w7pkYYob4SH1
Bs7seygDD0l54Sbxx6YgD9nsJsQa+DFbyFMMwRMFk/FIhBCcopntN2qU4BFX
fxKRsfYCgheLTbKpw+CfQy8tOY5mv/V59hOa2a/o1/9h7brkBDE7WX/gzPWH
xuX6KaUo6WF8MembS9tw18aTmv/4n8wia9KSmJJCy8jfcUxiNJj4T9UkNZep
YmCV/gwCkwxqwrbsfwCTqZBxh9eOOYEwadNgUnxKg0muvuyhNcXzlhugbPpu
yUk8SfuM8kUN4F39Ew+tSzxLVQwDlD88PFyuf8nNnnkVm74bFhDr+dM1EeQX
jcId8iycns0UiAyIqOnZnDplVifoqH4DP8v918ExKJH7TeOZL2qrPfO+WaJL
5YJnpUsJJ8+Xmv+VO1hkLfI6YZWlzbSnbg2kZTMdjhDDlnk1px6bdZvvKTRo
MwLV/w8MSJqAY5KlwSTXM2JGNnNeEdFFtrQ59fmsfhvPCAPqROhyCbpYTMS7
5Gi6/OGZBV0WvDfAMzWGr5XpnYwv7Jn/8ZlxFREsmaEhOE/Tp8WTNSubGWAz
nsDMuzk1bnaz6BKKmvNtIGo6FT0p1cpHMtyBkzyoIfnP2dLcckHmvq8Ikp2l
5hMKCsusi5aV67fRlyG5yrQStg2ugAxgk+gam8uRjUWZUDabhR0vR/mRbOxV
JL+jYzWCztXkR5MNbj2ypqw9ukidH/1B5EdrUX60lrspsihvdH70sOybO+WC
jHtr1fnRmYMCz4jxDfzB4ryjY1FAva0RW+FYNQ2vBEX55YJLi9YRNARLzb96
VPvAWvoV2KNu99lZSIF7NArsM1uT6pRTBwWPmsdHEAqcBYQKvtPNpoaK/IGi
ekRRIJEdfe5SQeXOecQyiia63IEudj3QJeKJDmV326M7iBXdGlYkFWhUeb7B
0XJrysY3i3BVtjQaONPJXFCuX65V5A7ZkQDZfpk7ZEd2eHYkUCBRCwUaUU+h
qLOjI0urBNnMmOVG6uxo0yY8O4pFco6Rlt/Tmk4ZlR1tM5hjM+eRv1G8elUc
ZwfZ0YaYkiq96a4CxJuZFDVvugUaN1NHtZvzKMsokyC0DQgNaTXPpu5+olMS
fsfrISK0jKmx2QoNoVEG78qtXf0GCUKLgdB7FUvK9SX3cQPwg3Bh32bj2W3k
RgNpVqBwQcMpdKColfnF0u452cwzNhNglS0S8F1hJZ1SdotMgsnmWgiowp9h
6jdo6l9wnAvnqHH+vpG6ac4j4YTzBM4yWsK2XTyDbOrPT3RcvboPViCcBzU4
u9RqcE40yKywLgk+txjHecWEgTMfK5aW62fQKjwk/kI7JJxnHkKsTRvS9BfI
zMfiKG/VoPy9d7NdNvO3ognEAm97c+riefNFnpAcnrsP2XYmbe4Eo4s6MLM3
zq06zcy/GZRXWLvuuEPM/DvM/Mth33L9LNpHmLkbn1myRIjZ6oHHqoeZl+vh
M0dpZi7yTrfPZmZZmBAOZkdzat+8rcDfCZMAWVIDdBFpE/m1pssT7yrokhNA
dPEIaU61c9ph48k1aeBnpDQU6miRkqSNQpWd6URLuQKTARHt956p067Z71lp
t3lOPatMh1MuuFMSShjcdXAaXaX3rKWhMSXd4/estEdKlaBRKmyeRkBy6oU5
jyQmeSAgjCt7t7/4fWUDoV8gq7srjbKpeaJrIKWDusjHEOaq6f3nAPXSnEeF
JnfZ3Tji4eDWnfeAWzeJmUqKKnoLGB+ZitP6q4bWk8swp2xmAXsiIZidzalb
nK+67NEHg2lBBtMsHbivdQlQTTmNO5Vbupo1grOos1wgo+8iaGyFWPCp6qE1
aRf4vAlXkuchGq9paOQ7aQxnkJo355HPxHZVVKQnbOveBAlEu+gXfVhGIsIu
6KMuEZ+7DFHvAlsm/k10OQddeqtnZFP/Blt7XO/9DuntG12Nrck12vPJ4OBj
65LdOe6ErU0cOPNK70W5fg79T3fJ+mYnUJ56d7zLwOd9D4MTj62T9xQSXf6B
Lh/0ynwSwCuT9oJXLt7D7YwsGgBWFpnjrHylYeUhn0LnbOZ7G3NC0/YC910m
z/Hkm8fMAO5/RNyfgXd5+5n7PtjCbGZvANHFQwzcd5ELPP3Nf3XS7CFmnu4Z
syL+897jwrcG57o024hFCc+nejR83n4cylqWnrdSs205uPw0N/aCZgfyY7Wz
6G9vzc5lb7s46dlJzSbkO71BKiRykJ10lT7+hOeLehpPPYRzKAU4ZGvYCxxK
eOfOV21StT0Qas1gDJzZuhD8yEBz2iDq+k7T1UWp6epkmF5lTUnsdYd452PB
oP2oe/yxdVFCTAlfMBS9EDQmwrV7IS51ePmnnpaV7aNmcyXyy6sAwdeuf8/x
rDKPpkkFqu56J8utixLf/ZFCIWHdDAx7vSRilTCmQxyWSXXXcrvZKJ9qxmJX
SAx3P+65NVxj38WbOpG7lP6Ee6+h3alJOfeKosyYk9DK+sH/NNlby21XWo3z
ip68NN8c4QoSu7IuJy2jAQph8lvLFLK52pPGsV7F+ilkRXRUiklUlE1eVC2y
9Tgiv+lds/CwQraUeNGokI0ZC6WW+WLopuswjvU29rHCo0HuHJhJeSZksItY
Fb3ubha2KxMUsny6D8XCjepqW23O3lflFSvnfWmEMNS6UpfXoFR08p7PTl8l
PNox1MU75oxK7bFdPNpCoU4Ki8184pXoZugypzMn7USc0M2WsqI+/6580K81
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/40" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/41" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/42" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/43" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/24", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/24", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/24", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/35", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/32", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/37", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/40", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/43", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 674440, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 15, 47, 24.783681`8.146740793098761}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "very good", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable"}, "LogProbabilities" -> CompressedData["
1:eJy1WVlQVEcUnQUQ2RysEUYZcYBxj0aDlDuSlFFRUZa4Y9RExAU1EBAVF5SI
StRBRcQFN0RFREHQRCR2gygREVzKAAZNaXALi4IRcDCQ9zE9qXop6ljV5det
7q7Xr/v2ueeevu30zXLfAJlEIpkplUhMBHvLa+WskWZ6wmziw7l0tVUleVNz
OdtRbkpDW/qFB5ioaXSe2cLf9gST6KkBIQEmKmN/RW0PTYupio7NHH5yQ1M4
Ye2++X92azFV0+4Jd5QvLFW0rnV/5KDbm8lrx30OLyyVxv5pA3LnuSlUNO6o
dcYCt1ji+XbDfDeFkjJbf0O2LVPiTPeVv14TFDyV6DMu2AVK1bSxV2NMpkRD
j1dbj9i4yZIGdVw23faTCuLjssrfxLKRJOgc3TZuklO2D/H+WNvu0etrPhZq
ejpHXRSX9APRz2m97mOhpFfCL1z1sVDB/b/q0im6W3p7mjHpmFeT9CYZRUti
uqVLjf1ofuR/5D80jvyn/a483u+NnEa716lOPmsk9tfy/Q/u/4Ow/iUTvEOP
/KKgn3X62aZDVgHZGV9Q5REhpS23ZDUeEe2h/3PL6ytKHFRU1WDV/VHJAaK7
OFtoK6g2a/HDEgclPB+/K1+6xLdT0d3BrzKOTl9nbDM7W7cmYkySFbVz3fZ0
25h3ZNQ/j+523v6EsDbyD/I/w6EYnwy3yL+773edWCLYi0rr7OiXM0iHhRYJ
h4Rx1h+devarrKVviNh+f/as9sFFKXU30ZVlm6tp3pLOsvNhG4h1QWx5trnS
2N/JsE9m3Q379zf4BeGXd3/rQ+7NWNVXQfP7H/ROy0kmrD3MNmXWqr44ftH6
efGP8GWr7vq2WK6mVqVP/FPDlxHlWOv6YrmKrh9XGPFcquGOT3S+M0fmN++w
V9EipyBTqW4v8Quzad1hrzD2o/n3NPr1PyisU0Fbi5vyFhGn+bmzh8j/60fx
ieY/87VLVLitJY0tjsm8/GMZGe+Z+KzWuYGw/kPB+0sDBb4PmBTlHHw4jLB2
n9UPajNlGogvExrvPKLSnJ7aMjwqanMOYW3X2qVWjiEKyB8MR2J8MdydWN5c
U+BfQyrN/Z9/e7aFsHZZ5bjWgdPaGc9ZfP4MF2h/KL558YnmR/hE+MgKqLqr
eNZMmJXXuiY6FT03tpF/0Pmh/ILWn3ZA8mlhmi1tzJOMTqp4QJrkib/2+qmB
mAXmz42bhfF7fULc7u0CDqo6p3p6nfchZS+O93AQ/DfMN2fXdomW7i/VpFdc
klH7gdHhT4vvE9ZmlldfIP+/10xa4iZT0+KxToOmp84jrH1uU/nFLsI4wj/i
V179o59TfyhU/pKoknr2eehhZmwnhEhcH3rYQP8gfmU4YLhgOGH9KL+j+Eb4
QvGF/Ivwh/IjOl+xP8Txg+ITxXdye4dmraAjHDbrejd6RpLLNhf0WkFfLJJl
rOtows9vaBzNj9Z/I2VU7yIhXqydmxYPn7fA2GZWVrdygEeX18SuwdNOYy35
X5vhmOFajHek78sNODtpwN1JER7R923ti1ne/IPwj+IH6Rd0vuj8ED8h/epr
4JtkAw8tM/AQ4x/Go2J+ZZYXv2K/if3H4lgc3yzuUfwifubVr7z+H+g7fbiV
RkmnHLjk2NXsCAkp/3ywlUZh7Ef5H/kX7e9EO+XYFVItdTk8uOfa+YGkl5l3
TLVMRW2sLIV+fL8dXes6ITtTSb1mlyZ6hl8nGWkRe0IDpXQ9nRwfGtge3n9Z
Pmf5neV1ZtH9DfE/8j86X1788MZ34721MVtCbKnrua6Pt/QqJf4LtYOdC9+S
2w4j1LZPLYz6gcWrWEewPCTOTyxvof0j/uK9H/HmR3Q/QvtD+EL40ecMyZk4
VGa07zcsyA8ovEOGeF+9MHGoBcQPyr8o/6FxFqdt6UR0P0X366R+wV66OBWd
9k9u1cudeWTrgLtJjr2l9N7kL7x1cQru+EH8fvzvxIK33VqIs32/y1Wjqo12
sf3WV/oOHbjvd0ifiO874nsQ0ge89VPkH7R/xM/oe7ZO8frZvqbWKfZF6cxo
SsI9Hxv3vwizrB/Nz5vf0fny1jfROOJHlF9RfY/FOYt7xgMfWj9H9zOUnz42
f6P1I/yi+kfa+LxZWcNU9N26Au9+M9NIZOrUKwvDzGlkTvnMrGFKyvJcW3kQ
4RPVJz5UH7R1v0Hfm9bcLV17TEG33p5xJ3tyPikr3HimebTU2M+7foRPhH/e
+j/iR6RPP3Z9EcUP+n9Q+nu/FImWphctWZnSZwrZpz91yleYX3bjkNCP988b
/4g//aJaU5LH1ROxPd3p8e++Wsw/LE7F8cviGukb5D+Uf1F8o/Wj+dE40o+8
709MB7kYdBGzyQbdxPu+hvzzsesDqL6H9AnKH8j/6P6A9A+qT6H4ZHzN+Jvx
NuN13voTwheqL/Pmb4RPlJ8Q/yJ9j/bPq3/Q+lD+RN8j/KL7F2/+Q/Mjfkfn
i+6nqL6G4hfdj9H7BNJXSP/z3u+Q/uF930H4RvhD3yN88NZnXSpVu/YKflxR
PUIfmxNEFteFxO4V/FvlPrfwptQZ6hu0flQfQPyCzh/FF6/+RPOj/Pyh9am2
8I/Gkf9Q/kP6Fuk39P6K8M/7PsrrH179hv6P8MHLH4i/0fnx/p+3fof+L353
Fb+/In5G7yPIf0ifofyI9OG/74idLw==
       "], 
      "CountMatrix" -> {{0, 2, 11, 0, 0}, {0, 223, 27, 1, 0}, {5, 19, 44, 0, 
       0}, {1, 7, 6, 0, 0}}, 
      "IndicesMatrix" -> {{{}, {114, 233}, {1, 44, 56, 63, 119, 151, 177, 178,
          186, 187, 318}, {}, {}}, {{}, CompressedData["
1:eJwl0tlPzwEAAPBvKlEhadEh/dKQRqVSbtLUKClCjpkwD7Z6sBnNsTFswjCz
5Vjm2HJsHvBgc7wxNOZobI5mjozZPDhGm3y2Hj7/wSdU31jTEBYEQSd9CCeC
SPoSRX+iiSGWgQwijniGkEAiw0gmhVTSSCdEBiPJZBSjySKbcYwnh1zymEA+
BRQykSImMZkpTGU6MymhjHIqqGQ+VVSziFrqWMZyVrCSVaymnjWsZR3r2UAD
jWxkE5vZQhNb2cZ2drCTXexmD3vZRzP7OcBBDnGYIxzlGC0c5wQnOUUrpznD
Wc5xnjYucJFLXOYKV7nGdW5wk1vc5g53ucd9HvCQdh7xmCc85RnP6eAFL3nF
a97wNuh98473fOAjn+jiM1/4yje+84Of/OI3f/hLN//oIRAyjHAiiCSKfkQT
ywDiGEw8CSQylCSSSSGV4aQxgnRCZJDJGLIYSzY55JFPAYUUUcw0ZjCLEmZT
yhzKKGcu86igkioWUE0NC6llMUtYSh3/AefbXNg=
         "], {21, 31, 37, 65, 86, 94, 104, 112, 116, 132, 136, 143, 166, 184, 
         193, 195, 217, 238, 248, 253, 270, 291, 293, 295, 310, 325, 329}, {
         239}, {}}, {{29, 113, 241, 304, 320}, {67, 70, 73, 83, 105, 108, 109,
          137, 173, 183, 194, 214, 236, 252, 262, 267, 271, 300, 314}, {8, 13,
          17, 23, 25, 40, 42, 61, 68, 69, 75, 80, 82, 87, 123, 128, 129, 147, 
         149, 152, 158, 161, 174, 176, 182, 192, 196, 197, 200, 226, 243, 258,
          265, 275, 277, 280, 301, 302, 306, 313, 315, 316, 334, 
         346}, {}, {}}, {{242}, {74, 106, 167, 205, 218, 294, 340}, {88, 96, 
         102, 117, 208, 224}, {}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.001268907514450867, "SingleEvaluationTime" -> 
      0.008708, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "a86482ee-f325-4a3c-b669-c9d4fdd51e21"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"77.5", "2.2"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    77.4566473988439270215`3., 2.2497230190967649754`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5688470941617852494`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0279734657388887586`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5129001626840077321`3.", "\", \"", 
                    "0.6247940256395627667`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.5129001626840077321`3., ", ", 0.6247940256395627667`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5641436082773937377`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0491559222119059003`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4658317638535819372`3.", "\", \"", 
                    "0.6624554527012055383`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.4658317638535819372`3., ", ", 0.6624554527012055383`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"7.38`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.64`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTiycc//nW6539smd37XaEvbW3yKgtyg14
aR9dqsgl8+6tvUaLIsOv76/trdmb3GUPPMXQT4h+EP86WHHeW3ulM5tCDp58
ZZ/yUWsz07pH9jY29/SDed/YH0z3U32o88T+xr6dFX/fHCLZfBj9sEpknfvD
W/Ywn6ZHbmC9M++NvR1b+5fAlc/sV4WWpW6yvUy2+eg0p9gl7aneb+2ZPs2K
uDLxpf2l1DPpIaz3caoHAEUxb/g=
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["211", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "211", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9336283185840708`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8406374501992032`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8846960167714885`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{211, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9336283185840708}], 
                    Row[{"Recall = ", 0.8406374501992032}], 
                    Row[{"FScore = ", 0.8846960167714885}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.048672566371681415`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.16176470588235295`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.048672566371681415`}], 
                    Row[{"Row fraction = ", 0.16176470588235295`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.017699115044247787`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.2857142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.017699115044247787`}], 
                    Row[{"Row fraction = ", 0.2857142857142857}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.10833333333333334`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "1.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.10833333333333334`}], 
                    Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["40", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "40", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.3333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.1593625498007968`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{40, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.3333333333333333}], 
                    Row[{"Row fraction = ", 0.1593625498007968}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["57", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "57", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.475`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6063829787234042`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{57, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.475}], 
                    Row[{"Recall = ", 0.8382352941176471}], 
                    Row[{"FScore = ", 0.6063829787234042}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.7142857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.08333333333333333}], 
                    Row[{"Row fraction = ", 0.7142857142857143}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", "good", " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8406374501992032`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.8406374501992032}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.8382352941176471}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example", "", " classified as ", "very good"}], 
                    
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "226", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9336283185840708`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{226, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9336283185840708}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "120", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.475`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{120, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.475}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example", "", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["226", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["120", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzlWUsOgjAQrS6M8RZeQQ9gvAKeABNdkZjgwrjj6MLChBCB6fTNp/IWKrHM
m5bOzOuwvz6K+zqE8Ny2H0X5Otd1+b5suotbWR0P1ar92ezCBJrT1L80DG2M
2aRwTY1B+GqJlHWxRg4+IpA6T2osSKDPJc3rNU6p3NycNWc/du4x47XW9RdP
7N7SznWW+13CFpePu//RNnIAOva+Y7pv1NpI5hNtuxK5TjPPoG0i63XuscjB
0ubM1ZYxuV67zklxc3mQtdnyLDCGVJ+4+RZZE2N4lwaNNR67/rdnIanTOX7E
xJCEFqVyerOFhuYz1+KjIKVWcLS/5Lw91yLEOcnDnkHoH+38Sh2rDQ/PE4nc
YlsK3ny16kej++oSPgzHzvXJNYDQCb9s5Bif3mLJI9C6UjJupfWUhl7T7gFZ
vp9MuQcBlK9WOdxb/rL2x7KWStmy1jFeY1PrPI7WSynQfqfqCej4WErvsQ96
v+IDEv2EZA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DZwIANNNhjFR70
YCDdDbIbl/2kuAtZLX38AwBFbw25
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJztm0tuFEEMhgcWiGtwBTgAcIVwgkGCVSSksEDsODqZRZRMZ7q73P5t/3b5
WyAQSZXLdj386A/ff939fHs6nX6/f/zj7vzn68PD+e+3d5d//Djff/p4/+bx
r6cvpxX+fV77n3j2ZGOWfQtWuT3luszFqgcrRta71AubjtjkiUajj7XfPTLm
6O+gf655ZktnKH1az+F5LnvopAIZ1ic5y/oMykHrPzdS+z2d/TPaHfkW0zJy
x89oo0ZGRR/xXhNzLL6HRN7RuMJaB5E6jjpbs/lVBrLGloy+wChTFlp3zS2i
/IIpzvGa22L8ivpC1TK864gRc1nm4aPvDFTcIB0rA9XWY02Gsxfp7xZk9Lml
zJY17aPjaxg99yJyCtIcPqvuUOMhybgXtcyqX88cElvPhXeNHvGe1ug5wztF
OhdDXI2UgelsuIDqt2py0LZqGj3S2MlyrsYWVv2zyjVCZtkbPFn8IYucjV2c
XNEHrHPbnljVcb1yBax6fclMMmZY6xqZZZcwyzqb5hbM9UZmmPSAeJfu1VDQ
dyJ6bOQYqHc+6/dq0v6UvXhopj44VJ/orLDpgE2eGZH2bEnHZhxLOm/2Ho1K
RPbgRo2L6GmN5sg+Qr1TM/hMRptuwd4LzDZ/01jB7tuM5zO7zvawuqO2clXZ
dSYh21ot5WXo926uWb6do+qqlvkFqRxNw4hnPHl0LqZv0qL3cta6LVMOxWt8
L186mqO7dT9q814s/vaEVW/fyHyMsMsXBYNeIutMFj9rCYsczEhzI15vQbY3
FrMvbcnGLHdWsr6vl7DKtcdIzsYylmCod1vHycg3MTrWR8rAgJV+0fNI8Iip
UHucwTcYZFiytW+lbw7G9TW5qeZTXjnsiHmsztsKvRTR8x+B7f5EkyHPxjQn
Kgfh9RZGwO733rUM1pycl1wRcS6iXu0lB+J3rMdn39MoMp2zaNhkR59jbOtb
wpA/ZYTlLPeak/VesoBFjqpoz5R+Kxwn8/kQjfeZr83JeeTuZrC7lso68spP
s5BFThSzrXcNNj2M9gJ67k8WHbHIwQBT/5t37yOjH7Dm3SvBvGZm2RoZbcuc
SL+jmIWIt4J1b/To7zL7QvurjNbTbSrppdJaKsFW924/eQZdN2OqCWe3c3b5
K9O2yQOLrVD1Us9+bNQY2WBbs+TO9byfO3d9DYN8bN9nNY0lmjq09vsXz1hE
+06wqqdWOCOQdkT0X/R3cONkyIVn7E+21Gv02rRkl38G2kavaZ1cE1Frrga6
dj7jdwWjb8ZK3w82eixjvOx2t8qDMuolwu4vY39GnWyRTV4pkhxDv4Gu2TtT
Z7qDq9p4i719MWM+hE0+NnmiYdaHd757uX+j+9WY5h2BWTYEbOuLlmc0fzPj
vbdGtNzW80evT4OmH4q97pqxjjgL3ZfOPx9qLM39yPSNhGZsj3e95RzZe2G1
HPFhrzUesTub/hnkiaoLNPWIyuNY0X6KpfVpi7ZXnQ2Wd1uznyPJlPvzyl1G
YXEOsH2TgJ6Xwf5V/JIpBqzALOv0ImN/DuueypzrtZqPYb+iexqq3LEoKq0F
DfseRecpmfvIO4Z+DeuZjrS3Z+zc8MBkn6i3ZFQdyvNekeLZq56FmdfezAmi
J6JKnvIoGerOM9mjOm1LLNqYfOQMjbSZth6r6Y9Hgsld/AfRkcuy
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzt3VFu00AQxnGXB8Q1uAIcALhCOUGQ4KkSUnmo+tajUxRFVKnTeNc7O9/M
/H8PVStF9sy3aydxN87HH79vf71bluXPh+cft4eHb/f3h8fv7//98fNw9/nT
3c3zr8vXBc2evnhXME6mXiIh93YWmY3YJmOJypj/c13K22McGHv0yjp3svYV
RaX8T71W6nkE8sJszLnLImXTUuuMviJl16tCj8BbOAZsKOSqUMMa3l8A83Cc
xac2hmr1IL9Zc465DSAKzlc2yFXH+VgwNgCAk1HPCTy3AOiV9fyRtS9L2TLj
s03rMvbkgRyBmkYe+5xHtI0en5fb27Lttx6jPneqXwuv1m9Ga8er2mcgMBfP
/+jBWMehMFa9NSjUbmVPb5lzqYRxRI/W994tj0MOVq/tZ84j7znbs3/VewV4
ZxlFlpwqvLf3qivKujfL7avOiS2ijJ/afrPYm59S/kq1XBOpVtTEHLUTJdso
dcIH8yO2TK//PFTvfxTVazS9303g8Z0Ge9ceWlG9DozrVHJVqaNF7zrf1vWJ
a2tyI+a1h9L6zWrZR8N6I+Ao03zO1Iu102uEns/zKOWsVEuLqHVXwfgcVcmh
Sp+AKo5BwIb3/x0Utx1h/y/1XONUqn+L2fV6XguONjbAaFn/Hz1ClDqBbKIc
e3z+8b+sfSE+z7lpte9Mx5v3+lOLLJXHR6U2lToq2LvuKsu1lEi1XpKhB1VR
s414LYesAWA/zkmvKWRS7b0lamAOxuB1z0xPVfq0FnUdk4et9xwgS1/K+Z8f
b8q1QkfkeRK59sx6x4XxBHCu4vtQa+S4D3PyqFrv1frdi+8X0KoFQF3R7hOl
ojUTxQxH1KTYV1bcf3mMCj1ukS2HbP1kxBihBfOFDAAANfE9D5iJOTMHOV9H
RvbIuM1aXtkzzN4fAFjh/DkH6+tiybCOBAD2inRui1Dr1hoj9DJClT5Hm5lb
xHtPZkMeQD+On8uuZeP5PW7W+1Favx91jirVrVKLSh2w43ne2vo45iEUMS9r
Ux5/5dp8/QWzg8x5
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16384}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {16384}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/9" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16384}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/20" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/21" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 128}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/22" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
FE2W5js8WmnBATyljGTXd+AeI2l88CXzwnvmdvK2TGsGQ+3J7eR9uKuQHUf6
F6/Sv3qCdfXiuz0f/FqBR72IC8iD17ah0l3gW207KiX0XE9bnyh0xY34cHVv
gclmhPXhdnD7OP6Hm4CJPwHrNnbk4ayjOSD/0DTQxUvlRFx7nORlwrUovuGQ
FNU08BiMJYNaNcI1fbdcbxTf5nXx+mZB/1U90P/+vxTxdlrGKxwnUPBaOY4n
MK9+nNrD9J4GFZLh7vEw6EeL2ilWdiQeAo1MIlWPnBkY5NCMPLVTFy92maLM
bD5StFNNjhuVoAxcEQx/pQ4mOv07eMiF9Je8Y9MiRqLz0SMfLH4ncmgnq8Gh
3c8BsvtjwO0HviDhViB3XgE2un6L0A23HnFN7lD/nbSMf3Be1wDXz+E+qi43
LUPlre6k+e5Fb73789Jqs3D1AA/GycatVw5wytE60OQceGN0iLwCrn7sKJbG
y3mv5yFN6N/ZyYsLVZS1IIu619Cxa5myH/wud6QTH5ANjbUFlba/q1jmNiC7
jsLQK1vwxk8Ib3xEbu/XlHgSPPkHFCJv3QVv3IGXTgEur/BSAkh5Pxm5U/DQ
gR9RKfYq6PMfuDyOyAeudCSG9jhHrX9C6OCVmv7TELOkowgxqFTIAkbrxu4u
3pcmQhQ09h7umTcE89WAoJSIN1eqwRcGFtqO4E2MouwPEUFo3mWlUydvsQnS
y+oPIPfJo+Qou4cHW0dIVU7ipVzITQKINjCcM8hw+g7jhhP4GI9Bp0CbSvFS
AnCiBi/dBXt8hUqxBVBKoo4kphoGfDvaQXyE3IrDUmUutxuUdwDBn0HvO25u
UJQdWq2KfFfbF3bx5j5WlIWqvOCuu8rrXbwfDFShcl6iEpI0urkqlPbkDNeA
55myEE98PnbyLmgR2Zz8+hAYLGcFsOoyStPCCleQjmyE1G2g7ANNFWb7TskT
N4BYpsqaHEonP/twhIsyPZ9qo+SBQ67rXcQ/vcYtrvV6Wr3OS3vdyDGxYWcQ
vR8rQBIZeOkyyHs1FAbyQZ7fImVwOAUjNmoMsS7xEAAn4cCHIJiKiLkUT4i5
Wrea4pR88u6xV9bc6OJdIOa+fHqzUBXP5P3DEPNN2TgGcxMXEwMMXf6cLNQk
ngQBHBxl7AaQAx6DwNFqC4kHpuK6Y6USnPAzIKoRiBoom2aBp7bVNSlo0qQN
5ob4JDfEK/FJam+uxr39IEQAMZGvhilkR1DK1uKEslm8dDsf0ib09lUf6M5y
HO7OSYVsA94Wl6YoCyKmab+wH5+moe7nQhTDwc5r88z0RynJni7ea6dRPvDV
nbT1RjhafQlbCLQG1xIDtqaas3b9IJxv8NJ2hs3y5T1NF5Jw5oWu2ypBcu+P
kfNo05Fm1EG6teUosKMGcmO6iUp55JCHxXbyHqjzMvmtoRpgVw2OZvHSdf2j
ovU5EPW+UeHHoFFR9gJHJaKO1o5GnyuvHo4ekC0ncl5gAlsflfKARb/irMxt
UMgm423zDivK3hKdm5574Bn87k6ePUeCT375dACGE90f9nKUl/jurqKMRMOV
J6K9JgIHDv0NKd7OJnDOv6BsxPE0qEM16My9FjTEx33IlBbdbf1YqbQDC4nE
O4UdGaUvKyF4kREb4q+23xkCB71+E4FAfKJRKuL6Gzrej5zAxau9Rqn4MBt+
whO+Gkgiyj4Q5LTSjXEiyN5Nm4kxdoZGQdAYACfaybsxH9HaA3K4YErkv43y
+RuV14ExQURuAZq1Dy/t9FOUrSVoldTdVA2a4KeFol/zp5Pt/X6QSC5n4Xnl
Te+ORG/wI3g6f6Y9/0pTQahCNnO0dt3u4tnjjuReRfunRqV9J48e4WHAWpoY
epr0BfBtQ41zscnfhSMDThvP7qSiLF+FRU8c4Whud/LsRif+ryCn2aVeYfX3
+rXeTqs3VofpwauA6O8kXHubhyJxHJdXx5xsT4R874Bq7PYfJhAUXllHeC0I
l96oUJ2bdiKQYKR9+BeehHxf8tzN1AtVRYLyAyD5ihgovZpmivt9uy7empso
d7zTBTHrBO6CDoMz6iPiGMSnT6RKPCDtTegZSvtpF5F356fVrkZLCnl+GmcP
kZTnpdWHCwmu57cP+kESWSvGE3JAjdOCO8nq/LQTD9AyoAYcC7LyP2keI5eJ
zoHto/UY1pYWdALh9naVbA+vu44Ga4D83ZSiyu7bHYY7nKOmPSEyw6vyj+Fg
h+2kpcCGhpphA7Zz4A+jsxxQ5M+cuav80KAos8FX4Wc68htrFoL9jFHN2xRP
VWn8AiX4Q99oPBFph7VxFMHu3DAnYNX1jZBkeXsS+c1LXrxZBD56Qk3fxqY9
J/sTxXLnqE7V8sZ+WV3iSeBxFmlUjrJUUbaamDSz+rWJZKTivICUCYL6NsTp
RpSY/oYnRtCWEYIn7z2Q59/A0yFIkdYvVkWF9tzhmty0ej2zwSlFDuw+5Ry2
4+wsn1Ll0L/uolxftr5slRwi4XZiTXA7zVRk+j/o08bbgjxnivwWaNE0lJ/2
g29OHaey2D0blBB24+mIf5D+2A/Jb6WZbiJC1seEjp1DkKZm/C0BhWiEFWJt
bxfvxjzuasjIYuUL2S08uwqFLFfbGuXnlYrraaY7CX5/El9SGcltEeEBKhUe
kfr8oJxvdPS+W/fS3jHxBQHw5sN7lbbXrMFX5yjO2U/E1Sjp8E8XcX7Bgmz9
bmLkvIR3qo4KR5X05UZmOLhLpflfIxdt4roCWFaI9SAp/FOcoDgE6VIs/d+7
AuAAUjUbRXsKlLHgez6qMKrbauKjCrh3Tikhn54LCco8fIlwp4t3zBEv7Zbz
vjQnfL13nQKhewrWqid2EejuTpCr0L1z+V8poZxnb4iPfqpuXoHSXs6jr2F/
48a9d1i+d2nd3EblvE7el6YEYYdNXoIEIOu5lfZM3MkbP4E/ak/IOeof1SRD
FTQ3CBH77lYPLlXGihUyHTwXvLUUPPFkKDhAk9a/tqEgoC7APTmkY3b4vlPr
EHh3wj/CbDc/oDVNThcPjwljTsSPKZ1j4Z2tbzBubmKXevvFwvddNrea5iHL
mnk4s95O2eoc1aDCqU9Lsw10pSYxFBzof1RLuL2VdR/9YOGQEYHbax14p70q
71RR0+vXDguQEAmuiXmNPXHKmuuQaJqPctYvctJ8j8MCLqHpFr6AW4N20FJ6
9nTyaFao1JEPi5uZeFs/JCTfQ6FpgZy3VV8lcEc/JTjXrcTOYfxVudNwzU3Q
8Fl4D8cunpExht7sTOiZq+yHVXjwqDy9VCGrmAlc7T+kAFfjpjHoIXCdvviS
vOMGjtYW01FY/wkr1He4s5VfT6u9jLuJHmhTOQxYK/XhK3s5rBot8MUc+PIM
S7wELnz9WltiU6jjw3AHpLQS1cQ9u4dbwa3dN8NXTLFy3oeNirJYmmrxc/Nw
f+LSGudAhy+IbYy0WnzDE2EoG4dv480/pJA14AmPA0Tct6hpHpj3e3xn7wZo
Tiz+0gnWaU+IHAhc8Av6pZLHgU/d+Mpw8mPl0ML+f12+q/n3lbrT5CQX5leG
pFr8bl3B0AVJJit5/CKs7yo1681AuKJ0n1cqiWB6h+Nwza20E7s10XjQrx2W
9MtV5LcPDbeCS4rFnRMEsGewyvrBSLW82NOghCThxmhL+eAcWIbHTG9gRBO+
UZoPEfU1Wud93ADe/j1eElc7R1UQOtqcl98x5NcE8vx11PI1Bro9Gh0agEH7
8Ez5E+Q9h3BW7TkFGoJ2ilvyYE14ksi3GxWyUH3TcayGWxWnv7Edsb33kjcu
9VpLwO/fDCWUPBqwbZibml3dO96k64t1Yf/KZK5D9t5CH7V7G9fJOz8Tz5DF
ct5NDkb4c7n9cA84o7JRbrG6AJYB+bjTvhEGTjsjCje/VlAJ1eIqHxbTh3Cx
20HC+3a0w7gB/tlUbTB5QzV9sDQnzE4BZjcBlfrB2Nag3CWlPb+L14e3te8B
R4mpHJ6jNyzY6z3/v+LXDTx+PSfMMRcMmDDleDlv0j6BVbHJjOSfPfdEfzf9
5/98F634LTJgz57kGSWeP0cfT97k+fOOgOToJU7lkm3zZLRpf6+7Gj0kjzfP
fS6RbaOdu7Xr5M0PBef3mDu+xILR+5j8dvnQ1c5694P2zb9KPK7uaUy0LHbf
W7qCfkJb9s+pRnHp+Vjza3d/IVveuRt8uu9IT7Jsi/Dr2zUfTJT9je7vfLm/
SqxuRv/lfpAPJcaDzjr3MFuu5Y+kab0nX4cqrr6td79k708M7L637SHl3Fvu
hHOFsXvk8oL7u8xteqTnyGfnXw02t1lN2s5NkfnLtnzinWX9+PaKuDSTclHK
skyy+PFtmsxl2/kJ/Ufq9Lah2X+qkZ8ajn40zmM6tzh+Yv+RVr2I88nb0l92
9dyWJzaU0b/VlkXdqRG3MSjcs8bp5Br50PnE4T52q2H6dO5DRV7/aVn3kR9v
ikvttBCNd8+Lz73eYW6zOAlQWf8YkJJjF8hn7zzYYf5rf537u2CgUL7jL8A+
gsD+lmLvY3nBlUjzaw0Ie9ObO8wdD3wjHr/5L2wM+8Y99tG6LuWPfWwTXcDv
YfDtfnYPwvRhqFM/u2R8Js1Fxti/7fxCS+0zxyP+ci9fKJnAsLDknD0+LLNK
2fJ7uPm1+5JzZMsT8h3m196i8U/c3GOe+4CQZnf9644heGOjwPlWA3IUzBtY
mhRp+U651TJqo/8ZmVKhNGQZBqIrw8PfY+PNlDtO30r/9TWM8Rs+RJdzzdvh
x+HmuYUYUojCnj0335++Km7bbQW8SnocufGCss79b7P+I9FMCWL23gex9cN7
/nL3xqU6YNoe+6lAXOp+MAzEXbDjrwvi0m7E8H9O1IhLz1GgFNFwXlz6Wgu1
KW6IS4tRW9RuYPd2KGxfAJ1rge0Rt++L/0rUNb/2FaLkx4JQ82s+ST+Tz+65
EFwybhSTwurcy1diJiOZBAKLNr8WiXqubwL1HEYcW98eb26zBtos99bsMnc8
tR1ROzD4umf4pvhcY7B5rlKyH1nAHrOrHwvs5dJfyGfzHu8w/0ORfUClPSfk
yro+tkLHdzr3aehPfWxzxwqC7f8MNb7/JN9jbhODphy8Em2e24kdHCFxRaNy
wlVx6Y8jFXaK+fsjPycBC7Xz2+N/VEbXuYdEFiJL+Njo/vfEfvYjPaQVOxr6
2LeXTOf+FguF6GjQ6B31fcFKx71t1mdxU4leB8p2V1yagfNxQpO4NE9r1DR3
+tjJZmio+A39bAMdZBQKUDonpH7FPadA6fC3kfP6j/yscxGRmvQ43FmeCPjk
9bN/1s1MX/yZ2X/Xu3szkKAjhir3DBbEmzsaIy0pi5/f/qGpS1z6ldZ5EOKG
9ki/r00LH4j/cmeKkQd4vKPO3csG9wCRde4HBVC6+Lwf3m5EpdfgH5jpCK4G
7GjWSwti/PfDcnHp7lHEnFf0sSl6o8S/vcHdK2qUjTwEb/HrSGfxB4jKpgu3
lQIQUjMq7ZWDRnkijVr3oMeTKUN0k2s6h+4mJgDrJzlM5+bF7i2YTBC3/kKn
+WNx23bkLl6+jj15QXm770gd8nTa4gvxPw33N7h3zecSbGncM3j1faP7lcmE
k+vaMYTMgfk38hIdKudJ1bI6x/4sIZN+9iZT8D1PO07hvifvsbh0EDeQk2Aq
41GpOx8c3tljyB0Bl90vzUAMjGxw150n/FH3rEg7v2nXfGWHou9Iye3araLz
OumsgHWmoly5oina3CZylOscA6bGGK0i4HmqcZI/nLj7FPsaaK6Kz7v6QdnH
/gkQ6EYIRCSAw2y07hCOT4r+kXScdeHX6E9gRjbxyKBOPAa2DuEupx1Mq4EI
JXvEj98XgC043lU7FkAHupwCppvIP9ZJCf7FTlTK692vUCzHHxB+ferq+6Gr
u8yv/Y1c7InHoea/xta7d/ExgrfPw4fbgZ46CYSb/MZIMKBonXQkOcsmuZlc
mQfIziN8dhe4gEhzG38cuwvgEDcj7Oorw81t5l4gW9ZXQqw6XeIe8iWuf+H1
7tbhoJw3wxvBX/2FW1Ie2GvSaOUDOfFGK9/fDe7v/qV84JaFaK47jaHmNhtw
dwOO55qScEF7zK+JcbckBzreSXaM1FL37WCge0wjCO9yJE8ubotTxcPonwog
osSa5z4inPKHdQ8+FIBD5ePUnqoEBwaM7ZeeBwk82KU8wDB3fEbE7y7npveD
V4Mb3K3nIPN7DKYWgki9GtsApPYhUv/56oG4dAsS8vbG5+LSBFSKqnstbhtW
eZg9N+WnAZiMe+87r8WlKyg/gkrelQ9NtdxbWjlalwb72J6Go5gUAhZajqJB
dOOFofZutslkpGr9d+weEIEM5PQCN0nQp9zcsnnp+2pPkP7T86kJWPkSj6AQ
aq+JcKZCIM6dq4pLVz/4gaHo06+Mcqq/7gEHE4+cyYPQenevlYXI8N42uG8/
1cfm6WwDnxfd0AdWxt40ESoP3w+iypHonUgZ5xdEz1dClOjDVbkAZv0DoWha
AwrkCwHBsv7uroI+tgHumd8u6D/So84sou80JjaG4AEMxPItzkJFo7jtjSVY
TPHt9F8r+xPB7t4QYa9SXHpwtGqBBToh5x66sR8599Jno3ObH0HzcK7FN9hF
EWENAvYg9ug29SXY4toDB77+UdlH2Vp46WjzRcmbxg+D53DZVSnEF/oXgiY/
xSe+DUJtPkvkKOtv9viBfz1MH+WKTvax63RHpEFfAUgORZ0GPQfjtidse8PN
Tj+INc5jzo7E8y8aHuudgNSv6Fkj5QKJUl7fkds6mclNkzhTi4cTp1i2a43/
eqBAuYwksqDN/Bp75zfG/8n7gr4DY4+/mweBxxDFp34Is3vG4+kRyG8PHrM+
wNvvxvmiULihH2RUMcq9TbspbvOmvGm2H3P/QJby9IGyXdJ9lsNy5Uqhj0z0
jSWm+JLsGzN4U/zSZcpPN8RtGRRLcOou8l0Tbyo/gf/4lj5Km/P72JuMRudk
9e66VrjPBQ4OD4c3uFdeUFV3LVBGQk5Y7x42D3Lli109f7kP3reY1fIFihsu
NcEbHiRC/OIlA+byE0jOEE11p6DOX+8tiHZWhja6o+8D2BD3W9ft12m5wWwo
CjWen1In2Mu4GcSgQOEgqTjUuA+DV2JJxLr9C4W3ZrpaceuPWUxlhT1qNgAw
Kx0AO0EDsE8UAFNKAcxOdGtmyU8ARvIGMNZ0AOOMA7AqbQAL0QKwHckR62g3
AIzyDsBEcQAmdP42JyjdIvgvQTMLwGIYABaeAqM5ugCY+ZJnx86kAVi3Oxpt
6q9/Caq+2xxq/PcYAOtHYCe/vTKTstai/tiZSwDmvwbAbs0YUydoHgej9WoD
2H8mB62jPYfRkncAWNHNSaGPfDY+vRFUOxtw6zUCMDcmgE3ZD6NNcAUSDgFY
SyWMlr6VQSe+a4DuEJ+hoDvECSx0h1iPuEPMlkywkpGns1QXiEXGR72WH3Ud
ww6gSrBNVC4jCf1PpizhkIgi4x8lH/+iArpfLPh8v9gXtf0mHPvf7herruuq
Hv/ze8D/ayMR94Tn8G34/+WeMLoAjL7bwC7KxK/96mwXaqfQ6YJAH3SI7hxG
C0p31RyDK5RoR1mpT9C5cHxInUVS25LMAH38Cm5vmSTkWRaJvZNaxXMtXrtA
YLXhT17Jy9WOhnGlWJGQxXSR6pAPOCUHUFz4DP8fk11EkzjnF27bb0Jecjws
/az/LQsLim1GkPBb/0Z//31YxmQubZ6u7hutOc3p0sMllOJC5vzNmjfTD69j
HQzIfFlL3cS56K+1mL8/jJMyl09BV5bsNFeWdlI011bGkZ0ygqwOE3d/siiH
xh1em/SzCY2q+1yShOVydTWXad5g6os/3+7z19tifGxKxmtMyIqk6Y5/DkBc
ymHs/JLpLDdDJyz5S99kJ25yGKewWbcNDYPpaYbp0wzzcJ/QcIvxKSv83lLA
O2GJ1vZjmW/3n2EONOtaoWs26JIWftuJZKi57eTH8A44JjpLPoXfj3on7NCa
y50s3AKe9GuhZNIr8nKg8ewYRKOVlprG7abkNRlBF6/gNG7+nbLUtNH/mOTs
TOEsvhbHjpuH7kOlrNLch6q0kOxbuz9kLH6Px9qpqjxAd8uYK2Ecq9VWWuhO
0xrVnaZM4/3/GediQWlfUTWphObWTKMKo1lcW7r6Jo1kV5E1yR6/V/FC2qe7
ne+ZVaFfXyS8d4YeJtGrFS7i50q/8q82NdS2PM1/kmxVrr+TMi514frMKjaH
WqZ1E53K5uBnZt+QNfcn9EQO5QKJlEMt0aHNsKrWuZSlXTT5LlaiQ5qWUWSd
bHyCuK+pT4vL7KRML9eXkVaTokQOhVmkSC2q+pjvwkzKvHLBQZExcfJ2sz/9
x4VZRdYi45iSQpnrbHT68qDmhmuSo+Zo6yR2Tok1ZcJFmAPqv9MoU/XzqnRc
9+m2oiu26Z+v2L7TXLH91Y2vl80MaaYRB1Qn1EqP6ddYSydUIRI7gUQ3Y+Ku
geau7yv9ogXlgjsiU+p8RMlToOR6ir1nMy2GRkoqmo+OTR+hkUg+xrZL6AwS
B10aX4yljCW53GJxS3RcJLRs5noj/JhvodRsm62FdhuNJPBk0SnjpBj92IT1
6eiCbakIP7X7+YLtPPbBUutk0yqCfQJ6XOar0mnl+lWiK5/N3DvJPGl9qua0
ayZ1ITWbGlulUzJvMNkZMU3y+Qqrh+bIagD7Yqk1ZWKbSH3aFVRAawYjzt9o
nT3zH399C3RNM+LzVdrp+NVUFvDuzCKWQTZzdxa6pinax+Vs2xqpl03dBRyf
eSlliQ8iV+SpmSeE/QzmMe8VqY7G/vXVuxLroonlxtSHqu470C1TcVYuS5dK
AW9N11cddBHfRfvVWyago6/98eGBI38vq+7kfek68tBS3afwJhqxnd7Q+gkd
AKTtRzvyvk9WkJ5s6MlNGyg7jv+CGdBzq0Fe0KAoa3HATyK0253qWBi2eYmW
26fQGufAuC+03Owr+vPTOFuFK0lHDvdcR6fUfI/ajtqTfM0Zvcd9PS1j1QrS
kbCeG2n1D0fuPx7qUIoVsiKa6ThWS+/ln76FIcPqiKNr+O7hudY7XbzzHLzk
IOcZUYitzP7bQ02302qDC5eTnjS03mhZPY7VYJtQc9fQUZKmiFmqKFug+sVY
nNafGKoomyxEh+AC2vMb6hbKeQ/UHBxqRMdOXv+ARs/p5I1H88TU2HbxbhCl
uC6eHTF3bCevhjiGsPS0+2azMpedRoIX+cN1N9JOHJ5D7Li35g13xOujX232
VbTHnUa/Q583RsNUAwlbjsEoTbc78Z8dzjXt6uJNZat+TVqwUTm3i0cnTohs
WBcCNLG9W283WAFNORvqnKMW6BA/QlY2JYZ7PP4HSy5wqHRFe6Ho5GtM3WrE
WBDIeopKvE2D6GzpHiQxdPb4B/QjePwGdATsxUgppShkHybBHDEbFLIn0xAD
EwFaQkqV8+LkvKlk4oBSv6MSnetaClqytP1mGmc5KjTlpfluRIX+62m+m4SA
wKnq62nrU7eMYIwGSRPQz5Rqx9Ddy7Xc8k7WJXTOTppEcg48gHbc5x1udw48
gpeuAKWOOKXt9qfkiWHfjt5QD1XIWtA++fyTfpJRClRT0MmbWjjqwMjwSwe9
SIvv0mq3ItQO99xMO7F05GnRxCYm/nvcdbFWFXHysqGp/7SibKaQOHsTlyhP
lPOOEcIb7OT1R460pNaB8CbnwO2IvWLAHv2WnId+LKbr4afCdia2FoDa4PKe
C6PgBUUXr68GadReeCXn3axm4Wrc+mlYnqqv0oP8u8r4Tt4D/PBHktiQOAAR
n1aXeFJ9AOKIPP5qU0G+QrZ26cg9+OtppqX4kZD+pab4mYPTxAmR3MujwHLT
1pfh7YojOFjh6ft4NY9N8xoJB5r0EH+RHzB5HOutPXDeZiYU4sIUOWm+64Cj
Ca05aRzCnnPSajcgm22/4VdzPY2zmdCFvLRaHK4nL40ThMug43ZaxvIWhSzt
mf79/al/zOpT6MxurY6pMa30rl4XcmuGGEu1JT3prfmSrXZuCeiA2AP2Wvrv
rJ/m+MelKeM6eTcIXzcYdpnkDjr9uH/NBdy+KhUys8lIg68oZHMRrjcqAFfO
lwgHUFpfHIdTNblpnO3IYxxqyjmDSOs/rJB9TxOOJH4NMs+6oS5ev1osQxuV
N7t4P2is9ZQSpPocuYwmsZx3Tvr/+Onhx//608PBCmKNn71n8OYO5QFZMkaz
/IcdrYMWuIrGG1eCR+/dZTNHb0HWuTO9XSZ83nL5h93608gVWoy54zhil+R2
zUflDXHpXliThuXdFZeeOPqKRFM6ssxz9YmNvTs175tgTbyZ2OiIvd3Uo3wt
Lp2INjp6T9wVtxmegsJPD8Sl4aYv9Zk2o3Z6fgs2v1aCtgfMHoSbX5t0gWzZ
UBlK7Cqh/U2PB7H17iHToXDzY737pTl408e/3MvnjB4FVozPsPMH4661BER5
Dk5pl9//Z5Z055TS4DWBZ8++LhgqNOb/tBIYE9wA+Kzn4pvw709dUDr1s2fs
mM59Ksd3M47cRpvx2s4PFKbKjgb3g3O5oyZ53BJ4Wuu4ndAlJTSS+uq+vOCK
uJSKqOz6sVHcxspE5GdFN3Z9TOxnP/oCZtvxU/+R1khiUzT0xM3ExmLEktvP
xaW1qKBoFJdqo/4xgzCSHSqF/SgXl95FL53axW3bNrZstQm2zFDaS9uVw6cV
SvynBnzp/a/1/vDohflVWJif52Xc8eSeGhP54/cZFy9+DDfPZSBxVcXmPX6L
trpzjhJSOWf3VPIz+eztgnhMtW6eiNbNNOqZG8yHolDj8Sl/CWwZ14PSWdsf
8S2eHQvQhULmWGhp1oJXg2SXUONiEgC/lPis2y8WXpzpupALYFMAzMcAwGrH
LPlL0E0FsL1kAFso9VlHuwZgJb4Adsb6XPCjiPEA5js2hfx5LZqEvh9J/dIa
fcIPLVENOSQrKaxFBZki0VFX9lER6RB2VLjcEH3Sz5BOf2pC6eUaUj3CmSuO
4vmQK0r/XFj45TcmtZ3mGc5cc90ngtvAn/SDG8qzitSXWzerbwmNm0gN4D/y
4ZAemzAvsbAG/nyzxeiDMRrIvWrI782pW/mPIrjqdEwsrNDnNPD5gVXLWVzO
QZIq+6vgzw/KDOJ/pa19jp2SyRSw3smKjgC8RGq1M5jFGsc1uohuWq7BM1AT
Tf72H1ZVkbXrWSqPpjUuyT/zVxdOuiE3m1omXMQ1DRQSH2JahWeIkZg6Qyxy
SadnM8caqO439WlvEW6QlOtbQa6b7nFfKwZ9IolYQtTi33sSQn69eqzUvFxg
661KEyfMvESKhAS5EN1Ns7QwakO4+eE57EQNbnmsg8XWJRQtFW6vyKbl+g4N
fJ+EdDr6oEsiRnzQRTiH+aVVFUmL9JTpanLQxdzHh1vBD/mlm25oWNZAmlam
td82yYeamlF8iMP9CvB1193HKiV3SadLIKl/QieR0g1QTjtDM28Hq6rY2nWS
et5fXWGRJIymFZmqCD6vGyRcDgR7AMEsi0qtq4jgcejuH2usRr7zqbn8R/zl
aqnJM2nZVMM/0M32scDSKnwl4DJTM2cvqxfmDFLPWYEWZr4dtBbhX6Bza6LR
USdxmA2EjV2ne4yyvMCbL7rcWoAfYdwtbh82YN+IWSXcXD03PNodb1kTj87U
9ycYPFalCNUfw6vHA8y5asdwO+gV29ST0Oo1NYsFGd+iy+1K8Xhd/HTwbr/q
ArFfMZ4V7m7s2aOs6dXxGXkgJl7Z2t/tRZw52XtaeT3MC2a0C61eE4cQ6Atz
heq8y9Xn8WpceBzC51D1YnzqT2J6JXEUoaJH8djk1MiEblX11ioWcer49rA8
Dsc/N3QX6n6y1S4Wdd8TthuvytfgVUXCWBV1Ff0f/OrcR527bZ/aQmQp/TlD
NUOODujg9unW+WnK2LAdCOFDNcei0SC2YSF4tXULjmFO2BqEf0X1l81exOmL
wVPKvE7I3V6Jw81dXIkTPT2DTeseLyctb+y/9RF/VWBSAzHau/8GLCcczSA4
x5w0ebYcWmpuX4fqi5jKdTXLcQAx/jbNpBav3j4J8f5F74aaOLH5PjR4m1Nj
9afwmvE4gXahX0B6Zre0I1bMIqQzr6kjMX9dNfTdWH37/ajY/xpn+KewcMSi
pf0XmhH5ed4984dqrm9AWUXvIcUyt4xnCE85uhYVYIY3/vQcYdKUF4pXG/xK
VQuC/pihmjuHFo08mPFp7nyUyBW12z9uSjxUx04ZcRI5Ztxj4h5BY/VQeN0U
w1ELqL5R1Rdx0QhVWzFTF885HZrqEsU/fTlSGY6arB51i2DdmlG5v8mGkdVn
JvWIIXU5vyxAzDxZs/Nkze78dURjP8nqKdVt5eWmxNCFwBn7U+1T4hBvHcIt
3ZEV1NjhxpWvg43Ym8RQPPDE44GWJh5AMDAUGRtWMYSO0FZKoz/llZzlQBxI
Y+pE/5c48ANtSRqTfZSIA09d0YfqNN7dR3Nb1JRab+0aQJ2PL9NjSrr9x6Gv
WNDUF5AzpWoPsYslK7Iukao9dQtprqd/TElhzAR0r5uucYV6HH9jhx+SprzF
LAqtMNazMgx9BGYWF/uC3JYkQHtI+D6VA74XJ0HftjFMss8I8jjqX5qZ6cJi
5qxgJK8lb67kZixmak+nFgln7As5JlzLM2Vg2FdA9zFkJu17Q52Rml1pJXzR
vaXVBaHID+yu7OhDZtX+KcwTrzbZC0etPgbT1rHRkr1VESpASfChGsLQIGde
cFqZ9xY/THR4XRXI7lT7jSdQfbvLW213Df29TSrXBPo5NFST8wIBfKwwl1gu
Fdq+ECtr/uUECJcC68A7w/IpVItDn5VwbTlCoym/yaF6jDVaXkdWf0hct2yU
RzqdpJ53wK/m/GgdnhKFFkQ3Q2chKsRNcTGouivUA1VPNtGi8bdh9qNuWaEl
4FtH7yapmoS9yh7cC7UPhFojdoX13MereToaXbTEddHVWv39ZVvQRfQdTjfa
Af4jFqNIeM+fQc2CMIOUpF606CCHBfG2yFwIMWkC6FqI8IRUH8umihxY+LeY
p0oMCy3Zifl+EksHZqttgpsXPYKPPR2MDZus/5RrQLb2oMFCM8bbNWMJTwVw
t2eEbRji+IhwfEgEPpjj/B/I1DPNQtAYLrXIX5TM1SnVNWFJhdgOdMWZ+J6o
P5ol5xdD4ebBnMtWZO5SZcoCt890jhsxLpn4PQCRjuVzmS60x79gIiuHdHYy
mSHi+1Zx32iRbAQ7Z2kxBCFCKpW0zQH/dLNqjuv4HHNH4PwNPvbS0fmd5UWp
S6YI/dDgxjZcZOyzg/gScy/iKx/46mnCdHHde9+EH54eojLWWBZtjMATfY0M
sdgsRfTU37V3fedc6mEXkYRpT2VzygWGbmpgf9o3czxZ5W6lxemQCW9MYgdx
12kHbp7ykvNUYrg7xkpgndwOXCoSYjxaGS3JP50eIvR4AakeR7U9+KzIxKPG
WlT1s+vT2M2mZV6lNudI03rfFEqkPxRFp+rI/LmS47K5aLR/znRlkdgMJG3G
LjQejZ7kn0WP6TYr0ZHSwCl56FdFcsFzYEn+VfQ4VkwJN1PEQZuHJ0iaHdcJ
kiLr5N+pDXyHEB8a+gzCDkzthZpp/vxHhVSUzKBPkyRklutbl9DcTCdR+Z7p
wA5DdM2d/tRaxNJFXJyF9CwC6ZlSTHMnWeu/l1+I8GIvGowVMx8YLi/1azLK
ZOiWOBwyZ3+nxb7rpvX83Hz2e3zjbzJXK8uj1K96yrhRdw5vElobanIwxbYs
BRv7LQlM/GQ1a3y1ehz5fHt/NMXAOM5KN3ZBAkajcCvCm6Q2iwzf96Tir/Id
RSMD5vjr6knFVBzJdvV3tyO5qm9t67IsU8itWg7ChUnUH2b4Zr1N0rk7+w13
OElvYDbjPUP9ie8gJoahL7brU44OoHiB2gtAiWfD00tlJ74qWPQ0hX8DqvVH
F5n4/WsInk4q/cRGvMdU8Og/Y4z4nrv6ib7Xj03CMAeYEH3X3QwjxsLbHTBs
CbRHQt0a/oWPaM+D9tVQ/wn+rRzR3gVl5CPUT9TOgM6DGGH36ifeDvOySMS8
6qe63YJE2LP6qW63IxG4q5/q8ZdBfQL2+amGDyYR/18e6qe6PRHqc7DPTzUf
fld9hl39VLfrAbMMoF48Ak9EbzWJaFc/1fCvVXCv/0VXv6re/692hkqG6qe6
3YhM0K9+qtutyUR/9VPdvgDqY7HPT3W7hwrO41/wa8mEPNRPNT9DoY5+SFQ/
1e1HyOj/MeDzU93+K5ngr/qpbsdG6CNdzR8WUdbHPj/V7ei/DWALTBJuC4Fo
jriAKLu5AkFwWHBMcEBI8O6AmODwMLfwsKClAcFh6J/f4tiwTahxko2fN7yN
C/LzWxkTFRQQ6h4U4x20M8YtICYA/ebq4+eHiiuCAjYT7//rd5z/69eZ/19+
1P1fmM5m9O/A+OfDg3ZGBG2KmRVs4+e3dedOv4igqOjwMKA9ZpdfHH9xVFDQ
Uu/Y0KCo4E34SDHbosLjVV9AX7RzU1AE4gU+TmhQ6KaIXbMi+MEOxJ9gO9sV
sWExwaFBfq6AUUzQyHFGDeoXHRTjExAVE71kFN/97AIDbR032Tv4BQYFCPxs
5wjs/Bztt9j6OQTNCQwMdLAX2G3ZjAvFdUlYXPgmvBNe/zIqIAII8XMNCAnB
GxbtjIj6DOMdFO+n/nr7oqio8CiYX0PMyphdIUGrgqJjgMN+S1cFhUWHR0G3
Tds0EB4BYZuhJ0GUCgJNgDOLqG6FAWOCooCPqgY1i2AmDXc07I8CHoXFBITM
CgsH4gOiZ0VvCo8ImrU5aFMI8YX34C1BiI+zomOAS3j/0e1BYZvxVps5s/iz
bLibNwfMcQicEzDH0c4haO6cTUGB9pttBQ78uY72AZvmbnLYvMmOv8Vuc8BO
Bzs/O9uZEZtmhqCv1n+5VPNJ+/9fH7SfFR8yy+tfxjHL6/+yefzvTPgvA1GR
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/23" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 461384, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 15, 47, 25.34529`8.156472247112594}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable"}, "LogProbabilities" -> CompressedData["
1:eJzFWktIlFEUnnHMdEbFqSl/cvKRivRYFD3Q6OEiSsXCR1DIlJDYIkRDCpMW
laaByZgZZmYtsgdUhD3URUP3hppg5uQqJTUIn5ClRhoqTS6cCdp8i4+Lq8v8
97//Pfec75zznXMn4kReWraXTqfL0Ot03gvjrCPWkRznJd3j/KWTrdkd3SI2
paUxOc4o3xQ0tqQaNfnYYe28UX9ZzGa63qUaLXL1wERbqtEqNw/tXO/w02S1
bf9YyrliUd5ZG+Pws0i7fZ9lwDtcRr061e8MsUht2j96wHlbVDQd63OGBMm3
vVMLoyYzdrfO2YM12RmRs0xfcVOknw102YODPM/N1rW/ugxW6f/pq+1JQa6w
HAiY6jJo8kJCx/kRfbisqQjdXlRikDkrco+aN/WJ1MhCm7dpRtz/FrCrqMQk
f6xZVRrW4OcZmw/dO/hb/17slc6ysAY9lA+dD+2Pzud+///vuNcj+Vj50f41
+bqt/fGBcjZz6u4Zw5hwj1p9zIb+eB84j86P7MOu76tvrhxJDJKf25OSBgtf
iLSmxmhnla+8vuP5wnOLRPhH+kX4RPNof2Q/1n/Z87H+qxr/CB+sfhG+khLv
DH9fNy2eHo8sLjCb5LWuspevr/Z4fiP9oXnV8QmtR/sj/UTXdFtGTZqcdNVe
3PbxipgIvRUyavr3XDW+2PzG+kfpnknt0fCMiDrdW53+0yCD21ptdbVfPL9V
xw+0P9IPwgeSD82j/LLU+S9tcf2DxfdzF9e7v4f2R/Ms/pF90fdZ+7DxCcVv
Fl9s/kbxjc1fbH5H9mfjm2p+j/xTOb8l8YnWI37A2gedH+ELrUf4R/hD+kP4
Zv0D4ZP1T/R9lp+z/JWND6rrW9X4H/S1jWQ9+yMe5s2Nt9vGPWPPYIJry5Hl
NP9F50P8l8U/Wz+w/BXFV9X1GYz/wL4sPtn4gvIDwg+rPxafrH+x+RXpl+1f
sfye5a8s/2H3X+r4Pdk/X1llXikP5w9V1pWPCvf4wZW1MSbSh46PaH/knyz/
YPsrSD62vlONL7Z+QPU5279B88g+S91fR/hk6z+ED7b/yMqP8IfiCxv/YX+N
7H+x+Efr2fsD1fcTSP8oPkL+APCJ+A9bXyL+zfony6/Z+IHwz/o3259TrV+2
f0rHH/B9tn/K8leUX9n6FdU/yL9V3w+z+YG1D1v/q76fY/Ofav9j7z+Rfdn8
o7r/yvZn2Psdtj8L+T0pP9ufZfuvqvvbrPxs/YzOh/wHycfqn70fQutV11fs
/TIb/9j8z/7/h+3/sPhRfb/E8l8WPzA/A/6B/Bv1T/4Cb03kgQ==
       "], 
      "CountMatrix" -> {{0, 0, 13, 0, 0}, {0, 211, 40, 0, 0}, {0, 11, 57, 0, 
       0}, {0, 4, 10, 0, 0}}, 
      "IndicesMatrix" -> {{{}, {}, {1, 44, 56, 63, 114, 119, 151, 177, 178, 
         186, 187, 233, 318}, {}, {}}, {{}, CompressedData["
1:eJwl0ttPjwEAgOEvlUgos9CJX7WSlqSTUw5l1aakEnOaidZdXdiMFjaGzWk0
swljDpulzQUubJU7JrZGMzY1M8SYzYUYNjybi+cveN9QY2tdS1gQBIOMIZwI
IhlLFOOJZgIxTGIysUwlnukkkEgSKcwiRCpppJNBJllkk8NccplHHvPJp4BC
iihmIYtYzBKWspxSKqikimpWU0Mta2lgAxvZxGa2sJVtNLKdHTTRTAut7GQX
u9lDG+3sZR/7OcBBDnGYIxzlGMc5wUlOcZoOznCWc3Ryngtc5BKXucJVrnGd
G3Rxk25ucZs73OUePfTSx30e8JBH9POYJwzwlGfB//7PecFLXjHEMK95w1ve
8Z4RPvCRT3zmC1/5xijf+cFPfvGbP/wlMF0Y4UQQSRTjiCaGicQSxxTimcYM
EkgkiWRSmEmIVNKZTRZzyCaXPPIpoJBiFlDCMlZQShkrKaeCSlZRRTU1rKGW
OuppYB3r+QdpfFff
         "], {18, 19, 21, 31, 37, 65, 86, 94, 104, 107, 112, 116, 132, 136, 
         143, 166, 169, 184, 193, 195, 206, 212, 217, 222, 238, 239, 248, 253,
          270, 276, 288, 291, 293, 295, 310, 325, 329, 330, 344, 
         345}, {}, {}}, {{}, {67, 105, 108, 183, 214, 236, 258, 267, 271, 300,
          314}, {8, 13, 17, 23, 25, 29, 40, 42, 61, 68, 69, 70, 73, 75, 80, 
         82, 83, 87, 109, 113, 123, 128, 129, 137, 147, 149, 152, 158, 161, 
         173, 174, 176, 182, 192, 194, 196, 197, 200, 226, 241, 243, 252, 262,
          265, 275, 277, 280, 301, 302, 304, 306, 313, 315, 316, 320, 334, 
         346}, {}, {}}, {{}, {106, 167, 218, 294}, {74, 88, 96, 102, 117, 205,
          208, 224, 242, 340}, {}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.000607228323699422, "SingleEvaluationTime" -> 
      0.00738875, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9, {3.869215992069166*^9, 
   3.869216010528124*^9}, 3.869216652211252*^9, 3.8692170070767508`*^9, 
   3.8692173280534887`*^9, {3.869217675130456*^9, 3.869217685513886*^9}, {
   3.8692180388130713`*^9, 3.8692180459383907`*^9}},
 CellLabel->
  "Out[231]=",ExpressionUUID->"bc19ba95-066b-4c46-8850-756169cf8b3d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7832369942196532`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "208"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "63"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "43"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "11"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "5"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9, 3.869216022517696*^9, 
   3.86921666275205*^9, 3.869217020007245*^9, 3.8692173416096373`*^9, 
   3.869217703374105*^9, 3.869218056194668*^9},
 CellLabel->
  "Out[234]=",ExpressionUUID->"230c2df9-ba1e-47d7-bd21-95acb25c95ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}},
 CellLabel->
  "In[235]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7832369942196532`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "208"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "63"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "43"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "11"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "5"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9},
 CellLabel->
  "Out[236]=",ExpressionUUID->"6113b2da-bcde-4b77-866b-965453e7bdc0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"5.25`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"1276783e-9e31-4a52-9faf-8696d0400c71"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
  3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
  3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3lUz9/zx9sXrUpEu5AWovRpeb9mWpRUdilEJJUtIWuRFq3ShohKK0Ir
kt6vO++SLElSlDXZKWvZkuXne87vj7nnzLlnzrl35szM42mwImReoISYmFio
3L9jnt82x02b/HbMl/mfE+C3ztJi3f8uLf7fbhrPRfPxPYILaX00KTGWneh6
zPvWP8FZb8PJZdJ37kW6gIYM7EPp0G100UZZFKwyA59f/sLdS9AhqRhpKgsP
pXAWhHPjDWobpNTZ0Jl6jDVUstSb2aDl5UEG6jOx5eZmwbddqjhy2zBscz/E
LsTFYsa9VUxemMW3x7uyTjkX3qtoAw7LK8WTxXv4UY+qQNplFbmpFrC4kGiW
ejERr0+KJrNVN5lkyzNWMXQB3YQ9MHrrAcwofsKbj8tHnXAJitXaD/GrJkPR
gkD009EX9WTtwb/1peij/x/L812PohOy9mtyZLFHUIjh9l6kP+0YPl4JaN12
DeLey7HKewpo7j6cKVYeRsMP//5goAsOqftQpaqKEnqbmHKTOX43rYKMM2HU
bZFAHy5MtJ8x2xOuvGknE/0aqPcfhV/L3vDusrb4avgV262r5CEVxdkP7xS0
1TzPnzx/CmzYo9rudj8cflUX1oVOx9NkISpV9EGHl4+h89UMdvBDD9vqvwK9
M3YyZws7yngTjVK1XWz42G62/e1vSD51EiwuX6Y9udLIPLSQN7vKfVYth4q+
icwnMQYtR3RRVbIZ3OzrBFMbN7utH/yxXWEOrnv2mt6sfIDffnyHdL904dqH
5vi7IAqXPqhlGpnNVLnoDgTsm4ch4VFM/NhXZu8DtPHcbc7X5BBqG3rQtriv
zOzDLLq7V5Lk3B9B+vjNJHFQHv9KqaH0L32akpWKz6oW0LaVvmS/spmrNLPA
ijIb7iOUgzmzorZ3nsTtKUHX4tm0K1rMHkZuhw0mi/B1kBftyt/Puds1oYZZ
L/94rxAe3IuAL1sMuODrf2C2+jf6HKzLFgzW44OXAbB0hqy9VUY9vD/Uhbgo
C7QjLwMffABHbp5Nwpxgu36TYjhat1zokCkEq2FDuJSVd9jnq/Yg3jILL6UU
Y7Z3NXt2x41+DEfcG3KKtfj7cIftPFBFxoBfGKeCipdX0uo6IzwhtY9640+w
+Dnv4fHjeFicqoQyHemkGmOEGWrbcL5hMM0rmMg2mREleBth/5f9NGymPU2P
tCPfEV9YpIMqRj0dR/NeZMDRg7E4xvUDM/8lhWKqGmhcm0ZSQ84IWl4wplsW
Q66KCqzEOI5M2k9CwEIp7pfyCBrepcUPD7/GX7vmjXdU5yP6J9KIgFUsxzQK
/zujhDERfmwwJl6g1fIXOvbX0aKqVMH+92dZt2AJK21agJ7h56mViyHpbFW6
mvyCu9hUw8a9DOSczxjglaoRNDq4nSJM5/COhauw4VyUwNkmCm657cGciwqk
fv0wm6+0mK526uD+66fAtfo5f3kUww+3fdgWxY382U/xWJq4AjvXfYYDc4+g
z40iKLr8TXDi8XrcEpTIB0pMpuaTeSx6yiSUSv7Jns54LRz65RhGSuTgyt6b
0OscSdWqaTR0QjPOSh6E45dsMXqJFE4abgEPK8ajzTwfbHohR7E9O+lOYQM9
erYMi3+cZO73Y7nB/y5ToXE+bTVsYQPJ2RD8/DV33ewtG6EtopVlpRAqrkjf
slIozq4W5s4RCS7kfODnd+/nlW2CsGvqB4g5ifgjYzSq3znOLgVLkUZpBtMJ
2888rF0gbEQdk7rz82KD/wIKvDmaVu2QYxGqE/HUV1WQ1nBFwWId2nvtFxxZ
L43is6PZtRB50biWvei9LgCUlxbjuXmD/IyJIlCX1sWRBs7s5vavGDNLis6N
PAeNowu5nBZlkkszZZv+ZOMSt1UUqpBAqg3dULgnGOUXJIGReglb9e4Wk0lo
Zkm4i/TLstibqzxkzVwLSwMewJHyENa8+QMc0WrlK9zvw8zLMuSs1mk3Yc1H
fhErZI01eUzx5kQ6ulEVLf7NWOsGHxrzRJqKLkuRjmQ3t+LRKhJNvgZ5OZNw
/sIXDK5/qt05dY/g3C1jlrgwm/WFuZKJ5kpsdbVkH8ZUoVGaOp5u2cvW6Jti
9pSNMLRpFKGpFJ6+8ZRJNcrScWMD3Dg8hbZ2aLD3PUV8mqW4KCO7g3Y1vQTd
4fv5Opsy7srVczDxkDfOu1XMZ4jlUJVHMsSE/IZ3Y4/BdMVSODXaGTf1rsDP
zbEsW3U8KMi2klKcgAKkt+PxI+KopzSD6/8thUZ2bfihzomFhM/C0QZHIMB1
C7X7GdMOQTC+t09hypdFMKmykj1uN+U19ZxRI0ST9Ka9ZKMKttPUnTPwyy0d
ur3Dhm5sGkWr7aJ5Yz8HeqzsBS9i0+CW7RY26elRu9T7x9E05CCfsVEX1z7L
h+42NYybbY0v9Av4m2oFkCqXzS7J1kPnJR5iQI/WdhAzuZICv8RtSLtyN+fd
48ArnxFSq/cX+PtwH66tWMDe1txlmpGH6enIOKGH1nRK8jxBLcq+dp0fp1Fc
7V44FMThw1EfmUeJCz0ebcXHxW+BoGPt4FYbTxEHxHGX10Kho+l2mnHLmXPp
VEG3CNWLYy8YQ+68M3C7PRHDjrTwf7b/YFsnz8VnCd/536PUcL6rMd1U1WQ4
to/1GnlS0fa9bMvXnSzwtRxzuHgDWs/vx5yq8WjncwWkH6uh4hpp2CwIxB8P
asC5QAJzPpXwUSO/sclF2ihSK8NsEzGUGbjD73c+ziv/tkFL63oy+u8QZ++b
RYmeKeAnl0rfLs3FPp9qmj24hI3MPSVIur6QWrtc4JnrQxaxNAZjvJ6xeLHb
bGeggGwTyzhtsRfch3QF+qzSRn1Fn1nCuxyQmriPPf5cyk/yPEW7vewxwnQt
H7Eqnv9Zac/OckPo+2FtVqhlR1OGB4HkEiMsmaaJjqWTSId3Ru/tW5E5yUKE
1Qjm7P4If1cG4cCNVn5+UzizyDeDnoFrXGf0G25daxlO73rLaSYp4bqw+3Rv
pYh9TCyk9OA9uGCPKXmZuML+3ZrUKSuGVx5/oOjqn9CaYItx5vI4ZKWsvceW
QRixVotaHQxZQF4crfwWg7vwAy/zJJfdPHmGfTAeFDraWZDKWHGskBspqtsR
jD9eb4VpztPJ4qEkzdLMZfoGgRi6bwcL/HYIlsj2QXTCGX7Us9EsOraafnx5
DgojCmm9ZgFIlHSghkYgZl6o58clvBFKaN/HxkM/2YTdb+Demstg5hNCno3v
4L52FfsapI8xQwKZ4dAuMtJ9zvolHnGQ2Mz0XBQgb9ts9jovgF15Lc/uZYmR
9YGblJA3GzMDmsDM2R6HTbhF5Z/E7OObLsCbL6rw6lw0bJw5h4qcFGj8il/8
LbGxLN3Whr902hpfS2xC9/Q7EOV3lvWPM6Vl2sl4iA+htANzQKH3IGm0RDGD
xiTupcI8mO5XcSEhvZieqBvRuTFvhfeXxDDrrG+sycmbbDcdZCG9V6B3+VKu
7c5abtTQVOq4GIyd85ez8oArLDjrHGbeagTH9Y3ci8tjuI7SVHywto0d0J3J
+u/XsV9azax49RTy4nvZx7UMqp9EkGlAFw773cotrBjgqjYmUO6ZdDZR8zcE
KnQyMP8GMzZb4aGiNrZkjxWr0u+mtV5raOd1JWjx4IH/G4UPxYeLjl1Xh+2r
j8LHFXfgR2cc2u8v5bRqrkB10jr0tDVGA40QkqlbRk76q2lD6CiaPGcszeG7
eX/3YrT2nkF3t7aw/ikzubWFw/BqUDg9n1DH1HV72N1/dbh3fhrIx03gelWR
SpyVMFzpAH5dEsnu9Gnixv+kyGGtBqkKren6rXaY0KVGqjdG0qMRuTTT968d
BgHOvlsI3yKk4UubEVTk5eD+eh1696eYIsMqwPSBIep07eRKxyqR7RlHXDDg
y4OiNjM22cxODqulNocdLLdDiXjfC9Sf/14QcvMl36Z4EuRIyF4LG3lreRmc
BD2gFCqNDxQTqNFNjEThE+BgkA9NnbiLpp9NBX0wFahXyFCM+FySsJsH3ukz
2ImGKDbuWyJ38PFn7s5fcXyXrsdb1njh1XpVdiZaXnDkdy3pfdBgmr2LUPum
O66YdAjOPh2PqRXRlOCsQ6en2v17bxI+2XaBLWkL4K/vHkklXB70CK+h7IdN
ZHXTkm4McaQLv21oV0M8itvmomJLOat8Xckc+7wgrkBINTtl2LOAifSx8i6s
lS+yDX6TQn2j/tJkeQ086SSLr1LCSGFOEuc2dTOe+nses1O20Bixf/HrDsK2
wde86lILepEays7RHyjxNoJzjw1wR8oyyi+7x7++dpx13pVjQrv1uGL4G3iY
44CL5WJBQVcfcyROMrb7HPqKR7MuWWWKfHQKbqZdpq85JYLAw0+gua+Q0u4O
A+NyZfj6yFv4xq+e/xq1Cc6Od4TrEuL2f0WI8QGPmLAuB//2XycNq8/4x28N
czqoCddP/RA6vZqPs8flkVmYPxsZ7oLuC83+7Yjj+DtiIvm9mWDv52pP+TNU
ISmomFv52Fjk5lFFJQd64K+KDy0uVaKdE1pg/PtZ1HnoFrf3zCzgg8bjSnaG
di/Uxd2bHOmaewwZSJ7F39H+tHZGASo/a+E6xAZZwM5a4bh7zjj9SyioqXTg
I/84Kjg+DOc4I5v7Yz85ST6i7J8zkRMIWW/kXWGez05GlpoY/Wkdz4XtB/+e
49DjNQ272vNJ7k8Fb7xWC394R9Lm0d3QvsEXVvuugruG60kup5oZKXfAnX99
Jzu4l1bGvQVugzVNL0UoWFwDtR2SGGcUw+wf2VOmuimO8cqCiZMPsfVn06lr
gzyMmR3PrBoHeL3rHnh7Sx5b4buHPxxyFbTSkzAdp9Nti/Gssd+KrgZcZOqB
Z6lSspZdffyCaX6O53xNg+CKciIpboqlBXaJwuf3akDJcyfX+o6jmq/pJAO1
kDNzNqyb/i8HMjao3K5Fwb0b2cDPNuIfJXH8tLM06qM5yD/7j3QPq9CpzGLc
/M6Fl8yeg+JyC+n5zm42bV0dKCoZ8CNKHPifn0agebA0DGzv5d4nxsLTjVp0
rD0J1r66xp59Bihx8GQnbRyx7Xwbiwp4SmZdY+H7fDe8+3GnYFvDORh7biEz
4hRxXbkrc7wbTCsiM9mIZEs8tjUDdhe+hFdGOuz+0SUs+fdpwTSjL+zPN0O8
P4zDuyvn4YYp1tiSpwx+ByOZwp9tUF89nNVmWsFhjXHcs+XyVB86lIb3n+SX
m7hR4X/nwHDRV7Zojw87GtfEbmz+xLJ/3WZWC4ZS7q1T+PAyoOrvNChr0MDg
LS+Zh2E181xYCfGvHCHeZA2bkotk8UaJ+n45sSYPTWwwns9SC55z9f4HsETv
MysUt2VuXSogF5UI03IMsdEplkonjKOaWaa4XP87lDt3YH39VRIzicQb43Ug
pc2IUjqM7SNFGWTuvI982Wm83VAHCvYeJNU3CrsGimm8rQz1Di3AWFtf1Pkt
ZR8wKxsinE1I+dZwUtEJEITdlkRIWUEdRxfShPh4MnF8AD9LM3iXCY1gkPOQ
DR+mxlYfcSe/oO/kHt+NJ2438+1nPrIjuTx974lGbxk1mjp2Kk20N8StJQeo
63gE26M4hS2R3ECC0+NF05pn8y8VUnDUYxm4fXMPP3WuFLn9UcFHY7dA88x9
0PdD0t6m2JN0Ln2G77LWIBskIGmbDywlfj6s1/kpALPF1OYaBnCpHvB0Gfp8
M8WlmzzZrPKh6OayGbes2IcNul9hWY8lfpMfBKntb1moZDFdm4c4eeN65L+Z
MqveaKri1cmq0Ic0nKbgVetEbsWAFxkMFnO/9k2nbZ2GLDrkICz7q8d/eh/K
Qpqf4C/zITjrgIi1dRSSv60DVoQvQt+bvbDpZzw0JLxinWecWLqHLpv9MZ2u
XB9PP3qqaKvjdvAuLeXUg0yp+e9+Jt+1EyfNX4nVGjeZ8ogXIPFmPlX7G6L/
8Qgsl70CS3NXoJNXHd1rFyelxFU0Kn4NjEqZjyYzblK71URw6T/A5xw7hDcs
FHCrdzBpmDYxmc2lLMJrFP93Kk+aGtE4pvwYuQv0eJ1Lktg2qxJj1C9RgWMj
zugEdF6RD5YJS9A6OZlK+EOkpyQu+lW1H073r+asOx5A1Mv33LUFZmz1lVvs
6Ntw1Cvqh/IXm9mZ6eb4fMY3GJjojCOKrMj8/i2W1aeMn8btpO3NrfTsnDMr
dZiKxf6v4bBoBBN7lwlXV9hhHOTh2Ge+2NqxGKIWBKL//ecwf3EdK13aDRWu
4sxEeyKUvk3FzRPuMz+jg9STn8fmj5XEHoonC4vjNNtoNC5Kt2JBM7/yF3Nd
WWamNK4Y38JtGVEk/Pp6LLCm83al9cexpfkcvHUSwY4pMvBlrKPQq2sXiZKQ
2fnEQu0sK3IaHGR7/FRBsiaWba92AEUPO3h4rxxemerhTLtFYP8iA500tfnM
9a1cxnsOh162Yh9SFtFlYxt6HtrENzg10Jj3m2mg7D/65uPI9WycyhlmrsPw
h5dqgxfNwJ+ggq81zrC22AC4b2CN0ebZnFXfcmaushUDZx7nL5ToUnRPJdyI
ygXz20ps5povYJbVwxZXn8IjrxQx/64hHrilyfzWb+c+HLKioB92WLHpFrsi
LYM2H1PZx23VbPP8DmGV+ygUbZEhi52/YGR2AJW6PIcL3SeELUoPWIltN1tj
PImkyxdRc8wC/qtWNfAOqZjdnsKJF//j05rPbJz/UgweIi96sdqTW/5kAD4s
EbE8Jwl0DhCjgd7XLP+CFRum+5I1PA6F1twlVKRQDIHHHejMlnhssLIl/Xg9
0th9EF0zu9lBTSW88DAa5zZuwoRNV/gSXz2KNVZh2Vk72fjlbsKM2kqYOHUJ
HylSRs09MZzexjUwImoICXpciQ02cBKP85h0zmK2rPQsRWr8YWrZuvSo3YIV
xxyiC0N7hOL7L/BQ2QxJxfmwz10fJT6NxBqXO0ysWwRzA85D/5ZkNi94A8gf
TWeZg5Y0rFyNFsX7Qrb2Ld5s1khK0t3DGThPZg5NxnT2wEFm4fWYspTWM7V7
paiEpwUHpGfhkpexWKUfi649Ydy8wXe85no5Ov9yIqO6MbjuixQ9WHQOs9Ls
8Fr7BdIwkqVg24mQptCNI4S5+DQjHk67CJmH23TI+SsjMphfjGn1i2lLXzUb
KJHGxPu+7ODgOBze+QaGNsgiXb8HPgvHUIJmITo0xMBpfVPyFJMWWc+/gANu
WfR9UwXfYGhJtetUWI2RL61PksB1rsM489HXUDFlGuyRc2RD1Z1hbmAgkrEX
bXYIwgnC/2DvEA06WP8XGvJf4Rz/ATh1MZMKJiRSzO1oGKp2kJJ61Mm/fyIL
q1LnNTKQ7loZYnnuFd48OxJXvzHDjV0byKx/MnjW1HB6DiJ4vvY6jPFqZg0l
C6gmSJ7mCOLY8v540nZQYGu69uOErHU4p/8+U/erZbW1U5i70SgKi7nEHEfv
xooqaXRzHEdpPoZkd1mOjdw1je76LccPk3dRYKIxSiy+zJx/hjGftJ2UmfoX
2tpLBf9NLODrN5XSzzxiwpRjVJwtR297mikkZQq5ZJwAk2QVVLU1BcHzOrRN
9CZ6VUO+juuxy/MnJGk9h7vuT6H6zwPh7TQH2lC/HuffkmXDMtvYuPh4dvR7
DF0OixQsawxF7eGRqHE8HY4c1IXnT+UxcWIHNYyXBb0GA2p/WsHCly1FJ93x
ZL/wX/z7EqHXA1OSFGrhnUUe5F1WBLUP5kDX033M/EkJLzjoyrXjEbYuNIYu
TElBNn0u6mz0xU9lTrRy/AcujBPHwtR15LBiBiS3R9PW1S9hb7UlOW89Av2j
41Fz/iRcnLwQQzSTqF0/EiuPJVKTswFsc5Ggln9r7co5FfIbz9G0y+eFZUV6
TNpYAXeMS2WWT46ztLk19OCeC7u5uwg0H5XgvsaTMLl4JZZrnbIL2p5K7oOr
YOkBNV50LZp4lbvg3e+K/VcF5DghBAZNnsK7H/OZos9bqF38FAuivHF1UjMH
MZeFvQ6TmfiS0ZgrdGKxYpK05fc+KNpxgVIG7nFdq55R0dQR9FFVF1VXe9CB
i87cnodX8GhRHzi1bYEg01F4rs0Vcsf281qxydg46yApRtZy5WtjSLmniI82
tqCS0gjBLJ8hdG3RFZr+MpbZXpcU+Sm1Qo3xO26BbwteP+6PhS6X+NVcKspV
5lPvLHPUr/rFZp+6yWJOu+FRbhWxjnY+v2YUfZhpyBKXjQHJbXP5L77+OGfb
EnTb+q7Wzt0Tf3r2k7SyA5eTqovn3qSxkZ9O4IpwY5z06AAKcprpZdx+kCid
Apfk7whPiLJwxypTXLNiFbpYFpAgX1m4QEoDzTrbwDj/AJmJ94LRN3NqSw1D
z2WyosqSs2DS5MakfKpQ2+kXPDiYxgLOaVCjthopL7Vkl8YoMlXDPSxpWj6T
SOnl3I0eUErGLCZsEmM6gVE0Nigb14rlwQvRcMzdMRHOi1TwOB0m051fIMJE
mS2epIK19jK4wBnx07Z8wQ5BFmhc9+ftq/aijpEjqrn3wpD78+D2obFCmSPl
XH5dA0g4pfEC1Rhm8C6Fv9BwnG/YoUAu7stIVnwzydv0cDEZdyFdditl37On
yMQh+CIphDbdMrTXGnsMfLU3QVryKbCWnUFO2Va06l9PehR5UoT3VLSblMZO
O87BIUfyWPicTeRYYYx6U6exnQHhZGHfBG9WTEN9H2+k8dYglW2HWkoHIWn5
K/bplyxtDjfA/IxkeMgWY0kb0pDgEdBX/wy8agzofdAJijyhzizLFrLyFxtJ
V2YMn/45mpUFfeKig5Pp0NNM8qo3hMDg8ezD1e0wmKEvOpmRASurrRH7zvKF
pXep28+ZlilmwKGcYlCIP86+7kmAlKhx5N8Zw8ddK4C27TwJxo6Dmpa9EHa5
m296e4cNNXvOj/o6G+vGKZDF361MMBGwPX0hxd0oB0dcQFdSrEi37w3oLzkh
9A/Jo9L+csTjjWS6yQetKibQrZYqnFpYwTZ0L2M/Z3qTgnS34OLtZrYc80FN
LQVfif6D2imSoqLUnTDx5HWWu7iYLtaOQFmjq8wnrJyv/2Mk+vp2Gu6Os4TM
tCgmlvMY8mXFSKSszQ9f2QND5OrZtrpKqr/4nBa+cUMjS55ZP3pO5fXydDF/
KSpEy+NvS21moFwAQ/VN8OXK03T24g+mleYEDWpVtPiTB2sf7kktrz7Rqi0l
8Ka+STixoILuGGjiac8ItlBiCJ13XU51n/qg5j97zGhRo19rYlmqfxSstYmF
sbLl+OrYWmxaGsqGD0rh2fI5+Ko+A4tkq9ka7ihaphtj0LDPzCNvCvv16QPY
vOoAr/OHIUjtDGV3V+LF0e6iDJMjNLQsCTUnqIrKKi5iv4EXhvvnQERLJMnc
q0Qte1VaHReMXpd1MbnrJIYvaofEMbb4VsuIuBBp/nioG7nE/0J19yXchv44
WPrwKg2OeADVDf3QIXoPmUvtSeXjUw6cVGiYWzyVa6WDw5AmKoDftW5vzSi8
Zi46KT9gKcpzSFbCGzu0j8OGU/2cZ/AY6peoES5e5oXP5/SxgCw/u4KiUyDY
vw0DHqngaiiiPl05nLo/n3bLZzOdkUZ4d8/1f9okinW/+Ary6U4sJkWJDixz
gb1lB0EnLpN1hTfD9FXuoPfmDBwR7COJ38PI4XUEtu/eQk+mjqfa2CgakGig
tu3VjMXb4x79MrYsIhHW+0jwOgrr4LGMAt0+J47fv6/gbf4uYHs9b4KzMoBY
/S8Isgj8p92uslyt2+gy4wTX9uouhH3r57+YTSGzN0JqLQuF21YbIGxCIxd/
7ARpmefjftMqMD41CXVjVpPj6Tncwi33Qa3HCeelyOKD0SmQN2BN1wsY3/j9
EEjVtfxjrSMwMN4JLw+zIctn2mRduYmmOcxmEQuvswW/LDB41mn2XLyM0o1/
2HnJD6eOlnSWvPEod/rXcl5wLQKWntHG9X2vWFaUEebqPqGBGUvZJPOvwhmV
W2na8tn09c8PzqRVk74fjWHcTCHc61hqfWrDOOruGYMmKx3ZW7GZ1K6Siedf
icHhpFjWafOe1jSEwQyuFe5Hh2KlVhRu8ENaX/UU7uqbU6K1LSq9KWPVpyuF
W8Mnoa28FljIJLAy+VloPP8xe/RfITukNkCu9jno9zOBL777hqbPjsDTVSXo
cHAxPWjTp7snMiiqOob011ZCct1QNsXdgUx+lGG21BEomzUIPR996HG8NF6N
TWX3h9uQsYyOoEcqiorOi8FtyVS03FmPKruVcJTdQ1bUvwZ0mvbDyVOq+O3E
Raba8JJ9874Ox4YegFbBc/ZqayotiNUj5UscBHxwpSt29hizrwLWccvIdKwz
pn8vIrnSKZTyx49GJJ4VsthsUFizm45cEKc3TVfofUcdtN42EdntFsMMyWOs
pzkZY16oIHy/w6lmB6KXyRLq366KhaUJuKVewOyvtbBbctkQsrOD+X7cTvXL
b8AntQh+ttJEGFlezUSF8/HjkWPUbECkZHEWsSmKXbFdw1bfb+PslmYA3XaD
175pwuyVpnhsoS6L+NXItmReo+7P94TqNtZgfO0Ie+H7nTsbKkWHsiRx78AC
kGppYPtz+ti2HUl8U98QrPx6Ruhy8y5z/aJPh3640KgiFeY6s4gLzJRF47lR
sHT1UuaklMk6le4LTGgXDTHWZF5ZIfB0nSdLOLkBqiR94O43EYz5q4YTy0RQ
UqaGvSfNKLEqBxLGHMJTFvWgPXUA/Ef6s8M9Tcz7rwdlnfFg0X+fAht9i/se
9pcFRivwt8LNyET5BM18sgFvPMhlI9crQtJ0a5qZvQ2+zvgC35I5zN+RD1en
WbOWcfrw5cZsPBUwHty2aSD6uFLaf5G0uz8Ip/1jBs3J79icnHHEhvqygjB/
2nHyKD1dlsM9e2dNG17uYRsk8pjH/E4ctUEN9Y5K0ND1dnzf+hqq2eAFm+OP
Mul7w/GowXv4VWlH3op7YYO7L5v8OAhHNkhS6cCuiz9XLwbrLA9SuqdNdcvk
RZc9h9Kg1TJcZ/KbK0/ZhuMEkRAbGA4q8So0t9EU/T4qkqWDF3YWauOSRddo
2b3XEGP7iyXOPUvCTyNBMKAK58YHCrcv0oX4HWK0wO09V+LfzH29YcXX/LnL
JOwd8f6BXE4xpJ+df3ccrsrZotWuAjI8Mpbbms2Rt4YAV+WY4qfcHYIB3Uh8
5+yAGy5n0JrpJ7HP5Re7M9oLtbsXQOaJS7XdyY9Zb9p4akr2YMlljdgw0AvF
u4op/EUCJpeuR8uEDdQoc5py1HvY4OJINM9T/6ftG1nB1KP858YxuLtWyKYr
5oDyszQIrTbES1mPOJ3V58Gt/whdtzaD3qlPebdt+7ihV3VE7wdk6MKxyVSX
a8uHSu3i63bYQN5iEUi9C6OWlAQUv0RoNcWV9cxZAk869ZiScydb9iWF0hLM
6aPRTqazWxmNc5U5vf2PWVZnP9kmzeGSL1bTiDVnaYxMHNc2rxKKNf/Auk5H
DJh5AEIlxuDKR6W0/hTgW8tMNitVjlTk48kxoRNKY/M463knaOtOdejYUMCG
nVYTlY7+RztGYjTfNAVvPdTACZp61L71KkpEzsGfHn/ZqRkNbMWng8zfTRYD
I5XZv/lKs7zv0V4HJdzqNlY0qjONc9t/np0e+xI842zYe71QfHs/BAd+GILm
FA/WFTeE0kKjSdJ7D435+xY0B9RoWu8UmpmRhw0hX0HY6AYpSxeRpHMGlZv/
5ZLdj9LwGUsxbkEra31ex354baNqfx1cY7Warm48yLd261CMtjj13Jak7pPe
TP1Op1B5632+rNUX51i4oOWqbsjx0KfJnRn4LtGRefg9J8ktBdzysKH0fJIH
11pxDLY+UcQvU7Vx38EuWJu9mWjXLHh26xmNiDRn0QWHMccwns5SFA2x/yF0
cJUXWYVdZHO7EZhnPr8rzJSWhy0H7yOzBFk955m/10x6sFQWTx8+Ty7DpMDI
pRXyRs2G4nZ19l5TBPrbBSxzhRNfIEzDuEFldNN5zaqEs9nVh2NR01Icb8iF
otmxRjaYVw2rvYrov9k6+G7qAtomOxOeuRTg5YJwulh4Bd+6cPT0xVG43cTj
zLAou6eTJ5PxMxUq9NrI3ozNobtKuZgkHCJqqz75jx1DMHnGeHZ88T2oeJvG
pB5GoaVzFIw2/AldMtKoZqEAc+VXsI4thQK71ypo6i5LjrMvwJ/bs7DucxRz
hQVUbTgKIy4o4fn+OhY/JR/XhtdBsqse2mxL4A6tS6Pylr8s2vw9UypXZatm
LqGlfDMbrAjC2xVjaaXea+GzG450deVGjOPW0Olz9uyiVwpbmf6amc8wxs7y
/3B55S/mYG1DurtOMOnlxljxwoiaPy/Dxx8i2OTQEuattg8mW47DbVc84VFD
Ib/0sh22Nj8XKM1XRiZ2mPQ/frfFRxwMCy7AML08sgw8g3GlQEPMxLnz3UTq
Mn9B/Gk88z0/GXPPHIPAJxfwUsRndvGJG/4fzWYM6A==
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5459999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5459999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.05, 0}, {0., 13785.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{37.50666783426742, 
           52.332901548511536`}, {-99.32799274165829, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13785]& ,
        TagBoxNote->"13785"],
       StyleBox["13785", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13785, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 537.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{51.832901548511536`, 66.65913526275565}, {
           82.02400202377434, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 537]& ,
        TagBoxNote->"537"],
       StyleBox["537", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[537, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 649.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{66.15913526275565, 80.98536897699978}, {
           80.49083298590233, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 649]& ,
        TagBoxNote->"649"],
       StyleBox["649", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[649, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 413.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{80.48536897699978, 95.31160269124389}, {
           83.72143917284693, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 413]& ,
        TagBoxNote->"413"],
       StyleBox["413", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[413, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 486.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{94.81160269124389, 109.63783640548802`}, {
           82.72214149637678, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 486]& ,
        TagBoxNote->"486"],
       StyleBox["486", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[486, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 406.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{109.13783640548802`, 123.96407011973213`}, {
           83.81726223771393, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 406]& ,
        TagBoxNote->"406"],
       StyleBox["406", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 436.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{123.46407011973213`, 138.29030383397625`}, {
           83.4065919597125, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 436]& ,
        TagBoxNote->"436"],
       StyleBox["436", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[436, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 298.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{137.79030383397625`, 152.61653754822038`}, {
           85.2956752385191, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 298]& ,
        TagBoxNote->"298"],
       StyleBox["298", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[298, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 467.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{152.11653754822038`, 166.9427712624645}, {
           82.98223267244435, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 467]& ,
        TagBoxNote->"467"],
       StyleBox["467", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[467, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.4, 0}, {0.45, 430.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{166.4427712624645, 181.2690049767086}, {
           83.48872601531278, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 430]& ,
        TagBoxNote->"430"],
       StyleBox["430", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[430, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.45, 0}, {0.5, 748.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{180.7690049767086, 195.59523869095273`}, {
           79.1356210684976, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 748]& ,
        TagBoxNote->"748"],
       StyleBox["748", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[748, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {0.55, 399.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{195.09523869095273`, 209.92147240519685`}, {
           83.91308530258094, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 399]& ,
        TagBoxNote->"399"],
       StyleBox["399", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[399, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 249.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{209.42147240519685`, 224.24770611944095`}, {
           85.96643669258809, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 249]& ,
        TagBoxNote->"249"],
       StyleBox["249", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[249, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.6, 0}, {0.65, 199.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{223.74770611944095`, 238.5739398336851}, {
           86.65088715592381, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 199]& ,
        TagBoxNote->"199"],
       StyleBox["199", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[199, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.65, 0}, {0.7, 162.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{238.0739398336851, 252.9001735479292}, {
           87.15738049879225, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 162]& ,
        TagBoxNote->"162"],
       StyleBox["162", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[162, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.7, 0}, {0.75, 126.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{252.4001735479292, 267.2264072621733}, {
           87.65018483239398, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 126]& ,
        TagBoxNote->"126"],
       StyleBox["126", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[126, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.75, 0}, {0.8, 73.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{266.7264072621733, 281.5526409764175}, {
           88.37570232352984, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 73]& ,
        TagBoxNote->"73"],
       StyleBox["73", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[73, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.8, 0}, {0.85, 94.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{281.0526409764175, 295.8788746906616}, {
           88.08823312892883, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 94]& ,
        TagBoxNote->"94"],
       StyleBox["94", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[94, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.85, 0}, {0.9, 86.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.3788746906616, 310.2051084049057}, {
           88.19774520306254, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 86]& ,
        TagBoxNote->"86"],
       StyleBox["86", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[86, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.9, 0}, {0.95, 69.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{309.7051084049057, 324.53134211914977`}, {
           88.43045836059669, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 69]& ,
        TagBoxNote->"69"],
       StyleBox["69", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[69, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.95, 0}, {1., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{324.03134211914977`, 338.8575758333939}, {
           89.11490882393241, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1., 0}, {1.05, 2397.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{338.3575758333939, 353.1838095476381}, {
           56.56244478768552, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2397]& ,
        TagBoxNote->"2397"],
       StyleBox["2397", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2397, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.07200000000000001, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.05, 1.05}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9, 3.8692115670096397`*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 59, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1806, 53, 28365, 632, 313, "Output",ExpressionUUID->"a8160bde-1394-4ad9-99de-aba1517fc23d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30208, 690, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[30437, 698, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30905, 709, 127718, 2374, 652, "Output",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],
Cell[158638, 3086, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167168, 3293, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[167488, 3300, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[170247, 3370, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172059, 3416, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[172417, 3424, 5972, 94, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[178392, 3520, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[179840, 3549, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180972, 3579, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[181330, 3587, 2088, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183455, 3630, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[183914, 3639, 2099, 42, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[186038, 3685, 1078, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[187119, 3706, 915448, 16062, 495, "Output",ExpressionUUID->"bc19ba95-066b-4c46-8850-756169cf8b3d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1102616, 19774, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[1103126, 19784, 923, 16, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[1104074, 19804, 1242, 22, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[1105319, 19828, 3508, 71, 87, "Output",ExpressionUUID->"230c2df9-ba1e-47d7-bd21-95acb25c95ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1108864, 19904, 1152, 27, 51, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[1110019, 19933, 3338, 69, 110, "Output",ExpressionUUID->"6113b2da-bcde-4b77-866b-965453e7bdc0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1113394, 20007, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[1113971, 20024, 541, 9, 44, "Output",ExpressionUUID->"1276783e-9e31-4a52-9faf-8696d0400c71"]
}, Open  ]],
Cell[1114527, 20036, 424, 8, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1114988, 20049, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[1115425, 20059, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[1116130, 20076, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1331814, 23769, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[1332163, 23778, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1645827, 29403, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1646198, 29412, 377, 8, 67, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1646624, 29426, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1647168, 29436, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1647515, 29448, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1647799, 29456, 16902, 495, 254, "Output",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

