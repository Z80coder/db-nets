(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1033225,      19340]
NotebookOptionsPosition[   1028169,      19246]
NotebookOutlinePosition[   1028607,      19263]
CellTagsIndexPosition[   1028564,      19260]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardenNet", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardenNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9, 
   3.8690237136048*^9, 3.869041334767592*^9, 3.869042729449026*^9, 
   3.8691052086388483`*^9, {3.869119717935349*^9, 3.8691197334997396`*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"74597de4-2dc4-487b-b151-4a7edeb6169d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076105470534810197118379094598868411612764393858557893032], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076105470534810197118379094598868411612764393858557893032,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"f5e09500-4f17-4b40-ba88-1e46fd210c2d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"128", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomUniformSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomUniformSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}},
 CellLabel->
  "In[379]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[380]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[381]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->
  "In[382]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[384]:=",ExpressionUUID->"c3acb428-ccf0-4ee4-ad0b-b2d55ea522ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->
  "In[385]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->
  "In[386]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "4e342d86-6b30-495f-b7d9-d6fcc5ced580"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"96.5", "1.0"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    96.5317919075144459384`3., 0.9850952162848064519`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9207614049040109272`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0147020634737738964`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.8913572779564631343`3.", "\", \"", 
                    "0.9501655318515587201`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.8913572779564631343`3., ", ", 0.9501655318515587201`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0825543371966008382`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0159666106131014923`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0506211159703978536`3.", "\", \"", 
                    "0.1144875584228038229`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0506211159703978536`3., ", ", 0.1144875584228038229`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.17`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.54`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLP5y8oo/Z7Z29/OlWRlWXt/ZxXNtWyCi8
tBecxfJSQfqt/YsV9ZsPn3hhr21z6Lbi9Ns4zZnwZKV41su39p4TD6vZPHtt
f2LOuc7vE5+Sbk7fkT+2HW/tFznO389d/sr+QRBf8oNrD+21Jq6bturfa3vd
23wTjr15bH9Ewn/V7i8HcNpL0N9VIuvcH96yh4UYueag0wDxQYh+
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["237", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "237", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.9793388429752066`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9916317991631799`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9854469854469855`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{237, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9793388429752066}], 
                    Row[{"Recall = ", 0.9916317991631799}], 
                    Row[{"FScore = ", 0.9854469854469855}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02066115702479339`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.06097560975609756`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.02066115702479339}], 
                    Row[{"Row fraction = ", 0.06097560975609756}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02531645569620253`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.008368200836820083`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.02531645569620253}], 
                    Row[{"Row fraction = ", 0.008368200836820083}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["75", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "75", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9493670886075949`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9146341463414634`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9316770186335404`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{75, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9493670886075949}], 
                    Row[{"Recall = ", 0.9146341463414634}], 
                    Row[{"FScore = ", 0.9316770186335404}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02531645569620253`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.02531645569620253}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8148148148148148`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7857142857142857}], 
                    Row[{"Recall = ", 0.8461538461538461}], 
                    Row[{"FScore = ", 0.8148148148148148}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.07142857142857142}], 
                    Row[{"Row fraction = ", 0.08333333333333333}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9565217391304347`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9166666666666666}], 
                    Row[{"FScore = ", 0.9565217391304347}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9916317991631799`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9916317991631799}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9146341463414634`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9146341463414634}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9166666666666666}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "242", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.9793388429752066`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{242, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9793388429752066}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "79", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9493670886075949`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{79, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9493670886075949}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.7857142857142857}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["239", TraditionalForm]}, {2.5, 
                    FormBox["82", TraditionalForm]}, {1.5, 
                    FormBox["13", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["242", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["79", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "medium", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 2, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
v4zi/zKRFnuBja5Nh7ehL7mU/saacRexamU2are1QPNhEQupX4TC4y2YmhTG
yrT9sXfxT7ya04LqgBbs8WqBudjz2zrFXk20Ya/3TMeP7i0YvKMFOeLjD6Nb
oDozGiVjxdqRj8HF1dHoo3MWzVdjsOvGSqzWlaMhx31Q+TgG0XlR0J4Whd8j
o5H0NBoH5pzFnODTWG7N0X/Bi6ASFQP57bGSs6fOoE6xGt96NuDSsizsl9bD
TjudnSs8if3KbjRN4wfGffmO1L11KGtOQ8ih2XhffgeByzlymJOK63kHMLS2
AW6FEmw/+w9moo9E69fjyekemOI7H+0HRT/+p0obgtTo1FZVauiuQneireCi
Poq0N6tQhocv7uipkvkqNbqrv9RFL1CVBn7VozUpqjRSX428zqcib4SY0Xpq
NF25CB6TneH6Tp7yD5pRpN1A0lHdh63xOlBQ3oApn3PYvLBGLPj6CdusHKj2
PkeaYq/u1doFAwtTMrLlSHlPEeymBWCWkwx9rELxIXoyFt7xlgTaecJgxQxk
VU5HXY0rTit64nS0J8rjTkgOHp4OO8MZ+DRnGvar2sLT2VPsixkYEjoDNTHT
IeybgfJwXzKtG8nKu3mi/tEjJtXeiubzYk+cVEL0rTJkpMbgSccxFm8zCYHL
bmOGoRELcGsERkykaXFNLtZr7ejooJ+wjP2ClFQ7rM/3oPjvH/C4pR/cH42n
baKPtacbkcP73jQhw4gc12gj9mRfmrrsMOqQ4TL56UtIFqzFqR05zHNtPI4M
8SWzzN6UOt6ILJKM6PjFnnT9aR/UVsiRlVUfShPv87tbMsyzkvChKZcdEK97
nr+IZovz8BicjOXmCfBYkIw3usmYcdAF2dOSEDvVCY12SZjdPxmNx5LQpZ8o
/g7JuLrDl0xee0DTJxl9mgzw57cmS67Ig6HafYlvrS4d/mZIvsZGlGEbj76O
dZhYFIaLuYY0ak9v6jVBPNssJewZ8wm3zhrS8OwovBfzYrqYb99LJuKMbjsb
JPphsOi+LytKEKdVyZI1E9gm/xJs28DDUeTf3mG3cV1k4K3bXsDA9AYqezci
f/sTnHa/i/2vTCjnYzGMI0tQtKUYbj2GoPcQd+TrcKQ6YLns4vU3gqLpJWH2
XI6exE0S3pfeFGxljkKAhUSmmC/wz+dG8V4jJsgCzWfytt3UhVthG6UnHFfz
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
ojuS/g86viOg
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
ptZ29aL4cQ/e5ZViY28wRr9dh9uFIqhpv0a8wz8cGGJB52gkYZnrfWwYWAnL
CZWYFVWJuqOVCH7Ti9Oh9zH6fCWOrzLH8NyFOPvkPjLb72PzektaEnUVq4ru
YUyZMRlgUom5sy2h5V2JqxWVOLpFTHP2u+DhyyX4fN8eYe/XwnWMGww/TMRU
47W42LwGE3+7Y0S2G7YvXgu4rYHq0lXIP7sG/SeJabzYHZ0jlsOxdTnyBvaH
3vQROPGnP34oHMIB5yNI3BiAczOPIMS5hxypCMLbiY0iZ9Uj+G50BPr/7cOB
UYHw/udNnYwCcbOOoxa6Qei9L0MPV3GICQnAertALJ6QK+JER1C6UZa4pLyC
/qAarJSLxMUT73A7gaNGiVpYMjuQVBe3YF6pEXX4Nxvh7tJ3bxtJgWwhjJ06
oDRxIe3zvREv5CeS1Rl/4PUhCLv6Sfn9JZH8/HKWZVakS8S28rxf7GK+/YoD
X9brx9KuF0s6GxT42e98mKy2nTDpeaEw/D99Qb/7geTdQbBTM2zYph0zhOqQ
SD6ynKMTr0/ix/QLZJ7D72Lb2nJUzPyCFxp3YWr+G5oK7eShWzlijpXj9507
8D5djuS5d+CXloKPw/yh9uoEqKgcS3zLkHaIo+ujErF2UzmolLNUTn8lzZrr
8Hq4LCnZ4IX2yyIkJ63DZroS2pHrMaViCWRV1yLuzyoclrKqk956+CTOx/qF
iaLAnpW4ESeH29HrMHr2XGpvWEeKY1dB+FGPUiGBZx7GTH+Yq5DSu41dKghm
HqkreOegm7xDUDF/PKWY37E/ljmd4ujaNYmsJPW4cK51KrXzUhLkTmZIaq05
6vbsFz/b3lYIf3+OPbsTyersT2OC/Sk83uWAnaY9iJ0RhZVTT+G+K0c1t8ej
5O5ZhLkewcN3J5HiMRzzehKxOjgE71xXIn1WNL5O/kkOJsXDO/8U6q2LSMam
m8gYcIYf4avG/1z2jA2cuoptHrSJaVy8xKu8nsvrb1dkTqIONnP/Nz5vfDoz
NgwSsvrywoOAk2xDgJhOPmkp2a01kl+woJk/trSeKeZrskv/CXy/L+pILTSD
8zNzqGiNRNsQYyzJN8djj/E4Md0Ud9ZIWVvVDM+XmkFFZyymLRPTge1jYZc+
FloDOPrrz3CwRyPQ+8QEJ7zbRO8TR+DoJWsWYDWWOXleZ1gWysL3LeQvWe4R
HBZbsKpJboJm4QPJQq9PvOvBTH68UMGnqIhZa8scvivohySvnx+f63ubfzjM
hr+zTkwVl4t51yECe3P7Mlx1LyPrRiwM+4qpIOWvZWcvY0SBlejOLmDOwnJS
vfYydixbiY7uy3ixEoh6dBm1jy9jufxR3Hp5GdcVAsmpg5dxZ9Rnovf4Cgwc
RNL+44e1rz+jLPgQzGs245bUG/byB0DGbsPMKXsRLpmEXOt9GGe7H33gi4Ih
HI2YH4bCZ1vhUrAfCXIn8LtsG4Y6GdLMy/uR5S4raG1ZTKsqThe82hHG/nX2
Edx7trNlns95mTVbWUWRtbD9wwJh9rxgXoUW8aI9G3knv0jB5MIW5lc7mv9u
XscspX144SVZ4ckSjsbclxf+6o/DldghOO3F0bmH9OGxXx+uuSMQaNof598Y
QNFKD68G6uHt/qFwezoYKTsMMP2kHgZdH4EpigY4cbQXH6uHwy5nOIKn7kKU
bYlosKsxNZoUD53n30j60jOw/pWMRVHDsWGcM/E9ehLO+xPhcTsRgRGJ+H3v
LOwiJtPJR+KRKeXorTtOYUrzGSSqJyK/PQnqsWcw44mU5xqM6DatLzj+6jMq
ySkUVb9AQ9NAZGrewZatL2Fce4ck9ZzDMfEryESuRcT0QmyUaUCIzUvkR8rg
wt7BELc/x0iVFiRGVmJZJUeH5x3ErGn9qIXbTTwbr0bb96jSa56VGNiiRytP
clR1Yn8aFaxN299q0WRbHZpqlofRS+Pg0CVPHp+7hhwjHWp2SIu2JWvSspoL
GNZei+xNXUisbkOOOUd/L+pFtZRvrG6W4rJ2JzZLe6LTkI1QX/gHgTOvYsD7
10QjtwcK27qgbvcdG4odUHetDV4m6RhyvgPkKyO7zCvRHHIEn3u6SWfiEUSf
CsWvbo5WHAwjRb+PAMc5TC44jF99QjDsexwm3w0Q5Rf3Yo9jMDzeiRElf468
c/VGTo082VH20iag+RjiXx2BEBJE+i92J8/vHSTZbl40b+xx0hYdTXoiNtBz
v06SM2c2kfr5kUTu5xHivd6TvPyykUzaFEZsz+wnh/RDieE9jpSmxZFnO+cS
neERpHG/mI6w2YzwUne8OaxJJ3X6QvTQB+VlLlCeuRlPHP6R+C5fTI3xhKqd
N1qLfXEvQkx1pHUR5+CC+xvWIUDigyNHvPA1cDP6xfoi4QFHbX51ofysgJVb
/iJwaSjkTnbhlVMj1Ir7TTs4uwv3cv7g04sOXNvvTmLNGhGzPwlmpv/h2sZu
7FUbh0X//In33NtID3bDO3kZ2jdITDsjrrB/Jw3ZN9nBrDFbQYiNUBSMToQz
pTU5/Pjgn0xhhZid36rKStU/8KqlH1jGFXM+QVfaw8vE1FjnMSu0Wc1kz/cR
Av5e4A+4ZfPX97eyxD1vbZ5lZNp8rAmV/M3g6AwZWRvJsgki4w59UYp+X5FL
0QXWbPfB+tz5Cr5Spa9oqtsBVv5lqU0D+WuTvuynzYfxEdaZN12osttFm+OD
nOnsD0OFD7EEP8Of4FtoHVqSwsj82kys3h4GiDh6wL0OHsMLoO/ZhQ3zgOXm
dchZlCetp93ounccd95r0Gr/OqhH1mLckDpUHezF9qdPpD0kiKl2rxSejKvn
1zWJBFM/a/ZkjaPg53mZf9JPKNBKesvrLlrHX3GR6s61rezB4DkFz7dx9M9N
K5YW8IupPS5izpc4+nKpvbA6o4kd/JTIAg8rUvFkab3M2od7O3/hzUFFuuTE
L1K7R5G21jRD6fNV7F3eDZnry2F0QJHK/pShWhEPoLCBo/whRbpKur5s3HPE
/HmORul9vPT6vvwaDktr7PH333h7NJTsn7UWKxrM4Jt1FbsUTmPn7ouwlctE
cdNtEirJwLVHuRhRtxuzbl/EAXOe3PesweMB/8iz1qMI8buKMl0pf5pxtH2a
NJ7muuxigrXQdGg2rz2ng23tHilo31QUHg1bzwaZDxBWJa1iRs3tbPnXIWxP
fR1zH35SaIhIY217+7FpXr/YIXlToXumVLtaUvmoeBdm5NDKsivT+C0TVvKp
S8RMc70m033hyoKvV/AediNYRLsiG3tqB5t+RIkxGSN2TtaPF62jzKLSl38z
2IRf3/Gdv3lOTPs8L5Kcyo9hmzZ3gn01h6pjJzasaoeX2ndcnfsF30f9w/Zj
XQiAJr05j6MBBzqQkLyX9C/YRl1vxuO66IH1x8H/obZfPgZKa+Ku3D/kP+ol
j9e2I/NFHX9GfTkftl5feLF1PpvueIGp65UwhUUXhbzVYsnS6hLWvdCe37NN
lg2KfM1UvG7ynsrmLOKWGvPcOoIPvjuP7VzWxIuImPZdL+ETizexScfukqyj
14mauIj8uzYDS0IYYXMySfiE9WRsxQ1iEfSItN1k5PQZju6zfEYuBf1Hjr+v
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
VZTVqu8SAo9pyxpG6sr26muTnVSNn1T3VijXbOQTXOVoaYWv8MJkIbxeTEbT
rxmYcGUImh0Y2r3cYLCmD9pWTEHMbxesZpPgbcaRxcEpOK49HtN/izPo6DSM
/TcJp7VckSbm2fkYVwS/dkbf2jisurKEXmWfgRAbhVM2Eehx8TwKxRoVPDPZ
jcwLuPO3BiPH78UEz/MglUgE/YnBFKcI3FbsjaHitTSPDofRmEj0aD8P+7cc
nZuzmTl39BSM609kr8734H936QjKLn7kf9lJ2BIi47f4V2cP2DBQ0Ppuz9cP
PMXXJP/jPwel8gPqbkiHdtUIfSZN5G/atEu3DCnldzplSu/P2ik739idl+rq
yJ6rmsjO7irlH1/iqJ/zEf5q5Vn+Vw7JSv33CPbpudJ8+2tCm9dqWdZKPrva
dIbwbyJkFjuWyxyXrZUd3tSPv+q2TZgQeVLYo6AruJ/pJVPlXyNtfCws8wej
/ysjZGqEsANpI9jIG2Y0KzWI7f+2lh4vWYCjahdxY0Ekzoi+k3/cgpRc+0M+
vBdtHLaPYkcNJGUHK+q6M4C2D6vD4fuv0WjuSkqZv/DtjoSUWsZAcaw+9Tlx
Bt4OzrSn3JWGPeHIxeg7Kr1ELl96FHs3vEGAWxzjy+OY08YxdOpJJttvO58M
bUXHVCvFKNfnuFlwmLnNmoIM80g8m3cKssIU/J2Tj20P76HtVwHm+DaweQ+e
Qe1RAc4sG80OeCaxYv18LP9SgAEie+offozzots+2/0Mi8XjT+RxtEInGedr
khB75hLUNyRgRmoyEz50IXpuIlqq46DZlIy3ZYk4a5eMZi8nNPROROLSJLQO
eMLaMhIxRMtIsqYrEZdfJuGjZhmGPtMmwz/fJSM8RkgyF3J07bk2zTZMxcqJ
FyCT94LaK21Sm2FNVbIB+MkUWER3bdEP/EF3tcms7BI7U6BNV95oU9Nlbbqo
0Qu1UkvkcuVM9YWUvfaVsRKLHLZwicg9RneY3bgs5jFFyvZfvc/UZLdZzbA2
Seb5XKa1JIcZfE9jzzUEFjU3m0UlCGztYD9qTL7FVPvfYdZLL7F7x7SQtOAH
PngPFFmiDa+ndUAtlEf06H/o26MFPxeK7ruao6lvHKGxtBT3po8h/R/t2CXe
mkRvyK1aiZONbzFwVBQmRHFkNqwTf6J1cNe1L+SnqlD3HD1cltOAoOJHMVv1
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
NPphHcLf6e/JX747SNp1XptPqZ7EPR9Wyc0bYce/2xsmHWl0krvvV8C5qR/g
Si4HSKuL27gpO39xjpFavEViIPdu03reruEkbyPw9pwOLX6jTK5Es98/XB1f
iY4/n/Gtrgp2c1oQr9eC+wktWB0qpli7Vig0tyDzmja5BZVAJ28ALnU0w9ep
GX5W6vS0vQjaZecweVkLxtQ3Q2b3Zzz2miMaGnlAFOg0hCzSAkRWQ7xE80Oj
RM8u6NMNEoucbn+Z7rFfVjR++jG+6fdprnNUiOgm+ohWJPqIEhXZjLcJYnqb
NFcUauZgrma7VPTlsR9lyW2m7z9UYZvSBzWf89mWiD9saZEOtLzVEeugikeb
1DHB5TdTmlXMPkRNI6e3crjXuJyO3lPFcsd+lPyrL279UMG+5l7w26+ODct8
qc3HRqQYoUKOs4T4VLjAz9qH7T6vSrrHVWli0Dp8fZ2M+tf9aWmuCi3MVaXZ
kYzWZSiTgZkq+bxpwJxDynRgqwrd+k+ZVo3vTfN7etOY0Vr0u6wETs/CUOgu
FblMq8Cu+YL/XvYZ01zLMWFZPXKVFeh7/zf4IvmMv7UFqA+9iPkvv+Cf1jiy
PZQL509vceXGZ5SsLUOqhRNGrtshKdZ4xTu7m3Cda+/ycRfc+LzdJyQbDvSW
ah2v58v7ruRn2A7g/FTT+XLNaJ5f/kFqX+zBfdwmyjo1sZCf4rqXd40WU8TM
j7ziVi3p4V1VmGKelrXMxYcLSBrGbe7Xxp2edZIrGrWTv/G0Dy/zvUtSW/GA
u1qgyN8ekCox8eX5DykZXFxpGf+hOlIyv/cYPsh9Lr9a0PxL1l+4MvSVzq8O
hOdDMbk7+8NyUTAW/ghCpacvGi5cZr0Ng+Husp7OPfZHg14w2g2CIN0YiJjC
p+xQtRiZmjtF7eOO4MC2xwg7G4DBXkHw2h6IaTG7MC/kLJyULqNR0Puwm/EY
57kAXpHn8cv9Kh6Zx+LfjXMCMws+9nYx8/lyAXnrLKFaG49FehdwOlBM38es
Yw1JNmhkl8GtvYgvOmI6K7GmvJbjrHnBGVZnepC9nH6WWRjHMs9ssNHidWzS
k2hmvC2QrT0dwmLOCDyuE8WOT7Kh+2HR7JmtmN5VWbOGwbEs5EMYC+p1mn0R
aodVUjH2fB2IishyppZSjFBmwXp7FcP7axZe//BHSHYxrLuK0edKMRbKFmO9
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
4GNa1OqjRYv76kHXSYuO+GqRW6Qp/Q8/WRBQ
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    UniformDistribution[{0, 1}]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {512}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {512}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    UniformDistribution[{0, 1}]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {10752}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {10752}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/9" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {512}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {512}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (
                    Slot["A"] + (Slot["B"] - Slot["A"]) Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #3 
                    Subtract[#2, #]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/12" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (
                    Slot["A"] + (Slot["B"] - Slot["A"]) Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #3 
                    Subtract[#2, #]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>|>,
                     "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{512, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
ePdLd29cqgPG7bGfC0Sl7gfCQNwF219eEJV2I4b/c6JGVHqOAqWIhvOi0jca
qE1+Q1RajNqidgG7t0Fh23zoXAtsj7h9X/QyUdv02jeIkuMFoabXfJJ+IZ/d
fSG4ZNwoJoXVuZevwIxGMgkEFm16LRL1XNcE6jmMOLauPd7UajW0me+p2Wnq
eGobonZg8E3P8E3RucZg01yFeB+ygN0mVz8V2Mskv5LP5j3ebvqnPHu/UntO
yBR1fWy5lu907tPQn/vYpo4VBNv/GWr88Fm229QqBk05eCXaNLcTOzBC4vJG
xYSrotLjIxV2iumHw78kAQs189vjjyui69xDIguRJXxqdP97Yj/7kQ7Siu0N
fezbi6dzf4+FQnQ0aPT2+r5gheOeNsuzuKlErwVluysqzcD5OKFJVJqnMWqa
O33sZBM0VPz6fraeFjIKOSidE1K/4p5ToHT428i5/Yd/0bqISE16HO4sSwR8
8vrZv2hnpi/6wuy/6929GUjQEUOVuwcL4k0dDZGWlMXPa//Y1CUq/UbjPAhx
fXuk37fGhQ9EL92ZIuQBHm+vc/eywj1AZJ37AWsoXXzeD283oNIb8A/MdARX
A3Y065UZMf6HYZmodNcoYs7L+9gUnVHi39bg7hU1ykYegrf4baSz+BNEZdWF
20oBCKkZlfbIQKM8kUatfdDjyZQiusk1nUN3ExOA9ZMcpnPzYvcUTCaIW3eh
0/SxqG0bchev3sSevKC43Xe4Dnk6TdGF+J+H+xvcu+ZxCbY07h68+qHR/cpk
wsl1bR9C5sD8G3mJDqXzpGpYnGN/kZBRP3ujMfiepx2ncN+T91hUOogbyEkw
lfGo1J0PDu/sUeSOgMvul2YgBkY2uGvPFRzXPivUzG/aOU/RIe87XHK7dovw
vFY6K2CtsTBXJm+KNrWKHOU6x4CpMUarCHieapzkjyfuPsW+BZqr4vOuflT0
sX8GBLoRAhEJ4DAbLTsE45Oij5OOsS78Fv0ZzMgqHhnUicfA1iHc5bSDaTUQ
oWS36PGHArAFx7sqxwLoQJdTwHQj2ac6CcG/2IkKWb37FYr5+P2Cb09d/TB0
dafptb+Riz3xONT0t9h69y4+RvD2efhwO9BTJ4Zwk98YCQYUrZWOJGfeJDOR
KfIA2bmEz+4CFxBpauWPY3cBHOImhF19Zbip1ZwLZPP6SohVp0vcQ77G9S+8
3t0yHJTzZngj+KuXuCXlgb0mjVY+kBNvtPL93eD+/l/KB25ZgOa60xhqarUe
dzfgeK4pCBe02/SaCHdLMqDjvXj7SC113wYGuts4gvAuh/NkorY4ZTyM/rkA
Ikqsae4jwil/XPvgYwE4VD5O7alKcGDA2H7JeZDAg52K/QxTx2dE/O5ybvow
eDW4wd3SBpnfYzC1EETq1dgGILUPkfrPNw9EpZuRkLc1PheVJqBSVN0bUduw
0sPsvik7DcBk3HvfeSMqXU45Dip5VzY01XxPaeVoXRrsY3vqj2JSCFhoOYoG
0Y0Xhtq72UaTkar137F7QAQykNML3CRBn3Jzy+am7609QfpPz+cmYOUrPIJC
qL0mxJkKgTh3jjIuXf3oB4aiS78yyqn+thscTDxyJg9C6929VhQiw3vX4L7t
VB+bp7UVfF50Qx9YGXvjRKg8/DCIKoejdyBlnFcQPU8BUaIPV+UCmPVPhKJx
DSiQLwQE8/q7Owv62Hq4Z343v/9wjyqziL7TmNgYggcwEMv3OAvljaK2t+Zg
McW303+r7E8Eu3tLhL1KUemB0aoFFuiEnHvohn7k3Eufjc5tjoPm4VyLb7CL
IsIaBOxB7NFt6iuwxTX79397XNFH2VJ46UjzRfHbxo+D53DZVclFF/oXgCY/
xSe+DUJtPkvkKOtu9viBfz1EH+WKTvax67RHpEHfAEgORZUGPQfjtidse/3N
Tj+INc5jzo7E8yUNj/VOQOo39KyRcoFEKa/v8G2tzOSmSZypxcOJU8zbNcZ/
O1CgWEoSmtFmfou99xvj/+RDQd/+scfez4XAo4/iUz+E2d3j8fQI5Lcbj1kf
4e0P43xRKFzfDzKqGOXept0UtXlT3jbbj7m/P0txen/ZTsle82GZYoXARyr8
zhyTf032jRm8KXrlMuXnG6K2DIo5OHUX2c6JNxWfwX98Tx+lzfl97I0Go3Oy
endtC9znAgeHh8Mb3CsvKKs75ysiISesdw+bC7nyxa6el+6D981mtXyF4oZL
TfD6B4kQv3jJgLnsBJIzRFPtKajzt3sKop0VoY3u6PsAVsT91rX7tFpuMBuK
Qg3npdRZ72HcDGJQoHCAVBxq2IfBK5E4Yu2+BYJbM10tuPVHzaaywh416wGY
hRaAnaAB2GcKgCkkAGYnvDWz5GcAI3kDGGs6gHHGAViVJoCFaADY9uSItbQb
AEZ5D2DCOAATOH+fE5RuFvzSupkFYDEMAAtPgdEcXQDMdPGzo2fSAKzbHY02
9beX1lU/bAo1/HsMgPUjsJPfX5lJWWNWf/TMJQDzXw1gt2aMqbNuHgej9WoC
2H8mB62lPYfRkrcDWNHNSaGPfDY8vRFUOxtw6zUAMDcmgE3ZB6NNcAUSDgJY
SyWMlr6FQSe+a4DuEJ+hoDvECSx0h1iHuEPMFk+wkJKns5QXiIWGR7yWHXEd
ww6girGNVC4jCf1PqijhkIgi4x8FH/+iArpfbP3lfrEvavtdMPa/3S9WXtdV
Pv7n94D/10Yi7gnb8K34/+WeMLoAjL7bwC7KxK/9am0TaKbQ6daBPugQ3TmM
FpTuqj4GVyjWjLJQnaBz4fiQOosktiWZAbr4FdzeMnHIsywSewe1iudavGa+
tcX6v3glr1Y56seVYkUCFtNFokXe75QcQHHhM/yPJ7sIJ3HOL9i6z4i8+FhY
+ln/W2ZmFNuMIMH3/o3+/nuxjMlc2lxt7bcaNs3pkkMllOJC5rxN6jfTD61l
HQjIfFVL3ci56K+xiL8vjJMyh09BV5bs1FeWdlDU11bGkZ0ygiwOEXd/sigH
xx1ak/SLEY2q/VychOVytdWXad5iqos/3+/119lseHRKxhtMwIqkaY9/DkBc
yiHs/OLpLDd9Jyz5a99kJ25yGKewWbsNDYPpqIfpUw/zcK9Af7PhKQv83lLA
e0GJxrajme/2nWEONGtboGs26JIWftuJpK++7eTH8A44KjxLPoXfj3ov6NCY
w50s2Aye9FuBeNJr8jKg8ewYRKOFhorGbcbk1RlBF6/gNG76g7LEuNH/qPjs
TMEsvgbHjpuH7kOlrFTfh6o0E+9dsy9kLH6Px9KpqjxAe/OYK2Eci1UWGuhO
02rlnaZMw33/GediRmlfXjWphObWTKMKollcW7rqJo14Z5ElyR6/V/FC0qe9
je+ZVaFbXyS4d4YeJtapFSzk50q+8a821tc0P81/kmxRrruDMi51wbrMKjaH
WqZxE53K5uBnZt+S1fcndIQO5dZiCYdaokWbYVGtdSlLs2jyXaxEizQto8gy
2fAEcV9TlxaX2UmZXq4rJa0iRQkdCrNIkRpU1THfBZmUueXWB4SGxMnbTf70
4wuyiiyFhjElhVLX2ej05QH1DdckR/XR1knsnBJLyoSLMAfU/6BRpurmVWm5
7tVuRVds079csX2vvmL7mxtfJ5sZ0kwjDqhOqJUc1a2xlEyoQiR2AoluhsRd
A/Vd39e6RfPLre8IjanzECVPgZLrKfaezbQYGimpaB46Nn2YRiL5GNoupjNI
HHRpfBGWMpbkcovFLdFyEdOymesM8GO+hRKTrbZmmm00krUni04ZJ8HoRyes
S0cXbEuF+KndLxds57IPlFomG1cR7LOmx2W+Lp1WrlslvPLFzL2TTJPWpapP
u2ZSF1CzqbFVWiVzB5OdEdPEX66weqiPrAawL5ZaUia2CVWnXUEFNGYw4vwN
1toz//HXNUPXNCO+XKWdjl9NZQHvzixk6WUzd2Wha5rCvVzO1i2ROtnUncDx
mZdSFvsgcoWe6nlC2M9gHtNeofJo7Mtv3pdYFk0sN6Q+VHbfjm6ZirJyWdpU
Cnhruq7yoIvoLtqv3jwBHX3tjw8PHPl7WXUn72vXkYeW6j6HN9GI7fSG1s/o
ACBtH9qR932ynPRkfU9u2kDZMfwXzICeWw2yggZ5WYsDfhKh3e5Ux4KwTYs1
3D6H1jgHxn2l4WZf0Z+fxtkiWEE6fKjnOjql5nvEdtSe5BvO6D3u62kZK5eT
Dof13Eirfzhy//Fgh0IklxbRjMexWnov//w9DBlWRxxdw3cPz7Xe6eKd5+Al
BxnPgEJsZfbfHmq6nVYbXLiM9KSh9UbLqnGsBtuEmrv6juI0ecwSedl85S/G
orT+xFB52WQBOgQX0J7fULdAxnug4uBQIzp28uYnNHpOJ288miemxraLd4Mo
xXXx7Ii5Yzt5NcQxhCWn3TeZlLnsMLB+kT9cdyPtxCEbYse9NW+4I14X/Wqz
t6I97jT6Hfq8IRqmGkjYfBRGabrdif/scK5pZxdvKlv5a9L8DYo5XTw6cUJk
/doQoInt3Xq7wQJoyllf5xw1X4v4EbKyKTHc4/E/WHKBQ6Ur2gtFJ19j6lYh
xoJA1lGU4m0aRGdLdyOJobPHP6EfwePXoyNgL0ZKKUUu/TgJ5ohZL5c+mYYY
mAjQYlKqjBcn400lEweU+h0V6FzXEtCSJe030zjLUKEpL813Ayr0X0/z3SgA
BE5VX09bl7p5BGPUSBqBfqZUO4buWqbhlneyLqFzdtIkknPgfrTjPvdQu3Pg
Ybx0BSh1xClttz8lSwz7fvSGeqhc2oL2yeed9BOPUqCagk7e1MJRB0aGXzno
RJr9kFa7BaF2qOdm2oklI0+LJjYx8d/jros0qoiTlw1N/aflZTMFxNmbuERZ
oox3lBDeYCevP3KkJbUOhDc5B25D7BUB9ui35Dz0YzFdBz8VtiOxtQDUBpf3
HBgFL8i7eH01SKP2wCsZ72Y1C1fj1s/DslRdpR7k31XEd/Ie4Ic/kkT6xAGI
+LS6xJOqAxCHZfFXmwry5dI1S0buwV9PMy7Fj4T0LzHGzxycJk6I5F4eBZab
tq4Mb5cfxsEKT9/Hq3lsmtdIONCkh/iL/IDJ41jv7IHzVjOhEBcmz0nzXQsc
TWjNSeMQ9pyTVrse2Wz7Db+a62mcTYQu5KXV4nA9eWmcIFwGHbfTMpa1yKVp
z3Tv70v9c1afXGt2a3VMjXGld/XakFszRFiqLelJb83XbJVzS0AHxB6w19D/
YP1s4x+Xpojr5N0gfN1g2GWSO+j04/7VF3D7qpRLTSYjDb4il85BuN6oAFw5
XyMcQGl9cRxO1eSmcbYhj3GwKecMIq3/kFz6I00wkvjVyDzrhrp4/SqxDG1Q
3Ozi/aS21lMKkOpz5DKaRDLeOcn/46eH4//1p4cDFcQaP3v34M3tiv3SZIxm
/g87WgstcOWNN64Ej967y2aO3oKsc2d6u0z4suXyD7v155ErtBhTx3HELsnt
mk+KG6LSPbAmDcu7Kyo9ceQ1iaZwZJnm6hIbe3dqPjTBmngTsdERe7upR/FG
VDoRbXT0nrgratM/BYWfH4hKw41f6TKtRu30/B5seq0EbQ+YPAg3vTbpAtm8
oTKU2FVC+5seD2Lr3UOmQ+Hmp3r3SzZ406eX7uU2o0eBFeMz7PyBuGstAVGe
g1PaZff/mSXZMaU0eHXg2bNvCoYKDfk/rwDGBDcAPuu4+Cb8h1MXFE797Bnb
p3OfyvDdjMO30Wa8pvMDubGio8H9wBzuqEketwSe1jhmJ3BJCY2kvr4vK7gi
KqUiKruON4raWJmI/Kzoxq5Pif3sR1/BbNt/7j/cGklsioaeuJnYWIxYcvu5
qLQWFeSNolJN1D9mEEayQ6Ww4zJR6V300qld1LZ1Q8sWq2DzDIW9pF0xfFqu
wH9qwJfe/1rvD49emF+Fhfl5XsYdT+6pMZHHf8y4ePFTuGkuA4mrKjbv8Tu0
1Z1zhJDKObun4l/IZ28XxGPKdfNEtG6mUc/cYD4UhhqOT3lpbcu4HpTO2vaI
b/bsaIA2FDLHQkuzBrwaJLuEGhaTAPiV2GftPpHg4kzXBVwAmwJgPnoAVjtm
8UvrbiqA7SED2AKJz1raNQAr8QWwM5bngh9FjAcw37Ep5C9r0ST0/Ujq15bo
E35oiarPIVlIYC1qnSkUHnFlHxGSDmJHBMv00Sf99On0p0aUXq4+1SOcufwI
ng+5ovTPhYVffmNS22me4czV130iuA38ST+5oTyrSHW5dZPqltC4idQA/iMf
DumxEfMSC2vgzzNZhD4Yo4bco4L80ZS6hf8ogqtKx0SCCl1OA58fWLWMxeUc
ICmzvwr+vKDMIP43mprn2CmZTGvWe2nRYYAXSyx2BLNY47gGF9FNy9V4Bmqk
zt/+w6oqsnQ9S+XRNMYl+Wf+5sJJ1+dmU8sEC7nGgQLiQ0wr8QwxElNliEUu
6fRs5lg95f2mPs3NgvXicl0LyHXTPe5rxKBPJBFLiFr8e08CyK9XjZWYllvb
eivTxAkzL5EiIUEuRHfTzM0M2hBufngOO1GNWx7rQLFlCUVDidtrsnG5rkMD
3ychnY4+6JKIER90Edgwv7aoImmQnjJdjQ64mPr4cCv4Ib920/X1yxpI08o0
9tkm+VBTM4oPcrjfAL7u2ntZpeQuyXQxJPVP6CRSuh7KaWeo5+1gVRVbuk5S
zfubKyySBNG0ImMlwee1gwTLgGAPIJhlVqlxFRE8Dt39Y41Vy3ceNZf/iL9M
JTVZJi2bqv8nutk+Flhaha8EXGaq5+xl9cKcQao5K9DCzLeD1iJ4CTq3Ohod
dRKFWUHY2Hm6xyDLC7z5wsutBfgRxl2i9mE99o2YlYJN1XPCo93xltXx6Ex9
f4LeY2WKUP0pvHo8wJyrdgy3g16xTT0JrV5Ts1iQ8S283K4QjdfGTwfv8qsu
EPkV41nhrsae3YqaXi2fkQdi4hWt/d1exJmTPacV18O8YEa70OrVcQiBvjBX
qM69XH0er8aFxyF8DlYvwqf+LKJXEkcRKnrkj41OjUzoVlZvqWIRp45vD8vi
cPxzQ3ei7idb7WJR991hu/CqbDVelSeMVVJX0f/Rr8591Lnb9qktRJbSnzNU
M+TogA5un26dl6aIDduOED5YczQaDWIbFoJXWzfjGOaErUb4V1R/3exFnL4Y
PKXI64Tc7bUo3NTFlTjR0zPYtPbxMtKyxv5bn/BXBUY1EKO9+2/AcsLRBIJz
zEmjZ8ugpeb2dai+iKlcW7MMBxDhb9OMavHq7ZMQ71/0rq+JE5nuRYO3OTVW
fw6vGY8TaBf6FaRndks6YkUsQjpzmzoS89dWQ98N1bc/jIr9b3CGfw4LRyxa
0n+hGZGf590zb6jm+nqUVfQelC91y3iG8JSha1EBJnjjz88RJk15oXi1wa9U
uSDojxmquXNw4ciDGZ/nzEOJXFG7/eOmxIN17JQRJ5Fjxj0m7hE0Vg+F103R
H7WA6htVfREXjVC1FTG18ZzToakuUfTz1yOV4YjRqlG3CNauHpX7G60fWX1m
VI8YUpfz63zEzJM1O07W7MpfSzT2kyyeUt1WXG5KDF0AnLE/1T4lDvHWIdzc
HVlBjR1uXPla2Ii9SQzFA088Hmio4wEEA32hoX4VQ+AIbaU0+lNeyVkOxIE0
plb0f4kDP9EWpzHZR4g48NQVfahO7d191LdFjan1lq4B1Hn4Mj2mpNt/HPqK
BU11ATlTovIQO1nSIssSicpTt5DmePrHlBTGTED3uulqV6jD8Td0+ClpyjvM
rNACYz0rw9BHYGZxsa/IbUnWaA8J36dywPfixOjbNvpJ9hlBHkf8SzMzXVjM
nOWM5DXkTZXcjEVMzenUIsGMvSFHBWt4xgwM+wboPorMpH1PqDNSsyuthC+6
t6S6IBT5gV2VHX3IrNo/h3ni1SZ7wajVx2DaWjZasrfKQ61REnywhjA0yJnn
n1bkvcMPEx1aWwWyO9V+4wlU3+30VtldQ39vk9I1gX4ODdXkvEAAnypMxeZL
BLYvRIqafzkBwqXAOvDOsGwK1ezgFyVcU47QaMpvcqgeY4mW15HVHxPXLh3l
kU4nqeYd8Ks5P1qHp0ShBdHN0FmIClFTXAyq7gz1QNWTTbRo/G2Y/ahbVmgJ
+M7Ru0miImGPogf3Qu0DoZaIXWE99/FqnpZaF81xXXS1VH1/2RZ0EX2H0422
n/+IxSgS3PNnULMgzCAlqRcuPMBhQbwtMhVATJoAuhYiOCHRxbKpQgcW/i3m
qWL9QnN2Yr6f2NyB2Wqb4OZFj+BjTwdjwybrPuXqkS09aLDQjPF2zVjMUwLc
7RlhG/o4PkIcHxKBD+Y47ycy9UyzADSGSy3yFyZztUq1jVgSAbYdXXEmvifq
j2bJ+VVfsGkw57IFmbtEkTLf7Qud40aMSyZ+D0CkY/lcpgvt8a+Y0MIhnZ1M
Zgj5vlXctxokK+sdszQY1iECKpW01QH/dLNyjuv4HHNG4PwdPvaS0fmd+UWJ
S6YQ/dDgxtZfaOiznfgScy/iKx/46mnEdHHdc9+IH54eojTWWBZtjLUn+hoZ
YrFJivCpv2vvus451EMuQjHTnsrmlFvru6mA/Wnf2Xiyyt1Ki9MhE96QxA7i
rtUM3DTlFeepWH9XjIW1ZXI7cKlIgPFoZbQk/3R6iMDjBaR6HOX24LMiI48a
S2HVL65PYzcZl3mVWp0jTet9WyiW/FQUnaol9eeKj0nnoNH+OdOVRWIzkLQZ
O9F4NHqSfxY9ptukREtCA6fkoVsVyQXPgSX5V9HjWDEl3EwhB20eniCpd1wn
iIssk/+gNvAdQnxo6DMI2zGVF2qm+fMfFVJRMoM+TZKQWa5rWUJzM55E5Xum
Azv00TV3+lNLIUsbcXEW0rMIpGcKEc2dZKn7QXYhwou9cDBWxHygv6zUr8kg
k6Fd4nDQlP2DBvuum8bzc/PYH/CNv8lcjSyPUr/qKeNG3Tm8SWhtqNGBFNuy
FGzs9yQw8ZPVrPHVqnFk8+z90RQD4zgr3NgFCRiNwq0Ib5JYLdT/0JOKv8p3
FI4MmOOvqyYVUXEk21Xf3Y7kKr+1rc0yTyG3ajgIFiRRf5rhm/UuSevu7Lfc
4SSdgdmMDwzVJ76DmBiGvtiuSzkygOIFai8AJZ4NTy+lnfgqYdHTGP4NKNcf
XWTi968heDop9RMb8R5TwqP/DDHie+6qJ/pePzYJwxxgQvRddxOMGAtvd8Cw
xdAeCXVL+Bc+oj0P2ldB/Wf4t2JEexeUkY9QPVE7AzoPYoTdq554O8zLIhHz
qp6qdjMSYc+qp6rdjkTgrnqqxl8K9QnYl6cKPphE/H95qJ6q9kSo22Bfnio+
/KH8DLvqqWrXAWbpQb14BJ6I3moS0a56quDfKOHe/IuufmW9/1/tDKUMVU9V
uwGZoF/1VLVbkon+qqeqfT7Ux2Jfnqp2DyWcx7/g15AJeaieKn6GQh39kKh6
qtoPk9H/Y8CXp6r9NzLBX9VT1Y6N0Ee6ij8soqyLfXmq2tF/68EWmCTcFgLR
HHEBUXZzrK2Dw4JjggNCgncFxASHh7mFhwUtCQgOQ//8FsWGbUSNk6z8vOFt
XJCf34qYqKCAUPegGO+gHTFuATEB6DdXHz8/VFweFLCJeP9fv+P8X7/O/P/y
o+7/wnRWo38Hxj8fHrQjImhjzKxgKz+/LTt2+EUERUWHhwHtMTv94viLooKC
lnjHhgZFBW/ER4rZGhUer/wC+sIdG4MiEC/wcUKDQjdG7JwVwQ92IP4E29ku
jw2LCQ4N8nMFjGKCRo4zalC/6KAYn4ComOjFo/juZ2tlY8OfE2jjN8dq42Y/
20AbBz9HuwBbvzm2QQH2VgF29psDbXGhuC4OiwvfiHfC619HBUQAIX6uASEh
eMPCHRFRX2C8g+L9VF9vXxgVFR4F86uJWRGzMyRoZVB0DHDYb8nKoLDo8Cjo
tnGrGsIjIGwT9CSIUkKgCXBmEdUtMGBMUBTwUdmgYhHMpOaOmv1RwKOwmICQ
WWHhQHxA9KzojeERQbM2BW0MIb7wHrw5CPFxVnQMcAnvP7o9KGwT3mplM4s/
y4q7aVOAjUOgTYCNo51D0BybjUGB9ptsrR34cxztAzbO2eiwaaMdf7PdpoAd
DnZ+drYzIzbODEFfrf96ifqT9v+/Pmg/Kz5klte/jGOW1/9l8/jfmfBfBqIk
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "A"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "B"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "A"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "B"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 313656, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 13, 17, 56.998494`8.508438354889325}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 4, "medium", "low"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "medium"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 2, "small", "medium"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "very high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "low", "high", 3, 2, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 4, 2, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "low"}, {
          "high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "high", 4, 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 4, 4, "large", "low"}, {
          "low", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 4, "small", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "low"}, {
          "low", "medium", 2, 4, "medium", "high"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 2, "medium", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 4, "medium", "medium"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "low"}, {
          "low", "medium", 3, 4, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 2, "large", "low"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "medium", "low"}, {
          "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "very high", 3, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 4, "small", "low"}, {
          "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "low"}, {
          "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {
          "medium", "very high", 4, 4, "small", "high"}, {
          "very high", "low", 2, 2, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "large", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 4, 4, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "large", "medium"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "high"}, {
          "medium", "very high", 4, 2, "large", "high"}, {
          "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "medium"}, {
          "high", "high", 2, 4, "small", "medium"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "medium", "very high", 4, 2, "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 2, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "small", "low"}, {
          "low", "low", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 2, "medium", "low"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "medium", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 2, "medium", "high"}, {
          "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "low", 2, 4, "small", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "medium", "medium"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "very good", "acceptable", "acceptable",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "acceptable", "good", "unacceptable", "acceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "very good", "acceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", "good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
yFxn83PrvinS79uM35J48n/ix6JC
       "], 
      "CountMatrix" -> {{237, 2, 0, 0, 0}, {5, 75, 2, 0, 0}, {0, 2, 11, 0, 
       0}, {0, 0, 1, 11, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsGnu3mm02Vrsws1hjhxnvsE1RVpSjzZGbcucD
IVLuI+YWVvYNuUIoKVcoR3xBIaGQZ/nw9PsHfsHm1lBLWCAQ+ERnu9CVboQT
QQ8iiSKaGGLpRRzxJJBIH5JIJoX+pBIkjXQyyCSLbHLIZTB55FNAIUUUM4wS
SimjnArGUEk1tYyjjhD1TGQyDTTSxFSmMZ1mZjCTWcxmDnNpoZV5zGcBC1nE
YpawlGUsZwUrWcVq1rCWdaxnAxvZxGa2sJVtbGcHO9nFbvawl33s5wAHOcRh
jnCUY7RxnBOc5BSnOcNZznGeC1yknUt0cJkrXOUa17nBTW5xmzvc5R73ecBD
HvGYJzzlGc95wUte8Zo3vOUd7/nAx8D/7z7zha984zs/+MkvfvOHv3ROGkY4
3YmgJ5FEEU0MscQRT28SSCSJZPqSQj9SCZJGOhkMIJMsshlIDrkMIo98Ciik
iGKGMJQShlPKCMoYySjKqWA0lVRRTQ1jqaWO8UwgRD2TaKCRJqbwD8PnY2k=

         "], {137, 284}, {}, {}, {}}, {{30, 39, 46, 135, 233}, {5, 7, 8, 28, 
         36, 37, 43, 50, 56, 57, 60, 64, 65, 68, 75, 76, 80, 81, 85, 90, 91, 
         92, 96, 100, 104, 116, 126, 127, 138, 142, 146, 149, 151, 163, 180, 
         181, 184, 185, 186, 188, 189, 193, 199, 203, 208, 210, 212, 213, 219,
          223, 229, 232, 239, 240, 244, 251, 255, 258, 259, 260, 261, 264, 
         275, 280, 287, 292, 293, 303, 305, 306, 314, 320, 327, 340, 342}, {
         175, 224}, {}, {}}, {{}, {49, 250}, {19, 21, 27, 62, 66, 70, 99, 109,
          207, 235, 266}, {}, {}}, {{}, {}, {152}, {11, 73, 95, 103, 139, 187,
          234, 246, 273, 324, 334}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0006492167630057803, "SingleEvaluationTime" -> 
      0.004178125, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "b0065877-9f5d-4e6f-a6b4-665b74d178a9"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"98.0", "0.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    97.9768786127167601308`3., 0.7579895578429771685`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9286757405057562975`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0144110356986459909`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.8998536691084643158`3.", "\", \"", 
                    "0.9574978119030482793`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.8998536691084643158`3., ", ", 0.9574978119030482793`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0739956425336538298`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0155172109728705515`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0429612205879127268`3.", "\", \"", 
                    "0.1050300644793949328`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0429612205879127268`3., ", ", 0.1050300644793949328`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.74`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.44`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLP3pu3/7Z+J393oMZfx//f2Pveb352uS8
F/Yd0679CnV5a8/6RJGvqOylvYfnrZX3y+7hNGdyzw0Or6Nv7VvrOuV2xb62
n2eW9fSp3hOSzcFFi9oEsy5me2O/sPPhgoX8T+yjGrQOv2I7hNNeQuY9rBJZ
5/7wlj0sxMg1B50GAA3LfA8=
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["237", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "237", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9916317991631799`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9957983193277311`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{237, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9916317991631799}], 
                    Row[{"FScore = ", 0.9957983193277311}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.023809523809523808`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.008368200836820083`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.023809523809523808`}], 
                    Row[{"Row fraction = ", 0.008368200836820083}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9523809523809523`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9638554216867469`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9523809523809523}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9638554216867469}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.023809523809523808`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.023809523809523808`}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8148148148148148`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7857142857142857}], 
                    Row[{"Recall = ", 0.8461538461538461}], 
                    Row[{"FScore = ", 0.8148148148148148}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.07142857142857142}], 
                    Row[{"Row fraction = ", 0.08333333333333333}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9565217391304347`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9166666666666666}], 
                    Row[{"FScore = ", 0.9565217391304347}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9916317991631799`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9916317991631799}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9166666666666666}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "237", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{237, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "84", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9523809523809523`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{84, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9523809523809523}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.7857142857142857}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["239", TraditionalForm]}, {2.5, 
                    FormBox["82", TraditionalForm]}, {1.5, 
                    FormBox["13", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["237", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["84", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "medium", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 2, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzNV02unEUMfLCIuAZbluQAiCuEEzwkWEVCCgvEjqOTLEb61LKrynb5m7GU
vJnu9k+7y2XPj7//9enP79/e3v7+4et/n97/+fXLl/d/f/vw7csf758//vz5
u68f3356A/LfL729ydmKfLP7sH31kX2+fp/G5MqNw/fmXdRzG3tVUd7dYX9i
K9N1vIFbonxG/jfy4bCF8KDGUI3vFWuxy9Xn57vuhs5v4H9aky5/r2pfrSMW
QweHrzJnMPsMQ3fwiGu2iWJwcHwHO6zvRDOgylUMo1Ve2HxjdnZ7xur0lEou
s16D3hf1Jwd2ET6m9RDdSTl36kx4gq1P8emawat2EH7Of5lu5vPO+TvyXz3z
zJkrw3iWy6yG0RtWYp3MsBX+nXB1Ve6aUac845olXDGgOFy1rnKIA5PuWWUL
o12/rplL8buJz8l7uOfLZ/NQt6dN91TfG7qRnQ7fVLlsS57FE5U43Pw6nYu3
xYntO/s2wvBdc46678yLey5APlznN94k4kP0263y++1qd0O2cjGx3bFx58zg
sOm6F9Nz5GVa35XfMui3dGQ3qrPMlkvcdjdrUDn7Cr9xJzoKPp8xzyh+t2ay
7TlUqeOqoLrqvjvzp9p0zyFVfTYbbOTHbaejX+Gmsx8gnWxmi2xkdp6Niamu
87cn6yOVup6Ia3as6rrukcWvvtWz+twpWR1WeEzlwMhG9nsL+cn21H30PYuJ
za3ZPVBszNd57+x7tqYKegO2d56L9qfisKP0pMdf9q6sRiJ/yh2q3KHeSY3B
wZEqNrt5Y3yA6uqq16mxqy47l8VaFfdbsD1nX+r4cHNdJwdKHHdxW8Q713UF
j6gvTuJ1YkW1h7i3e79JLVQ5GO114668yZSfo33XPOK2o/xl/R3FguoPzUrM
tqNOI6n0PRTDVu9gfft6JvJZ6c2d2JDNad9y5O60g/Ko+u3OSVV/3XebcEbl
nFonWa1ntce46NyL4mZ1Pc1nVdfF48hHtqfUAeJjhs9Jv1fOO/J/fkf3zs5X
etD0DOJ5dw9E4sz9Yw29iYJRVvsumfS1ro+7eOm0w7Bf8T+5Q+dOCq+7MYJ4
9fyc8Wxkr8JXpz8Uy0Si+otiQfFMekAHI1meED7QLFH175Rqf53Gi/gW8W/E
3SwGNedKrOpd0HrFtxobsjvlLmbTpVO1p+y75ijlbKWXZxhHnxEvZtye+Y1s
uKWLAaVeGU9kdlEunbmovANar/TBSKcS23YP6tZwtt/t+4qPCCfX9cwvetvo
c+RXjZGtVfYUvHbiUvaYjpr/rJ5YDBNOiuKL9tFckMXq7uWO3oXW1f7DxFXP
1V4Y6bH679S6Kihfql2lR2Rcp+idPjY4+fSP/KH3qNwN+cz0FNtOXXZuqz9W
+jTqoUovVdaYf2ZjC6uqbPh39+JI9w5cTX1kfIA4nPG7GqMD2913nOZzWiMI
J4ptd5zuGtvmDAU7qHdHffHUUe07hM1ZLkGzW7TG8sN8dOLq6HTryVm323oT
iWohwjqaF5/FJR2pzDgVLlffkfEG0mP9+FxH86LqU/GP6n6bq9C+2i8RX1Ty
rkhnflFqj9VwZFPh6w7vq3E4+2QWf7Ye8RvC99VeFj+qLZT7bj4mWMrOKr4y
XmB+GCedZ07dqt0zvq5Ucoby3+UM1Y96BvEi4jZnrapv5Hg7VOuIu9iaGmPl
3Su5yLDmqPdNye6BePi6f35WbCtxVGPuYIdxv3L/LA9oLdJHuGaYnWDJ0Xem
Mbh8olyf+8x2J8ZJTtw8j3IztZ3Z6PRBtUerfYLVVVbXlTsgYdzBeEl9N8Yp
mW3G28w/404kiNsqeugtlfdHfpT7V++t3MtxblsUrDh9MXsZLq57ip3MZrYW
4U+tU1VXja0iWTwdHGY8ovhAvIjiReeyeNW8urDbseOum2itg1W07oiL7Snv
zGoz+8zydK5NROk5LK4oPoU/sjNqzbBcZWtq/l+ltz1EyRHbm9h16m7lFtUJ
W7vGpfJ4psswtMFXG1yt9rYNXkY+lPNVP5Evhp1O36/EFMXjlG2uU/g/+p79
RZ8j+8ra6Yf1lCp3qLFNznX1Uc+O8K3wgIJ9xpVKjUX+ItzcxSGRX4SVzR6R
2ej0tY4/dDfEqee+wg8KHhlOFJuMi7IYmDD8RjFcv6P6iM5m+lksyH92j4q4
MVi1q+Ji4kMVty8FF26bHbvTODKeQfY3cFftNcpZZ89S8sB4eOJfEdQLEP+r
sUb+os8srug841PUY5QYmHR64fVch+OVu7J4u38jfxNR+n4Vb0oeOjLhFzVf
qOYyHHXz8wqy2ScQd0Xfr2tZzrcxhbiMnb9+d3KacmajH1ZtV85385PVGvp8
1c2wlNljNiO7Ubx3SCUGd4277XbsOX0rPTxbc+Vkq4+e9rPvaiys/6mcg+pL
kS5vKv074gPkczIDTN/b3S/vjGc6P1Vqk8VVwR3qHxmeO3UylWfhQZkxpjXx
Cr3oLp/uHuM+27F11gzDQ8bFSs625k+lZ6Me45A7cc/mAZefjtw5e1f8M3xH
+Ts/3zXrMp0OZ7/6O0d5Zz08elOVl1gcnXlInUkU3tqqo4zDs8+RXifOCmZf
YX7ObKn36OSqm4fqXJfpK3iM6i36rtSCiqm7OG3bduV9p/5dPWITSy5xzDx3
YwnVyLmPbET2zrXTruK/eja7GzqHpPJGEUYzrsk4KdJBcWV5UmJT7hTtOfuk
oqv0vY3ezcTBm1V8Pf6qs0DFb9cWs9G1Wbmj+hZVronWFZn2gu77ZvwTnaly
fcZdyH+mm53NbKNYovXoftuivuE0Hkf9I9udPfXsHb0D1a6CQ9SnHXErMuFM
hA12l3gO+R9CT8V8
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJyVU1sKwjAQXP0oXsMr6AFKr1BPEEG/CoX2o/jn0W0RQXRmdlJIs8m+Zja7
x+vY3/cRMR/WX1+WbprK49Jsh1sZzqdht4qxWcSzfa+P/L0zWemRjfL/1asc
aGf4kYziOfizO8aL+Sl8LjfF1eGfvQWyRwvZMi4Kf2ZTm0Nxq+kPlFPFyXAz
e7ffUTyVh/Fya8zmg+ncHIy/qo/DV70T4+L4K2zoU/XM6sDmAN25OJie8VG9
mfWbqnNWC6bP5sXBqurGeDE/xNXFU9szNfjVLP3HfgEcV8w7
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {512}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {10752}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {512}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{512, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 233272, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 13, 17, 57.317518`8.510862349646745}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 4, "medium", "low"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "medium"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 2, "small", "medium"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "very high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "low", "high", 3, 2, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 4, 2, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "low"}, {
          "high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "high", 4, 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 4, 4, "large", "low"}, {
          "low", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 4, "small", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "low"}, {
          "low", "medium", 2, 4, "medium", "high"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 2, "medium", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 4, "medium", "medium"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "low"}, {
          "low", "medium", 3, 4, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 2, "large", "low"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "medium", "low"}, {
          "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "very high", 3, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 4, "small", "low"}, {
          "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "low"}, {
          "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {
          "medium", "very high", 4, 4, "small", "high"}, {
          "very high", "low", 2, 2, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "large", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 4, 4, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "large", "medium"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "high"}, {
          "medium", "very high", 4, 2, "large", "high"}, {
          "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "medium"}, {
          "high", "high", 2, 4, "small", "medium"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "medium", "very high", 4, 2, "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 2, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "small", "low"}, {
          "low", "low", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 2, "medium", "low"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "medium", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 2, "medium", "high"}, {
          "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "low", 2, 4, "small", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "medium", "medium"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "very good", "acceptable", "acceptable",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "very good", "acceptable", "acceptable", "unacceptable",
         "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "very good", "good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
3uFkXlL2fwBAwsau
       "], 
      "CountMatrix" -> {{237, 2, 0, 0, 0}, {0, 80, 2, 0, 0}, {0, 2, 11, 0, 
       0}, {0, 0, 1, 11, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0ulrDgAAwOF3aGvssmazaezdarbZWO3CrMUa25jZO2xTlBXlaHPkptxR
hEg5x3JfOYpvyBVCSblCOeILCgmFPMuHp98/8Au2tIVawwKBwCc624WudCOc
SLoTRTQxxBJHT+JJIJEkepNMCqn0I40g6WSQSRbZ5JBLHoPIp4BCiiimhKGU
UkY5FVQyiipqqGUsdYRoYDwTaaSJZiYzham0MI3pzGAms5hNK23MYS7zmM8C
FrKIxSxhKctYzgpWsorVrGEt61jPBjayic1sYSvb2M4OdrKL3exhL/vYTzsH
OEgHhzjMEY5yjOOc4CSnOM0ZznKO81zgIpe4zBWuco3r3OAmt7jNHe5yj/s8
4CGPeMwTnvKM57zgJa94zRve8o73fOBj4P97n/nCV77xnR/85Be/+cNfOkcN
I5wIIulBFNHEEEsc8STQi0SSSCaFPqTSlzSCpJNBJv3JIpscBpBLHgPJp4BC
iiimhMEMoZRhlFHOcEZQQSUjqaKaGkYzhlrqGEc9IRqYQCNNNDOJf+F4Y7M=

         "], {284, 318}, {}, {}, {}}, {{}, CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGgoOEjnBubAQNwpAABOYMJixmjW4GApvz
AXgAk5s4DSaCxTlNBClukiTYDPoFwlf/8K8fntS6C0EQ7BOyRMQqa8Rk2SBH
gSJblEjYocwue/NWlQOatGjT4YhjTjnjnAsu6dHnimsG3HDLHUPueeCRJ0Y8
88Irb7wz5oMJn3wx5ZsZP/zyR8qANIuERCyzQoaYLJvkKbBNQoU6Df4BBtgl
Rw==
         "], {46, 180}, {}, {}}, {{}, {49, 250}, {19, 21, 27, 62, 66, 70, 99, 
         109, 207, 235, 266}, {}, {}}, {{}, {}, {152}, {11, 73, 95, 103, 139, 
         187, 234, 246, 273, 324, 334}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0002906445086705202, "SingleEvaluationTime" -> 
      0.003744625, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9},
 CellLabel->
  "Out[386]=",ExpressionUUID->"824d9915-8520-4735-9bf4-25d763c395a9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->
  "In[387]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}},
 CellLabel->
  "In[388]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9797687861271677`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "237"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "79"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "11"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9},
 CellLabel->
  "Out[389]=",ExpressionUUID->"10883d41-ece6-41d7-922c-21cb3bdfe986"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}},
 CellLabel->
  "In[390]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9797687861271677`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "237"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "79"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "11"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9},
 CellLabel->
  "Out[391]=",ExpressionUUID->"c359f961-8b05-49cb-bc39-a1f48553d8c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[392]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"2.75`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9},
 CellLabel->
  "Out[392]=",ExpressionUUID->"4d2f4a8f-1fc8-4646-868d-c6fed4a55ac2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
  3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
  3.869121348104578*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", "\"\<Memory\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}},
 CellLabel->
  "In[431]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                   0.12529108395561656`, 0.45980236054401374`}, {
                   0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                   0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                   0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                   0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                   0.43350591164949265`, 
                   0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                   0.05318131991869604, -0.6664425700794839, 
                   0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                   0.20970076137332036`, 0.2883672850742781, 
                   0.01920999835638125}}, 
                  "Precisions" -> {11.409050313849102`, 11.728549767205461`, 
                   11.838648803211964`, 12.353703996888086`, 
                   12.493974299485144`, 12.642220694332103`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                   "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 1301552, 
                  "DataMemory" -> 445472, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.4650241955255132`, -1.4650241955255132`, \
-1.430755802766193, -1.4042067830875913`, -1.3018866229987, \
-1.2507800118207644`, -1.2364530874740836`, -1.2255722141636205`, \
-1.2228520173189021`, -1.0894952762761034`, -1.0894015666714374`}, 
                   "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                   0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.629856546861745, 0.2480059748492769], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
        "unacceptable" -> 0.6926406926406926, "very good" -> 
        0.03607503607503607|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Memory", "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                "], "Biases" -> 
               RawArray["Real32",{-0.14151161909103394`, 
                 0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                 0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                 0.19001705944538116`, -0.1973552703857422, 
                 0.14196911454200745`, 
                 0.06061756610870361, -0.1630895882844925, 
                 0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                 0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                 0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                 0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                 0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                 0.1669532060623169, -0.11877211928367615`, 
                 0.1377328783273697, 
                 0.14382711052894592`, -0.16925354301929474`, 
                 0.1921849101781845, 0.15992730855941772`, -0.196363165974617,
                  0.0778680145740509, 0.2140202522277832, 
                 0.16157454252243042`, 0.1905343234539032}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                "], "Biases" -> 
               RawArray["Real32",{0.11058614403009415`, 0.1459028422832489, 
                 0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                 0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                 0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                 0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                 0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                 0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                 0.14516647160053253`, 
                 0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                 0.10357934981584549`, -0.11235950142145157`, 
                 0.09922627359628677, 
                 0.08616095781326294, -0.13851280510425568`, 
                 0.083940789103508, 0.049086518585681915`, 
                 0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                 0.13940095901489258`, 0.0495423823595047, 
                 0.13049697875976562`, 0.16978049278259277`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                "], "Biases" -> 
               RawArray["Real32",{-0.007236030418425798, -0.09619268029928207,
                  0.09597259759902954, -0.13553404808044434`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
        29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
              0.12857418486134847`, -0.1470174637574805, -0.3693960287360927, \
-0.25297157897734485`, -0.1381125864186497, -0.013550857960233805`, \
-0.4477105686514862, 0.10026117855035539`, -0.22988884392409223`, 
              0.29694375132721407`, 
              0.05750394298490419, -0.1986286429254379, -0.13614149543094045`,
               0.08288515091555626, -0.23331746818281004`, 
              0.3872654421790709}, 
             "StandardDeviation" -> {0.4217841444635364, 0.26610671534521446`,
               0.0719824374461276, 0.3714420548858829, 0.17188502945715212`, 
              0.5106448641794368, 0.682620419657301, 0.2497243771479237, 
              0.6360414783504174, 0.49439015269206665`, 0.4649285469405732, 
              0.4304973939924269, 0.6297890981361854, 0.2834486698239679, 
              0.7746989060734015, 0.09846349258259571, 0.2971065188725669, 
              0.21897662978258314`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
         Around[0.9761613127009874, 0.012949449812749267`], "EvaluationTime" -> 
         0.0006881501464423077, "TestSize" -> 276, "ModelMemory" -> 58320, 
         "ModelUtility" -> 0.2778097519618762, "TrainingSize" -> 1106, 
         "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 956544, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.09102929754751289, 0.016693019156898786`]}, 
         "AccuracyHistory" -> {
           Around[0.9761613127009874, 0.009156643775229874]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.5722078573533445`, 0.27210027194614067`], "Accuracy" -> 
              Around[0.6211574386771406, 0.01848102720571032], 
              "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 1372, 
              "ModelMemory" -> 101904, "ModelUtility" -> -3.6582194587192123`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 480808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.5722078573533445`, 0.19240394745581973`]}, 
              "AccuracyHistory" -> {
                Around[0.6211574386771406, 0.01306805966045084]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
             Around[4.5722078573533445`, 0.27210027194614067`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 480808, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
              Around[0.5636622679613927, 0.04946899254797612], 
              "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 200, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.2227347999526073`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 309176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.146953849088694, 0.04605286640226046]}, 
              "AccuracyHistory" -> {
                Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6860334428196505, 0.060102721049976764`], "Accuracy" -> 
              Around[0.8161029716258141, 0.031470751638048605`], 
              "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7148737042326025`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6860334428196505, 0.04249904162220202]}, 
              "AccuracyHistory" -> {
                Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
              Around[0.4158072905455017, 0.020925576627904317`], 
              "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.6713325971918254`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 297016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8053747043406867`, 0.03990059813836297]}, 
              "AccuracyHistory" -> {
                Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35134608706131215`, 0.03978009020685576], "Accuracy" -> 
              Around[0.8678411635281399, 0.028749297744619536`], 
              "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.0507407082010345`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 948456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35134608706131215`, 0.028128771541480278`]}, 
              "AccuracyHistory" -> {
                Around[0.8678411635281399, 0.02032882338957159]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022915055508466515`, "MeanCrossEntropy" -> 
             Around[0.35134608706131215`, 0.03978009020685576], "ModelMemory" -> 
             62416, "TrainingMemory" -> 948456, "TrainingTime" -> 
             0.7847467847731369|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
              Around[0.9761613127009874, 0.012949449812749267`], 
              "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.09102929754751289, 0.016693019156898786`]}, 
              "AccuracyHistory" -> {
                Around[0.9761613127009874, 0.009156643775229874]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
              Around[0.7133756368331798, 0.017387908807273374`], 
              "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -1.9714037318786193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8964811821115559, 0.03982126162286557]}, 
              "AccuracyHistory" -> {
                Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.3429807556245192`, 0.13818489531614622`], "Accuracy" -> 
              Around[0.6158817888808668, 0.01850340875462363], 
              "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.9313466655000626`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285712, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.3429807556245192`, 0.09771147653560017]}, 
              "AccuracyHistory" -> {
                Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
              Around[0.8990167017961164, 0.012596838847921973`], 
              "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8209142104906325, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 373776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.28191119077631227`, 0.01899788415468956]}, 
              "AccuracyHistory" -> {
                Around[0.8990167017961164, 0.008907310170879763]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
             Around[0.28191119077631227`, 0.0268670654279549], "ModelMemory" -> 
             58320, "TrainingMemory" -> 373776, "TrainingTime" -> 
             10.121617336566537`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
              Around[0.9791357409747539, 0.012137549581765668`], 
              "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 0.11165932133847212`,
               "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1169256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.08963151751650107, 0.029849186457466155`]}, 
              "AccuracyHistory" -> {
                Around[0.9791357409747539, 0.008582543616254447]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2240863679594245`, 0.14357091710562775`], "Accuracy" -> 
              Around[0.7906775734525874, 0.02161228989770136], 
              "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.435754149761074, 
              "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2240863679594245`, 0.10151996906656106`]}, 
              "AccuracyHistory" -> {
                Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
              Around[0.8493098429585471, 0.01492641153241974], 
              "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3968757488568753`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 840352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4340717995649587, 0.03264544242444842]}, 
              "AccuracyHistory" -> {
                Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
             Around[0.4340717995649587, 0.04616762742632497], "ModelMemory" -> 
             187664, "TrainingMemory" -> 840352, "TrainingTime" -> 
             17.3393835219499|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.37168744234195067`, 0.06138078981133629], "Accuracy" -> 
              Around[0.8929724590325544, 0.017756003513421006`], 
              "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.2331962386303115`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 683920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.37168744234195067`, 0.04340277271018203]}, 
              "AccuracyHistory" -> {
                Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
              Around[0.6062976552481879, 0.020601568145856446`], 
              "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.220876683857752, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 587920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7690385100499966`, 0.1179189368931781]}, 
              "AccuracyHistory" -> {
                Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
             Around[2.7690385100499966`, 0.1667625598149496], "ModelMemory" -> 
             164368, "TrainingMemory" -> 587920, "TrainingTime" -> 
             10.715092815685152`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
              Around[0.6168133280093175, 0.018368536511584353`], 
              "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 1372,
               "ModelMemory" -> 93800, "ModelUtility" -> -3.2901150116252373`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 384328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.194583785496335, 0.13677882493583354`]}, 
              "AccuracyHistory" -> {
                Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00040456834306917757`, "MeanCrossEntropy" -> 
             Around[3.194583785496335, 0.19343446926971108`], "ModelMemory" -> 
             93800, "TrainingMemory" -> 384328, "TrainingTime" -> 
             23.488117112273706`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.8197448601870514`, 0.15407278573948416`], "Accuracy" -> 
              Around[0.7681197493442067, 0.016233908383616182`], 
              "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.805891685476432, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 617752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8197448601870514`, 0.10894591159269124`]}, 
              "AccuracyHistory" -> {
                Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
             Around[1.8197448601870514`, 0.15407278573948416`], "ModelMemory" -> 
             164368, "TrainingMemory" -> 617752, "TrainingTime" -> 
             74.27594802356177|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29403327569319443`, 0.03932904399651967], "Accuracy" -> 
              Around[0.9098419509282913, 0.011996499990282437`], 
              "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8705335057683248, 
              "TrainingSize" -> 250, "TrainingTime" -> 10., "TrainingMemory" -> 
              351080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.29403327569319443`, 0.027809833707523133`]}, 
              "AccuracyHistory" -> {
                Around[0.9098419509282913, 0.008482806493633062]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5876025435917676`, 0.22692353204588206`], "Accuracy" -> 
              Around[0.6246522534683608, 0.018394245585487717`], 
              "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -3.3582514493484092`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 273672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5876025435917676`, 0.16045916832044602`]}, 
              "AccuracyHistory" -> {
                Around[0.6246522534683608, 0.01300669578830908]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00031189803436950574`, "MeanCrossEntropy" -> 
             Around[3.5876025435917676`, 0.22692353204588206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 273672, "TrainingTime" -> 
             53.70267726352701|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.10590330154399025`, 0.028414184949045067`], "Accuracy" -> 
              Around[0.9710001978599868, 0.014256985156258202`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.11862582820774348`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 986160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10590330154399025`, 0.0200918628593585]}, 
              "AccuracyHistory" -> {
                Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2470665473441196`, 0.13307038058297638`], "Accuracy" -> 
              Around[0.6176776136790039, 0.01842307108792603], 
              "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.895732548673068, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 296888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2470665473441196`, 0.09409496848529728]}, 
              "AccuracyHistory" -> {
                Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
             Around[2.2470665473441196`, 0.13307038058297638`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 296888, "TrainingTime" -> 
             12.700902206251245`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
              Around[0.8904866053987731, 0.026502625634261496`], 
              "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.8161649012419092, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 1012984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2626592930291636, 0.025100411042228342`]}, 
              "AccuracyHistory" -> {
                Around[0.8904866053987731, 0.01874018630523473]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
              Around[0.4223703251465125, 0.01863988008159035], 
              "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, "ModelUtility" -> -2.616030556943823, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 447496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.622240942702334, 0.03353979644872707]}, 
              "AccuracyHistory" -> {
                Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5079075602598763, 0.031736742733066994`], "Accuracy" -> 
              Around[0.8151969662775643, 0.016267526734640162`], 
              "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.461355133207583, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 527464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5079075602598763, 0.022441265999324552`]}, 
              "AccuracyHistory" -> {
                Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
             Around[0.5079075602598763, 0.031736742733066994`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 527464, "TrainingTime" -> 
             3.401520371971754|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 4.21875*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.868970440615246`16.340170400833458*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
          "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
          "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
          "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
          "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
      "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
      "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, "Instant", 
        "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
      "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9},
 CellLabel->
  "Out[431]=",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "d093bf74-15a1-43b9-a987-7be67ffd0c89"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.0", "0.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    97.9768786127167601308`3., 0.7579895578429771685`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9311011902438047771`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0168655123198805934`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8973701656040435903`3.", "\", \"", 
                   "0.964832214883565964`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8973701656040435903`3., 
                   ", ", 0.964832214883565964`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0713873177684133248`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0181125213588456818`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0351622750507219611`3.", "\", \"", 
                   "0.1076123604861046884`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0351622750507219611`3., 
                   ", ", 0.1076123604861046884`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.82`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.47`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKlyT/3KjF/9ZeZZO3Q8mUF/arBTqnJZ+8
ZW9dPrdm5su39loKgnbvn722T9eeEXdy8lN781glR2m3d/b9k3R661ze2q+9
KDWZVfEl3LyHVSLr3B/esoe5kJB6dNrs/o5Z8k1v7TNinE69iX9lf88pf9We
WQ9xqsflTrVpdWcqJN/YV2/Xv/c/8Yn9uXvHym/0HSHofmJpAO2ufDY=
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9784172661870503`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9714285714285714}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9784172661870503}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.02857142857142857}], 
                    Row[{"Row fraction = ", 0.00796812749003984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8000000000000002`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{8, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8}], 
                    Row[{"Recall = ", 0.8}], 
                    Row[{"FScore = ", 0.8000000000000002}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["247", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9919678714859439`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9840637450199203}], 
                    Row[{"FScore = ", 0.9919678714859439}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.10526315789473684`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.2`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.10526315789473684`}], 
                    Row[{"Row fraction = ", 0.2}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05263157894736842`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.05263157894736842}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9142857142857141`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8421052631578947}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9142857142857141}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9840637450199203}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9714285714285714}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8421052631578947}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["69", TraditionalForm]}, {2.5, 
                    FormBox["10", TraditionalForm]}, {1.5, 
                    FormBox["251", TraditionalForm]}, {0.5, 
                    FormBox["16", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["70", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["10", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["247", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["19", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                    0.12529108395561656`, 0.45980236054401374`}, {
                    0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                    0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                    0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                    0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                    0.43350591164949265`, 
                    0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                    0.05318131991869604, -0.6664425700794839, 
                    0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                    0.20970076137332036`, 0.2883672850742781, 
                    0.01920999835638125}}, 
                    "Precisions" -> {11.409050313849102`, 11.728549767205461`,
                     11.838648803211964`, 12.353703996888086`, 
                    12.493974299485144`, 12.642220694332103`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 
                    1301552, "DataMemory" -> 445472, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.4650241955255132`, \
-1.4650241955255132`, -1.430755802766193, -1.4042067830875913`, \
-1.3018866229987, -1.2507800118207644`, -1.2364530874740836`, \
-1.2255722141636205`, -1.2228520173189021`, -1.0894952762761034`, \
-1.0894015666714374`}, "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                    0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.629856546861745, 0.2480059748492769], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
           "unacceptable" -> 0.6926406926406926, "very good" -> 
           0.03607503607503607|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Memory", "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                   "], "Biases" -> 
                  RawArray["Real32",{-0.14151161909103394`, 
                    0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                    0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                    0.19001705944538116`, -0.1973552703857422, 
                    0.14196911454200745`, 
                    0.06061756610870361, -0.1630895882844925, 
                    0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                    0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                    0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                    0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                    0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                    0.1669532060623169, -0.11877211928367615`, 
                    0.1377328783273697, 
                    0.14382711052894592`, -0.16925354301929474`, 
                    0.1921849101781845, 
                    0.15992730855941772`, -0.196363165974617, 
                    0.0778680145740509, 0.2140202522277832, 
                    0.16157454252243042`, 0.1905343234539032}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                   "], "Biases" -> 
                  RawArray["Real32",{0.11058614403009415`, 0.1459028422832489,
                     0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                    0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                    0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                    
                    0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                    0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                    0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                    0.14516647160053253`, 
                    0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                    0.10357934981584549`, -0.11235950142145157`, 
                    0.09922627359628677, 
                    0.08616095781326294, -0.13851280510425568`, 
                    0.083940789103508, 0.049086518585681915`, 
                    0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                    0.13940095901489258`, 0.0495423823595047, 
                    0.13049697875976562`, 0.16978049278259277`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.007236030418425798, -0.09619268029928207, 
                    0.09597259759902954, -0.13553404808044434`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
           29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
                 0.12857418486134847`, -0.1470174637574805, \
-0.3693960287360927, -0.25297157897734485`, -0.1381125864186497, \
-0.013550857960233805`, -0.4477105686514862, 
                 0.10026117855035539`, -0.22988884392409223`, 
                 0.29694375132721407`, 
                 0.05750394298490419, -0.1986286429254379, \
-0.13614149543094045`, 0.08288515091555626, -0.23331746818281004`, 
                 0.3872654421790709}, 
                "StandardDeviation" -> {0.4217841444635364, 
                 0.26610671534521446`, 0.0719824374461276, 0.3714420548858829,
                  0.17188502945715212`, 0.5106448641794368, 0.682620419657301,
                  0.2497243771479237, 0.6360414783504174, 
                 0.49439015269206665`, 0.4649285469405732, 0.4304973939924269,
                  0.6297890981361854, 0.2834486698239679, 0.7746989060734015, 
                 0.09846349258259571, 0.2971065188725669, 
                 0.21897662978258314`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
            Around[0.9761613127009874, 0.012949449812749267`], 
            "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
            "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
            "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
            "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.09102929754751289, 0.016693019156898786`]}, 
            "AccuracyHistory" -> {
              Around[0.9761613127009874, 0.009156643775229874]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.5722078573533445`, 0.27210027194614067`], 
                 "Accuracy" -> 
                 Around[0.6211574386771406, 0.01848102720571032], 
                 "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -3.6582194587192123`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 480808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.5722078573533445`, 0.19240394745581973`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6211574386771406, 0.01306805966045084]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
                Around[4.5722078573533445`, 0.27210027194614067`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 480808, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
                 Around[0.5636622679613927, 0.04946899254797612], 
                 "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 
                 200, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.2227347999526073`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 309176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.146953849088694, 0.04605286640226046]}, 
                 "AccuracyHistory" -> {
                   Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6860334428196505, 0.060102721049976764`], 
                 "Accuracy" -> 
                 Around[0.8161029716258141, 0.031470751638048605`], 
                 "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7148737042326025`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.31622776601683794`, 
                 "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6860334428196505, 0.04249904162220202]}, 
                 "AccuracyHistory" -> {
                   Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
                 Around[0.4158072905455017, 0.020925576627904317`], 
                 "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.6713325971918254`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 297016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8053747043406867`, 0.03990059813836297]}, 
                 "AccuracyHistory" -> {
                   Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35134608706131215`, 0.03978009020685576], 
                 "Accuracy" -> 
                 Around[0.8678411635281399, 0.028749297744619536`], 
                 "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.0507407082010345`, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 948456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35134608706131215`, 0.028128771541480278`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8678411635281399, 0.02032882338957159]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022915055508466515`, 
                "MeanCrossEntropy" -> 
                Around[0.35134608706131215`, 0.03978009020685576], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 948456, 
                "TrainingTime" -> 0.7847467847731369|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.09102929754751289, 0.023607494088640154`], 
                 "Accuracy" -> 
                 Around[0.9761613127009874, 0.012949449812749267`], 
                 "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.2778097519618762, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.1622776601683795`, "TrainingMemory" -> 956544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.09102929754751289, 0.016693019156898786`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9761613127009874, 0.009156643775229874]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
                 Around[0.7133756368331798, 0.017387908807273374`], 
                 "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.9714037318786193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8964811821115559, 0.03982126162286557]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.3429807556245192`, 0.13818489531614622`], 
                 "Accuracy" -> 
                 Around[0.6158817888808668, 0.01850340875462363], 
                 "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.9313466655000626`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.3429807556245192`, 0.09771147653560017]}, 
                 "AccuracyHistory" -> {
                   Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
                 Around[0.8990167017961164, 0.012596838847921973`], 
                 "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8209142104906325, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 373776, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.28191119077631227`, 0.01899788415468956]}, 
                 "AccuracyHistory" -> {
                   Around[0.8990167017961164, 0.008907310170879763]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
                Around[0.28191119077631227`, 0.0268670654279549], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 373776, 
                "TrainingTime" -> 10.121617336566537`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
                 Around[0.9791357409747539, 0.012137549581765668`], 
                 "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 0.11165932133847212`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1169256, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.08963151751650107, 0.029849186457466155`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791357409747539, 0.008582543616254447]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2240863679594245`, 0.14357091710562775`], 
                 "Accuracy" -> 
                 Around[0.7906775734525874, 0.02161228989770136], 
                 "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700,
                  "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.435754149761074, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 780096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2240863679594245`, 0.10151996906656106`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
                 Around[0.8493098429585471, 0.01492641153241974], 
                 "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3968757488568753`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 840352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4340717995649587, 0.03264544242444842]}, 
                 "AccuracyHistory" -> {
                   Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
                Around[0.4340717995649587, 0.04616762742632497], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 840352, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.37168744234195067`, 0.06138078981133629], 
                 "Accuracy" -> 
                 Around[0.8929724590325544, 0.017756003513421006`], 
                 "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.2331962386303115`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 683920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.37168744234195067`, 0.04340277271018203]}, 
                 "AccuracyHistory" -> {
                   Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
                 Around[0.6062976552481879, 0.020601568145856446`], 
                 "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.220876683857752, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 587920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.7690385100499966`, 0.1179189368931781]}, 
                 "AccuracyHistory" -> {
                   Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
                Around[2.7690385100499966`, 0.1667625598149496], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 587920, 
                "TrainingTime" -> 10.715092815685152`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
                 Around[0.6168133280093175, 0.018368536511584353`], 
                 "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 
                 1372, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -3.2901150116252373`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 384328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.194583785496335, 0.13677882493583354`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00040456834306917757`, 
                "MeanCrossEntropy" -> 
                Around[3.194583785496335, 0.19343446926971108`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 384328, 
                "TrainingTime" -> 23.488117112273706`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.8197448601870514`, 0.15407278573948416`], 
                 "Accuracy" -> 
                 Around[0.7681197493442067, 0.016233908383616182`], 
                 "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.805891685476432, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 617752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8197448601870514`, 0.10894591159269124`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
                Around[1.8197448601870514`, 0.15407278573948416`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 617752, 
                "TrainingTime" -> 74.27594802356177|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29403327569319443`, 0.03932904399651967], 
                 "Accuracy" -> 
                 Around[0.9098419509282913, 0.011996499990282437`], 
                 "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8705335057683248, "TrainingSize" -> 250,
                  "TrainingTime" -> 10., "TrainingMemory" -> 351080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29403327569319443`, 0.027809833707523133`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9098419509282913, 0.008482806493633062]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5876025435917676`, 0.22692353204588206`], 
                 "Accuracy" -> 
                 Around[0.6246522534683608, 0.018394245585487717`], 
                 "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.3582514493484092`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 273672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.5876025435917676`, 0.16045916832044602`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6246522534683608, 0.01300669578830908]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00031189803436950574`, 
                "MeanCrossEntropy" -> 
                Around[3.5876025435917676`, 0.22692353204588206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 273672, 
                "TrainingTime" -> 53.70267726352701|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.10590330154399025`, 0.028414184949045067`], 
                 "Accuracy" -> 
                 Around[0.9710001978599868, 0.014256985156258202`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.11862582820774348`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 986160, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10590330154399025`, 0.0200918628593585]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2470665473441196`, 0.13307038058297638`], 
                 "Accuracy" -> 
                 Around[0.6176776136790039, 0.01842307108792603], 
                 "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.895732548673068, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 296888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2470665473441196`, 0.09409496848529728]}, 
                 "AccuracyHistory" -> {
                   Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
                Around[2.2470665473441196`, 0.13307038058297638`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 296888, 
                "TrainingTime" -> 12.700902206251245`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
                 Around[0.8904866053987731, 0.026502625634261496`], 
                 "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
                 "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.8161649012419092, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 1012984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2626592930291636, 0.025100411042228342`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8904866053987731, 0.01874018630523473]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
                 Around[0.4223703251465125, 0.01863988008159035], 
                 "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.616030556943823, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 447496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.622240942702334, 0.03353979644872707]}, 
                 "AccuracyHistory" -> {
                   Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5079075602598763, 0.031736742733066994`], 
                 "Accuracy" -> 
                 Around[0.8151969662775643, 0.016267526734640162`], 
                 "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.461355133207583, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 527464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5079075602598763, 0.022441265999324552`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
                Around[0.5079075602598763, 0.031736742733066994`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 527464, 
                "TrainingTime" -> 3.401520371971754|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 4.21875*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.868970440615246`16.340170400833458*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
             "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
             "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
            "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
             "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
             "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
              41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
         "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
         "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "very good", "unacceptable", "good", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "very good", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good",
       "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
Whs8JdQbFiVawP8B5ipgMQ==
     "], "CountMatrix" -> {{68, 1, 0, 0, 0}, {0, 8, 0, 2, 0}, {2, 1, 247, 1, 
     0}, {0, 0, 0, 16, 0}}, 
    "IndicesMatrix" -> {{{1, 7, 8, 15, 23, 29, 36, 42, 43, 44, 47, 49, 54, 60,
        64, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127, 135, 143, 146, 
       151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 213, 221, 222, 
       228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 305, 306, 315, 
       320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 346}, {
       17}, {}, {}, {}}, {{}, {84, 86, 111, 172, 200, 214, 225, 255}, {}, {
       110, 239}, {}}, {{182, 301}, {52}, CompressedData["
1:eJwl0ulrDwAAANCftWFsMzvYbHa2zRyzzGzDtrZ2sDYJaxsJI1eO3OTIWe7I
USThgyO5yVnuJEdEOT9IORKSSHLklQ/vP3ipzdOHTGsRCAR+EEQwIbQklDa0
JYxwIogkimhiiKUDccTTiQQSSSKZFFJJI50MMsmiC9n0IIdcepFHPgUUUkRf
+lFMCaWUUU4FlVRRzQBqqKWOQQxmKPU00EgTwxnBSEYxmjE0M5ZxjGcCE5nE
ZKYwlRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJW
trGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWu
cZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfOQTn/nCV77x
PfD/709+8Zs//CUgdxDBhNCK1oTSljDCiaAdkbQnimhiiKUjccSTQCKdSSKZ
FFJJI50MMskim650ozs59CSXPHqTTx8KKKSI/hRTQilllFNBJVVUM5Aaaqlj
GPU00EgT/wB2QWZ+
       "], {227}, {}}, {{}, {}, {}, {3, 94, 122, 134, 157, 159, 165, 210, 223,
        241, 250, 262, 282, 296, 314, 339}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006794450867052022, "SingleEvaluationTime" -> 
    0.005826, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9},
 CellLabel->
  "Out[432]=",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[433]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"357.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9},
 CellLabel->
  "Out[433]=",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[304]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.518], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.518], Thickness[Small]}], RectangleBox[{-3.2, 0}, {-3., 9.},
      RoundingRadius->0], RectangleBox[{-3., 0}, {-2.8, 17.},
      RoundingRadius->0], RectangleBox[{-2.8, 0}, {-2.6, 27.},
      RoundingRadius->0], RectangleBox[{-2.6, 0}, {-2.4, 51.},
      RoundingRadius->0], RectangleBox[{-2.4, 0}, {-2.2, 112.},
      RoundingRadius->0], RectangleBox[{-2.2, 0}, {-2., 150.},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.8, 159.},
      RoundingRadius->0], RectangleBox[{-1.8, 0}, {-1.6, 280.},
      RoundingRadius->0], RectangleBox[{-1.6, 0}, {-1.4, 412.},
      RoundingRadius->0], RectangleBox[{-1.4, 0}, {-1.2, 471.},
      RoundingRadius->0], RectangleBox[{-1.2, 0}, {-1., 624.},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.8, 806.},
      RoundingRadius->0], RectangleBox[{-0.8, 0}, {-0.6, 1282.},
      RoundingRadius->0], RectangleBox[{-0.6, 0}, {-0.4, 1483.},
      RoundingRadius->0], RectangleBox[{-0.4, 0}, {-0.2, 2126.},
      RoundingRadius->0], RectangleBox[{-0.2, 0}, {0., 3314.},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.2, 5674.},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.4, 2022.},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.6, 2084.},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.8, 524.},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {1., 839.},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.2, 36.},
      RoundingRadius->0], RectangleBox[{1.2, 0}, {1.4, 19.},
      RoundingRadius->0], RectangleBox[{1.4, 0}, {1.6, 4.},
      RoundingRadius->0], RectangleBox[{1.6, 0}, {1.8, 1.},
      RoundingRadius->0], RectangleBox[{1.8, 0}, {2., 2.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-3.3040000000000003`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-3.2, 2.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9},
 CellLabel->
  "Out[304]=",ExpressionUUID->"e6103b80-4921-4098-9ca4-b8cea3aeda4f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1806, 53, 28339, 631, 313, "Output",ExpressionUUID->"74597de4-2dc4-487b-b151-4a7edeb6169d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30182, 689, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[30411, 697, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30879, 708, 127693, 2373, 652, "Output",ExpressionUUID->"f5e09500-4f17-4b40-ba88-1e46fd210c2d"]
}, Open  ]],
Cell[158587, 3084, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167117, 3291, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[167437, 3298, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[170196, 3368, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172008, 3414, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[172366, 3422, 4849, 79, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[177218, 3503, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[178666, 3532, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179798, 3562, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[180156, 3570, 2088, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182281, 3613, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[182740, 3622, 393, 10, 29, "Input",ExpressionUUID->"c3acb428-ccf0-4ee4-ad0b-b2d55ea522ee"],
Cell[183136, 3634, 2099, 42, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[185260, 3680, 1078, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[186341, 3701, 522336, 9532, 495, "Output",ExpressionUUID->"824d9915-8520-4735-9bf4-25d763c395a9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[708726, 13239, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[709236, 13249, 923, 16, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[710184, 13269, 1242, 22, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[711429, 13293, 3470, 72, 87, "Output",ExpressionUUID->"10883d41-ece6-41d7-922c-21cb3bdfe986"]
}, Open  ]],
Cell[CellGroupData[{
Cell[714936, 13370, 1152, 27, 51, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[716091, 13399, 3295, 70, 87, "Output",ExpressionUUID->"c359f961-8b05-49cb-bc39-a1f48553d8c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719423, 13474, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[720000, 13491, 447, 8, 44, "Output",ExpressionUUID->"4d2f4a8f-1fc8-4646-868d-c6fed4a55ac2"]
}, Open  ]],
Cell[720462, 13502, 374, 7, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[720873, 13514, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[721310, 13524, 584, 11, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[721897, 13537, 102350, 1826, 68, "Output",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[824284, 15368, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[824633, 15377, 198359, 3748, 495, "Output",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023029, 19130, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1023400, 19139, 325, 7, 44, "Output",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1023774, 19152, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1024318, 19162, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1024665, 19174, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1024949, 19182, 3180, 59, 235, "Output",ExpressionUUID->"e6103b80-4921-4098-9ca4-b8cea3aeda4f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

