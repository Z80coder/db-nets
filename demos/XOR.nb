(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    868268,      16516]
NotebookOptionsPosition[    862942,      16419]
NotebookOutlinePosition[    863380,      16436]
CellTagsIndexPosition[    863337,      16433]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning XOR", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 3.8684260746987667`*^9}, {3.869278884416973*^9, 
  3.869278885792972*^9}},ExpressionUUID->"e80ffaf1-ce7d-4821-a091-\
e123c51e05cc"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"ff3102a6-3c5a-457a-910a-\
4abcf0a85217"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"numBooleanVariables", "=", "10"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    SuperscriptBox["2", "numBooleanVariables"], " ", "possible", " ", 
    "inputs"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10"}], "]"}], "&"}], ",", 
     "\"\<BooleanFunction\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", 
   RowBox[{"Min", "[", 
    RowBox[{"2000", ",", 
     SuperscriptBox["2", "numBooleanVariables"]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numClasses", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Soften", "/@", "x"}], "->", 
         RowBox[{"bf", "@@", "x"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}, {3.8648255889830313`*^9, 3.864825592504498*^9}, {
   3.864825624917417*^9, 3.864825626880946*^9}, {3.864829407265236*^9, 
   3.8648294087742167`*^9}, {3.864829443456806*^9, 3.864829444846697*^9}, {
   3.864829792396603*^9, 3.8648297927316837`*^9}, {3.864830032545388*^9, 
   3.8648300662967587`*^9}, 3.86483040909219*^9, {3.864830633132044*^9, 
   3.8648306348014383`*^9}, {3.8648309522842607`*^9, 
   3.8648309524254227`*^9}, {3.864831241412085*^9, 3.8648312465735483`*^9}, {
   3.864831361588151*^9, 3.864831427353725*^9}, {3.864831467589365*^9, 
   3.864831467738257*^9}, {3.8650545097885313`*^9, 3.865054521919083*^9}, {
   3.865574752812943*^9, 3.865574784399784*^9}, {3.865592534192895*^9, 
   3.865592534298318*^9}, {3.865592762627692*^9, 3.8655927636071053`*^9}, {
   3.865594557687479*^9, 3.865594557984342*^9}, {3.865594963476437*^9, 
   3.8655949635928717`*^9}, {3.865780594387285*^9, 3.8657805954725647`*^9}, {
   3.86578528554428*^9, 3.865785286930284*^9}, {3.8658288989019117`*^9, 
   3.865828899235673*^9}, {3.865830427368958*^9, 3.865830428545253*^9}, {
   3.865830742328867*^9, 3.8658307442321053`*^9}, {3.865831732136331*^9, 
   3.8658317341109133`*^9}, {3.865837020252844*^9, 3.865837020623869*^9}, {
   3.8658371834605103`*^9, 3.865837184543343*^9}, {3.8658377080420017`*^9, 
   3.865837708413855*^9}, {3.865837740366976*^9, 3.86583774055787*^9}, {
   3.865859522557151*^9, 3.865859523313833*^9}, {3.865859830431425*^9, 
   3.865859831995036*^9}, {3.865866201299968*^9, 3.865866202414603*^9}, {
   3.8658663169608183`*^9, 3.865866318295281*^9}, {3.865866383754406*^9, 
   3.8658663858232803`*^9}, {3.8660002644683657`*^9, 3.866000265575876*^9}, {
   3.866000397664502*^9, 3.866000398839758*^9}, {3.8660004574432163`*^9, 
   3.8660004580794077`*^9}, {3.8666042520823517`*^9, 3.866604264374364*^9}, {
   3.866604302861124*^9, 3.866604304397232*^9}, {3.866604362727042*^9, 
   3.866604365684434*^9}, {3.866634397416646*^9, 3.86663441391949*^9}, {
   3.866634545413786*^9, 3.866634547171479*^9}, {3.8666346718798122`*^9, 
   3.866634702156291*^9}, {3.867671157222414*^9, 3.867671157363698*^9}, {
   3.868095338683979*^9, 3.868095349658772*^9}, {3.8692257543862534`*^9, 
   3.869225760070663*^9}, {3.869226350038672*^9, 3.8692263530848923`*^9}, {
   3.869226445388289*^9, 3.869226447765545*^9}, {3.869227314728384*^9, 
   3.869227438401598*^9}, {3.8692778466039267`*^9, 3.869277860306823*^9}, {
   3.869280781904627*^9, 3.869280784726466*^9}, {3.8692942712492027`*^9, 
   3.8692943131087103`*^9}, 3.869294699302785*^9, {3.8692967045596027`*^9, 
   3.869296708100168*^9}, {3.869299553854471*^9, 3.8692995957754602`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"examples", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.869294701690948*^9, 3.8692947036918592`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], "\[Rule]", 
    "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", 
      "1.`", ",", "1.`", ",", "0.`", ",", "1.`"}], "}"}], "\[Rule]", 
    "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", 
      "0.`", ",", "1.`", ",", "1.`", ",", "0.`"}], "}"}], "\[Rule]", 
    "True"}]}], "}"}]], "Output",
 CellChangeTimes->{3.869294703931072*^9, 3.869296709793788*^9, 
  3.8692995993322277`*^9, 3.8693102752164717`*^9, 3.869551960884112*^9, 
  3.869554574261319*^9, 3.8695549832573833`*^9, 3.869561061731083*^9, 
  3.8695668988357286`*^9, 3.8695683489990053`*^9, 3.869639096719898*^9, 
  3.8696461939813833`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"ba3c348e-b349-4afb-9b83-4503ec534298"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"a83aa6fb-db66-4018-aace-\
2706a2be80da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.86678913871952*^9, 3.86678914729805*^9}, {
  3.8692943328044443`*^9, 3.869294348259564*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"targetEncoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}], ",", 
      "\"\<IndicatorVector\>\""}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869277326407647*^9, 3.86927733940766*^9}, {
  3.8692807974788446`*^9, 3.869280799898975*^9}, {3.869284676787505*^9, 
  3.8692846810647993`*^9}, {3.86928477155538*^9, 3.869284775848857*^9}, {
  3.8692967298312063`*^9, 3.869296740112113*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"b6f53683-da40-4a5d-9d7a-\
130f6c5ca4dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"22", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNOT", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralMajority", "[", 
         RowBox[{"classificationLayerSize", ",", "inputSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869299418713677*^9, {3.8692994812626457`*^9, 3.869299509217765*^9}, {
   3.8692996464312763`*^9, 3.869299648695244*^9}, {3.8693023829191008`*^9, 
   3.869302383206976*^9}, {3.869302606635058*^9, 3.869302607503434*^9}, {
   3.8695519944197283`*^9, 3.8695520116113234`*^9}, {3.8695520497476788`*^9, 
   3.86955205361952*^9}, {3.8695522074191504`*^9, 3.8695522084918833`*^9}, 
   3.869552337095097*^9, {3.869552371303269*^9, 3.869552373171102*^9}, 
   3.869552475387332*^9, {3.869552534414999*^9, 3.869552536002717*^9}, {
   3.869563004255267*^9, 3.8695630090855827`*^9}, {3.869563076916162*^9, 
   3.869563136725778*^9}, {3.869568010599187*^9, 3.86956801472672*^9}, {
   3.8696406520683823`*^9, 3.8696406521900187`*^9}, {3.8696407109698544`*^9, 
   3.8696407121576643`*^9}, {3.869646348929699*^9, 3.869646396536577*^9}, {
   3.869646524418833*^9, 3.869646524952177*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"64", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869569245687269*^9, 3.869569254196104*^9}, 
   3.869627237783164*^9, {3.869639889848153*^9, 3.869639918933481*^9}, {
   3.86964020681771*^9, 3.86964020726963*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"d1ef7b56-3413-4a9e-b2bd-d56f8df851c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableSoftNet", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<NeuralLogicNet\>\"", "->", "softNet"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NeuralLogicNet\>\"", "->", "\"\<Loss\>\""}], "}"}], ",", 
     RowBox[{"\"\<Target\>\"", "->", "targetEncoder"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.86626215222803*^9, 
   3.8662621832516203`*^9}, {3.866263109109415*^9, 3.86626311329671*^9}, {
   3.8662634113702927`*^9, 3.866263445027198*^9}, {3.8662637295611134`*^9, 
   3.8662637341766987`*^9}, {3.8662638454628477`*^9, 3.86626384912811*^9}, {
   3.866264629557499*^9, 3.866264632526574*^9}, {3.866264756302319*^9, 
   3.866264756571878*^9}, {3.86626485570925*^9, 3.8662648604861727`*^9}, {
   3.866264906589533*^9, 3.866264909654014*^9}, {3.8662650173821917`*^9, 
   3.866265024103039*^9}, {3.866267932128647*^9, 3.866267936947571*^9}, {
   3.866272289890004*^9, 3.866272326071719*^9}, 3.866272498086396*^9, {
   3.866272605318948*^9, 3.8662726100556726`*^9}, {3.866272697696899*^9, 
   3.8662727061238422`*^9}, {3.866272804197109*^9, 3.866272807076984*^9}, {
   3.866272890576043*^9, 3.8662729018249826`*^9}, {3.866273061136441*^9, 
   3.866273079881092*^9}, {3.8662739928242073`*^9, 3.866274026656089*^9}, {
   3.866274121640194*^9, 3.86627415310497*^9}, {3.8662742538084593`*^9, 
   3.866274260924819*^9}, {3.86627447707015*^9, 3.866274491178595*^9}, {
   3.866274954835182*^9, 3.866274972215249*^9}, {3.8662751949711027`*^9, 
   3.866275214973873*^9}, {3.866275317133552*^9, 3.866275326157571*^9}, {
   3.866276341927771*^9, 3.866276342361364*^9}, {3.866276444445874*^9, 
   3.866276444758065*^9}, 3.866276574032675*^9, {3.8662774805759163`*^9, 
   3.866277486441833*^9}, {3.866277730486899*^9, 3.866277745606361*^9}, {
   3.866277812901185*^9, 3.8662778241863747`*^9}, {3.866277923447342*^9, 
   3.866277942127078*^9}, {3.866278044847097*^9, 3.866278070211129*^9}, {
   3.866278491367318*^9, 3.866278493966505*^9}, {3.866278580024693*^9, 
   3.8662785830122213`*^9}, {3.866278895153315*^9, 3.866278898232675*^9}, {
   3.866280230366321*^9, 3.86628024016776*^9}, 3.866280351079256*^9, {
   3.866280499461529*^9, 3.8662805080447283`*^9}, {3.866280639515723*^9, 
   3.8662806449211483`*^9}, {3.866280754797947*^9, 3.86628075810079*^9}, {
   3.866280876373425*^9, 3.866280889329287*^9}, 3.866281009490582*^9, {
   3.8662811039106913`*^9, 3.866281107962268*^9}, {3.866281186723476*^9, 
   3.866281191533492*^9}, {3.8662812575988626`*^9, 3.866281268830084*^9}, {
   3.8662813166116953`*^9, 3.866281325765922*^9}, {3.866282044987713*^9, 
   3.866282048676916*^9}, {3.866282148870701*^9, 3.866282152685348*^9}, {
   3.86628313823394*^9, 3.8662831431981792`*^9}, {3.866283203895447*^9, 
   3.8662832148382063`*^9}, {3.8662832951824627`*^9, 
   3.8662833056304398`*^9}, {3.866283478244402*^9, 3.866283487341878*^9}, {
   3.8662841436542883`*^9, 3.86628415025281*^9}, {3.866284940968055*^9, 
   3.866284945101494*^9}, {3.866285029031362*^9, 3.866285034053158*^9}, {
   3.866285238231142*^9, 3.8662852400450497`*^9}, {3.8662854784494677`*^9, 
   3.866285480030343*^9}, {3.8662855684494333`*^9, 3.866285589220209*^9}, {
   3.866285661897065*^9, 3.866285665049341*^9}, {3.866286012525502*^9, 
   3.866286023701212*^9}, {3.866286183975936*^9, 3.866286197019022*^9}, {
   3.866286343624745*^9, 3.8662863761838703`*^9}, {3.86628647476213*^9, 
   3.866286478513227*^9}, {3.866286583730136*^9, 3.866286589629998*^9}, {
   3.8662866316154537`*^9, 3.866286632298744*^9}, {3.866286684611227*^9, 
   3.866286694033737*^9}, {3.866286815683847*^9, 3.866286826001635*^9}, {
   3.8662869515842*^9, 3.866286957090143*^9}, {3.866287432190014*^9, 
   3.866287433732437*^9}, {3.8662875714309177`*^9, 3.866287575508819*^9}, {
   3.866287972431319*^9, 3.866287979390542*^9}, {3.8662881211610413`*^9, 
   3.866288128734665*^9}, {3.866301184432645*^9, 3.866301189032214*^9}, {
   3.866301252666163*^9, 3.866301255952261*^9}, {3.866301376402754*^9, 
   3.866301391652487*^9}, {3.866301466042976*^9, 3.866301469288639*^9}, {
   3.866301630395039*^9, 3.866301653060717*^9}, {3.866301748836125*^9, 
   3.866301755312545*^9}, {3.86630188485115*^9, 3.866301888560711*^9}, {
   3.866302280747377*^9, 3.8663022952887983`*^9}, {3.866302405795878*^9, 
   3.866302419001148*^9}, {3.866302495340143*^9, 3.866302504605687*^9}, {
   3.866350591374894*^9, 3.8663505951022243`*^9}, {3.866351142159863*^9, 
   3.866351179558625*^9}, {3.8663515938249702`*^9, 3.866351597311022*^9}, {
   3.8663516429930353`*^9, 3.866351646919097*^9}, {3.8663540899964314`*^9, 
   3.866354091250739*^9}, 3.866354227060774*^9, {3.866354342347616*^9, 
   3.866354366019519*^9}, {3.866354536533381*^9, 3.866354542835105*^9}, {
   3.866354615988611*^9, 3.866354616498942*^9}, {3.866354747316181*^9, 
   3.866354747986311*^9}, {3.866354820971937*^9, 3.866354830674176*^9}, {
   3.866354985259542*^9, 3.866355003354249*^9}, {3.866355243555305*^9, 
   3.866355280233426*^9}, {3.866355363275181*^9, 3.8663553649290257`*^9}, {
   3.866355508482728*^9, 3.8663555086333237`*^9}, {3.866355904531114*^9, 
   3.8663559105053043`*^9}, {3.866355992402801*^9, 3.866356013229351*^9}, {
   3.866356256538742*^9, 3.866356257041319*^9}, {3.866356472449071*^9, 
   3.866356473280033*^9}, {3.8663565818412313`*^9, 3.866356588441074*^9}, {
   3.866356990748909*^9, 3.866356994266841*^9}, {3.8663571204214773`*^9, 
   3.866357120574224*^9}, {3.8663572027579412`*^9, 3.8663572078996153`*^9}, {
   3.866357620436617*^9, 3.866357634688436*^9}, {3.866357667446629*^9, 
   3.866357681140574*^9}, {3.8663583040873337`*^9, 3.866358308549032*^9}, {
   3.866358702488315*^9, 3.866358710660177*^9}, {3.866358792502235*^9, 
   3.866358792643732*^9}, {3.8663588650968037`*^9, 3.866358870370079*^9}, {
   3.8663590601050797`*^9, 3.866359061311141*^9}, {3.866359100825281*^9, 
   3.8663591032317047`*^9}, {3.866360392667655*^9, 3.866360402393593*^9}, {
   3.866360446451545*^9, 3.866360454122822*^9}, {3.866360518763679*^9, 
   3.866360523813664*^9}, {3.8663605658118258`*^9, 3.866360586933572*^9}, {
   3.866360874844895*^9, 3.866360875286996*^9}, {3.8663609358459*^9, 
   3.866360946523975*^9}, {3.8663629695673723`*^9, 3.8663629719826107`*^9}, {
   3.8663639844553833`*^9, 3.8663639851026163`*^9}, {3.866364664263899*^9, 
   3.866364667805708*^9}, {3.8663647416864157`*^9, 3.866364751498241*^9}, {
   3.8663648173209887`*^9, 3.8663648239090853`*^9}, {3.866364861552744*^9, 
   3.866364866359233*^9}, {3.866364911593669*^9, 3.866364912091476*^9}, {
   3.8663650443606586`*^9, 3.8663650452161922`*^9}, {3.866365512692107*^9, 
   3.866365515810193*^9}, 3.866365740980801*^9, {3.866366124781304*^9, 
   3.866366128103511*^9}, {3.86636615827591*^9, 3.866366161795991*^9}, 
   3.8663675572465467`*^9, {3.8663679823247623`*^9, 3.8663679840072737`*^9}, {
   3.8663685724947968`*^9, 3.866368575523563*^9}, {3.866368617885765*^9, 
   3.866368630439355*^9}, {3.8663688420628223`*^9, 3.866368846739706*^9}, {
   3.866368921365861*^9, 3.866368935403892*^9}, {3.866368992805874*^9, 
   3.8663689939334173`*^9}, {3.8663690430938*^9, 3.8663690474648046`*^9}, {
   3.866369083709838*^9, 3.8663691118719187`*^9}, {3.866369202398569*^9, 
   3.866369214195849*^9}, {3.866369334334588*^9, 3.866369336388123*^9}, {
   3.866369454951181*^9, 3.8663694569323397`*^9}, {3.866369515406219*^9, 
   3.866369518628167*^9}, {3.8663703695855513`*^9, 3.8663703750077*^9}, {
   3.8663705385538683`*^9, 3.866370541048525*^9}, {3.866370586394085*^9, 
   3.866370607876096*^9}, {3.8663707547717*^9, 3.866370757696903*^9}, {
   3.866370926163419*^9, 3.866370929489147*^9}, {3.866371042659484*^9, 
   3.8663710475373373`*^9}, {3.866371595734161*^9, 3.866371595814637*^9}, {
   3.866371630486404*^9, 3.866371630623527*^9}, {3.866371683122916*^9, 
   3.866371701147089*^9}, {3.866371789324903*^9, 3.866371822547234*^9}, {
   3.8663718525974607`*^9, 3.8663718606429367`*^9}, {3.866371974165319*^9, 
   3.866371979075355*^9}, {3.866372122293806*^9, 3.8663721296757917`*^9}, {
   3.866372551518608*^9, 3.866372561132722*^9}, {3.866372627211433*^9, 
   3.866372636080841*^9}, {3.8663728112322397`*^9, 3.866372812994047*^9}, {
   3.866372895895451*^9, 3.866372901477323*^9}, {3.8664377149946833`*^9, 
   3.8664377176580143`*^9}, {3.86643884019552*^9, 3.86643884333634*^9}, {
   3.866438919186672*^9, 3.866438921864346*^9}, {3.8664391767222757`*^9, 
   3.866439182016387*^9}, {3.866439413057221*^9, 3.8664394237656918`*^9}, {
   3.866440165425671*^9, 3.8664401663535337`*^9}, {3.8664414544278717`*^9, 
   3.866441455406114*^9}, {3.8664415241527863`*^9, 3.866441526297073*^9}, {
   3.866441636299324*^9, 3.866441637325185*^9}, {3.8664421743093033`*^9, 
   3.866442174534107*^9}, {3.866444116919817*^9, 3.866444119674713*^9}, {
   3.86644604617083*^9, 3.866446049128669*^9}, {3.866512861360115*^9, 
   3.866512866295472*^9}, {3.866512916479863*^9, 3.866512918447736*^9}, {
   3.866634565957718*^9, 3.866634566999825*^9}, {3.86680026940904*^9, 
   3.866800269792528*^9}, {3.8675831417592773`*^9, 3.867583145913877*^9}, {
   3.869221218808393*^9, 3.869221231059099*^9}, {3.869225972028479*^9, 
   3.8692260010575743`*^9}, {3.869226207781839*^9, 3.869226212280487*^9}, {
   3.8692262960682364`*^9, 3.869226330905139*^9}, {3.869226390653082*^9, 
   3.869226434585244*^9}, {3.869226464845196*^9, 3.869226465900545*^9}, {
   3.869277398980557*^9, 3.86927740136417*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetFlatten", "[", "trainableSoftNet", "]"}]], "Input",
 CellChangeTimes->{{3.869221232121078*^9, 3.869221234978818*^9}, 
   3.869277421619462*^9, {3.869284608873015*^9, 3.8692846132481823`*^9}, {
   3.869552225068637*^9, 3.869552227697998*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/4\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.9999999732051, 1.000000241154073}], 
                    
                    Offset[{0, -13.5}, {-8.9999999732051, 
                    1.000000241154073}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss/Error\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Hard..\"", "\"Loss/Harden\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/Harden", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftProbs\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftmaxLayer\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftmaxLayer", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/1\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-11.9999999732051, 
                    1.000000321538764}], 
                    
                    Offset[{0, -13.5}, {-11.9999999732051, 
                    1.000000321538764}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/2\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-10.9999999732051, 
                    1.000000294743867}], 
                    
                    Offset[{0, -13.5}, {-10.9999999732051, 
                    1.000000294743867}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/3\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    Offset[{0, -13.5}, {-9.9999999732051, 1.00000026794897}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/5\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -15.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/6\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox["\"NeuralLog..\"", "\"NeuralLogicNet/7\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/8\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/8", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337044`}, {-9.449999985262803, 
                    0.5500002532117767}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"22\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"440\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-11.449999973205099`, 
                    1.0000003068015708`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"440\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-10.449999973205099`, 
                    1.0000002800066736`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"10\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-9.449999973205099, 
                    1.0000002532117764`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"10\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.4499999732051, 
                    1.0000002264168797`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"44\"", "\"10\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox["\"44\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"44\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"22\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.999999999999996, 
                    2.679489702911784*^-7}, {-8.9999999732051, 
                    1.000000241154073}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-11.9999999732051, 
                    1.000000321538764}, {-10.9999999732051, 
                    1.000000294743867}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 440\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 440\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.9999999732051, 
                    1.000000294743867}, {-9.9999999732051, 
                    1.00000026794897}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 440\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 440\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.9999999732051, 
                    1.00000026794897}, {-8.9999999732051, 
                    1.000000241154073}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.9999999732051, 
                    1.000000241154073}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 44\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 44\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 44\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 44\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999985262803, 
                    0.5500002532117767}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-11.449999973205099`, 
                    1.0000003068015708`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 440\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 440\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-10.449999973205099`, 
                    1.0000002800066736`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 440\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 440\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999973205099, 
                    1.0000002532117764`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.4499999732051, 
                    1.0000002264168797`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
44\[Times]10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 44\[Times]10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 44\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 44\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 44\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 44\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]22\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.999999999999996, 2.679489702911784*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-8.9999999732051, 1.000000241154073}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-8.9999999732051, 
                    1.000000241154073}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/4", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"CE\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss/Error\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Error", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/Harden\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Harden", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftProbs\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftmaxLayer\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-11.9999999732051, 
                    1.000000321538764}], 
                    
                    Offset[{-10.5, -10.5}, {-11.9999999732051, 
                    1.000000321538764}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-11.9999999732051, 1.000000321538764}], 
                    
                    Offset[{10.5, 10.5}, {-11.9999999732051, 
                    1.000000321538764}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-11.9999999732051, 
                    1.000000321538764}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-10.9999999732051, 1.000000294743867}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-10.9999999732051, 
                    1.000000294743867}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/2", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-9.9999999732051, 1.00000026794897}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-9.9999999732051, 1.00000026794897}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/3", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Sort\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/5", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[LeftDoubleBracket] \[RightDoubleBracket]\"", 
                    GrayLevel[0.33], 13, Bold, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/6", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/7", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/8", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-9.999999999999996, 
                    2.679489702911784*^-7}, {-8.9999999732051, 
                    1.000000241154073}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-11.9999999732051, 
                    1.000000321538764}, {-10.9999999732051, 
                    1.000000294743867}, {-9.9999999732051, 
                    1.00000026794897}, {-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 21, 8, 21, 21, 21, 21, 21, 21, 25, 21, 21,
                     21}, NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {717.9999999999998, 103.00001473719334`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29., 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{440}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {440}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{440}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {440}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{440}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{440}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{44, 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{440}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> 44, "$InputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 5}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{44}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {44}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6cfa1ae5a9de59cf", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{44}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 22}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 22}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 22},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "70376b50182ea8e2", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 22}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 22}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 22}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Error" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 2, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], 
                    "Target" -> <|"Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {True, False}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 2, "$Version" -> "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/4"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/7"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/8"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/4"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/7"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/8"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8692846140728807`*^9, 3.869284685781642*^9, 3.8692934271654387`*^9, 
   3.869310298316814*^9, {3.8695522199738617`*^9, 3.869552228548277*^9}, 
   3.869552543654649*^9, 3.8695526214970293`*^9, 3.869552678464608*^9, 
   3.869552712040965*^9, 3.869554614318481*^9, 3.8695549895842113`*^9, 
   3.869555139045484*^9, 3.869561134345007*^9, 3.8695690591689796`*^9, 
   3.869569281503888*^9, 3.869639170664979*^9, 3.869639287328896*^9, {
   3.8696398983034077`*^9, 3.8696399218679237`*^9}, 3.869640209479702*^9, {
   3.869640443765613*^9, 3.869640472418601*^9}, 3.8696405690776978`*^9, 
   3.8696406236621943`*^9, 3.869640655638855*^9, 3.869640715833083*^9, 
   3.869646220902361*^9, {3.8696463588996487`*^9, 3.869646400019401*^9}, 
   3.8696465282712517`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"127cbded-1d3f-4735-8584-7a51300a1d2f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-\
78e337587528"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableSoftNet", ",", "trainData", ",", "All", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}, {3.866272907421722*^9, 3.866272908705574*^9}, {
   3.866274679974001*^9, 3.866274683777981*^9}, {3.866275126894273*^9, 
   3.866275130882132*^9}, {3.866275621030303*^9, 3.86627562449095*^9}, {
   3.866275800963348*^9, 3.866275804851942*^9}, {3.866278286918571*^9, 
   3.866278290408846*^9}, {3.866279939718389*^9, 3.8662799438283052`*^9}, {
   3.8662825835076027`*^9, 3.866282587086446*^9}, {3.8662848978232517`*^9, 
   3.8662849013340178`*^9}, {3.866301199025255*^9, 3.866301208705173*^9}, {
   3.866302091405136*^9, 3.866302093072084*^9}, {3.8663022330606956`*^9, 
   3.8663022743807373`*^9}, {3.866303190918262*^9, 3.8663031961042967`*^9}, {
   3.8663508996403513`*^9, 3.866350903983953*^9}, {3.8663558607588453`*^9, 
   3.866355860917651*^9}, {3.86637013313169*^9, 3.866370138430928*^9}, {
   3.866370237003203*^9, 3.866370239455555*^9}, {3.8663703291644793`*^9, 
   3.866370333111907*^9}, {3.866370363265703*^9, 3.866370363711856*^9}, {
   3.8663720431119947`*^9, 3.866372048852154*^9}, {3.866372163198892*^9, 
   3.8663721862104397`*^9}, 3.8663723957836103`*^9, {3.866372460806899*^9, 
   3.866372466981298*^9}, {3.8663728465397882`*^9, 3.866372846690668*^9}, {
   3.866439863015705*^9, 3.866439889076521*^9}, {3.866444399919945*^9, 
   3.866444403398275*^9}, 3.866445596437694*^9, 3.866445994629862*^9, {
   3.866446077093233*^9, 3.8664460772227592`*^9}, {3.866514058957122*^9, 
   3.866514061965129*^9}, {3.866514093672724*^9, 3.8665140946276417`*^9}, 
   3.866514530731886*^9, {3.866514784096607*^9, 3.866514784235477*^9}, {
   3.8665148543229303`*^9, 3.86651485485518*^9}, {3.866517197949828*^9, 
   3.866517203967832*^9}, 3.866517357579501*^9, 3.8665174374755917`*^9, 
   3.8665175119230967`*^9, {3.866517590284361*^9, 3.866517620168564*^9}, 
   3.8665176619240017`*^9, {3.8665179325026484`*^9, 3.8665179399815683`*^9}, {
   3.866518111910069*^9, 3.866518112233807*^9}, {3.866518521945266*^9, 
   3.866518522115803*^9}, {3.866518571201038*^9, 3.866518588328702*^9}, {
   3.866518646862028*^9, 3.866518650143523*^9}, 3.866518704027602*^9, {
   3.866519202548511*^9, 3.8665192068871107`*^9}, {3.866552934111923*^9, 
   3.866552991359269*^9}, {3.866553502473754*^9, 3.8665535030716467`*^9}, {
   3.866554417382031*^9, 3.866554420050095*^9}, {3.866554652086327*^9, 
   3.8665546522545357`*^9}, 3.866604776742971*^9, {3.86680027773044*^9, 
   3.866800278113852*^9}, {3.868094967186932*^9, 3.868094986665822*^9}, {
   3.868095019045618*^9, 3.868095019220586*^9}, {3.868361304394638*^9, 
   3.868361304829949*^9}, {3.868361488191626*^9, 3.868361491259301*^9}, 
   3.868361525155517*^9, {3.8692213052091*^9, 3.8692213346561832`*^9}, {
   3.8692810440868177`*^9, 3.8692810484261227`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"306b98cf-6a16-4b58-bf92-\
e841969834f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "|>"}], ",", 
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", "targetEncoder", "]"}]}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], 
       "\[IndentingNewLine]", "]"}]}], "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866262883598037*^9, 3.866262913813736*^9}, {
   3.866800388275832*^9, 3.866800388780817*^9}, {3.8683615002909307`*^9, 
   3.868361522978859*^9}, {3.869221408816246*^9, 3.8692214711637383`*^9}, 
   3.869221553810891*^9, {3.869221654008464*^9, 3.869221732536498*^9}, {
   3.8692218215629063`*^9, 3.869221866933878*^9}, {3.86922191254809*^9, 
   3.869221913409645*^9}, {3.869221946220015*^9, 3.869221992865573*^9}, {
   3.8692220239803658`*^9, 3.869222074362282*^9}, {3.869222542284799*^9, 
   3.869222618659419*^9}, {3.869225398347341*^9, 3.8692254268744698`*^9}, {
   3.869225457230851*^9, 3.869225468811384*^9}, {3.869227062000464*^9, 
   3.8692270744112864`*^9}, {3.869277551850852*^9, 3.869277552935012*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", "testData"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.8692215859194508`*^9, {3.869277581499093*^9, 3.8692775834166107`*^9}, 
   3.869294465445704*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "3adccf34-1cf2-4283-a87b-b0b1a961f909"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "205"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"100.0000000000000", "00", "22"}, 
                    "AroundSeq", SyntaxForm -> PlusMinus], 
                    Around[100.`3., 2.220446049250313080847263`3.*^-14]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"56.6", "3.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    56.5853658536585299998`3., 3.4702043764850381002`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9860792553895312285`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017221256021577314`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9826350041852157657`3.", "\", \"", 
                    "0.9895235065938466912`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9826350041852157657`3., ", ", 0.9895235065938466912`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0140185468902529059`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017464364221437094`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0105256740459654871`3.", "\", \"", 
                    "0.0175114197345403247`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0105256740459654871`3., ", ", 0.0175114197345403247`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.13`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.34`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{1., 1., 1.}, {0.8654981175886772, 
                    0.5818122877779097, 0.05215226897575248}}, {{1., 0.42, 
                    0.}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["116", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{116, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["89", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{89, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{116, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" example\"", "\"s\"", "\" of class \"", "False"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{89, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{116, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{89, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["116", TraditionalForm]}, {0.5, 
                    FormBox["89", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["116", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["89", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
/v0kdhSuZn5tJLfV2cDqcxH/Bx14128=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {440}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {440}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{44, 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 44, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 5}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {44}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6cfa1ae5a9de59cf", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 22}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 22},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "70376b50182ea8e2", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 154872, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 14, 49, 1.284017`6.8611457625867915}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzNVstNRDEMfOJIF1SyPVACEmcqpRdKgPNKo/nmiUir1Uuc8SS2x3n7+Hr/
fLmu6/vv93qx8fPQ1pkdwkPfCO95Hf27/lX+DA/hprzW34hPas/On+Kr+9BQ
ebd5trq39vzqfjTSeK3yP+Xn5g/DQ3btfadxYDzY/jau6b/Kv82TdR24flsd
Sf20utP2E3f+dH6lo9V/htfqYxtXNP5r/q7w3H3t+U/FBeGr+1w+bZ2t+1O7
39WhlEeLv84fladrp86fiqOqg6pftj+1P9XfUt1EOO2517q77ndp3TB/636Z
6nt6v8zvWkfTe2E4zC7Fa+ux1SF13sVHdmudUvHd/S1+qp9tH0z73ZoHs1+v
p/WR+lX9tP2lzaPW/m5dZ7jqWOGmetDqvrsv1Rc3fu17o9Wx9v1xqu+1+Kt4
p7ri8lzhpfZpvqB11z/iw3DW74JT/tv7VUdaFy7uCqcdaRxT/VX5rN5RK11x
66S9n/S9ktYdwmX8Vv1R5ZHyduO5el+odqfrBtkxPm6enTrXGs/Nk9W+VEfU
+XS97Uerf8bH5e3W8epe132V4a/6JeOj7mN4qd+UT3oPDJfNn+7T7Tyyu6t+
XT4tX3e4OsRwWv8r/WN2z/OMX2rP/KfrbvxP+WX+1vd9qt+18WF2rd6v+3mb
P+m9p32l5dGuu6ONs5ovd+n26XcFslv1V/Vb5dP2Gfedgfy4/BjPFE/FXY3V
/a3Pn/J8tnfnW71w88zFV3mf6r/MXuWnjtU7B/FB86kupfWk7l/36TYvEX66
znggu/T+V+db1Rvj5+Km/lo75g/hrfXztG629+Ge160LdbTxZ7gqr7YeT/XR
NS4b67q/q17W8UJ2rr9V/0T2bL7tx6kdGm5epfrX9qc0fiquO//z+AVi54Xv

         "], 
        "Output" -> {
         True, False, False, True, False, True, True, False, False, True, 
          False, True, True, True, False, True, True, False, True, True, True,
           False, True, True, False, False, True, False, True, True, False, 
          True, True, True, False, True, True, False, True, True, False, 
          False, True, True, False, False, True, False, False, False, False, 
          True, False, False, False, True, False, True, False, True, True, 
          True, True, False, True, True, False, True, True, False, True, True,
           True, True, True, False, True, True, True, False, False, True, 
          True, False, True, True, False, False, True, False, True, True, 
          True, True, False, True, True, True, True, False, True, True, False,
           True, True, True, False, True, True, True, False, True, True, 
          False, False, False, False, True, True, False, True, True, True, 
          True, False, False, True, True, True, False, False, False, True, 
          False, False, True, True, True, True, True, False, False, True, 
          False, True, True, False, False, False, True, False, False, True, 
          True, False, False, True, True, False, False, True, False, True, 
          True, False, False, False, True, False, True, False, False, False, 
          True, False, False, False, True, True, True, True, True, False, 
          False, False, True, False, True, False, True, True, True, True, 
          False, True, True, False, True, True, False, False, False, True, 
          False, True}|>, 
      "Predictions" -> {
       True, False, False, True, False, True, True, False, False, True, False,
         True, True, True, False, True, True, False, True, True, True, False, 
        True, True, False, False, True, False, True, True, False, True, True, 
        True, False, True, True, False, True, True, False, False, True, True, 
        False, False, True, False, False, False, False, True, False, False, 
        False, True, False, True, False, True, True, True, True, False, True, 
        True, False, True, True, False, True, True, True, True, True, False, 
        True, True, True, False, False, True, True, False, True, True, False, 
        False, True, False, True, True, True, True, False, True, True, True, 
        True, False, True, True, False, True, True, True, False, True, True, 
        True, False, True, True, False, False, False, False, True, True, 
        False, True, True, True, True, False, False, True, True, True, False, 
        False, False, True, False, False, True, True, True, True, True, False,
         False, True, False, True, True, False, False, False, True, False, 
        False, True, True, False, False, True, True, False, False, True, 
        False, True, True, False, False, False, True, False, True, False, 
        False, False, True, False, False, False, True, True, True, True, True,
         False, False, False, True, False, True, False, True, True, True, 
        True, False, True, True, False, True, True, False, False, False, True,
         False, True}, "LogProbabilities" -> CompressedData["
1:eJylli9IQ1EUxp8b/mtDFBYMUzTIHCazgqJBBFmYXScoCC6KFi0qiEVYsNk0
Lq3JfbKgCLMpUxHGVMTivzBEDWo45TfGx8Mwxr3v3HPO933nnHu7ZpaScyHP
84q/v7//taO+sZfbSdc7vf367HX6iY3Tj61Q1F8eeZy/G0+7UOtButzU7pdT
ub2d9VW3eX2/MPA16PY7OqtxL+bfzCSv3sMNfnllbiIx5LuTfKXjIbvrLkpn
lWxbxKe97dPO1txnfPu3fdovRjPfmfKhax0+L6zPttScJ17L23DYOfNjPBgv
xMN8VL70Z3kwL1vzPPWhP/JBPIzzFr6cShWbXb70+d7o9Ug8jKfsGY/6EC/x
HadHC7n+mLutPsUjXncNf4zHelT6sv5U/ROP1YHVhfFovPI8+aY99TPcxgO/
K/35XfHL8+Snpn+gf1B71oPqb9WfKh71UP2h8Kl8WY+sFzXv6s2Fev2k9GO+
9KfmaVD85FfF53xlvSp9+F3ly3jUR62Zn+JDzXfaEw/rnfVFvP+dD/TH/Jkf
65drhU/hDRqP+9Sv3rl680LdN4pPdZ+SH54Pev9Tv6D3Gftfva+oI/2p96Ca
h+q9oPBwre4TdT+pNf3TTtWj6h9VDyo/1U9qPvF9EnQeB52nzI/6/ABmgKrt

       "], "CountMatrix" -> {{116, 0, 0}, {0, 89, 0}}, 
      "IndicesMatrix" -> {{{1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 
         23, 24, 27, 29, 30, 32, 33, 34, 36, 37, 39, 40, 43, 44, 47, 52, 56, 
         58, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 
         82, 83, 85, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 
         105, 106, 108, 109, 110, 112, 113, 118, 119, 121, 122, 123, 124, 127,
          128, 129, 133, 136, 137, 138, 139, 140, 143, 145, 146, 150, 153, 
         154, 157, 158, 161, 163, 164, 168, 170, 174, 178, 179, 180, 181, 182,
          186, 188, 190, 191, 192, 193, 195, 196, 198, 199, 203, 
         205}, {}, {}}, {{}, {2, 3, 5, 8, 9, 11, 15, 18, 22, 25, 26, 28, 31, 
         35, 38, 41, 42, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 59, 64, 67, 
         70, 76, 80, 81, 84, 87, 88, 90, 95, 100, 103, 107, 111, 114, 115, 
         116, 117, 120, 125, 126, 130, 131, 132, 134, 135, 141, 142, 144, 147,
          148, 149, 151, 152, 155, 156, 159, 160, 162, 165, 166, 167, 169, 
         171, 172, 173, 175, 176, 177, 183, 184, 185, 187, 189, 194, 197, 200,
          201, 202, 204}, {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {205}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0004272878048780488, "SingleEvaluationTime" -> 
      0.002133125, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "ab8075d7-9756-4fd7-ad20-95447510545d"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "205"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"100.0000000000000", "00", "22"}, 
                    "AroundSeq", SyntaxForm -> PlusMinus], 
                    Around[100.`3., 2.220446049250313080847263`3.*^-14]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"56.6", "3.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    56.5853658536585299998`3., 3.4702043764850381002`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9860792553895312285`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017221256021577314`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9826350041852157657`3.", "\", \"", 
                    "0.9895235065938466912`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9826350041852157657`3., ", ", 0.9895235065938466912`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0140185468902529059`3.", 
                    StyleBox[
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017464364221437094`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0105256740459654871`3.", "\", \"", 
                    "0.0175114197345403247`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0105256740459654871`3., ", ", 0.0175114197345403247`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.2`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"9.8`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{1., 1., 1.}, {0.8654981175886772, 
                    0.5818122877779097, 0.05215226897575248}}, {{1., 0.42, 
                    0.}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["116", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{116, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["89", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{89, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{116, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" example\"", "\"s\"", "\" of class \"", "False"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{89, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "116", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{116, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "89", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{89, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["116", TraditionalForm]}, {0.5, 
                    FormBox["89", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["116", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["89", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5C5A0QwNNhDMDJA
F0Pmw9jIfGLUYLMDnY3NXGxsXPbjMo+QWdj0ERLD5Q50NjLApo8YtxMKH0Lm
E+tuUv2GK37xuR1f+GNzLy57CMU/Pvfgiwd86RndHlx+JSZsCPmR3DyEi4/L
LnzmEApDdHF8etDdQShtEOM/Qmkdn1p87iSURvCFCal5hlD8Y5PDxSYm7RDj
R3Q3owNiwwObOcSkZ1LzCy5zG+wBpn63Tw==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {440}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {440}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{44, 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{440}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 44, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 5}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {44}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6cfa1ae5a9de59cf", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 22}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{44}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_538da32f_630a_4f88_ad7b_ebeccb0de6a7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRwyKLKCaAggUR12JdWBQVZV/dAgmg
xFYFW2vRuqC1avu6YMEFFFlVqoAoVlB2QdEiBAsCGiD/M/cmEfq93/P9vuf5
Pf8+r9yZuWdmzn7OTGbuaxYYvjyQhGFYWzCGubgWNs7RxzANqAcy+ZO+WnN3
s0ie4zd2mdgLwZgxMewUB8PGks0wMtTHwz+6hHdYWEZdTGNZO35PSmFO1mAY
TqR+Fyg2Xkh2+X6sSxvLWt+BwfHUtI6SekSUmvHcdFMPsITfkzeVMa7pc10X
Sbl/kqyjUjjTLaanW+3JWneY+6AMxt3PxbBN8LQ2LxvDDVyEmc2YlGFsNhn+
GE5l7j2X7h+1aR130pakzPH7sDcMgYQcTfXnu4tZpNnB31oE/PPrO/ul35qZ
u1WdZRQuJ7OotGRhJotLMXnDIH/FaYnI1PhH+FlhwifNIDHf67OxHsU0rkVp
5kK2eGgGyXLucF2iJkPTausyqr/iK+y7Q4pYc+1UgXjCIgeHt5Kw9OFEulfh
VxjFaSG1cPBfkB8LdAvPtu53wMikbzkk7pn9hrr7qatC+JmPGGK2Nf0pJ4DP
PTTNeq8LVzjR1ZhGIkm2CjSimTC8wNb8ezaNZ30s0IdxQDPF2nUz33zchqf6
y4rborV7uGPZO5e1uRXYToYBnhuTUo7YLjzCHyr96FbQbKv3xGu5Jtli8Qq3
MT8sXbe01xMKK6bTZpFbFvK/PXZm3A9PypmXi8TbFpUx327+1i2EJfCphAZp
3CKpycUtSZQhr8PTWOQxmtpUjpnNpLOG1hKy4SquwEPXi2R8hs/F5owRzjax
8Dmy2lZjGcg/AORiJG1WwH90LtOO5YJNMpKaYUe1tD+gNoq/ptgUS8Q8MI3e
ItovA6iNxNdAkIswX6OMVrxjpha2AhvE0sXOtWIuKR0bK6Abpbthuv6k37VS
XLA9WUW+NFSm6WFjfUL5E0i+4m3JLfqF5JVGBx5g4zNfNgvQOAuw89gACaMX
mmK6VTCCBRrhotY+fRgwlDuF7GvH0gf00qcTI++bjI3JCkm/grqa4giIKc06
2BgGJVMHm1vLDfj3mD6kAAyomCrHqdhKKdTHFmCTcGD/raQsLCZL8mIYXiVi
r7BufKi3yVrMfpwPVTSCDwLTEG4e1pyslTIVe0R7RQyVbsfyZ2FbsiSMZJID
vOIwCg1DuPczsUp/ipBGi6AZZVgzsOVYJZeRztXK1NprSBWKQywqBQzyJoqE
Ro2gYYtBFkYgC70UQQaXWpIizmDp66UUZgiMPc56sb4NclnGP9jjxcrcWsyd
WZ3CPcb3+XGO2a0p1NoUs+ojY4rsAprnhrt0L2E58zNY4iKqRDN5DJUjLeKk
F6WQmPfFzCnUIL5Z5hTG5giaHtk2gyUFJ6A3cU8hxWlAwykz2U6cGrmVEudB
j79I31Prr/m6itaZSYe/3Vx6PEbfxadHZdKjufRQTCcqgh6Jl1EjAQBlf3pM
Jj1OQA9N14a/qFpFeyOmR2TSI7n0HVW0LjF9F4seR3TE32az6FFi+lc6DLau
y74DRzCSrUvGia6i6457brYEx63R/rZinZUBc1PCI2F5zu1D9JZIO9bDRdv3
V/fqM369dPtRZsZBje+LNv1xpKOy0Yz0wCylCLjHgn9Uepbr3HNu3TQME0OV
6yA2W7XIEtqhQgZPxMEKSczf8rYIxZOghQH/CrmYtr/HPZqsmyswxwhIkCed
f+7l/jUZLC4b9YR/fIaYwlmem7qCROJjqv+MC9O/XXBxLEPdgDVj+1bydYMF
ODZkvAmG0vzhWwo5U4kjhgFWP57cNJGF0VTdEFYbFlIogAzUkI/G0HS/freQ
JsC4I4f6/JMjn4JhugiMpQT7UysFRrJQ0oiD6Z700MK4a5Q9cRrnOFUbw0yI
brES+Yd7zs7FyOKRiP015BaPUQUUDJ8WwyIw1+n6u/7BeYUJ1DTar+yE6akE
mwn8ay3+phB91Ph/fHKWRBIoOY3PqPnj2QUYuZA0YsZVs5adwaiFFBUvYMbf
48wpywFzsqoNgXkFnAfEqCPBcv7wIjHEavY3Y5PsGPpvSjGsjIxwGIPizsQM
jiHbK/3AmCnu96muE/TJkxdh28SaNzIocw9g6YFovGtgfyfhacMQG5e2GG/W
J82XujqklBxwEdN37qBHZ0Qy32A6nSztXrG2DdNlYnGRSeUZ4818DRws2aic
Mr/Mdf4ByvzyHQdiIui7GfSdHqkREfRdEZS4HakR3FTDcrb2+3TtFr5OGF+n
tVu720fbhlVq0mhmXGtmUhwwcTN/v9OdZKcqV8ccyrw7yfNSKE7l3fpx/vTd
W+n2W1Oj4K84NSI9NcKfHmdBjxvQgGHjxal+jNRITmpURurODIllV7d2V7P2
x0Lt93xKYNkZ47YzxuX43/oA44dmxqUSk4cBtOfpro5lro4Z+N9bJQ5HXB2k
FKcjJbNh0sEkp2cUp6wS5oPg1Ajf1KiI5Jit9B3+qTGc1JjMVMPKFTpdmM4/
Ptpt6dqtAp0WrvZ7oIJrYVJfNLFYOPGpmXG9ZGJ9s3Fbi8nfpImbOcscwBRP
JDuV+0xSEuKfGr+DviNjmVdvug7iwMRtEx8GGL81M2ksMkkgTUQIm5l0B9BW
7k12KC9xynKdDwwZLJ7X5uokhWrJgXuaQGlqPODDoO+yoEdlSNa1srTfF2q/
9tHu4fOKngontrUY1LaYNAICHoZOWcnzc5KNUkocDrg6lpfMu1XkWFYCNM4r
98iJZNABq0hgoG+qYd197ff+Op3N4M90XvN1XnN1+ny0w1jarXxtqPY00941
a7f5aA/wea/eBxgXS0xqWwzem5m8MTMpNTMBCb41M93MPel0x3X+LYrjkWTH
ct87IH0gdhfg6ZEaHwHcS9V+zdLuxrGV8bV70rV7fZCpYzvBZDzhGTXRg+sq
ZRqOibL24PIkBw4ffuKWybLYNM/K2uVQutkvW7lhpBVG/t/cAMX+Ojxkc1RA
KNc1PDQiOCQoims9y8pmltUsPndzeBTXKzgsdgd3h4Md18LOdmZgcAykRF/F
hgVxrewsudZ8a+tpK2NRhSuM3YLXuVa2c21t5to4hITEhc4KCQ+PmBUXtDEm
PCp4V9CsoLCAwJCg//YmPnhTzNYvLzYFR8dEBQfGxqj6YBiPsd8+iR9hQy1i
Sviu/HIu6wHTRVLO5aQeoE6xGGdnd9vuJ9s/rO3zlpEnnb5tb2eTm2VncNs6
NzfH/uaypEm/qpqu5dna/TE7L+fGH8vIKKf9DezVDJ5jNaMswA7ou3wjMoD3
JaBxjlUlSW+M75/ReitEZvoGCQfp13jbVn/tdh9QW502pLw67T7avVliCX2n
BW5VO1IjCZ3yjThR4pBDcjqXPP9ICXk7GKhxfYtxPde4LQD9fSuZWBxgXHXG
uIxQBNIT8GPIjdPL551LdjoBxkSZn5k8DwwrvQT5oACQr44OxFsqV3cslfCE
+haSCRyShdTFIpM8jTxB323MAUx/CfuI8E/9hWOg0weIMIsBzty9LH2ZZkoY
0hNwQJjfip3RMUGhfn5LAiL8Fvn5ufr5+QRs3B60SRgVFbDTb3lQQIidrZ/V
/7jR+r83/l+ZZS53clxAlJUd3xbDZqS8XWPlwc5Jysi4v0bo49V6iTv9fORq
1vhqhxnS74JPjKPet63UNN84YYvGGauD2Um1CCzCqzWEMQmzYVcU0s7x9ayY
IQJNG/Y9vMImKhf5WaRp5W5MilF6sZebFV6hQoX8oUhygKOPMZJI09KFnE3L
a9kUCibk8zWss5K8NJ0C/TEug3beh+abvjjAncnEqEWF+uWCsdbT3kslJDGX
k1FsGCKcstfEio+xqJQVgmTLsnNZPBoNS/L31wwu1DimH1daiAlYTC+h1h3u
D8WHOByYTDLtUpFBTFuVmMRJn2bsYcMM4tKMNMguQnH6dGMPe6bEUEzSIEUJ
JxRmkayoVH499xKJc4DD0WUkCX/UlBiXW1Nd+IE+XoDbhOmcldQySwnfh80g
kdd10/ghAi6JpAT+SxN8WzaTwgYi9WDe+5oPLUlPtJJ7aMECoXgdlw7QTBKJ
ac+IwWgE2j5/umRBl3tsr2gfrpQzcOZesa1nRO99H1pMIa2E5iamU6uMkg2f
SYyYRiyhG5ZvdUJiklWURWLXk0i998W0eBxMwC60pe9NYpydl5tOO0ct09iN
ldCoeqzCiOQquj+fYOxfs6jn+I8KHYoE9w7b9PDtzazC+VkuWLmuJWUO3dR4
T/OditA7Wt7dRbO7SfY+0QNFLfTKW/X3bzWnmA4mmUYAkIVxZnN5SWg5xbu8
ZLaYDEDSYjPNyqX195c2ly4dTLJAQNOMzzW/vx/6nub9/v7sdASUURyg6e1U
v+hRc8q0waRpCGi68cXm+srQHKZ3ZvHsTAR0sfiMpndn/aLO5pTpg0nTEdAM
40vNz56EXmJ6ZxXPzkJAt4pbNL3nNdx/2JwyYzBpBgKyNA5slhaFSkne0qLZ
UoR4WbHZWG+j+kVGzW5Gg0mWCGimcU7zpaLQSyTvS0WzL5Hs1YSPo3MmnbD2
iTzxVfE0yrgHM/HKATe84odXSj1Rxf0OXrmDVx7cHlFJNcUrbmMuMFcaL0Ut
l8T0MRdiSprfu8z0YXENBsggOlcBVqJFdhAXEYq8cph1osSyRE+j2lifYa6V
sHWom55NrbSli5Ok5yzNJTS8nZWwdVhQoevWwO8WOrwng46SHNU6mkFBOgrq
LVyoK3Qqt/ZaJYiH2TIpMNtOFpJ8prZK8uO+on7gP/IPKLKlayQx9pq+XHyk
2FL4lxblgnYb0swqbbVmytSaed3NXyeb+WI8rpnrBs5cS5lRrutfovUfls5W
UKNYfDDpPtNvPKVFlkXPtVw5hclzEcHlFBXBLvPVBNuwu4FgAxr0wpKkHIt1
XudKskgBY/8QYBV8375ubX2Gh7v2a7HOZ4GLGPq7CLDqSeMY5hMTxKQlOa7z
35KvuQCiOoDoLRc0dvEC9djz2RmlliWcI0J+hVDCJdMGznygGlfpcbOpAchQ
/QtDDaRUGHM5LoTF6n6B7EullsmGmcJCnN2bxKbf+B6g/OUiLtc9UiRYyE2X
tK2P0IUZm/EZXb5S99zCLiy1dJ1wiZgxCmY8tndiuW6m0J4Zn67LEwJPC3XV
PJ1FUvH02kIfvWxmBJdOMG9Cc+qN8Z18zyxaA99nlkRXn8qgWZNIJbRSFgt7
cU8SU8Iqo3oinj6jqnhavARhYSYBLGLZA6WWFKMcoco7rce9k9CIuZJKNuJu
jyjyBnWRgLoE+nvA+1UbpHt9y61vFRlRebR71CT/zJa91p7dtFJt8H5LAbRF
G8d3gRrfjwv9x2czo30IfD2Mm1PvG1zme3LpDfw7xUvbqKCSEl+1SqZrqFRy
8oSib8qta0kTqThnY4CzWw9Q/3IFzj5DnK2S9NIMTmgATQO4qqaPVzupYGqE
1aN0+m4Wrnf1pISt5w+PzabuqNKizDp3zxcxI0tDxYyktWqRXGI/u2dJgeCO
i+QsfeDM5UWe5brvSRKh2J9lwAJpSIUCbKUR/amWK8tgO5KRwEAtozhE8z7g
ic+TRVUG2cw9VfQiqdAK2Lw1O8CHDbokQrq0R/y+SGMXSIiqyypUiuEWe8IZ
q0fN9ESW0u/HGT20LDKt+gr88B4AdfPEuTOg5s49I2FwufUB8nSCO2fEpi/D
ckosJRY+JtAlE8nfBO8ipam6aEwUbiu3PlI8jehyDrqEp2hUuAFDM4txXZrW
nEqb+IHvGaHZwC8s2dqrgWQTrJZNpnqooIlF28utzxVPp1LGSfrozGnIYbAn
UNN3nKkPoJBn+yZj+7Sk2GxGc8pf4gBK0lQymRPG+YbCXIRH5Mxv0sR2mw19
i8YlBWtrUtmrCnWWzO8NOOo/Li+gLPW5g5YmuY1cCx0DGQz/W8J0LT4HD9fJ
ms5J9RlBO/b6Ms47WrDcviEtyOmXfreG/DV3OYPF3EYh79NirGAwxA/NBbOy
tDh23EpzrriFRrIv9CeC+nQ5I2HjUeH4rWYZbzIFLInGYNXfyZM2jwmUbDAT
zKpCXQLNUBfJly5DjPsbj54ZH0Z0OQZd/tk4e/OYrZJ1ZgL+gBYD+vibcbFd
32G52Dz/WrH0OzG2z4j6AUsmUpOLgkkeaWto66r2+h9PJgtLx3e7ynUyMibf
2gsscZm3IzkJy81EHTmIS6xKNZemHy6cv9lwR5EBzqXD6wp1Drp5bTwqMMgL
cNjfw9DRJFOTP4qVbJpwnyzcZNCdzFxEnbgyaX6tq33UxltmHB1+RhAGq02c
X7uAX/q5+9eQ/TIjGelj6ykgpCicxWIdFYsfLkySZwRZpEZDF4zlViVs8W2b
V7ZI+5zRPoFzLY6rsxrXLhzXMYDr74cLF2w2LBYaJ7GTA8lCftXW0kxzweYx
pQGZ5qxiEil1bB/MxpjEFbMprvD+YpSbm9umowHGZWYcK4spkIppuR9ZQ47i
PgfEPiPQGhyxATViv7uT9Y4FeaTGErSUkxbYTgz+bk1SNLcWurhQocsLvAuH
reoy3Ys87liQPz2esQNx3s2k25Wi9yFjsm9qjM7rSt07JbhHcmpOHT+l1cqz
WdtND/R9P+h7gB5u0BZklRM7trjbPJsJa0zwPALXDh/dbCufyMLKuSHoWVY5
V/xnCITunGzt//CNIJ53Xir5pvy+4J7EqSNiYrbwFpubYkSyrudSIerxdXoJ
v1RKSdgaZj4hm/pPlVbJhtKyb5FfqmKo/dJBtV+K0e0ts3SdX+8KfukMN0nn
z+ipU13esrkGbQj6bzZyf1k8lftbdYoaaP0oXUdOTFML0+xYDtP0C7ZDl17U
JRTv0v2ly2nqZutHhTrDrJgS/yGPQwgT6Rh1znFMjclZ3Ut/WpYsSHEjPKTO
wJm9D6XgISkv3MT+2BTkIZvdBFgDP2YzeYo+eKJgMh6JEIJT1LP9To2yfsTV
nURkrL2A4MVio2zqMPjn0EuLj6HZb32Z/YR69iu69X9aui4+QcxO1h04c/2h
YbluSilKehhfTfru0lbctfEkpsf/k1lkSVocU1JoHvkHjkmMGhP/qeqk5jJV
BKzSnUFgkkFN2Jr9D2AyFTLu8NoxJxAmbWpMik+pMcnVlT60pHjecgOUjd8v
PoknaV9QvqgGvKt74qFliWepkmGA8seHh8p1L7nZM69i03fBAmIdf7o6gvyq
VriDnoXTs5nWQj0iano2p06Z1Qk6qtvAz3L/bXAMSuR+V3vmi5oqz7x3lvBS
ufWz0iWEk+dLTF/mDhZZCr1OWGRpMu2pWwJp2UyHw8SwZV7NqUdn3eZ7CvTa
DED1/wMDkibgmGSpMcn1jJiRzZxbRHSRLmlOfT6r38ozQo86Ebpcgi5mE/Eu
Oeouf3pmQZf5H/TwTI3ha2F8J+Mre+Z/fGZcRQSLZ6gJzlP3afFkzcpmBliN
JzDzbk6Nm90svISi5jwriJpORU9KNfKRDLfjJA+qSf5rtiS33Dpz7zcEyc4S
0wkFhWWWRUvLddvoS5FcpRoJWweXQwawUXiNzeVIx6JMKJvNwo6Vo/xIOvYq
kt+RsWpB56rzo8l6tx5ZUtYcWajKj/4k8qM1KD9aw90YWZQ3Oj96WPbdnXLr
jHtrVPnRmQPWnhHjG/iDxXlHxqKAelsttsKxKhpeWxfll1tfWriWoCFYYvrN
o9oHlpJvwB61u8/OQgrco1Zgn9nqVKecOmj9qHl8BKHAWUCo9Q/a2dRQoT9Q
VI8oCiSyoy9dKqhcm0csg2iiyx3oYtcDXSKeaFF2tT26g1jRrWZFUoFalefp
HSm3pGx4uxBXZXODgTOdzPnluuUaRe6QHVkj2y9zh+zIDs+OrOVI1AJrtain
UFTZ0eElVdbZzJhlBqrsaONGPDuKRXKOkZTf05hOGZUdbdWzsbJ55G8Qr1oV
x9lBdrQ+pqRKZ7qrNeLNTIqKN93WajdTR7WzeZRlkEkQ2gaEhrSaZlN3PdEq
Cb/j9RARWsZU22yFmtAovffllq5+gwShxUDovYrF5bri+7gB+EG4sG+z8uw2
cKOBNCtQuKDhFDpQVMr8Ykm3TTbzjNUEWGULrfmusJJOKbtFJsFkc8ysqYJf
YOq3aOpfcZwLbVQ4/9hI3WjzSDDhPIGzlJawdSdPL5v6yxMtV6/uAxUI50E1
zi61apwT9TIrLEuCzy3CcV4+YeDMp4ol5boZtAoPsb/ADgnnmYcAa9OENP0F
MvOxOMpb1Cj/6N1sl838vWgCscDb1py6aO48oSckh+fuQ7adSZszweCiFszs
jXOrTj3z73rlFZau2+8QM/8BM/96yLdcN4v2CWbuxmcWLxZgtjrgseph5mU6
+MxR6pmLvNPts5lZZkaEg9nenNo3dwvwd8IkQJbUAF2EmkR+re7yxLsKuuQE
EF08QppT7Zy2W3lyjRr4GSkNhVoapCRJo0BpZ1rREq610YCQ9kfP1GnX7Hev
sNtkU88q0+KUW98pCSUM7jo4ja7Se5aS0JiS7vG7V9gjpUpQKxU2Vy0gGfWC
zSOxUR4ICONK3+8r/lDZQOgXyOruCoNsap7wGkjpgDbyMYS5qnv/NUC9ZPOo
0OguuxtHPBzcuvNucOtGMVNJUUXvAOPDU3Faf1PTenIp5pTNLGBPJASzozl1
s/NVl926YDAtyGCaJQP3NS4BqimncadyS1u9RnAWdpZbS+k7CRpbIRZ8rnpo
SdoJPm/CleS5iMZrahr5TmrDGaTm2TzymdiujIr0hK3dGyGBaBf+qgvLSETY
BV3UJeJLlyHqXWDLxL+JLuegS2/1jGzq32Brj+u93yO9fauttjWZWns+6x14
bFmyK8edsLWJA2de67wo182h/+UuXtfsBMpT7453Gfiy76F34rFl8u5Coss/
0OWjTplPAnhl0h7wysW7uZ2RRQPAyiJTnJWv1aw86FPonM38YGVKaNoe4L7L
ZBtPvmnMDOD+J8T9GXiXd1+474MtyGb2BhBdPETAfReZtae/6W9O6j3EzNM9
Y5bHf9l7XPBO71yXehuxKOH5VI+GL9uPQ1lL0/NWqLctB5ed5sZeUO9Afqp2
Fv7trd657G0XJT07qd6EfK8zSIVEDrKTrtLHn/F8UUftqYdwDqUAh2z1e4FD
Ce/d+cpNqrYHAo0ZjIEzWxaAHxloThtEXd+ru7oo1F2d9NOrLCmJve4Q73zM
GLTj2sceWxYlxJTwrYeiF4DGRLh2L8ClDi//0tGwsH3UbKpAfnklIPjG9W8b
zyrTaJrEWtld52S5ZVHi+z9TKCSsm4FhbxZHrBTEdIjCMqnuGm43G2VTTVjs
CrH+rsc9t4Zr7Lt4Uydyl9CfcO81tDs1KeZckZcZchJaWT/5nyZ7a7jtTKtx
Xt6Tl+abI1hOYlfW5aRlNEAhTHZrqVw6R3PSONbrWD+5tIiOSjGJ8rLJC6uF
th6HZTe9axYckkuXEC8a5dIxY6HUMk8E3bQdxrHexT6WezTInAMzKc8EDHYR
q6LX3c3MdkWCXJpP96GYuVFdbatN2XurvGJlvK8NEIYaV+ryGhTyTt7z2ekr
BUc6hrp4R51RqT22i0dbINBKYbGZT7wS3fRdbDpz0k7ECdxsKcvr8+/KBv1a
c9LqNVH1rdNl2edwmPcSabGGm+OSGucob9YTpscZWU5j3YJKeZloFSLgWtNu
v+r4y9WJgLmjpo8H7ws+fV28fUZZKwXnauZ18ZyjAvWhd1G7w9VqRSdvToFc
ulAbkXx7iVxqqINK89bLpcE0KP2V7y2XjsN5NidRLjVBbS0D+TAl3QPNGdn/
qbI98WCrc6CECrjlhtU5Bw5RUMm73TnqdxIbJors/3yoI3EJ4P8PeSTf9E7J
pYs1R/HNTsab4rJSsLKuNnteYfPsQz0sA+tPZeNobmguSceNBNmCNCBO239k
pxtpz+bLeM+dEFtlg108g9U450837WlUwLvBTt6beaMY/e5G2gkDgs9XagZO
9zgH7vLUcLu1vtW5k9dviGvap0MdjkM1OZ08gwm4pu290n9nvWLOQXnZPYJw
SYfd0v7Ekx3OgWWIXEe/aufAbymgfbsqOpyX999M45wTrCAtq6i+0+TwQxpn
NShgQs+NNM5ZpJN3q/PSTgQL5pi4JevHn+6PGwL+VV9P8x3C5rBc3PhuNkPs
ZYyKnBrnwA9o8J2nqp2jfiQ9iWFpLW/Ou9z6qQl4a4pX2+QnZXK/fueoc6S/
UP3trqaaT+GgpYDYJYTOTngZWJOT5huF0PFuzVW4paRxmgCJDa03wB7yHUGg
H5fIcxTGzlGPcXlJOvrvVieK6pyjHpCeEpPkd3zyq7ud5rsLYX+l/Xpa7Q68
1HQrzTcGL9XcTuMkQmnZhg4oXUalirr8tHXf2CIid4TJYoc7bqXVr8Crt8I6
YoZb89N8ryG4sNY7afXFbevJH7yk1ZdK3RZWnJZL945WjDgZb/PsUUJsyUsz
/t7dUlei/zG0Q3SoLvZkq7yxf06lYqCT1zdnJORfzoEXcFYsbQc2AxIi7J7z
WOtQcQqj7hXjYWhrQehCeH39bk/u7GWSNM47bK/tFykcAdk8JOs//aK31aD+
y2gCNxuw7iZ5hWJ+F2/8DDCulLo5XWCaXSqmVVR/8msHBpkJgfNXmvIR52uV
PulGmm8wKp3quJGWEYSXWnPTfLsQPw7VAGd68FL7zbTa4yvAdzXdWSp/3MKj
G7NopeZsj2VNNxrbb62vcdxQt1PUGpuguA4Gex033U8HwW/hpYHLcuk97VFs
3NnFezBe6Tnz1ivyunjPLUdxteFOWm0gjmJPfprxVuz+CEaJ2hOXNDlHWT4d
oWjSNN/h0UoLDuApZSS7fgD3GEnjgy+ZG94zp5O3eVozGGpPbifv41259BjS
v3il/tUTrKsX3e356NcKPOpFXEAevLYNle4C32rbUSmh53raukSBK27Eh6p7
C4w2IawPtYPbx/E/1ARM/BlYt6EjD2cdzQH5h6aBLl4qJ+La4yQvI65Z8Q2H
pKimgcdgLBnUqhGu6YdlOqP4NreL1zcL+q/sgf73/6WIt9MyXuM4gYLXynA8
gXn141Qepvc0qJAUd4+HQD9aVE6xsiPxIGhkEql65MzAIIdm5KmdunixS+Vl
JvOQop1qctygAGXgCmH4K3Uw0ek/wEMuoL/iHZ0WMRKdTx75YPE7kEM7WQ0O
7X4OkN0fA24/8AUJtwKZ83Kw0XWbBW649Yhqcof676Rl/IPzuga4fg73UXW5
aRlKb3UnzXcPeuvdn5dWm4WrB3gwTjZuvTKAU4zWgSbnwBujQ+QVcPVjR7E0
XsZ7MxdpQv+OTl5cqLysBVnUvYaOnUsV/eB3uSOd+IB0aKwtqLT9XflStwHp
dRSGXtuCN35CeOPDMnu/psST4Mk/ohB56y544w68dApweY2XEkDK+8jInYKH
DvyESrFXQZ//xOVxWDZwpSMxtMc5at0TQgev1PSfhpglGUWIXqVcGjBaN3Z1
8b42EqCgsedQz9whmK8GBKVAvLlSDb4wsNB2BG9i5GV/CglC8y4rnDp5i4yQ
XlZ/BLlPHiVH6T082DpCqnISL+VCbhJAtIHhnEGG03cIN5zAx3gMOgXaVIqX
EoATNXjpLtjja1SKLYBSEnUkMdUw4LvRDuIT5FYcljJzud2guAMI/gJ633Fz
vbzs4Cpl5LvavqCLN+exvCxU6QV33lVc7+L9pKcMlXMTFZCk0U2VobQnZ7gG
PM+UBXji86mTd0GDyOZk14fAYDnLgVWXUZoWVricdHgDpG4DZR9pyjDbd0qW
uB7EMlXa5FA6+dnHw1yU6flUGyQPHHRd5yL6+Q1uca3X0+q1XtlrR46JDTuD
6P1UAZLIwEuXQd6roDCQD/L8HimDwykYsVFtiHWJBwE4CQc+CMFUSMwlf0LM
1brFGKfks3ePvaLmRhfvAjH35dObBMp4JusfhphvzMYxmJO4iBhg6PKXZKEm
8SQI4MAoY9eDHPAoBI5WW0g8MCXXHSsV4ISfAVGNQNRA2TQzPLWtrklBkyat
N9XHJ7khWoFPUntzFe7tByECiIh8NUwuPYxSthYnlM3ipdv5kDaht6/7QHeW
4XB3Tsql6/G2uDR5WRAxTfuFffg0DXW/FKIYDnZem2eiO0pJdnfx3jiN8oGv
76StM8DR6kvYTKA1uIYYsDXVlLXzJ8E8vVe2M6yWLetpupCEMy907RYxknt/
jIxHm440ow7Src1HgB01kBvTjZTKI4M8LLaT90CVl8luDdUAu2pwNIuXrO0f
Fa3Pgaj3jgo/eo3yshc4KhF1tHY0+hxZ9XD0gHQZkfMCE9i6qJQHLPoNZ2Vu
g1w6GW+be0he9o7o3PTcA8/gd3Xy7DlifPLLpwMwnOj+sFejvMQPd+VlJBqu
PBHtNRE4cOjvSPF2NIFz/hVlI46nQR2qQWfutaAhPu1FprTwbuunSoUdWEgk
3ins8Ch9WQHBi4zYEH+1/c4QOOh1GwkE4hMNUhHX39LxfuQELl7tNUjFh1n/
M57w1UASUfaRIKeVbogTQfZu2kSMsSM0CoLGADjRTt6NeYjWHpDDBWMi/22U
zduguA6MCSJyC9CsvXhph5+8bA1Bq7jupnLQBD8NFP2aP59s7/eDRHIZC88r
b3p3JHqDH8HT+TPt+VeaCkLl0pmjtet2F88edyT3Kto/NyrsO3n0CA891pLE
0NOkr4Bv62uci43+LhwZcNp4diflZflKLHriCEdzu5NnNzrxfw05zU7VCqu/
16/1dlq9oSpMD14FRP8g4drbPBSJ47isOuZkeyLke/uVY7f/NIGg8MpawmtB
uPRGherctBOBBCPtw7/yJOT7iuduolqoyhMUHwHJ18RA6dU0Y9zv23XxVt9E
ueOdLohZJ3AXdAicUR8RxyA+fSZV4gFpT0LPUNrPO4m8Oz+tdhVaUsjy0zi7
iaQ8L60+XEBwPb990A+SyFoRnpADapwW3ElW56edeICWATXgWJCV/0XzGLlM
dA5sH63HsLY0oxMIt7crZXto7XU0WAPk78YUZXbf7jDc4Rw17QmRGV6VfQoH
O2wnLQE2NNQM67GdA38aneWAIn/hzF3FxwZ5mRW+Cj/Tkd9YswDsZ4xy3qZ4
qlLj5yvAH/pG44lIO6yNowh254Y5Aauub4Aky9uTyG9e8eJNIvDRE2r6NjTt
PtmfKJI5R3Uqlzf2S+sSTwKPs0ijcpQl8rJVxKSZ1W+MxCMV5wWkTBDUtyJO
N6LE9Hc8MYK2jBA8ee+BPP8Gng5BirRukTIqtOcO1+Sm1euYDE4pcmD3KWzY
jrOzfEoVQ/+6i3J96bqylTKIhNuINcHtNGOh8f+gTxtvM/KcKbJboEXTUH7a
D745dZzSYnevV0DYjacj/kH6Yz8ku5VmvJEIWZ8SOnYMQZqa8bcYFKIRVoi1
vV28G3O5qyAji5UtYLfw7Crk0lxNS5SfV8qvpxnvIPj9WXRJaSS3hYQHqJR7
ROryg3K+09L5Ye0re8fEFwTA248flNpesxpfnaM4Zz8RV6OkQz9fxPkFC7J1
u4iR8xLeKzvKHZXSlxmY4OAulaYvRy7aRHUFsKwQ6UBS+JcoQX4Q0qVY+r93
BcABpKo3inYXKGLB93xSYlS3xchHGXDvnFJAPj0HEpS5+BLhThfvqCNe2iXj
fW1K+HrvOjlC9xSsVU/sJNDdlSBTonvn8r9SQhnPXh8f/VTd3AKFvYxHX83+
zo1775Bsz5K6OY2KuZ28r40Jwg4ZvQIJQNZzK+2ZqJM3fgJ/1J6Qc9Q/ykmG
KmhuECL23q0eXKKIFcmlWngueGsJeOLJUHCAJo1/bUNBQJ2Pe3JIx+zwfafW
IfDuhH+E2W5+RGuanC4eHhPGnIgfU2pj5p2tqzduTmKXavvFzPd9Nrea5iHN
mnkos95O0eoc1aDEqU9DvQ10pSYxFBzof5RLuD2VdZ/8YOGQEYHbax14pz1K
71RR0+vXDguQEDGuiXmNPXGKmuuQaJqOctYvctJ8j8ECLqHpFr6AW4120FJ6
dnfyaBao1JEPi5uZeFs/JCQ/QqFpvoy3RVcpcEc/BTjXLcTOYfxVmdNwzU3Q
8Fl4D8cunoEhht7sSOiZo+iHVXjwqDy9VC6tmAlc7T8oB1fjpjboIXCdvviS
vOMGjtZm41FY/wUr1Pe4s5VdT6u9jLuJHmhTOgxYK/XhK3sZrBrN8MUc+PIM
c7wELnzdGltiU6jj43AHpLRi5cQ9u4Zbwa3dN8FXTLEy3scN8rJYmnLxc/NQ
f+KSGudAh6+IbYy0WnzDE2EoHYdv4807KJc24AmPA0Tcd6hpLpj3B3xn7wZo
Tiz+0gnWaU+IHAhc8Av6pZLHgU/d+Ipw8mPF0IL+f12+q/n3lbrT5CQX5jf6
pFr8bl3B0AVxJit5/EKs7yo16+1AuLx0r1cqiWB6h+Nwza20E7vU0XjQrx2W
9MuU5LcPDbeCS4rFnRMEsGewyvrJQLm82N2ggCThxmhL+egcWIbHTG9gRBO+
UZoPEfUNWud9Wg/e/gNeElU7R1UQOtqcl98x5NcE8vxt1PI1Bro9Gh0agEF7
8Uz5M+Q9B3FW7T4FGoJ2ilvyYE14ksi3G+XSUF3jcayGWxWnv7Mdsb33ijcu
9VpLwB/fDSWUPBqwbZiTml3dO96o66u1Yf/KZK5D9t5CH7V7G9fJOz8Tz5BF
Mt5NDkb4c5n9cA84o7JRbrG6AJYB+bjTvhEGTjsjCje/VlAJ5eIqHxbTB3Gx
20HC+260w7gB/tlYZTB5QzV9sDQnzE4OZjcBlfrB2Faj3CWlPb+L14e3te8G
R4kpHZ6jNyzY6z3/v+LXDTx+PSfMMRcMmDDleBlv0l5ri2KjGcm/eO6O/mH6
L//5IVr+e2TA7t3JM0o8f4k+lrzR85ftAcnRi53KxVvnSmnT/l57NXpIFm+a
+1ws3Uo7d2vnyZsfC87vNnV8hQWj9zH57bKhq5317gfsm38Te1zd3ZhoXuy+
p3Q5/YSm9J9TjaLS87Gm1+7+Sja/czf4dN/hnmTpZsG3t2s+Gin6G93f+3J/
E1vcjH7pfoAPJcaDzjr3MFuu+XHStN6Tb0LlV9/Vu1+y9ycGdt/T9pBy7h13
wrnC2N0yWcH9naZWPZJz5LPzrgabWq0ibeOmSP2lmz/zzrKOv7siKs2kXJSw
zJPMjr9Lk7psPT+h/3CdzlY0+881slPD0Y/GeUznFsdP7D/cqhNxPnlr+quu
ntuyxIYy+vea0qg7NaI2BoV71jCdXCMbOp843Mdu1U+fzn0oz+s/Le0+fPym
qNROA9F497zo3JvtplaLkgCVdY8BKRl2gXz2zoPtpr/117m/DwYKZdtfAvYR
BPa35HseywquRJpea0DYG9/cbuq4/zvR+E0vsTHsG/fYR+q6FMf72EbagN/D
4Nv97B6E6cNQp352yfhMmouUsW/r+QXmmmeORbx0L18gnsAwM+ecPTYstUjZ
/Ee46bX74nNk8xOy7abX3qHxT9zcbZr7gJBmd/2bjiF4YyXH+VYDcrSeO7Ak
KdL8vWKLedQG/zNShVyhz9IPRFeGh3/Expsotp++lf7bGxjjd3yILuead8OP
w01zCzGkEIU9u29+OH1V1LbLAniV9DhywwVFnfvfJv2Ho5lixOw9D2Lrh3e/
dPfGpTpg3B77uUBU6n4gDMRdsP3lBVFpN2L4PydqRKXnKFCKaDgvKn2jgdrk
N0SlxagtahewexsUts2HzrXA9ojb90UvE7VNr32DKDleEGp6zSfpF/LZ3ReC
S8aNYlJYnXv5CsxoJJNAYNGm1yJRz3VNoJ7DiGPr2uNNrVZDm/memp2mjqe2
IWoHBt/0DN8UnWsMNs1ViPchC9htcvVTgb1M8iv5bN7j7aZ/yrP3K7XnhExR
18eWa/lO5z4N/bmPbepYQbD9n6HGD59lu02tYtCUg1eiTXM7sQMjJC5vVEy4
Kio9PlJhp5h+OPxLErBQM789/rgius49JLIQWcKnRve/J/azH+kgrdje0Me+
vXg69/dYKERHg0Zvr+8LVjjuabM8i5tK9FpQtrui0gycjxOaRKV5GqOmudPH
TjZBQ8Wv72fraSGjkIPSOSH1K+45BUqHv42c23/4F62LiNSkx+HOskTAJ6+f
/Yt2ZvqiL8z+u97dm4EEHTFUuXuwIN7U0RBpSVn8vPaPTV2i0m80zoMQ17dH
+n1rXPhA9NKdKUIe4PH2OncvK9wDRNa5H7CG0sXn/fB2Ayq9Af/ATEdwNWBH
s16ZEeN/GJaJSneNIua8vI9N0Rkl/m0N7l5Ro2zkIXiL30Y6iz9BVFZduK0U
gJCaUWmPDDTKE2nU2gc9nkwpoptc0zl0NzEBWD/JYTo3L3ZPwWSCuHUXOk0f
i9q2IXfx6k3syQuK232H65Cn0xRdiP95uL/BvWsel2BL4+7Bqx8a3a9MJpxc
1/YhZA7Mv5GX6FA6T6qGxTn2FwkZ9bM3GoPvedpxCvc9eY9FpYO4gZwEUxmP
St354PDOHkXuCLjsfmkGYmBkg7v2XMFx7bNCzfymnfMUHfK+wyW3a7cIz2ul
swLWGgtzZfKmaFOryFGucwyYGmO0ioDnqcZJ/nji7lPsW6C5Kj7v6kdFH/tn
QKAbIRCRAA6z0bJDMD4p+jjpGOvCb9GfwYys4pFBnXgMbB3CXU47mFYDEUp2
ix5/KABbcLyrciyADnQ5BUw3kn2qkxD8i52okNW7X6GYj98v+PbU1Q9DV3ea
XvsbudgTj0NNf4utd+/iYwRvn4cPtwM9dWIIN/mNkWBA0VrpSHLmTTITmSIP
kJ1L+OwucAGRplb+OHYXwCFuQtjVV4abWs25QDavr4RYdbrEPeRrXP/C690t
w0E5b4Y3gr96iVtSHthr0mjlAznxRivf3w3u7/+lfOCWBWiuO42hplbrcXcD
jueagnBBu02viXC3JAM63ou3j9RS921goLuNIwjvcjhPJmqLU8bD6J8LIKLE
muY+Ipzyx7UPPhaAQ+Xj1J6qBAcGjO2XnAcJPNip2M8wdXxGxO8u56YPg1eD
G9wtbZD5PQZTC0GkXo1tAFL7EKn/fPNAVLoZCXlb43NRaQIqRdW9EbUNKz3M
7puy0wBMxr33nTei0uWU46CSd2VDU833lFaO1qXBPran/igmhYCFlqNoEN14
Yai9m200Gala/x27B0QgAzm9wE0S9Ck3t2xu+t7aE6T/9HxuAla+wiMohNpr
QpypEIhz5yjj0tWPfmAouvQro5zqb7vBwcQjZ/IgtN7da0UhMrx3De7bTvWx
eVpbwedFN/SBlbE3ToTKww+DqHI4egdSxnkF0fMUECX6cFUugFn/RCga14AC
+UJAMK+/u7Ogj62He+Z38/sP96gyi+g7jYmNIXgAA7F8j7NQ3ihqe2sOFlN8
O/23yv5EsLu3RNirFJUeGK1aYIFOyLmHbuhHzr302ejc5jhoHs61+Aa7KCKs
QcAexB7dpr4CW1yzf/+3xxV9lC2Fl440XxS/bfw4eA6XXZVcdKF/AWjyU3zi
2yDU5rNEjrLuZo8f+NdD9FGu6GQfu057RBr0DYDkUFRp0HMwbnvCttff7PSD
WOM85uxIPF/S8FjvBKR+Q88aKRdIlPL6Dt/WykxumsSZWjycOMW8XWP8twMF
iqUkoRlt5rfYe78x/k8+FPTtH3vs/VwIPPooPvVDmN09Hk+PQH678Zj1Ed7+
MM4XhcL1/SCjilHubdpNUZs35W2z/Zj7+7MUp/eX7ZTsNR+WKVYIfKTC78wx
+ddk35jBm6JXLlN+viFqy6CYg1N3ke2ceFPxGfzH9/RR2pzfx95oMDonq3fX
tsB9LnBweDi8wb3ygrK6c74iEnLCevewuZArX+zqeek+eN9sVstXKG641ASv
f5AI8YuXDJjLTiA5QzTVnoI6f7unINpZEdrojr4PYEXcb127T6vlBrOhKNRw
Xkqd9R7GzSAGBQoHSMWhhn0YvBKJI9buWyC4NdPVglt/1GwqK+xRsx6AWWgB
2AkagH2mAJhCAmB2wlszS34GMJI3gLGmAxhnHIBVaQJYiAaAbU+OWEu7AWCU
9wAmjAMwgfP3OUHpZsEvrZtZABbDALDwFBjN0QXATBc/O3omDcC63dFoU397
aV31w6ZQw7/HAFg/Ajv5/ZWZlDVm9UfPXAIw/9UAdmvGmDrr5nEwWq8mgP1n
ctBa2nMYLXk7gBXdnBT6yGfD0xtBtbMBt14DAHNjAtiUfTDaBFcg4SCAtVTC
aOlbGHTiuwboDvEZCrpDnMBCd4h1iDvEbPEECyl5Okt5gVhoeMRr2RHXMewA
qhjbSOUyktD/pIoSDokoMv5R8PEvKqD7xdZf7hf7orbfBWP/2/1i5XVd5eN/
fg/4f20k4p6wDd+K/1/uCaMLwOi7DeyiTPzar9Y2gWYKnW4d6IMO0Z3DaEHp
rupjcIVizSgL1Qk6F44PqbNIYluSGaCLX8HtLROHPMsisXdQq3iuxWvmW1us
/4tX8mqVo35cKVYkYDFdJFrk/U7JARQXPsP/eLKLcBLn/IKt+4zIi4+FpZ/1
v2VmRrHNCBJ879/o778Xy5jMpc3V1n6rYdOcLjlUQikuZM7bpH4z/dBa1oGA
zFe11I2ci/4ai/j7wjgpc/gUdGXJTn1laQdFfW1lHNkpI8jiEHH3J4tycNyh
NUm/GNGo2s/FSVguV1t9meYtprr48/1ef53NhkenZLzBBKxImvb45wDEpRzC
zi+eznLTd8KSv/ZNduImh3EKm7Xb0DCYjnqYPvUwD/cK9DcbnrLA7y0FvBeU
aGw7mvlu3xnmQLO2Bbpmgy5p4bedSPrq205+DO+Ao8Kz5FP4/aj3gg6NOdzJ
gs3gSb8ViCe9Ji8DGs+OQTRaaKho3GZMXp0RdPEKTuOmPyhLjBv9j4rPzhTM
4mtw7Lh56D5Uykr1fahKM/HeNftCxuL3eCydqsoDtDePuRLGsVhloYHuNK1W
3mnKNNz3n3EuZpT25VWTSmhuzTSqIJrFtaWrbtKIdxZZkuzxexUvJH3a2/ie
WRW69UWCe2foYWKdWsFCfq7kG/9qY31N89P8J8kW5bo7KONSF6zLrGJzqGUa
N9GpbA5+ZvYtWX1/QkfoUG4tlnCoJVq0GRbVWpeyNIsm38VKtEjTMooskw1P
EPc1dWlxmZ2U6eW6UtIqUpTQoTCLFKlBVR3zXZBJmVtufUBoSJy83eRPP74g
q8hSaBhTUih1nY1OXx5Q33BNclQfbZ3EzimxpEy4CHNA/Q8aZapuXpWW617t
VnTFNv3LFdv36iu2v7nxdbKZIc004oDqhFrJUd0aS8mEKkRiJ5DoZkjcNVDf
9X2tWzS/3PqO0Jg6D1HyFCi5nmLv2UyLoZGSiuahY9OHaSSSj6HtYjqDxEGX
xhdhKWNJLrdY3BItFzEtm7nOAD/mWygx2WprptlGI1l7suiUcRKMfnTCunR0
wbZUiJ/a/XLBdi77QKllsnEVwT5relzm69Jp5bpVwitfzNw7yTRpXar6tGsm
dQE1mxpbpVUydzDZGTFN/OUKq4f6yGoA+2KpJWVim1B12hVUQGMGI87fYK09
8x9/XTN0TTPiy1Xa6fjVVBbw7sxCll42c1cWuqYp3MvlbN0SqZNN3Qkcn3kp
ZbEPIlfoqZ4nhP0M5jHtFSqPxr785n2JZdHEckPqQ2X37eiWqSgrl6VNpYC3
pusqD7qI7qL96s0T0NHX/vjwwJG/l1V38r52HXloqe5zeBON2E5vaP2MDgDS
9qEded8ny0lP1vfkpg2UHcN/wQzoudUgK2iQl7U44CcR2u1OdSwI27RYw+1z
aI1zYNxXGm72Ff35aZwtghWkw4d6rqNTar5HbEftSb7hjN7jvp6WsXI56XBY
z420+ocj9x8PdihEcmkRzXgcq6X38s/fw5BhdcTRNXz38FzrnS7eeQ5ecpDx
DCjEVmb/7aGm22m1wYXLSE8aWm+0rBrHarBNqLmr7yhOk8cskZfNV/5iLErr
TwyVl00WoENwAe35DXULZLwHKg4ONaJjJ29+QqPndPLGo3liamy7eDeIUlwX
z46YO7aTV0McQ1hy2n2TSZnLDgPrF/nDdTfSThyyIXbcW/OGO+J10a82eyva
406j36HPG6JhqoGEzUdhlKbbnfjPDueadnbxprKVvybN36CY08WjEydE1q8N
AZrY3q23GyyAppz1dc5R87WIHyErmxLDPR7/gyUXOFS6or1QdPI1pm4VYiwI
ZB1FKd6mQXS2dDeSGDp7/BP6ETx+PToC9mKklFLk0o+TYI6Y9XLpk2mIgYkA
LSalynhxMt5UMnFAqd9Rgc51LQEtWdJ+M42zDBWa8tJ8N6BC//U0340CQOBU
9fW0dambRzBGjaQR6GdKtWPormUabnkn6xI6ZydNIjkH7kc77nMPtTsHHsZL
V4BSR5zSdvtTssSw70dvqIfKpS1on3zeST/xKAWqKejkTS0cdWBk+JWDTqTZ
D2m1WxBqh3pupp1YMvK0aGITE/897rpIo4o4ednQ1H9aXjZTQJy9iUuUJcp4
RwnhDXby+iNHWlLrQHiTc+A2xF4RYI9+S85DPxbTdfBTYTsSWwtAbXB5z4FR
8IK8i9dXgzRqD7yS8W5Ws3A1bv08LEvVVepB/l1FfCfvAX74I0mkTxyAiE+r
SzypOgBxWBZ/takgXy5ds2TkHvz1NONS/EhI/xJj/MzBaeKESO7lUWC5aevK
8Hb5YRys8PR9vJrHpnmNhANNeoi/yA+YPI71zh44bzUTCnFh8pw037XA0YTW
nDQOYc85abXrkc223/CruZ7G2UToQl5aLQ7Xk5fGCcJl0HE7LWNZi1ya9kz3
/r7UP2f1ybVmt1bH1BhXelevDbk1Q4Sl2pKe9NZ8zVY5twR0QOwBew39D9bP
Nv5xaYq4Tt4NwtcNhl0muYNOP+5ffQG3r0q51GQy0uArcukchOuNCsCV8zXC
AZTWF8fhVE1uGmcb8hgHm3LOINL6D8mlP9IEI4lfjcyzbqiL168Sy9AGxc0u
3k9qaz2lAKk+Ry6jSSTjnZP8P356OP5ff3o4UEGs8bN3D97crtgvTcZo5v+w
o7XQAlfeeONK8Oi9u2zm6C3IOnemt8uEL1su/7Bbfx65QosxdRxH7JLcrvmk
uCEq3QNr0rC8u6LSE0dek2gKR5Zpri6xsXen5kMTrIk3ERsdsbebehRvRKUT
0UZH74m7ojb9U1D4+YGoNNz4lS7TatROz+/BptdK0PaAyYNw02uTLpDNGypD
iV0ltL/p8SC23j1kOhRufqp3v2SDN3166V5uM3oUWDE+w84fiLvWEhDlOTil
XXb/n1mSHVNKg1cHnj37pmCo0JD/8wpgTHAD4LOOi2/Cfzh1QeHUz56xfTr3
qQzfzTh8G23Gazo/kBsrOhrcD8zhjprkcUvgaY1jdgKXlNBI6uv7soIrolIq
orLreKOojZWJyM+Kbuz6lNjPfvQVzLb95/7DrZHEpmjoiZuJjcWIJbefi0pr
UUHeKCrVRP1jBmEkO1QKOy4Tld5FL53aRW1bN7RssQo2z1DYS9oVw6flCvyn
Bnzp/a/1/vDohflVWJif52Xc8eSeGhN5/MeMixc/hZvmMpC4qmLzHr9DW905
RwipnLN7Kv6FfPZ2QTymXDdPROtmGvXMDeZDYajh+JSX1raM60HprG2P+GbP
jgZoQyFzLLQ0a8CrQbJLqGExCYBfiX3W7hMJLs50XcAFsCkA5qMHYLVjFr+0
7qYC2B4ygC2Q+KylXQOwEl8AO2N5LvhRxHgA8x2bQv6yFk1C34+kfm2JPuGH
lqj6HJKFBNai1plC4RFX9hEh6SB2RLBMH33ST59Of2pE6eXqUz3CmcuP4PmQ
K0r/XFj45TcmtZ3mGc5cfd0ngtvAn/STG8qzilSXWzepbgmNm0gN4D/y4ZAe
GzEvsbAG/jyTReiDMWrIPSrIH02pW/iPIriqdEwkqNDlNPD5gVXLWFzOAZIy
+6vgzwvKDOJ/o6l5jp2SybRmvZcWHQZ4scRiRzCLNY5rcBHdtFyNZ6BG6vzt
P6yqIkvXs1QeTWNckn/mby6cdH1uNrVMsJBrHCggPsS0Es8QIzFVhljkkk7P
Zo7VU95v6tPcLFgvLte1gFw33eO+Rgz6RBKxhKjFv/ckgPx61ViJabm1rbcy
TZww8xIpEhLkQnQ3zdzMoA3h5ofnsBPVuOWxDhRbllA0lLi9JhuX6zo08H0S
0unogy6JGPFBF4EN82uLKpIG6SnT1eiAi6mPD7eCH/JrN11fv6yBNK1MY59t
kg81NaP4IIf7DeDrrr2XVUrukkwXQ1L/hE4ipeuhnHaGet4OVlWxpesk1by/
ucIiSRBNKzJWEnxeO0iwDAj2AIJZZpUaVxHB49DdP9ZYtXznUXP5j/jLVFKT
ZdKyqfp/opvtY4GlVfhKwGWmes5eVi/MGaSaswItzHw7aC2Cl6Bzq6PRUSdR
mBWEjZ2newyyvMCbL7zcWoAfYdwlah/WY9+IWSnYVD0nPNodb1kdj87U9yfo
PVamCNWfwqvHA8y5asdwO+gV29ST0Oo1NYsFGd/Cy+0K0Xht/HTwLr/qApFf
MZ4V7mrs2a2o6dXyGXkgJl7R2t/tRZw52XNacT3MC2a0C61eHYcQ6Atzherc
y9Xn8WpceBzC52D1InzqzyJ6JXEUoaJH/tjo1MiEbmX1lioWcer49rAsDsc/
N3Qn6n6y1S4Wdd8dtguvylbjVXnCWCV1Ff0f/ercR527bZ/aQmQp/TlDNUOO
Dujg9unWeWmK2LDtCOGDNUej0SC2YSF4tXUzjmFO2GqEf0X1181exOmLwVOK
vE7I3V6Lwk1dXIkTPT2DTWsfLyMta+y/9Ql/VWBUAzHau/8GLCccTSA4x5w0
erYMWmpuX4fqi5jKtTXLcAAR/jbNqBav3j4J8f5F7/qaOJHpXjR4m1Nj9efw
mvE4gXahX0F6ZrekI1bEIqQzt6kjMX9tNfTdUH37w6jY/wZn+OewcMSiJf0X
mhH5ed4984Zqrq9HWUXvQflSt4xnCE8ZuhYVYII3/vwcYdKUF4pXG/xKlQuC
/pihmjsHF448mPF5zjyUyBW12z9uSjxYx04ZcRI5Ztxj4h5BY/VQeN0U/VEL
qL5R1Rdx0QhVWxFTG885HZrqEkU/fz1SGY4YrRp1i2Dt6lG5v9H6kdVnRvWI
IXU5v85HzDxZs+Nkza78tURjP8niKdVtxeWmxNAFwBn7U+1T4hBvHcLN3ZEV
1NjhxpWvhY3Ym8RQPPDE44GGOh5AMNAXGupXMQSO0FZKoz/llZzlQBxIY2pF
/5c48BNtcRqTfYSIA09d0Yfq1N7dR31b1Jhab+kaQJ2HL9NjSrr9x6GvWNBU
F5AzJSoPsZMlLbIskag8dQtpjqd/TElhzAR0r5uudoU6HH9Dh5+SprzDzAot
MNazMgx9BGYWF/uK3JZkjfaQ8H0qB3wvToy+baOfZJ8R5HHEvzQz04XFzFnO
SF5D3lTJzVjE1JxOLRLM2BtyVLCGZ8zAsG+A7qPITNr3hDojNbvSSviie0uq
C0KRH9hV2dGHzKr9c5gnXm2yF4xafQymrWWjJXurPNQaJcEHawhDg5x5/mlF
3jv8MNGhtVUgu1PtN55A9d1Ob5XdNfT3NildE+jn0FBNzgsE8KnCVGy+RGD7
QqSo+ZcTIFwKrAPvDMumUM0OflHCNeUIjab8JofqMZZoeR1Z/TFx7dJRHul0
kmreAb+a86N1eEoUWhDdDJ2FqBA1xcWg6s5QD1Q92USLxt+G2Y+6ZYWWgO8c
vZskKhL2KHpwL9Q+EGqJ2BXWcx+v5mmpddEc10VXS9X3l21BF9F3ON1o+/mP
WIwiwT1/BjULwgxSknrhwgMcFsTbIlMBxKQJoGshghMSXSybKnRg4d9inirW
LzRnJ+b7ic0dmK22CW5e9Ag+9nQwNmyy7lOuHtnSgwYLzRhv14zFPCXA3Z4R
tqGP4yPE8SER+GCO834iU880C0BjuNQif2EyV6tU24glEWDb0RVn4nui/miW
nF/1BZsGcy5bkLlLFCnz3b7QOW7EuGTi9wBEOpbPZbrQHv+KCS0c0tnJZIaQ
71vFfatBsrLeMUuDYR0ioFJJWx3wTzcr57iOzzFnBM7f4WMvGZ3fmV+UuGQK
0Q8Nbmz9hYY+24kvMfcivvKBr55GTBfXPfeN+OHpIUpjjWXRxlh7oq+RIRab
pAif+rv2ruucQz3kIhQz7alsTrm1vpsK2J/2nY0nq9yttDgdMuENSewg7lrN
wE1TXnGeivV3xVhYWya3A5eKBBiPVkZL8k+nhwg8XkCqx1FuDz4rMvKosRRW
/eL6NHaTcZlXqdU50rTet4ViyU9F0alaUn+u+Jh0DhrtnzNdWSQ2A0mbsRON
R6Mn+WfRY7pNSrQkNHBKHrpVkVzwHFiSfxU9jhVTws0UctDm4QmSesd1grjI
MvkPagPfIcSHhj6DsB1TeaFmmj//USEVJTPo0yQJmeW6liU0N+NJVL5nOrBD
H11zpz+1FLK0ERdnIT2LQHqmENHcSZa6H2QXIrzYCwdjRcwH+stK/ZoMMhna
JQ4HTdk/aLDvumk8PzeP/QHf+JvM1cjyKPWrnjJu1J3Dm4TWhhodSLEtS8HG
fk8CEz9ZzRpfrRpHNs/eH00xMI6zwo1dkIDRKNyK8CaJ1UL9Dz2p+Kt8R+HI
gDn+umpSERVHsl313e1IrvJb29os8xRyq4aDYEES9acZvlnvkrTuzn7LHU7S
GZjN+MBQfeI7iIlh6IvtupQjAyheoPYCUOLZ8PRS2omvEhY9jeHfgHL90UUm
fv8agqeTUj+xEe8xJTz6zxAjvueueqLv9WOTMMwBJkTfdTfBiLHwdgcMWwzt
kVC3hH/hI9rzoH0V1H+GfytGtHdBGfkI1RO1M6DzIEbYveqJt8O8LBIxr+qp
ajcjEfaseqra7UgE7qqnavylUJ+AfXmq4INJxP+Xh+qpak+Eug325aniwx/K
z7Crnqp2HWCWHtSLR+CJ6K0mEe2qpwr+jRLuzb/o6lfW+//VzlDKUPVUtRuQ
CfpVT1W7JZnor3qq2udDfSz25alq91DCefwLfg2ZkIfqqeJnKNTRD4mqp6r9
MBn9PwZ8earafyMT/FU9Ve3YCH2kq/jDIsq62Jenqh39tx5sgUnCbSEQzREX
EGU3x9o6OCw4JjggJHhXQExweJhbeFjQkoDgMPTPb1Fs2EbUOMnKzxvexgX5
+a2IiQoKCHUPivEO2hHjFhATgH5z9fHzQ8XlQQGbiPf/9TvO//XrzP8vP+r+
L0xnNfp3YPzz4UE7IoI2xswKtvLz27Jjh19EUFR0eBjQHrPTL46/KCooaIl3
bGhQVPBGfKSYrVHh8covoC/csTEoAvECHyc0KHRjxM5ZEfxgB+JPsJ3t8tiw
mODQID9XwCgmaOQ4owb1iw6K8QmIiolePIrvfnNsHDYF2Fhv9rOz4Qf42W52
cPAL2GQf6BcUGLRxYyB/U5BdgD0uFNfFYXHhG/FOeP3rqIAIIMTPNSAkBG9Y
uCMi6guMd1C8n+rr7QujosKjYH41MStidoYErQyKjgEO+y1ZGRQWHR4F3TZu
VUN4BIRtgp4EUUoINAHOLKK6BQaMCYoCPiobVCyCmdTcUbM/CngUFhMQMiss
HIgPiJ4VvTE8ImjWpqCNIcQX3oM3ByE+zoqOAS7h/Ue3B4VtwlutbGbxZ1lx
NwHXHAJtAmwc7RyC5thsDAq032Rr7cCf42gfsHHORodNG+34m+02BexwsPOz
s50ZsXFmCPpq/ddL1J+0///1QftZ8SGzvP5lHLO8/i+bx//OhP8yECVZI9WJ
8Bv/By5H2uA=
                    "]]|>, "orcInstance" -> 73568320, "orcModuleId" -> 
                    70458032, "targetMachineId" -> 72984192|>, 
                    140322558809920, 140322558809776, 140322558809856, 
                    140322558803968, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6d978124_f3b0_438e_a6f7_1110ae86fb55", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
UaOw8O+DwL+5
                    "]]|>, "orcInstance" -> 72458768, "orcModuleId" -> 
                    71894992, "targetMachineId" -> 74574480|>, 
                    140322558796320, 140322558795920, 140322558796000, 
                    140322558795776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 22},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "70376b50182ea8e2", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 22}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 154872, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 14, 49, 1.49465`6.927114495350697}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzNVstNRDEMfOJIF1SyPVACEmcqpRdKgPNKo/nmiUir1Uuc8SS2x3n7+Hr/
fLmu6/vv93qx8fPQ1pkdwkPfCO95Hf27/lX+DA/hprzW34hPas/On+Kr+9BQ
ebd5trq39vzqfjTSeK3yP+Xn5g/DQ3btfadxYDzY/jau6b/Kv82TdR24flsd
Sf20utP2E3f+dH6lo9V/htfqYxtXNP5r/q7w3H3t+U/FBeGr+1w+bZ2t+1O7
39WhlEeLv84fladrp86fiqOqg6pftj+1P9XfUt1EOO2517q77ndp3TB/636Z
6nt6v8zvWkfTe2E4zC7Fa+ux1SF13sVHdmudUvHd/S1+qp9tH0z73ZoHs1+v
p/WR+lX9tP2lzaPW/m5dZ7jqWOGmetDqvrsv1Rc3fu17o9Wx9v1xqu+1+Kt4
p7ri8lzhpfZpvqB11z/iw3DW74JT/tv7VUdaFy7uCqcdaRxT/VX5rN5RK11x
66S9n/S9ktYdwmX8Vv1R5ZHyduO5el+odqfrBtkxPm6enTrXGs/Nk9W+VEfU
+XS97Uerf8bH5e3W8epe132V4a/6JeOj7mN4qd+UT3oPDJfNn+7T7Tyyu6t+
XT4tX3e4OsRwWv8r/WN2z/OMX2rP/KfrbvxP+WX+1vd9qt+18WF2rd6v+3mb
P+m9p32l5dGuu6ONs5ovd+n26XcFslv1V/Vb5dP2Gfedgfy4/BjPFE/FXY3V
/a3Pn/J8tnfnW71w88zFV3mf6r/MXuWnjtU7B/FB86kupfWk7l/36TYvEX66
znggu/T+V+db1Rvj5+Km/lo75g/hrfXztG629+Ge160LdbTxZ7gqr7YeT/XR
NS4b67q/q17W8UJ2rr9V/0T2bL7tx6kdGm5epfrX9qc0fiquO//z+AVi54Xv

         "], 
        "Output" -> {
         True, False, False, True, False, True, True, False, False, True, 
          False, True, True, True, False, True, True, False, True, True, True,
           False, True, True, False, False, True, False, True, True, False, 
          True, True, True, False, True, True, False, True, True, False, 
          False, True, True, False, False, True, False, False, False, False, 
          True, False, False, False, True, False, True, False, True, True, 
          True, True, False, True, True, False, True, True, False, True, True,
           True, True, True, False, True, True, True, False, False, True, 
          True, False, True, True, False, False, True, False, True, True, 
          True, True, False, True, True, True, True, False, True, True, False,
           True, True, True, False, True, True, True, False, True, True, 
          False, False, False, False, True, True, False, True, True, True, 
          True, False, False, True, True, True, False, False, False, True, 
          False, False, True, True, True, True, True, False, False, True, 
          False, True, True, False, False, False, True, False, False, True, 
          True, False, False, True, True, False, False, True, False, True, 
          True, False, False, False, True, False, True, False, False, False, 
          True, False, False, False, True, True, True, True, True, False, 
          False, False, True, False, True, False, True, True, True, True, 
          False, True, True, False, True, True, False, False, False, True, 
          False, True}|>, 
      "Predictions" -> {
       True, False, False, True, False, True, True, False, False, True, False,
         True, True, True, False, True, True, False, True, True, True, False, 
        True, True, False, False, True, False, True, True, False, True, True, 
        True, False, True, True, False, True, True, False, False, True, True, 
        False, False, True, False, False, False, False, True, False, False, 
        False, True, False, True, False, True, True, True, True, False, True, 
        True, False, True, True, False, True, True, True, True, True, False, 
        True, True, True, False, False, True, True, False, True, True, False, 
        False, True, False, True, True, True, True, False, True, True, True, 
        True, False, True, True, False, True, True, True, False, True, True, 
        True, False, True, True, False, False, False, False, True, True, 
        False, True, True, True, True, False, False, True, True, True, False, 
        False, False, True, False, False, True, True, True, True, True, False,
         False, True, False, True, True, False, False, False, True, False, 
        False, True, True, False, False, True, True, False, False, True, 
        False, True, True, False, False, False, True, False, True, False, 
        False, False, True, False, False, False, True, True, True, True, True,
         False, False, False, True, False, True, False, True, True, True, 
        True, False, True, True, False, True, True, False, False, False, True,
         False, True}, "LogProbabilities" -> CompressedData["
1:eJylli9IQ1EUxp8b/mtDFBYMUzTIHCazgqJBBFmYXScoCC6KFi0qiEVYsNk0
Lq3JfbKgCLMpUxHGVMTivzBEDWo45TfGx8Mwxr3v3HPO933nnHu7ZpaScyHP
84q/v7//taO+sZfbSdc7vf367HX6iY3Tj61Q1F8eeZy/G0+7UOtButzU7pdT
ub2d9VW3eX2/MPA16PY7OqtxL+bfzCSv3sMNfnllbiIx5LuTfKXjIbvrLkpn
lWxbxKe97dPO1txnfPu3fdovRjPfmfKhax0+L6zPttScJ17L23DYOfNjPBgv
xMN8VL70Z3kwL1vzPPWhP/JBPIzzFr6cShWbXb70+d7o9Ug8jKfsGY/6EC/x
HadHC7n+mLutPsUjXncNf4zHelT6sv5U/ROP1YHVhfFovPI8+aY99TPcxgO/
K/35XfHL8+Snpn+gf1B71oPqb9WfKh71UP2h8Kl8WY+sFzXv6s2Fev2k9GO+
9KfmaVD85FfF53xlvSp9+F3ly3jUR62Zn+JDzXfaEw/rnfVFvP+dD/TH/Jkf
65drhU/hDRqP+9Sv3rl680LdN4pPdZ+SH54Pev9Tv6D3Gftfva+oI/2p96Ca
h+q9oPBwre4TdT+pNf3TTtWj6h9VDyo/1U9qPvF9EnQeB52nzI/6/ABmgKrt

       "], "CountMatrix" -> {{116, 0, 0}, {0, 89, 0}}, 
      "IndicesMatrix" -> {{{1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 21, 
         23, 24, 27, 29, 30, 32, 33, 34, 36, 37, 39, 40, 43, 44, 47, 52, 56, 
         58, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 
         82, 83, 85, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 
         105, 106, 108, 109, 110, 112, 113, 118, 119, 121, 122, 123, 124, 127,
          128, 129, 133, 136, 137, 138, 139, 140, 143, 145, 146, 150, 153, 
         154, 157, 158, 161, 163, 164, 168, 170, 174, 178, 179, 180, 181, 182,
          186, 188, 190, 191, 192, 193, 195, 196, 198, 199, 203, 
         205}, {}, {}}, {{}, {2, 3, 5, 8, 9, 11, 15, 18, 22, 25, 26, 28, 31, 
         35, 38, 41, 42, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 59, 64, 67, 
         70, 76, 80, 81, 84, 87, 88, 90, 95, 100, 103, 107, 111, 114, 115, 
         116, 117, 120, 125, 126, 130, 131, 132, 134, 135, 141, 142, 144, 147,
          148, 149, 151, 152, 155, 156, 159, 160, 162, 165, 166, 167, 169, 
         171, 172, 173, 175, 176, 177, 183, 184, 185, 187, 189, 194, 197, 200,
          201, 202, 204}, {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {205}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00010253658536585366`, 
      "SingleEvaluationTime" -> 0.0022029375, "Version" -> {13.1, 0}|>]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.86922158804959*^9, 3.869221713139295*^9, 3.869221916584944*^9, 
   3.869221949016221*^9, 3.8692219949471207`*^9, {3.869222057606943*^9, 
   3.8692220713339243`*^9}, 3.8692254296954308`*^9, {3.869227070722014*^9, 
   3.8692270775786343`*^9}, {3.8692775584383593`*^9, 3.869277584282023*^9}, 
   3.869280268335588*^9, 3.869280411917354*^9, 3.869280831560107*^9, 
   3.8692809874689207`*^9, 3.869281066352899*^9, 3.8692811724409447`*^9, 
   3.869281425928671*^9, 3.869281499910817*^9, 3.869281551694984*^9, 
   3.869281835979891*^9, 3.869282043779932*^9, 3.8692847524226227`*^9, 
   3.869284805759396*^9, 3.869293452523674*^9, {3.8692944587734823`*^9, 
   3.869294466449047*^9}, 3.869296784945951*^9, 3.869296856376144*^9, 
   3.8692994406780653`*^9, 3.8692996693200827`*^9, 3.869302407155458*^9, 
   3.8693025154415073`*^9, 3.869302623316126*^9, 3.869310317773045*^9, 
   3.8693107637484093`*^9, 3.86931084016854*^9, 3.869552751944106*^9, 
   3.8695546358467607`*^9, 3.8695549988502617`*^9, 3.869555146104582*^9, 
   3.8695611634305363`*^9, 3.8695690819901237`*^9, 3.869569406377159*^9, {
   3.8695694401594343`*^9, 3.869569464095893*^9}, 3.869639243984894*^9, 
   3.869639324888033*^9, 3.869640015570827*^9, 3.869640345638781*^9, 
   3.86964053337292*^9, 3.869640597863611*^9, 3.8696407000548*^9, 
   3.869640739910688*^9, 3.869646333133191*^9, 3.869646415526245*^9, {
   3.8696465139258013`*^9, 3.869646541702939*^9}},
 CellLabel->"Out[64]=",ExpressionUUID->"d73a0799-e327-494a-afd9-85d993250f18"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"2690b326-fb91-4c09-a746-\
cb42f085f60a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}, {3.869227140760223*^9, 3.869227149194792*^9}, {
   3.8692798649790173`*^9, 3.869279876404379*^9}, {3.8692987446359167`*^9, 
   3.8692987456828957`*^9}, 3.869298793152401*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", "targetEncoder", "]"}], ",", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"Last", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869284839496479*^9, {3.8692934957441673`*^9, 3.86929350723984*^9}, 
   3.8692935774265747`*^9, {3.869293613088286*^9, 3.8692936550243273`*^9}, {
   3.8692944972849493`*^9, 3.869294556962762*^9}, {3.869294872582518*^9, 
   3.869294912979456*^9}, {3.869294971357285*^9, 3.8692950293879957`*^9}, {
   3.869295060242984*^9, 3.8692950718682213`*^9}, {3.869297055293254*^9, 
   3.869297056155302*^9}, {3.8692987230967207`*^9, 3.8692987318391743`*^9}, 
   3.8692996779039917`*^9, {3.869300234495809*^9, 3.869300238804558*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{
  3.869277655279928*^9, {3.869277716385961*^9, 3.8692777380640306`*^9}, {
   3.869277958266292*^9, 3.86927796811233*^9}, {3.869278386117118*^9, 
   3.869278386462037*^9}, {3.869278514787964*^9, 3.86927851825823*^9}, {
   3.8692787116732492`*^9, 3.869278752387225*^9}, {3.869279742103284*^9, 
   3.869279791698346*^9}, {3.869281009188909*^9, 3.869281010497501*^9}, {
   3.869281858882139*^9, 3.869281912459756*^9}, {3.8692848378347797`*^9, 
   3.869284838188376*^9}, {3.8692986858888702`*^9, 3.869298692159895*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{{3.869553146822407*^9, 3.86955317237323*^9}, 
   3.869554694294444*^9, 3.869555152594727*^9, 3.869555213770483*^9, 
   3.869561171284932*^9, 3.8695612206341457`*^9, 3.8695625235012817`*^9, 
   3.8695690931943617`*^9, 3.8695698133980637`*^9, 3.86963956776871*^9, 
   3.869639601848463*^9, {3.869639799168675*^9, 3.86963983093559*^9}, 
   3.869640061264633*^9, 3.869640369476589*^9, 3.869640555181766*^9, 
   3.8696406036543293`*^9, 3.869640704423348*^9, 3.869640745354807*^9, 
   3.869646337721451*^9, 3.869646420975051*^9, {3.869646518428033*^9, 
   3.86964654564825*^9}},
 CellLabel->"Out[68]=",ExpressionUUID->"5d48a6a4-1a53-473e-a590-275fcc94ac69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"Last", "[", "#", "]"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "testData"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}, {3.8692787783714046`*^9, 
  3.869278787906781*^9}, {3.8692948373831453`*^9, 3.869294848226471*^9}, {
  3.869298696937389*^9, 3.8692987383197727`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.869278789622883*^9, 3.8692804206876087`*^9, 3.869280848042408*^9, {
   3.8692809962303677`*^9, 3.869281024988372*^9}, 3.869281073128274*^9, 
   3.869281189739897*^9, 3.869281431738426*^9, 3.86928155628786*^9, 
   3.869281841834961*^9, 3.869282052670763*^9, 3.8692847599449587`*^9, 
   3.869284810292136*^9, 3.8692936592620487`*^9, 3.869294848924099*^9, 
   3.869295075551647*^9, 3.869296799752571*^9, 3.869296864065097*^9, {
   3.8692986986071157`*^9, 3.869298738736906*^9}, 3.869299449532473*^9, 
   3.869299680960174*^9, 3.869300242854801*^9, 3.869300595945923*^9, 
   3.869301454574747*^9, 3.869302064899097*^9, 3.869302248427836*^9, 
   3.869302416939876*^9, 3.869302521702746*^9, 3.869302630550453*^9, 
   3.869305019568828*^9, 3.8693053909142237`*^9, 3.869310327258253*^9, 
   3.8693107709371634`*^9, 3.8693108470289307`*^9, 3.869311235483984*^9, 
   3.8695527726332607`*^9, 3.869552903637726*^9, 3.8695546955455236`*^9, 
   3.8695611726186743`*^9, 3.869562536932818*^9, 3.86956909440084*^9, 
   3.8695698167662477`*^9, 3.8696395710842047`*^9, 3.86963960282456*^9, 
   3.8696398008323383`*^9, 3.8696400629900923`*^9, 3.869640371269559*^9, 
   3.869640556415327*^9, 3.8696406049209833`*^9, 3.869640705455467*^9, 
   3.869640746383108*^9, 3.869646338732958*^9, 3.869646422071988*^9, {
   3.86964651947829*^9, 3.869646546659093*^9}},
 CellLabel->"Out[71]=",ExpressionUUID->"01fc2613-e3f9-4690-8fdb-f9be7cc71869"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],

Cell[BoxData[
 TemplateBox[{"0.0537109375`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869278792689138*^9, 
   3.8692804220574636`*^9, 3.8692808499930363`*^9, 3.869280998755859*^9, 
   3.869281074256464*^9, 3.869284760836566*^9, 3.869293660792145*^9, 
   3.8692968012889338`*^9, 3.869296866349676*^9, 3.869299451366023*^9, 
   3.869299682477159*^9, 3.869300597023597*^9, 3.8693026329139*^9, 
   3.8693050205921583`*^9, 3.869305391619213*^9, 3.8693103289215813`*^9, 
   3.869552773727091*^9, 3.8695546976668797`*^9, 3.869569095636631*^9, 
   3.869640065369503*^9, 3.869640747456979*^9, 3.869646340518196*^9, 
   3.869646547931837*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"4bff1da2-69a8-46aa-b43f-31ebe29bfa8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardNetBooleanExpression", "[", 
  RowBox[{"hnf", ",", "inputSize"}], "]"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9, 3.869296803018434*^9, 
   3.869299459793828*^9, {3.869639841092606*^9, 3.869639849710751*^9}, 
   3.8696407506954603`*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b10", ",", "b2", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b3", ",", "b4", ",", "b5", ",", "b7", ",", "b9",
        ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b3", ",", "b4", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b4", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b5", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b4", ",", "b6", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b10", ",", "b4", ",", "b5", ",", "b8", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b10", ",", "b3", ",", "b5", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b3", ",", "b6", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b3", ",", "b4", ",", "b5", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b3", ",", "b4", ",", "b5", ",", "b6", ",", "b8", ",", "b9", 
       ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b6", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b4", ",", "b5", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b3", ",", "b4", ",", "b5", ",", "b6", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b10", ",", "b4", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b3", ",", "b5", ",", "b6", ",", "b7",
        ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b10", ",", "b8", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b3", ",", "b5", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b2", ",", "b3", ",", "b6", ",", "b7", ",", "b8", ",", "b9",
        ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b3", ",", "b6", ",", "b7", ",", "b9",
        ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b10", ",", "b2", ",", "b3", ",", "b5", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b2", ",", "b5", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b5", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b3", ",", "b5", ",", "b6", ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b3", ",", "b7", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b4", ",", "b6", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b4", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b3", ",", "b4", ",", "b5", ",", "b7", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b6", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b2", ",", "b6", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b3", ",", "b4", ",", "b5", ",", "b6", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b4", ",", "b5", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b2", ",", "b3", ",", "b4", ",", "b6", ",", "b7", ",", "b8",
        ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b3", ",", "b6", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b3", ",", "b6", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b2", ",", "b3", ",", "b5", ",", "b7", ",", "b8",
        ",", "b9", ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b2", ",", "b4", ",", "b5", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b2", ",", "b3", ",", "b4", ",", "b5", ",", "b6", ",", "b8", 
       ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b3", ",", "b4", ",", "b5", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b1", ",", "b8", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b4", ",", "b5", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b10", ",", "b3", ",", "b5", ",", "b6", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{"b2", ",", "b5", ",", "b6", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b3", ",", "b5", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8696407510020227`*^9, 3.8696463421378736`*^9, 
  3.869646552219399*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"f2b8779c-4815-471d-a9d6-b3b87798195a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"0a2ce80a-fe81-4612-966f-\
edb1d9a9f984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Target\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}, {3.869293711665983*^9, 
  3.8692937224093533`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.45], 
               PointSize[0.13], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], {
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "10", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.45], 
               PointSize[0.13], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], {
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "10", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["160", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 160, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Input" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|"FeatureNames" -> {"Input"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 1|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 160, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>,
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Standardize", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                    0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                   "StandardDeviation" -> {0.4952508833914383, 
                    0.49964831381682856`, 0.4999609359740019, 
                    0.49859176687947826`, 0.4999609359740019, 
                    0.4998437255783051, 0.49964831381682856`, 
                    0.49859176687947826`, 0.49859176687947826`, 
                    0.4999609359740019}, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBMQPO/CFib1JlAgAAAAoAAAAKAAAAXuTX22F5r7/WgkQq5drZP+ion5ec
4Hy/m4cV4Z0p5L9xuBzUGZ+zv/35NRqHfrC/pTWsf5Lp1L88LDLmNITWv0t0
WqoA7du/5Nl0JYAasj8keSaAJKLWvwAefRovCtm/sa1Fmpo2bD8TGTM++x/M
P+qxYbhZ8LI/72QoELJA27/Du+69cnDhv+rxaUBM784/5sBgjKsQ17/bNiX5
/rGjP1bcul72b9k/ZV+F6H6n2T/3BceDii7Rv8BOJLTpZbe/G6fUlC8yqj9K
fZ08g1vCv/VBNj605ti/cnuklanc4j+jEvEKN/nRPzitU5akmHs/5XSjGAq9
078Fi/tr3QXAP+dbLDK3JtQ/XsYugtodwz8NXwTf2/jTv/JRW7UzeOQ/AnMw
npcP3b8BynzZNVm0P3FBYhUwocg/yw1OCb+ouz/mwBiNFSTbvznIinwzPt8/
ip5cBI7rwr/QAACw0gzSP8Z26dBrosQ//FpetFbmqr/7M7ZpRQOqP21AGJkp
Haa/zMsvoSPZmb/6zTYatWLlv4epktZ76ro/nkp0smqoz78NAW5RgwnWP1qc
RJqzONe/uacrv+Tr4T+oNYKgSK3VP2ijyltAoZ6/DtAOQuQy0j8/JcRRa0jC
v+6/GtmAiti/dnu9Jjkth78G5kuiOF/cvzdzwy2WPuG//RabBfFC0L90z5QT
H9jBvzAt7J1zncA/qeHyTeL80b+2On1WR+XRv0qb+d69U9Y/U2oEzO9b17/l
GtdKbI3Sv11tUvHfZ6C/FK9zWgJ+3T+LrhIIdAHZvztEp+HrBdG/PK3cR2kB
3b852EE9mfu7P+QvB/S5fMA/Tq6EQdom3j+9ucqxsYjDvzv/QDxWqtu/Cour
LZT2tT/IgzvvS2vHv3bi0LuxRL2/K5qd5jDw4z/qnn+N5VSEP7/UX/Sjo4e/
t2+0vlzqu78uZCT40LPXP5vQaZ0KI94/BOnyIkBK2b+wEMaI/fCrvwgcSflv
9di/4HzexD1k0r8h8DLstAHRv5+2ffHrIss/0ulb3qVL2D8pUd8qVsXgP9+5
K8Zd3c+/XTZQ3n94uT+3+LIO
                   "], 
                  "Precisions" -> {0.7257174478060948, 0.7980900832683177, 
                   0.8714991822739657, 0.8935443606188151, 0.9304648215319101,
                    1.0709663859255598`, 1.1255499499187143`, 
                   1.2640914768101463`, 1.3745785065496414`, 
                   1.4571090277638326`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.00009585191189936116, \
-0.000026002148434818574`, 
                    0.0004825802401201562, -0.0005366240962883858, \
-0.00022208729013047728`, -0.0003670023338188111, 0.00021840859062624424`, 
                    0.0006710405718560929, 
                    0.0008348456504142656, -0.0006369960470426359}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6590044052364615545|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 10, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {-0.0000958519118993556, -0.00002600214843478388,
                     0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                   "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 10, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   4154342778301398384|>], "InputDimension" -> 0, 
                "OutputDimension" -> 10, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, 
                    "ID" -> 6072081202834183359|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.111475, "MaxTrainingMemory" -> 3204752, 
                  "DataMemory" -> 15760, "FunctionMemory" -> 35056, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 12, 12, 48, 42.754424`8.383556037572742}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.9848310120311979, -0.9848310120311979, \
-0.8884471454831475, -0.7517462237678633, -0.6354660134088475, \
-0.5656403763149495, -0.511145001827811, -0.48625869883714107`, \
-0.4859572129774997, -0.45176085615485134`, -0.4334777402766434}, 
                   "LeftBoundary" -> -0.8884471454831475, "LeftScale" -> 
                   0.04819193327402521, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[6.194730281079952, 0.6114759665574782], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 895810465636885430|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
              0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
             "StandardDeviation" -> {0.4952508833914383, 0.49964831381682856`,
               0.4999609359740019, 0.49859176687947826`, 0.4999609359740019, 
              0.4998437255783051, 0.49964831381682856`, 0.49859176687947826`, 
              0.49859176687947826`, 0.4999609359740019}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5750822634109734636|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 6153537743509581873, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 335429500972439703|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       False -> 0.5123456790123456, True -> 0.48765432098765427`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Target", "Order" -> {"Input", "Target"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
GpR+tOLK7GLh/zSU4aU=
                "], "Biases" -> 
               RawArray["Real32",{0.007586608175188303, 
                 0.004130740184336901, -0.003439494641497731, 
                 0.0011237405706197023`, 
                 0.0015705602709203959`, -0.006614836398512125, \
-0.0018645193194970489`, -0.0019555322360247374`, 0.003394663566723466, 
                 0.0054919905960559845`, -0.00010034607839770615`, 
                 0.012683391571044922`, -0.004204754717648029, 
                 0.0018647263059392571`, -0.004093781113624573, 
                 0.0025232837069779634`, -0.010073653422296047`, \
-0.00446350546553731, -0.0005600734730251133, 
                 0.0027902403380721807`, -0.006823718082159758, \
-0.006846791598945856, 0.0032366779632866383`, 
                 0.004454604350030422, -0.007528161164373159, 
                 0.002654435345903039, 0.009209441021084785, 
                 0.0034437868744134903`, 0.0028226024005562067`, 
                 0.003014068817719817, 
                 0.006908661685883999, -0.00495754973962903, \
-0.0019600426312536, 0.0005209469236433506, 0.0006473163957707584, 
                 0.0013040441554039717`, 
                 0.00005686868462362327, -0.0014400897780433297`, 
                 0.005742934532463551, 
                 0.0076113673858344555`, -0.003591280896216631, 
                 0.000705207756254822, 0.003198676509782672, 
                 0.0007772960816510022, -0.012217092327773571`, 
                 0.011351937428116798`, -0.0017649834044277668`, \
-0.006030149757862091, -0.006369924638420343, 0.001736971433274448}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               10, "$InputDimensions" -> {10}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
4w==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.0026186557952314615`, -0.0016987576382234693`, 
                 0.0014968644827604294`, -0.003594791516661644, 
                 0.00006177173054311424, 0.003362583229318261, 
                 0.0002820208901539445, 
                 0.00363851897418499, -0.0010246483143419027`, 
                 0.009928206913173199, -0.004033091478049755, \
-0.002561482833698392, -0.004127171356230974, -0.0008917942177504301, \
-0.002043253742158413, 0.00002712264540605247, 0.00258741551078856, 
                 0.005019847769290209, 0.005651443265378475, 
                 0.0007637562230229378, 0.0010623190319165587`, 
                 0.005563205108046532, -0.001955776009708643, 
                 0.008689261972904205, -0.007955365814268589, \
-0.007604903541505337, 0.004579477943480015, 
                 0.0012351189507171512`, -0.005790797062218189, 
                 0.00014774220471736044`, -0.005985989235341549, \
-0.005370402242988348, 0.002337882062420249, -0.0027976972050964832`, 
                 0.004389017820358276, 
                 0.0014165359316393733`, -0.002496752655133605, \
-0.002623909153044224, 0.003312438726425171, 
                 0.003665399271994829, -0.004828959703445435, \
-0.0013859589817002416`, -0.0018373954808339477`, 
                 0.003334455192089081, -0.000723132339771837, 
                 0.0020369216799736023`, 
                 0.0006338009843602777, -0.0011910079047083855`, \
-0.008230804465711117, 0.0015584765933454037`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACFuCk+srunvdFpET5IMYE9GxuCPd1OzD3aaHE9XdbovULFbr6l
3Ng9SVU2vnFPQr5LPVu8pwm+PS9wBjyQTIk+dFDTPEXntDyKWdk9CXkfPl7B
Kz7JNxs+JZMSvrEJFz6yWUy+22BXvJ5Gtz1deu28y+/mveMy2D3eGxy+uIOC
vSc9BD27p/K9LLT+Owzicz3YfR2+/FgvPQH/fr68mR8+IysdPKmaBr4uYIw6
5Q5VPAoJtj2le0S9gdw9PZLKez4g1Ba+5/SXPefcML64OnK8SlScPfFmgj2b
C809sueWPK2TWT2FcQO+WdgovjV4hj1YtDs9DvewPFz3bT7g7Ks+H9cJPhhn
P74Asjg+/ib1vdN1WL2YWk++HymcvC681z2VUlk7kixEPaNv57yDyfQ90fz9
vJS8Tr6qL9Q7XmoPvmGoyjuIYQg+zzdJvgsfCj1VcZe9o2qvvADykbwvgDU9
J6uWvualST2WeCU+2SJ3PDpCRj5uCi69PoLnPR7lQr5Qwb09fV+0Plc7aL2+
1JG9zf/D2w==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.0024223430082201958`, -0.002422342775389552}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.90165, "MeanInputsPerSecond" -> 
        21294.2937947097|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {-0.0005023999945228452, 0.00007433176593497834, 
              0.0006188508015755739, -0.00008477018728076658, 
              0.0008792203394160481, 
              0.000050793602720121404`, -0.0000839088388257775, 
              0.0007638920487112067, 
              0.0003070956565740468, -0.000670738065477329}, 
             "StandardDeviation" -> {1.0007197495535074`, 1.0001870458459403`,
               0.9994399444092847, 0.9993622913548977, 0.9996632371621096, 
              1.0005274002904267`, 0.999976989224157, 1.0004247198328566`, 
              0.9998659727781949, 0.999493083073257}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5627578033704932426|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "FeatureNumber" -> 10, "Calibrator" -> None, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3100, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15000000000000002`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.3856`6.037682018726764, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
         Around[0.5606106804399626, 0.1231054725977526], "EvaluationTime" -> 
         0.0009882117688026185, "TestSize" -> 32, "ModelMemory" -> 60368, 
         "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 128, 
         "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 398040, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.7132941076513983, 0.05803780225416599]}, 
         "AccuracyHistory" -> {
           Around[0.5606106804399626, 0.08704871447504557]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3100, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 160|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.1745278727732025`, 0.710660934850662], "Accuracy" -> 
              Around[0.44625604829418686`, 0.055180203926597934`], 
              "EvaluationTime" -> 0.0011804791017922904`, "TestSize" -> 152, 
              "ModelMemory" -> 56272, "ModelUtility" -> -5.342420477746496, 
              "TrainingSize" -> 8, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 444792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.1745278727732025`, 0.5025131661572743]}, 
              "AccuracyHistory" -> {
                Around[0.44625604829418686`, 0.03901829638375395]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0011804791017922904`, "MeanCrossEntropy" -> 
             Around[5.1745278727732025`, 0.710660934850662], "ModelMemory" -> 
             56272, "TrainingMemory" -> 444792, "TrainingTime" -> 
             8.221921916437788|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5455176631156329`, 0.26344121636134366`], "Accuracy" -> 
              Around[0.538237052163241, 0.06146290488827804], 
              "EvaluationTime" -> 0.0027539657749461486`, "TestSize" -> 130, 
              "ModelMemory" -> 60368, "ModelUtility" -> -3.032111100078587, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 371824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5455176631156329`, 0.18628107053313855`]}, 
              "AccuracyHistory" -> {
                Around[0.538237052163241, 0.0434608368379252]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
              "ModelMemory" -> 60368, "ModelUtility" -> -1.3623460347423109`, 
              "TrainingSize" -> 128, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 398040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7132941076513983, 0.05803780225416599]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.877479549546502, 0.38858605004838054`], "Accuracy" -> 
              Around[0.48303078358727053`, 0.0553376762000866], 
              "EvaluationTime" -> 0.0009325096914738674, "TestSize" -> 152, 
              "ModelMemory" -> 60368, "ModelUtility" -> -4.159693500103897, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 295744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.877479549546502, 0.274771831063705]}, 
              "AccuracyHistory" -> {
                Around[0.48303078358727053`, 0.03912964609618665]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0009325096914738674, "MeanCrossEntropy" -> 
             Around[2.877479549546502, 0.38858605004838054`], "ModelMemory" -> 
             60368, "TrainingMemory" -> 295744, "TrainingTime" -> 
             1.4328569182838289`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6469707462070442`, 0.4678470098200977], "Accuracy" -> 
              Around[0.46970158953087165`, 0.12379214994859225`], 
              "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
              "ModelMemory" -> 91752, "ModelUtility" -> -3.1590714144018075`, 
              "TrainingSize" -> 128, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 397088, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6469707462070442`, 0.33081779320164034`]}, 
              "AccuracyHistory" -> {
                Around[0.46970158953087165`, 0.08753426868631149]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.7842704102204543`, 0.6679427217107834], "Accuracy" -> 
              Around[0.5482043846458831, 0.06094984786979444], 
              "EvaluationTime" -> 0.0007286039311515623, "TestSize" -> 130, 
              "ModelMemory" -> 91752, "ModelUtility" -> -4.781770803778026, 
              "TrainingSize" -> 30, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 375896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.7842704102204543`, 0.47230682796589385`]}, 
              "AccuracyHistory" -> {
                Around[0.5482043846458831, 0.04309805074102009]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007286039311515623, "MeanCrossEntropy" -> 
             Around[3.7842704102204543`, 0.6679427217107834], "ModelMemory" -> 
             91752, "TrainingMemory" -> 375896, "TrainingTime" -> 
             4.526167090380248|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.675985439182979, 0.5662912603643842], "Accuracy" -> 
              Around[0.4605210292572121, 0.05557979016574277], 
              "EvaluationTime" -> 0.0005803592023889151, "TestSize" -> 152, 
              "ModelMemory" -> 162320, "ModelUtility" -> -5.277154515730969, 
              "TrainingSize" -> 8, "TrainingTime" -> 1., "TrainingMemory" -> 
              601512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.675985439182979, 0.4004283903303328]}, 
              "AccuracyHistory" -> {
                Around[0.4605210292572121, 0.039300846523122095`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8112304544476486, 0.13894358697675882`], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.003125, "TestSize" -> 32, "ModelMemory" -> 
              162320, "ModelUtility" -> -1.90781856606398, "TrainingSize" -> 
              128, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              610848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8112304544476486, 0.09824795255364903]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
             Around[0.8112304544476486, 0.13894358697675882`], "ModelMemory" -> 
             162320, "TrainingMemory" -> 610848, "TrainingTime" -> 
             2.573656764742709|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9285852429250843`, 0.6492543638659594], "Accuracy" -> 
              Around[0.5303076501369324, 0.12379201079532379`], 
              "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32, 
              "ModelMemory" -> 60368, "ModelUtility" -> -3.458660847734166, 
              "TrainingSize" -> 128, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 388616, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9285852429250843`, 0.459092163404578]}, 
              "AccuracyHistory" -> {
                Around[0.5303076501369324, 0.08753417029009174]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.251416473534061, 0.7820778441733018], "Accuracy" -> 
              Around[0.511000315694987, 0.06081556351355926], 
              "EvaluationTime" -> 0.0012545825726770717`, "TestSize" -> 130, 
              "ModelMemory" -> 60368, "ModelUtility" -> -4.982374472419596, 
              "TrainingSize" -> 30, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 298792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.251416473534061, 0.5530125470306977]}, 
              "AccuracyHistory" -> {
                Around[0.511000315694987, 0.04300309736211893]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0012545825726770717`, "MeanCrossEntropy" -> 
             Around[4.251416473534061, 0.7820778441733018], "ModelMemory" -> 
             60368, "TrainingMemory" -> 298792, "TrainingTime" -> 
             11.369217701071342`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.570761773346241, 0.747586201055562], "Accuracy" -> 
              Around[0.5005419461081866, 0.0614169849836683], 
              "EvaluationTime" -> 0.0007078621353105369, "TestSize" -> 130, 
              "ModelMemory" -> 162320, "ModelUtility" -> -5.248145453637503, 
              "TrainingSize" -> 30, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 620672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.570761773346241, 0.5286232722878775]}, 
              "AccuracyHistory" -> {
                Around[0.5005419461081866, 0.04342836656198421]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007078621353105369, "MeanCrossEntropy" -> 
             Around[4.570761773346241, 0.747586201055562], "ModelMemory" -> 
             162320, "TrainingMemory" -> 620672, "TrainingTime" -> 
             13.030868074309083`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.570022988477733, 0.47056125103694063`], "Accuracy" -> 
              Around[0.46808812170326913`, 0.055391654477629025`], 
              "EvaluationTime" -> 0.0010729982529474953`, "TestSize" -> 152, 
              "ModelMemory" -> 99728, "ModelUtility" -> -4.667976437863389, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 466072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.570022988477733, 0.332737051571846]}, 
              "AccuracyHistory" -> {
                Around[0.46808812170326913`, 0.03916781450227367]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.6244495740942417`, 0.48773046377476875`], "Accuracy" -> 
              Around[0.5909137107429928, 0.12195270099035052`], 
              "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32, 
              "ModelMemory" -> 99728, "ModelUtility" -> -3.172558737016106, 
              "TrainingSize" -> 128, "TrainingTime" -> 1., "TrainingMemory" -> 
              495688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.6244495740942417`, 0.34487751832639874`]}, 
              "AccuracyHistory" -> {
                Around[0.5909137107429928, 0.08623358185429224]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0012440849079796785`, "MeanCrossEntropy" -> 
             Around[1.6244495740942417`, 0.48773046377476875`], "ModelMemory" -> 
             99728, "TrainingMemory" -> 495688, "TrainingTime" -> 
             1.8809573444801932`|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[6.033033423949699, 0.7752242879962036], "Accuracy" -> 
              Around[0.45343777380296446`, 0.05538878083813811], 
              "EvaluationTime" -> 0.0005377730260816514, "TestSize" -> 152, 
              "ModelMemory" -> 99728, "ModelUtility" -> -5.708634968507651, 
              "TrainingSize" -> 8, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 447448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.033033423949699, 0.5481663509826286]}, 
              "AccuracyHistory" -> {
                Around[0.45343777380296446`, 0.03916578253230296]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005377730260816514, "MeanCrossEntropy" -> 
             Around[6.033033423949699, 0.7752242879962036], "ModelMemory" -> 
             99728, "TrainingMemory" -> 447448, "TrainingTime" -> 
             10.35078643439093|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[8.21220490974844, 0.9380313896761981], "Accuracy" -> 
              Around[0.45328643244984645`, 0.05573477005721432], 
              "EvaluationTime" -> 0.0006231480990112045, "TestSize" -> 152, 
              "ModelMemory" -> 185360, "ModelUtility" -> -6.424714064252742, 
              "TrainingSize" -> 8, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 766064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.21220490974844, 0.6632883566058805]}, 
              "AccuracyHistory" -> {
                Around[0.45328643244984645`, 0.039410433855329184`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006231480990112045, "MeanCrossEntropy" -> 
             Around[8.21220490974844, 0.9380313896761981], "ModelMemory" -> 
             185360, "TrainingMemory" -> 766064, "TrainingTime" -> 
             13.030868074309083`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.1697124352322645`, 0.5842252170709464], "Accuracy" -> 
              Around[0.515670025051118, 0.06149043644573219], 
              "EvaluationTime" -> 0.0006124725700823033, "TestSize" -> 130, 
              "ModelMemory" -> 56272, "ModelUtility" -> -4.363456613895947, 
              "TrainingSize" -> 30, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 275280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.1697124352322645`, 0.4131096127310489]}, 
              "AccuracyHistory" -> {
                Around[0.515670025051118, 0.04348030458889766]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.71315214729188, 0.08135402189964082], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.003125, "TestSize" -> 32, "ModelMemory" -> 
              56272, "ModelUtility" -> -1.467224702434685, "TrainingSize" -> 
              128, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              355120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.71315214729188, 0.05752598056203491]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
             Around[0.71315214729188, 0.08135402189964082], "ModelMemory" -> 
             56272, "TrainingMemory" -> 355120, "TrainingTime" -> 
             3.753003305505267|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 160, 
      "PreprocessorEvaluationTime" -> 3.59375*^-6, "PreprocessorMemory" -> 
      49544, "InputDimension" -> 10, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6928423179977401, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869297370424875`16.34020709736964*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 8.12172683094538, 
          "ElapsedTimes" -> 17.449253000000002`, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 11.602466901350537`, 
          "ElapsedTimes" -> 13.665400000000002`, "ExperimentCounts" -> 5|>, <|
         "TrainingSizes" -> 128, "TimeBudgets" -> 16.57495271621505, 
          "ElapsedTimes" -> 16.218941, "ExperimentCounts" -> 6|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, "ID" -> 
           6049509919062986817|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 48.925742, 
      "MaxTrainingMemory" -> 13959504, "DataMemory" -> 109616, 
      "FunctionMemory" -> 284600, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 12, 12, 49, 31.527207`8.251260478943298}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9, 
   3.869293712698818*^9, 3.869293771584032*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"ed75754f-b9ec-4db8-96c1-d9b71427f486"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Target\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}, {
  3.8692937803386793`*^9, 3.869293781129095*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "df702fc8-9357-4d06-854d-c965acc04380"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "40"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"55.", "8."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    55.0000000000000071054`3., 7.9662750681569294287`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"60.", "8."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[60.`3., 7.844645405527375992`3.]], ")"}], "\"%\"", 
                 "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.4641594659226853103`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0378565480912961549`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.3884463697400930005`3.", "\", \"", 
                   "0.5398725621052775647`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.3884463697400930005`3., 
                   ", ", 0.5398725621052775647`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.7675271092416309227`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0814692065102869956`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.6045886962210569315`3.", "\", \"", 
                   "0.9304655222622049138`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.6045886962210569315`3., 
                   ", ", 0.9304655222622049138`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.81`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"518.`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                 FractionBox["\"Examples\"", "\"Seconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 0.42, 0.}, {0.8978700888752068, 
                  0.5214532201704827, 0.005084762522782647}}, {{
                  0.8978700888752068, 0.5214532201704827, 
                  0.005084762522782647}, {0.9091744743232819, 
                  0.7728144692269537, 0.4277701645673613}}}, {{0, 0}, {2, 
                  2}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6875`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5499999999999999`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.4583333333333333}], 
                    Row[{"Recall = ", 0.6875}], 
                    Row[{"FScore = ", 0.5499999999999999}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "True", 
                    "\" misclassified as \"", "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.5416666666666666}], 
                    Row[{"Row fraction = ", 0.5416666666666666}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.3125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.3125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.3125}], 
                    Row[{"Row fraction = ", 0.3125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5499999999999999`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " examples of ", True, " correctly classified"}], 
                    Row[{"Precision = ", 0.6875}], 
                    Row[{"Recall = ", 0.4583333333333333}], 
                    Row[{"FScore = ", 0.5499999999999999}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", "False"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6875`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 0.6875}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" of class \"", "True"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 0.4583333333333333}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 0.4583333333333333}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 0.6875}]}], "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["24", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["24", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->181.2,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 160, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "Input" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|"FeatureNames" -> {"Input"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 1|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 160, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>,
                     "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                    0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                    "StandardDeviation" -> {0.4952508833914383, 
                    0.49964831381682856`, 0.4999609359740019, 
                    0.49859176687947826`, 0.4999609359740019, 
                    0.4998437255783051, 0.49964831381682856`, 
                    0.49859176687947826`, 0.49859176687947826`, 
                    0.4999609359740019}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBMQPO/CFib1JlAgAAAAoAAAAKAAAAXuTX22F5r7/WgkQq5drZP+ion5ec
4Hy/m4cV4Z0p5L9xuBzUGZ+zv/35NRqHfrC/pTWsf5Lp1L88LDLmNITWv0t0
WqoA7du/5Nl0JYAasj8keSaAJKLWvwAefRovCtm/sa1Fmpo2bD8TGTM++x/M
P+qxYbhZ8LI/72QoELJA27/Du+69cnDhv+rxaUBM784/5sBgjKsQ17/bNiX5
/rGjP1bcul72b9k/ZV+F6H6n2T/3BceDii7Rv8BOJLTpZbe/G6fUlC8yqj9K
fZ08g1vCv/VBNj605ti/cnuklanc4j+jEvEKN/nRPzitU5akmHs/5XSjGAq9
078Fi/tr3QXAP+dbLDK3JtQ/XsYugtodwz8NXwTf2/jTv/JRW7UzeOQ/AnMw
npcP3b8BynzZNVm0P3FBYhUwocg/yw1OCb+ouz/mwBiNFSTbvznIinwzPt8/
ip5cBI7rwr/QAACw0gzSP8Z26dBrosQ//FpetFbmqr/7M7ZpRQOqP21AGJkp
Haa/zMsvoSPZmb/6zTYatWLlv4epktZ76ro/nkp0smqoz78NAW5RgwnWP1qc
RJqzONe/uacrv+Tr4T+oNYKgSK3VP2ijyltAoZ6/DtAOQuQy0j8/JcRRa0jC
v+6/GtmAiti/dnu9Jjkth78G5kuiOF/cvzdzwy2WPuG//RabBfFC0L90z5QT
H9jBvzAt7J1zncA/qeHyTeL80b+2On1WR+XRv0qb+d69U9Y/U2oEzO9b17/l
GtdKbI3Sv11tUvHfZ6C/FK9zWgJ+3T+LrhIIdAHZvztEp+HrBdG/PK3cR2kB
3b852EE9mfu7P+QvB/S5fMA/Tq6EQdom3j+9ucqxsYjDvzv/QDxWqtu/Cour
LZT2tT/IgzvvS2vHv3bi0LuxRL2/K5qd5jDw4z/qnn+N5VSEP7/UX/Sjo4e/
t2+0vlzqu78uZCT40LPXP5vQaZ0KI94/BOnyIkBK2b+wEMaI/fCrvwgcSflv
9di/4HzexD1k0r8h8DLstAHRv5+2ffHrIss/0ulb3qVL2D8pUd8qVsXgP9+5
K8Zd3c+/XTZQ3n94uT+3+LIO
                    "], 
                    "Precisions" -> {0.7257174478060948, 0.7980900832683177, 
                    0.8714991822739657, 0.8935443606188151, 
                    0.9304648215319101, 1.0709663859255598`, 
                    1.1255499499187143`, 1.2640914768101463`, 
                    1.3745785065496414`, 1.4571090277638326`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.00009585191189936116, \
-0.000026002148434818574`, 
                    0.0004825802401201562, -0.0005366240962883858, \
-0.00022208729013047728`, -0.0003670023338188111, 0.00021840859062624424`, 
                    0.0006710405718560929, 
                    0.0008348456504142656, -0.0006369960470426359}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6590044052364615545|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 10, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 10, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, 
                    "ID" -> 6072081202834183359|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.111475, "MaxTrainingMemory" -> 
                    3204752, "DataMemory" -> 15760, "FunctionMemory" -> 35056,
                     "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 12, 12, 48, 42.754424`8.383556037572742}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-0.9848310120311979, -0.9848310120311979, \
-0.8884471454831475, -0.7517462237678633, -0.6354660134088475, \
-0.5656403763149495, -0.511145001827811, -0.48625869883714107`, \
-0.4859572129774997, -0.45176085615485134`, -0.4334777402766434}, 
                    "LeftBoundary" -> -0.8884471454831475, "LeftScale" -> 
                    0.04819193327402521, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.194730281079952, 0.6114759665574782], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 895810465636885430|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                 0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                "StandardDeviation" -> {0.4952508833914383, 
                 0.49964831381682856`, 0.4999609359740019, 
                 0.49859176687947826`, 0.4999609359740019, 0.4998437255783051,
                  0.49964831381682856`, 0.49859176687947826`, 
                 0.49859176687947826`, 0.4999609359740019}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5750822634109734636|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 6153537743509581873, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 335429500972439703|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          False -> 0.5123456790123456, True -> 0.48765432098765427`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Target", "Order" -> {"Input", "Target"}|>], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
GpR+tOLK7GLh/zSU4aU=
                   "], "Biases" -> 
                  RawArray["Real32",{0.007586608175188303, 
                    0.004130740184336901, -0.003439494641497731, 
                    0.0011237405706197023`, 
                    0.0015705602709203959`, -0.006614836398512125, \
-0.0018645193194970489`, -0.0019555322360247374`, 0.003394663566723466, 
                    0.0054919905960559845`, -0.00010034607839770615`, 
                    0.012683391571044922`, -0.004204754717648029, 
                    0.0018647263059392571`, -0.004093781113624573, 
                    0.0025232837069779634`, -0.010073653422296047`, \
-0.00446350546553731, -0.0005600734730251133, 
                    0.0027902403380721807`, -0.006823718082159758, \
-0.006846791598945856, 0.0032366779632866383`, 
                    0.004454604350030422, -0.007528161164373159, 
                    0.002654435345903039, 0.009209441021084785, 
                    0.0034437868744134903`, 0.0028226024005562067`, 
                    0.003014068817719817, 
                    0.006908661685883999, -0.00495754973962903, \
-0.0019600426312536, 0.0005209469236433506, 0.0006473163957707584, 
                    0.0013040441554039717`, 
                    0.00005686868462362327, -0.0014400897780433297`, 
                    0.005742934532463551, 
                    0.0076113673858344555`, -0.003591280896216631, 
                    0.000705207756254822, 0.003198676509782672, 
                    0.0007772960816510022, -0.012217092327773571`, 
                    0.011351937428116798`, -0.0017649834044277668`, \
-0.006030149757862091, -0.006369924638420343, 0.001736971433274448}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
4w==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.0026186557952314615`, -0.0016987576382234693`, 
                    0.0014968644827604294`, -0.003594791516661644, 
                    0.00006177173054311424, 0.003362583229318261, 
                    0.0002820208901539445, 
                    0.00363851897418499, -0.0010246483143419027`, 
                    0.009928206913173199, -0.004033091478049755, \
-0.002561482833698392, -0.004127171356230974, -0.0008917942177504301, \
-0.002043253742158413, 0.00002712264540605247, 0.00258741551078856, 
                    0.005019847769290209, 0.005651443265378475, 
                    0.0007637562230229378, 0.0010623190319165587`, 
                    0.005563205108046532, -0.001955776009708643, 
                    0.008689261972904205, -0.007955365814268589, \
-0.007604903541505337, 0.004579477943480015, 
                    0.0012351189507171512`, -0.005790797062218189, 
                    0.00014774220471736044`, -0.005985989235341549, \
-0.005370402242988348, 0.002337882062420249, -0.0027976972050964832`, 
                    0.004389017820358276, 
                    0.0014165359316393733`, -0.002496752655133605, \
-0.002623909153044224, 0.003312438726425171, 
                    0.003665399271994829, -0.004828959703445435, \
-0.0013859589817002416`, -0.0018373954808339477`, 
                    0.003334455192089081, -0.000723132339771837, 
                    0.0020369216799736023`, 
                    0.0006338009843602777, -0.0011910079047083855`, \
-0.008230804465711117, 0.0015584765933454037`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACFuCk+srunvdFpET5IMYE9GxuCPd1OzD3aaHE9XdbovULFbr6l
3Ng9SVU2vnFPQr5LPVu8pwm+PS9wBjyQTIk+dFDTPEXntDyKWdk9CXkfPl7B
Kz7JNxs+JZMSvrEJFz6yWUy+22BXvJ5Gtz1deu28y+/mveMy2D3eGxy+uIOC
vSc9BD27p/K9LLT+Owzicz3YfR2+/FgvPQH/fr68mR8+IysdPKmaBr4uYIw6
5Q5VPAoJtj2le0S9gdw9PZLKez4g1Ba+5/SXPefcML64OnK8SlScPfFmgj2b
C809sueWPK2TWT2FcQO+WdgovjV4hj1YtDs9DvewPFz3bT7g7Ks+H9cJPhhn
P74Asjg+/ib1vdN1WL2YWk++HymcvC681z2VUlk7kixEPaNv57yDyfQ90fz9
vJS8Tr6qL9Q7XmoPvmGoyjuIYQg+zzdJvgsfCj1VcZe9o2qvvADykbwvgDU9
J6uWvualST2WeCU+2SJ3PDpCRj5uCi69PoLnPR7lQr5Qwb09fV+0Plc7aL2+
1JG9zf/D2w==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.0024223430082201958`, -0.002422342775389552}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 0.90165, "MeanInputsPerSecond" -> 
           21294.2937947097|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {-0.0005023999945228452, 0.00007433176593497834, 
                 0.0006188508015755739, -0.00008477018728076658, 
                 0.0008792203394160481, 
                 0.000050793602720121404`, -0.0000839088388257775, 
                 0.0007638920487112067, 
                 0.0003070956565740468, -0.000670738065477329}, 
                "StandardDeviation" -> {1.0007197495535074`, 
                 1.0001870458459403`, 0.9994399444092847, 0.9993622913548977, 
                 0.9996632371621096, 1.0005274002904267`, 0.999976989224157, 
                 1.0004247198328566`, 0.9998659727781949, 0.999493083073257}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5627578033704932426|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 10, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3100, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15000000000000002`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.3856`6.037682018726764, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
            Around[0.5606106804399626, 0.1231054725977526], "EvaluationTime" -> 
            0.0009882117688026185, "TestSize" -> 32, "ModelMemory" -> 60368, 
            "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 128, 
            "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 398040, 
            "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.7132941076513983, 0.05803780225416599]}, 
            "AccuracyHistory" -> {
              Around[0.5606106804399626, 0.08704871447504557]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3100, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 160|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.1745278727732025`, 0.710660934850662], "Accuracy" -> 
                 Around[0.44625604829418686`, 0.055180203926597934`], 
                 "EvaluationTime" -> 0.0011804791017922904`, "TestSize" -> 
                 152, "ModelMemory" -> 56272, 
                 "ModelUtility" -> -5.342420477746496, "TrainingSize" -> 8, 
                 "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 444792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.1745278727732025`, 0.5025131661572743]}, 
                 "AccuracyHistory" -> {
                   Around[0.44625604829418686`, 0.03901829638375395]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0011804791017922904`, "MeanCrossEntropy" -> 
                Around[5.1745278727732025`, 0.710660934850662], "ModelMemory" -> 
                56272, "TrainingMemory" -> 444792, "TrainingTime" -> 
                8.221921916437788|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5455176631156329`, 0.26344121636134366`], 
                 "Accuracy" -> Around[0.538237052163241, 0.06146290488827804],
                  "EvaluationTime" -> 0.0027539657749461486`, "TestSize" -> 
                 130, "ModelMemory" -> 60368, 
                 "ModelUtility" -> -3.032111100078587, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 371824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5455176631156329`, 0.18628107053313855`]}, 
                 "AccuracyHistory" -> {
                   Around[0.538237052163241, 0.0434608368379252]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
                 "ModelMemory" -> 60368, 
                 "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 
                 128, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 398040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7132941076513983, 0.05803780225416599]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.877479549546502, 0.38858605004838054`], "Accuracy" -> 
                 Around[0.48303078358727053`, 0.0553376762000866], 
                 "EvaluationTime" -> 0.0009325096914738674, "TestSize" -> 152,
                  "ModelMemory" -> 60368, 
                 "ModelUtility" -> -4.159693500103897, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 295744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.877479549546502, 0.274771831063705]}, 
                 "AccuracyHistory" -> {
                   Around[0.48303078358727053`, 0.03912964609618665]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0009325096914738674, "MeanCrossEntropy" -> 
                Around[2.877479549546502, 0.38858605004838054`], 
                "ModelMemory" -> 60368, "TrainingMemory" -> 295744, 
                "TrainingTime" -> 1.4328569182838289`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6469707462070442`, 0.4678470098200977], "Accuracy" -> 
                 Around[0.46970158953087165`, 0.12379214994859225`], 
                 "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
                 "ModelMemory" -> 91752, 
                 "ModelUtility" -> -3.1590714144018075`, "TrainingSize" -> 
                 128, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 397088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6469707462070442`, 0.33081779320164034`]}, 
                 "AccuracyHistory" -> {
                   Around[0.46970158953087165`, 0.08753426868631149]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.7842704102204543`, 0.6679427217107834], "Accuracy" -> 
                 Around[0.5482043846458831, 0.06094984786979444], 
                 "EvaluationTime" -> 0.0007286039311515623, "TestSize" -> 130,
                  "ModelMemory" -> 91752, 
                 "ModelUtility" -> -4.781770803778026, "TrainingSize" -> 30, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 375896, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7842704102204543`, 0.47230682796589385`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5482043846458831, 0.04309805074102009]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0007286039311515623, "MeanCrossEntropy" -> 
                Around[3.7842704102204543`, 0.6679427217107834], 
                "ModelMemory" -> 91752, "TrainingMemory" -> 375896, 
                "TrainingTime" -> 4.526167090380248|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.675985439182979, 0.5662912603643842], "Accuracy" -> 
                 Around[0.4605210292572121, 0.05557979016574277], 
                 "EvaluationTime" -> 0.0005803592023889151, "TestSize" -> 152,
                  "ModelMemory" -> 162320, 
                 "ModelUtility" -> -5.277154515730969, "TrainingSize" -> 8, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 601512, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.675985439182979, 0.4004283903303328]}, 
                 "AccuracyHistory" -> {
                   Around[0.4605210292572121, 0.039300846523122095`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8112304544476486, 0.13894358697675882`], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.003125, "TestSize" -> 32, 
                 "ModelMemory" -> 162320, "ModelUtility" -> -1.90781856606398,
                  "TrainingSize" -> 128, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 610848, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8112304544476486, 0.09824795255364903]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
                Around[0.8112304544476486, 0.13894358697675882`], 
                "ModelMemory" -> 162320, "TrainingMemory" -> 610848, 
                "TrainingTime" -> 2.573656764742709|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9285852429250843`, 0.6492543638659594], "Accuracy" -> 
                 Around[0.5303076501369324, 0.12379201079532379`], 
                 "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32,
                  "ModelMemory" -> 60368, 
                 "ModelUtility" -> -3.458660847734166, "TrainingSize" -> 128, 
                 "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 388616, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9285852429250843`, 0.459092163404578]}, 
                 "AccuracyHistory" -> {
                   Around[0.5303076501369324, 0.08753417029009174]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.251416473534061, 0.7820778441733018], "Accuracy" -> 
                 Around[0.511000315694987, 0.06081556351355926], 
                 "EvaluationTime" -> 0.0012545825726770717`, "TestSize" -> 
                 130, "ModelMemory" -> 60368, 
                 "ModelUtility" -> -4.982374472419596, "TrainingSize" -> 30, 
                 "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 298792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.251416473534061, 0.5530125470306977]}, 
                 "AccuracyHistory" -> {
                   Around[0.511000315694987, 0.04300309736211893]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0012545825726770717`, "MeanCrossEntropy" -> 
                Around[4.251416473534061, 0.7820778441733018], "ModelMemory" -> 
                60368, "TrainingMemory" -> 298792, "TrainingTime" -> 
                11.369217701071342`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.570761773346241, 0.747586201055562], "Accuracy" -> 
                 Around[0.5005419461081866, 0.0614169849836683], 
                 "EvaluationTime" -> 0.0007078621353105369, "TestSize" -> 130,
                  "ModelMemory" -> 162320, 
                 "ModelUtility" -> -5.248145453637503, "TrainingSize" -> 30, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 620672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.570761773346241, 0.5286232722878775]}, 
                 "AccuracyHistory" -> {
                   Around[0.5005419461081866, 0.04342836656198421]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0007078621353105369, "MeanCrossEntropy" -> 
                Around[4.570761773346241, 0.747586201055562], "ModelMemory" -> 
                162320, "TrainingMemory" -> 620672, "TrainingTime" -> 
                13.030868074309083`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.570022988477733, 0.47056125103694063`], "Accuracy" -> 
                 Around[0.46808812170326913`, 0.055391654477629025`], 
                 "EvaluationTime" -> 0.0010729982529474953`, "TestSize" -> 
                 152, "ModelMemory" -> 99728, 
                 "ModelUtility" -> -4.667976437863389, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 466072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.570022988477733, 0.332737051571846]}, 
                 "AccuracyHistory" -> {
                   Around[0.46808812170326913`, 0.03916781450227367]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.6244495740942417`, 0.48773046377476875`], 
                 "Accuracy" -> 
                 Around[0.5909137107429928, 0.12195270099035052`], 
                 "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32,
                  "ModelMemory" -> 99728, 
                 "ModelUtility" -> -3.172558737016106, "TrainingSize" -> 128, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 495688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6244495740942417`, 0.34487751832639874`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5909137107429928, 0.08623358185429224]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0012440849079796785`, "MeanCrossEntropy" -> 
                Around[1.6244495740942417`, 0.48773046377476875`], 
                "ModelMemory" -> 99728, "TrainingMemory" -> 495688, 
                "TrainingTime" -> 1.8809573444801932`|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[6.033033423949699, 0.7752242879962036], "Accuracy" -> 
                 Around[0.45343777380296446`, 0.05538878083813811], 
                 "EvaluationTime" -> 0.0005377730260816514, "TestSize" -> 152,
                  "ModelMemory" -> 99728, 
                 "ModelUtility" -> -5.708634968507651, "TrainingSize" -> 8, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 447448, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[6.033033423949699, 0.5481663509826286]}, 
                 "AccuracyHistory" -> {
                   Around[0.45343777380296446`, 0.03916578253230296]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005377730260816514, "MeanCrossEntropy" -> 
                Around[6.033033423949699, 0.7752242879962036], "ModelMemory" -> 
                99728, "TrainingMemory" -> 447448, "TrainingTime" -> 
                10.35078643439093|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[8.21220490974844, 0.9380313896761981], "Accuracy" -> 
                 Around[0.45328643244984645`, 0.05573477005721432], 
                 "EvaluationTime" -> 0.0006231480990112045, "TestSize" -> 152,
                  "ModelMemory" -> 185360, 
                 "ModelUtility" -> -6.424714064252742, "TrainingSize" -> 8, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 766064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[8.21220490974844, 0.6632883566058805]}, 
                 "AccuracyHistory" -> {
                   Around[0.45328643244984645`, 0.039410433855329184`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006231480990112045, "MeanCrossEntropy" -> 
                Around[8.21220490974844, 0.9380313896761981], "ModelMemory" -> 
                185360, "TrainingMemory" -> 766064, "TrainingTime" -> 
                13.030868074309083`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.1697124352322645`, 0.5842252170709464], "Accuracy" -> 
                 Around[0.515670025051118, 0.06149043644573219], 
                 "EvaluationTime" -> 0.0006124725700823033, "TestSize" -> 130,
                  "ModelMemory" -> 56272, 
                 "ModelUtility" -> -4.363456613895947, "TrainingSize" -> 30, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 275280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.1697124352322645`, 0.4131096127310489]}, 
                 "AccuracyHistory" -> {
                   Around[0.515670025051118, 0.04348030458889766]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.71315214729188, 0.08135402189964082], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.003125, "TestSize" -> 32, 
                 "ModelMemory" -> 56272, "ModelUtility" -> -1.467224702434685,
                  "TrainingSize" -> 128, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 355120, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.71315214729188, 0.05752598056203491]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
                Around[0.71315214729188, 0.08135402189964082], "ModelMemory" -> 
                56272, "TrainingMemory" -> 355120, "TrainingTime" -> 
                3.753003305505267|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         160, "PreprocessorEvaluationTime" -> 3.59375*^-6, 
         "PreprocessorMemory" -> 49544, "InputDimension" -> 10, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6928423179977401, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869297370424875`16.34020709736964*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 8.12172683094538, 
             "ElapsedTimes" -> 17.449253000000002`, "ExperimentCounts" -> 
             6|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 
             11.602466901350537`, "ElapsedTimes" -> 13.665400000000002`, 
             "ExperimentCounts" -> 5|>, <|
            "TrainingSizes" -> 128, "TimeBudgets" -> 16.57495271621505, 
             "ElapsedTimes" -> 16.218941, "ExperimentCounts" -> 6|>}, 
           TypeSystem`Vector[
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, "ID" -> 
              6049509919062986817|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 48.925742, 
         "MaxTrainingMemory" -> 13959504, "DataMemory" -> 109616, 
         "FunctionMemory" -> 284600, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 12, 12, 49, 31.527207`8.251260478943298}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> CompressedData["
1:eJy9lcsNgEAIRNd4swtvdmEPlmDi2dYtQe9KeAysJBujLMPwyTjv53aMrbXl
OcNzpmbZtX4/PaP3o3jRuKhRvrQvlt/Dqe67ypPi0nf6XZ2v2qfoPD0cmkfl
Uz1fy6r3tGo/LH5ZnKhF50n5UZzsfll+j6darxVP8/XSXxqXtSo9VOdLeanx
qr5QPlU6aN3P6qOXj+JU1a/OLaunNE/2fu+9p3mqeP2tU2q92f/L238DAVzg
ZA==
       "], 
      "Output" -> {
       False, True, True, True, True, True, True, False, True, True, False, 
        True, True, True, False, True, True, True, False, True, False, True, 
        False, False, False, False, False, True, False, True, True, False, 
        True, False, False, True, True, False, True, True}|>, 
    "Predictions" -> {
     False, False, False, True, True, False, False, False, False, False, 
      False, True, False, True, True, False, True, False, False, True, True, 
      False, True, True, False, False, False, True, False, False, False, 
      False, False, False, True, True, True, False, True, True}, 
    "LogProbabilities" -> CompressedData["
1:eJwVz01MkgEAh3EmamNJklsedKbmx8iwA7mcurSWVtqmrtz8WMYsjYkH1iam
pikTNdkKyZMfhfOgNbOpy4aY/MlqlYOQzBBpQ0IREhB7/SBRy/fw7Hd+Im/x
r5X5UCgU5kGknb9+J7kCDOiX1+YKaX8QmJqx00r8hChH2qthuXEqqnBYuGk5
0FBcLbWByqHKVt5sg15Hr5PVz6A0oVg8GLyOx7pKWgOxAPntZU1R3BLpYWOe
DfRcfVuTcRyNimzW1KSPqkWR42If0qPP1TEhiyEwTjkZWnbBQspvu2NHhGMr
LrjSTNo3rljFRoWbX0H9jr2Q3btXaJvIaq75VKNYIW3Ke72EeEb8tH1PC/8+
vyVRtAeJc4Ld0WYn6cv2s4tIP800WTUOUmr46CLOBb1NE8zPQOK7ppXytqG6
JGiUGNaxHzIn7C43wDrRssiNNWLnVWR1zb4bpWxOq/+DGXSq9X8lB9+eqK8m
qceJtcs9adl6E14oWYKWbivpGH9qGe989mhOr4WUyhDbIB47ejxRSVENFISa
TxhUYEYLY2+EbUHW7hvibfiGubCSJ7OZZtKgws1VVEfcTGyiLh6o7BmZdULt
raq9ytaDUD7lLQQQUOfPZzSHrpK+b7WbUben1bvZC+D8I8rPVK6jauu6gaaz
kEqnJ2yQ82I+3Ov6jPwhkfy81YuoriMWiXoObf0XiVQzAV2dUVcSqEUXPyU5
S+JBvkLDDPYxkz4XFzlg5eYkT3JdUGufOSSZJhSxzB2RSjd4I6Jw+rARQX4/
khyxdlJDepUFXMZAyqNZExIeztbf9zrRpTw2FcTxQrsxxMgVfcFgr4fa2OBB
gd9HGZOtxX8/83Rz
     "], "CountMatrix" -> {{11, 5, 0}, {13, 11, 0}}, 
    "IndicesMatrix" -> {{{1, 8, 11, 19, 25, 26, 27, 29, 32, 34, 38}, {15, 21, 
       23, 24, 35}, {}}, {{2, 3, 6, 7, 9, 10, 13, 16, 18, 22, 30, 31, 33}, {4,
        5, 12, 14, 17, 20, 28, 36, 37, 39, 40}, {}}}, 
    "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {40}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0019392250000000002`, "SingleEvaluationTime" -> 
    0.004819, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.86896617348654*^9, 3.868966311492532*^9, 3.8689668453138514`*^9, 
   3.869211547634626*^9, {3.869293774351564*^9, 3.8692937815692053`*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"7bb09724-29b7-4520-840d-674f4ad62edc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"First", "@", "classifier"}], ")"}], "[", "\"\<Model\>\"", "]"}], 
  "[", "\"\<Network\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8692938293476267`*^9, 3.869293870353177*^9}, {
  3.8692939195305443`*^9, 3.869293944513091*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.869293832969639*^9, 3.869293870749839*^9}, {
  3.869293926735614*^9, 3.869293945170747*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"79d7821e-b121-479f-abf0-e41c242f671b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}, {3.869293792603034*^9, 3.869293814925658*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],

Cell[BoxData[
 TemplateBox[{"290.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.869293808448848*^9, 3.8692938154579077`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"6d965a5a-4659-41b3-8743-dcf54ea641cd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HNM", "[", "inputs_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Sort", "[", "inputs", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Length", "[", "inputs", "]"}], "+", "1"}], ")"}], "/", 
        "2"}], "]"}], "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"HardNeuralMajority", "[", 
       RowBox[{"1", ",", "4"}], "]"}], "]"}], "[", 
     RowBox[{"{", "inputs", "}"}], "]"}], ",", 
    RowBox[{"Majority", "@@", 
     RowBox[{"Harden", "[", "inputs", "]"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.869553653058096*^9, 3.8695537243852863`*^9}, {
  3.869553982557846*^9, 3.8695540703016243`*^9}, {3.869568810399126*^9, 
  3.869568813927146*^9}, {3.86956887292964*^9, 3.869568911831105*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"fed41e1b-3b20-4aa5-85f1-b173e03b95d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HNM", "[", "inputs_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hnm", "=", 
      RowBox[{"HardNeuralMajority", "[", 
       RowBox[{"1", ",", 
        RowBox[{"Length", "[", "inputs", "]"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"hnm", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"{", "inputs", "}"}], "]"}], ",", 
      RowBox[{"First", "[", 
       RowBox[{
        RowBox[{"hnm", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"Harden", "[", "inputs", "]"}], "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}], "]"}], "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.869554080461699*^9, 3.869554186474312*^9}, {
  3.869554367649312*^9, 3.8695544052073402`*^9}, {3.869568799545018*^9, 
  3.8695688029514647`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"1e54ce77-7e8e-4660-8b33-57d9aa5acae8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"HNM", "[", 
     RowBox[{"{", 
      RowBox[{"b1", ",", "b2", ",", "b3", ",", "b4"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"b1", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b2", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b3", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b4", ",", "0", ",", "1"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.869553726439802*^9, 3.869553842098022*^9}, {
  3.86955391502761*^9, 3.869553917265626*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"43daf2a0-b030-4703-b484-7db511a06cd1"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c299b150-0a55-4bbe-bf20-ef4cd4ee4428"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 4, 98, "Title",ExpressionUUID->"e80ffaf1-ce7d-4821-a091-e123c51e05cc"],
Cell[834, 28, 774, 15, 29, "Input",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],
Cell[CellGroupData[{
Cell[1633, 47, 204, 4, 69, "Chapter",ExpressionUUID->"ff3102a6-3c5a-457a-910a-4abcf0a85217"],
Cell[1840, 53, 5343, 96, 116, "Input",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],
Cell[CellGroupData[{
Cell[7208, 153, 233, 4, 29, "Input",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],
Cell[7444, 159, 1077, 26, 33, "Output",ExpressionUUID->"ba3c348e-b349-4afb-9b83-4503ec534298"]
}, Open  ]],
Cell[8536, 188, 8455, 201, 37, "Input",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17028, 394, 317, 5, 69, "Chapter",ExpressionUUID->"a83aa6fb-db66-4018-aace-2706a2be80da"],
Cell[17348, 401, 381, 9, 29, "Input",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],
Cell[17732, 412, 623, 13, 29, "Input",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18392, 430, 355, 6, 69, "Chapter",ExpressionUUID->"b6f53683-da40-4a5d-9d7a-130f6c5ca4dc"],
Cell[18750, 438, 1854, 35, 133, "Input",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],
Cell[20607, 475, 1163, 26, 133, "Input",ExpressionUUID->"d1ef7b56-3413-4a9e-b2bd-d56f8df851c1"],
Cell[21773, 503, 13902, 195, 32, "Input",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],
Cell[CellGroupData[{
Cell[35700, 702, 347, 5, 29, "Input",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],
Cell[36050, 709, 329305, 6533, 68, "Output",ExpressionUUID->"127cbded-1d3f-4735-8584-7a51300a1d2f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[365404, 7248, 355, 6, 69, "Chapter",ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-78e337587528"],
Cell[365762, 7256, 16316, 229, 133, "Input",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382115, 7490, 456, 7, 69, "Chapter",ExpressionUUID->"306b98cf-6a16-4b58-bf92-e841969834f5"],
Cell[382574, 7499, 1696, 34, 92, "Input",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],
Cell[CellGroupData[{
Cell[384295, 7537, 423, 10, 29, "Input",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],
Cell[384721, 7549, 234265, 4210, 465, "Output",ExpressionUUID->"d73a0799-e327-494a-afd9-85d993250f18"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[619035, 11765, 507, 8, 69, "Chapter",ExpressionUUID->"2690b326-fb91-4c09-a746-cb42f085f60a"],
Cell[619545, 11775, 1093, 17, 29, "Input",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],
Cell[620641, 11794, 966, 18, 29, "Input",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],
Cell[CellGroupData[{
Cell[621632, 11816, 819, 14, 51, "Input",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],
Cell[622454, 11832, 701, 10, 33, "Output",ExpressionUUID->"5d48a6a4-1a53-473e-a590-275fcc94ac69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[623192, 11847, 1289, 27, 71, "Input",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],
Cell[624484, 11876, 2470, 35, 33, "Output",ExpressionUUID->"01fc2613-e3f9-4690-8fdb-f9be7cc71869"]
}, Open  ]],
Cell[CellGroupData[{
Cell[626991, 11916, 570, 14, 32, "Input",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],
Cell[627564, 11932, 1141, 17, 44, "Output",ExpressionUUID->"4bff1da2-69a8-46aa-b43f-31ebe29bfa8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[628742, 11954, 573, 9, 29, "Input",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"],
Cell[629318, 11965, 12542, 330, 392, "Output",ExpressionUUID->"f2b8779c-4815-471d-a9d6-b3b87798195a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[641909, 12301, 412, 6, 69, "Chapter",ExpressionUUID->"0a2ce80a-fe81-4612-966f-edb1d9a9f984"],
Cell[CellGroupData[{
Cell[642346, 12311, 742, 15, 29, "Input",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],
Cell[643091, 12328, 84678, 1506, 69, "Output",ExpressionUUID->"ed75754f-b9ec-4db8-96c1-d9b71427f486"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727806, 13839, 386, 7, 29, "Input",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],
Cell[728195, 13848, 104080, 1924, 465, "Output",ExpressionUUID->"7bb09724-29b7-4520-840d-674f4ad62edc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[832312, 15777, 371, 8, 29, "Input",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],
Cell[832686, 15787, 26802, 533, 68, "Output",ExpressionUUID->"79d7821e-b121-479f-abf0-e41c242f671b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[859525, 16325, 410, 6, 29, "Input",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],
Cell[859938, 16333, 250, 4, 44, "Output",ExpressionUUID->"6d965a5a-4659-41b3-8743-dcf54ea641cd"]
}, Open  ]],
Cell[860203, 16340, 955, 24, 32, "Input",ExpressionUUID->"fed41e1b-3b20-4aa5-85f1-b173e03b95d4"],
Cell[861161, 16366, 1044, 29, 29, "Input",ExpressionUUID->"1e54ce77-7e8e-4660-8b33-57d9aa5acae8"],
Cell[862208, 16397, 706, 18, 51, "Input",ExpressionUUID->"43daf2a0-b030-4703-b484-7db511a06cd1"]
}, Open  ]]
}, Open  ]]
}
]
*)

