(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    603766,      11335]
NotebookOptionsPosition[    598436,      11236]
NotebookOutlinePosition[    598874,      11253]
CellTagsIndexPosition[    598831,      11250]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning XOR", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 3.8684260746987667`*^9}, {3.869278884416973*^9, 
  3.869278885792972*^9}},ExpressionUUID->"e80ffaf1-ce7d-4821-a091-\
e123c51e05cc"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardNOTImpl", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", "4"}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "True"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8693047114400187`*^9, 3.869304737024473*^9}, {
  3.869304935942573*^9, 3.8693049378129387`*^9}, {3.86930504772663*^9, 
  3.869305084883634*^9}, {3.869309124608077*^9, 3.8693091397807903`*^9}, {
  3.8693115716864*^9, 3.8693115803646*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"be03a0a4-d6ba-4d00-8654-7239ad3abdbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"!", 
    RowBox[{"neurallogic`Private`f", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"!", 
    RowBox[{"neurallogic`Private`f", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"!", 
    RowBox[{"neurallogic`Private`f", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True"}], "}"}]}], "]"}]}], ",", 
   RowBox[{"!", 
    RowBox[{"neurallogic`Private`f", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True"}], "}"}]}], "]"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.869304737312001*^9, {3.869304929742735*^9, 3.869304938663406*^9}, {
   3.869305050726493*^9, 3.869305085217885*^9}, 3.869305210479998*^9, 
   3.869305309530387*^9, 3.869305371633937*^9, 3.8693056525574427`*^9, 
   3.869309076437614*^9, {3.86930912581842*^9, 3.869309140367588*^9}, 
   3.869310320348205*^9, 3.869310766233766*^9, 3.869311581128339*^9, 
   3.869311723304331*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"b6934236-05d6-4d41-92c5-777ec6c58a63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "True"}], "}"}]}], "}"}], ",", 
   "Not"}], "]"}]], "Input",
 CellChangeTimes->{{3.8693119890453043`*^9, 3.869312105693705*^9}, {
  3.869312162551915*^9, 3.869312221837965*^9}, {3.8693123112726088`*^9, 
  3.869312333790616*^9}, {3.869312420791984*^9, 3.869312421431036*^9}, {
  3.8693124836162567`*^9, 3.869312490002943*^9}, {3.869312697704823*^9, 
  3.869312732559511*^9}, {3.8693127719847803`*^9, 3.869312799671036*^9}, {
  3.869312987946116*^9, 3.869312988503343*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"7eabc349-f02d-408b-b61f-795fda00a34c"],

Cell[BoxData[
 RowBox[{"Outer", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False", ",", "True"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "False", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"False", ",", "True", ",", "True"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False", ",", "True"}], "}"}]}], "}"}], ",", 
   "Not"}], "]"}]], "Output",
 CellChangeTimes->{{3.869312183975733*^9, 3.869312222224381*^9}, {
   3.869312314540401*^9, 3.8693123345484037`*^9}, 3.869312426005582*^9, {
   3.8693124854605713`*^9, 3.869312490667164*^9}, {3.8693127093995247`*^9, 
   3.869312733306457*^9}, {3.869312773282473*^9, 3.8693128003718777`*^9}, 
   3.869312989154593*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"59f55994-f454-42d1-8c22-b7903d21a9c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"ff3102a6-3c5a-457a-910a-\
4abcf0a85217"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"numBooleanVariables", "=", "10"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    SuperscriptBox["2", "numBooleanVariables"], " ", "possible", " ", 
    "inputs"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10"}], "]"}], "&"}], ",", 
     "\"\<BooleanFunction\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", 
   RowBox[{"Min", "[", 
    RowBox[{"2000", ",", 
     SuperscriptBox["2", "numBooleanVariables"]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numClasses", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Soften", "/@", "x"}], "->", 
         RowBox[{"bf", "@@", "x"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}, {3.8648255889830313`*^9, 3.864825592504498*^9}, {
   3.864825624917417*^9, 3.864825626880946*^9}, {3.864829407265236*^9, 
   3.8648294087742167`*^9}, {3.864829443456806*^9, 3.864829444846697*^9}, {
   3.864829792396603*^9, 3.8648297927316837`*^9}, {3.864830032545388*^9, 
   3.8648300662967587`*^9}, 3.86483040909219*^9, {3.864830633132044*^9, 
   3.8648306348014383`*^9}, {3.8648309522842607`*^9, 
   3.8648309524254227`*^9}, {3.864831241412085*^9, 3.8648312465735483`*^9}, {
   3.864831361588151*^9, 3.864831427353725*^9}, {3.864831467589365*^9, 
   3.864831467738257*^9}, {3.8650545097885313`*^9, 3.865054521919083*^9}, {
   3.865574752812943*^9, 3.865574784399784*^9}, {3.865592534192895*^9, 
   3.865592534298318*^9}, {3.865592762627692*^9, 3.8655927636071053`*^9}, {
   3.865594557687479*^9, 3.865594557984342*^9}, {3.865594963476437*^9, 
   3.8655949635928717`*^9}, {3.865780594387285*^9, 3.8657805954725647`*^9}, {
   3.86578528554428*^9, 3.865785286930284*^9}, {3.8658288989019117`*^9, 
   3.865828899235673*^9}, {3.865830427368958*^9, 3.865830428545253*^9}, {
   3.865830742328867*^9, 3.8658307442321053`*^9}, {3.865831732136331*^9, 
   3.8658317341109133`*^9}, {3.865837020252844*^9, 3.865837020623869*^9}, {
   3.8658371834605103`*^9, 3.865837184543343*^9}, {3.8658377080420017`*^9, 
   3.865837708413855*^9}, {3.865837740366976*^9, 3.86583774055787*^9}, {
   3.865859522557151*^9, 3.865859523313833*^9}, {3.865859830431425*^9, 
   3.865859831995036*^9}, {3.865866201299968*^9, 3.865866202414603*^9}, {
   3.8658663169608183`*^9, 3.865866318295281*^9}, {3.865866383754406*^9, 
   3.8658663858232803`*^9}, {3.8660002644683657`*^9, 3.866000265575876*^9}, {
   3.866000397664502*^9, 3.866000398839758*^9}, {3.8660004574432163`*^9, 
   3.8660004580794077`*^9}, {3.8666042520823517`*^9, 3.866604264374364*^9}, {
   3.866604302861124*^9, 3.866604304397232*^9}, {3.866604362727042*^9, 
   3.866604365684434*^9}, {3.866634397416646*^9, 3.86663441391949*^9}, {
   3.866634545413786*^9, 3.866634547171479*^9}, {3.8666346718798122`*^9, 
   3.866634702156291*^9}, {3.867671157222414*^9, 3.867671157363698*^9}, {
   3.868095338683979*^9, 3.868095349658772*^9}, {3.8692257543862534`*^9, 
   3.869225760070663*^9}, {3.869226350038672*^9, 3.8692263530848923`*^9}, {
   3.869226445388289*^9, 3.869226447765545*^9}, {3.869227314728384*^9, 
   3.869227438401598*^9}, {3.8692778466039267`*^9, 3.869277860306823*^9}, {
   3.869280781904627*^9, 3.869280784726466*^9}, {3.8692942712492027`*^9, 
   3.8692943131087103`*^9}, 3.869294699302785*^9, {3.8692967045596027`*^9, 
   3.869296708100168*^9}, {3.869299553854471*^9, 3.8692995957754602`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"examples", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.869294701690948*^9, 3.8692947036918592`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", "1.`", ",", 
      "1.`", ",", "0.`", ",", "1.`", ",", "0.`"}], "}"}], "\[Rule]", 
    "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "1.`", ",", "0.`", ",", "1.`", ",", "1.`"}], "}"}], "\[Rule]", 
    "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", 
      "1.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], "\[Rule]", 
    "True"}]}], "}"}]], "Output",
 CellChangeTimes->{3.869294703931072*^9, 3.869296709793788*^9, 
  3.8692995993322277`*^9, 3.8693102752164717`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"15dae793-3a54-40db-b061-a6beebb85dd8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"a83aa6fb-db66-4018-aace-\
2706a2be80da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.86678913871952*^9, 3.86678914729805*^9}, {
  3.8692943328044443`*^9, 3.869294348259564*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"targetEncoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}], ",", 
      "\"\<IndicatorVector\>\""}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869277326407647*^9, 3.86927733940766*^9}, {
  3.8692807974788446`*^9, 3.869280799898975*^9}, {3.869284676787505*^9, 
  3.8692846810647993`*^9}, {3.86928477155538*^9, 3.869284775848857*^9}, {
  3.8692967298312063`*^9, 3.869296740112113*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"b6f53683-da40-4a5d-9d7a-\
130f6c5ca4dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"8", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralMajority", "[", 
         RowBox[{"inputSize", ",", "50"}], "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"HardDropoutLayer", "[", "0.25", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralMajority", "[", 
         RowBox[{"50", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866613777500483*^9, 3.866613821043852*^9}, {
   3.866613926333091*^9, 3.866613930531905*^9}, {3.866626083815942*^9, 
   3.866626086822467*^9}, {3.866634907171651*^9, 3.86663490948984*^9}, {
   3.866788799974736*^9, 3.866788801526519*^9}, {3.866789160113908*^9, 
   3.866789161089756*^9}, {3.8668002187768106`*^9, 3.866800226245089*^9}, 
   3.8668649413004713`*^9, {3.868079834269272*^9, 3.868079855577284*^9}, {
   3.8680800097335777`*^9, 3.8680800236039543`*^9}, {3.868080065710907*^9, 
   3.868080109250407*^9}, {3.868082277506411*^9, 3.868082282846843*^9}, {
   3.8680823135378942`*^9, 3.8680823467111893`*^9}, {3.868082398321929*^9, 
   3.868082403311109*^9}, {3.868082450330059*^9, 3.8680824734389687`*^9}, {
   3.8680826243462753`*^9, 3.8680826261993227`*^9}, {3.868093913038671*^9, 
   3.868093915117836*^9}, {3.868094121115714*^9, 3.8680941321352997`*^9}, {
   3.868094165599618*^9, 3.868094184216015*^9}, {3.868094434336821*^9, 
   3.868094437631937*^9}, {3.868094694069008*^9, 3.8680946999277277`*^9}, {
   3.868094738149344*^9, 3.868094742288522*^9}, {3.868094880184539*^9, 
   3.8680948903555927`*^9}, {3.868094957619068*^9, 3.868094963192429*^9}, {
   3.868095358374504*^9, 3.8680953594237957`*^9}, {3.868095391621917*^9, 
   3.868095396223934*^9}, {3.868095430526176*^9, 3.868095432664307*^9}, {
   3.868095484934177*^9, 3.868095515680094*^9}, {3.868095573311261*^9, 
   3.8680955753602457`*^9}, {3.868095639986772*^9, 3.868095649555504*^9}, {
   3.868095750594564*^9, 3.868095755464787*^9}, {3.86809582235927*^9, 
   3.868095825032096*^9}, {3.868095894664363*^9, 3.868095897672505*^9}, {
   3.8680959371380568`*^9, 3.868095946484288*^9}, {3.868096052675674*^9, 
   3.868096057968585*^9}, {3.868341995574396*^9, 3.8683419963055153`*^9}, {
   3.8683612317222652`*^9, 3.86836123506921*^9}, {3.868361533899996*^9, 
   3.868361572194687*^9}, {3.868361603498942*^9, 3.868361647963326*^9}, {
   3.86922116050447*^9, 3.869221161743771*^9}, {3.869226539928854*^9, 
   3.8692265613850727`*^9}, {3.869226630955923*^9, 3.8692266422171392`*^9}, {
   3.869226764269084*^9, 3.869226767761063*^9}, {3.869226857973336*^9, 
   3.869226860680719*^9}, {3.869226899388747*^9, 3.8692269040007143`*^9}, {
   3.869226951612636*^9, 3.869226951728538*^9}, {3.869226999628879*^9, 
   3.869226999880843*^9}, {3.869296824251857*^9, 3.8692968290946903`*^9}, {
   3.869299400928319*^9, 3.8692994075816383`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"278acab4-3241-466c-905c-bc0ec791ddf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"16", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralMajority", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869299418713677*^9, {3.8692994812626457`*^9, 3.869299509217765*^9}, {
   3.8692996464312763`*^9, 3.869299648695244*^9}, {3.8693023829191008`*^9, 
   3.869302383206976*^9}, {3.869302606635058*^9, 3.869302607503434*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableSoftNet", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<NeuralLogicNet\>\"", "->", "softNet"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NeuralLogicNet\>\"", "->", "\"\<Loss\>\""}], "}"}], ",", 
     RowBox[{"\"\<Target\>\"", "->", "targetEncoder"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.86626215222803*^9, 
   3.8662621832516203`*^9}, {3.866263109109415*^9, 3.86626311329671*^9}, {
   3.8662634113702927`*^9, 3.866263445027198*^9}, {3.8662637295611134`*^9, 
   3.8662637341766987`*^9}, {3.8662638454628477`*^9, 3.86626384912811*^9}, {
   3.866264629557499*^9, 3.866264632526574*^9}, {3.866264756302319*^9, 
   3.866264756571878*^9}, {3.86626485570925*^9, 3.8662648604861727`*^9}, {
   3.866264906589533*^9, 3.866264909654014*^9}, {3.8662650173821917`*^9, 
   3.866265024103039*^9}, {3.866267932128647*^9, 3.866267936947571*^9}, {
   3.866272289890004*^9, 3.866272326071719*^9}, 3.866272498086396*^9, {
   3.866272605318948*^9, 3.8662726100556726`*^9}, {3.866272697696899*^9, 
   3.8662727061238422`*^9}, {3.866272804197109*^9, 3.866272807076984*^9}, {
   3.866272890576043*^9, 3.8662729018249826`*^9}, {3.866273061136441*^9, 
   3.866273079881092*^9}, {3.8662739928242073`*^9, 3.866274026656089*^9}, {
   3.866274121640194*^9, 3.86627415310497*^9}, {3.8662742538084593`*^9, 
   3.866274260924819*^9}, {3.86627447707015*^9, 3.866274491178595*^9}, {
   3.866274954835182*^9, 3.866274972215249*^9}, {3.8662751949711027`*^9, 
   3.866275214973873*^9}, {3.866275317133552*^9, 3.866275326157571*^9}, {
   3.866276341927771*^9, 3.866276342361364*^9}, {3.866276444445874*^9, 
   3.866276444758065*^9}, 3.866276574032675*^9, {3.8662774805759163`*^9, 
   3.866277486441833*^9}, {3.866277730486899*^9, 3.866277745606361*^9}, {
   3.866277812901185*^9, 3.8662778241863747`*^9}, {3.866277923447342*^9, 
   3.866277942127078*^9}, {3.866278044847097*^9, 3.866278070211129*^9}, {
   3.866278491367318*^9, 3.866278493966505*^9}, {3.866278580024693*^9, 
   3.8662785830122213`*^9}, {3.866278895153315*^9, 3.866278898232675*^9}, {
   3.866280230366321*^9, 3.86628024016776*^9}, 3.866280351079256*^9, {
   3.866280499461529*^9, 3.8662805080447283`*^9}, {3.866280639515723*^9, 
   3.8662806449211483`*^9}, {3.866280754797947*^9, 3.86628075810079*^9}, {
   3.866280876373425*^9, 3.866280889329287*^9}, 3.866281009490582*^9, {
   3.8662811039106913`*^9, 3.866281107962268*^9}, {3.866281186723476*^9, 
   3.866281191533492*^9}, {3.8662812575988626`*^9, 3.866281268830084*^9}, {
   3.8662813166116953`*^9, 3.866281325765922*^9}, {3.866282044987713*^9, 
   3.866282048676916*^9}, {3.866282148870701*^9, 3.866282152685348*^9}, {
   3.86628313823394*^9, 3.8662831431981792`*^9}, {3.866283203895447*^9, 
   3.8662832148382063`*^9}, {3.8662832951824627`*^9, 
   3.8662833056304398`*^9}, {3.866283478244402*^9, 3.866283487341878*^9}, {
   3.8662841436542883`*^9, 3.86628415025281*^9}, {3.866284940968055*^9, 
   3.866284945101494*^9}, {3.866285029031362*^9, 3.866285034053158*^9}, {
   3.866285238231142*^9, 3.8662852400450497`*^9}, {3.8662854784494677`*^9, 
   3.866285480030343*^9}, {3.8662855684494333`*^9, 3.866285589220209*^9}, {
   3.866285661897065*^9, 3.866285665049341*^9}, {3.866286012525502*^9, 
   3.866286023701212*^9}, {3.866286183975936*^9, 3.866286197019022*^9}, {
   3.866286343624745*^9, 3.8662863761838703`*^9}, {3.86628647476213*^9, 
   3.866286478513227*^9}, {3.866286583730136*^9, 3.866286589629998*^9}, {
   3.8662866316154537`*^9, 3.866286632298744*^9}, {3.866286684611227*^9, 
   3.866286694033737*^9}, {3.866286815683847*^9, 3.866286826001635*^9}, {
   3.8662869515842*^9, 3.866286957090143*^9}, {3.866287432190014*^9, 
   3.866287433732437*^9}, {3.8662875714309177`*^9, 3.866287575508819*^9}, {
   3.866287972431319*^9, 3.866287979390542*^9}, {3.8662881211610413`*^9, 
   3.866288128734665*^9}, {3.866301184432645*^9, 3.866301189032214*^9}, {
   3.866301252666163*^9, 3.866301255952261*^9}, {3.866301376402754*^9, 
   3.866301391652487*^9}, {3.866301466042976*^9, 3.866301469288639*^9}, {
   3.866301630395039*^9, 3.866301653060717*^9}, {3.866301748836125*^9, 
   3.866301755312545*^9}, {3.86630188485115*^9, 3.866301888560711*^9}, {
   3.866302280747377*^9, 3.8663022952887983`*^9}, {3.866302405795878*^9, 
   3.866302419001148*^9}, {3.866302495340143*^9, 3.866302504605687*^9}, {
   3.866350591374894*^9, 3.8663505951022243`*^9}, {3.866351142159863*^9, 
   3.866351179558625*^9}, {3.8663515938249702`*^9, 3.866351597311022*^9}, {
   3.8663516429930353`*^9, 3.866351646919097*^9}, {3.8663540899964314`*^9, 
   3.866354091250739*^9}, 3.866354227060774*^9, {3.866354342347616*^9, 
   3.866354366019519*^9}, {3.866354536533381*^9, 3.866354542835105*^9}, {
   3.866354615988611*^9, 3.866354616498942*^9}, {3.866354747316181*^9, 
   3.866354747986311*^9}, {3.866354820971937*^9, 3.866354830674176*^9}, {
   3.866354985259542*^9, 3.866355003354249*^9}, {3.866355243555305*^9, 
   3.866355280233426*^9}, {3.866355363275181*^9, 3.8663553649290257`*^9}, {
   3.866355508482728*^9, 3.8663555086333237`*^9}, {3.866355904531114*^9, 
   3.8663559105053043`*^9}, {3.866355992402801*^9, 3.866356013229351*^9}, {
   3.866356256538742*^9, 3.866356257041319*^9}, {3.866356472449071*^9, 
   3.866356473280033*^9}, {3.8663565818412313`*^9, 3.866356588441074*^9}, {
   3.866356990748909*^9, 3.866356994266841*^9}, {3.8663571204214773`*^9, 
   3.866357120574224*^9}, {3.8663572027579412`*^9, 3.8663572078996153`*^9}, {
   3.866357620436617*^9, 3.866357634688436*^9}, {3.866357667446629*^9, 
   3.866357681140574*^9}, {3.8663583040873337`*^9, 3.866358308549032*^9}, {
   3.866358702488315*^9, 3.866358710660177*^9}, {3.866358792502235*^9, 
   3.866358792643732*^9}, {3.8663588650968037`*^9, 3.866358870370079*^9}, {
   3.8663590601050797`*^9, 3.866359061311141*^9}, {3.866359100825281*^9, 
   3.8663591032317047`*^9}, {3.866360392667655*^9, 3.866360402393593*^9}, {
   3.866360446451545*^9, 3.866360454122822*^9}, {3.866360518763679*^9, 
   3.866360523813664*^9}, {3.8663605658118258`*^9, 3.866360586933572*^9}, {
   3.866360874844895*^9, 3.866360875286996*^9}, {3.8663609358459*^9, 
   3.866360946523975*^9}, {3.8663629695673723`*^9, 3.8663629719826107`*^9}, {
   3.8663639844553833`*^9, 3.8663639851026163`*^9}, {3.866364664263899*^9, 
   3.866364667805708*^9}, {3.8663647416864157`*^9, 3.866364751498241*^9}, {
   3.8663648173209887`*^9, 3.8663648239090853`*^9}, {3.866364861552744*^9, 
   3.866364866359233*^9}, {3.866364911593669*^9, 3.866364912091476*^9}, {
   3.8663650443606586`*^9, 3.8663650452161922`*^9}, {3.866365512692107*^9, 
   3.866365515810193*^9}, 3.866365740980801*^9, {3.866366124781304*^9, 
   3.866366128103511*^9}, {3.86636615827591*^9, 3.866366161795991*^9}, 
   3.8663675572465467`*^9, {3.8663679823247623`*^9, 3.8663679840072737`*^9}, {
   3.8663685724947968`*^9, 3.866368575523563*^9}, {3.866368617885765*^9, 
   3.866368630439355*^9}, {3.8663688420628223`*^9, 3.866368846739706*^9}, {
   3.866368921365861*^9, 3.866368935403892*^9}, {3.866368992805874*^9, 
   3.8663689939334173`*^9}, {3.8663690430938*^9, 3.8663690474648046`*^9}, {
   3.866369083709838*^9, 3.8663691118719187`*^9}, {3.866369202398569*^9, 
   3.866369214195849*^9}, {3.866369334334588*^9, 3.866369336388123*^9}, {
   3.866369454951181*^9, 3.8663694569323397`*^9}, {3.866369515406219*^9, 
   3.866369518628167*^9}, {3.8663703695855513`*^9, 3.8663703750077*^9}, {
   3.8663705385538683`*^9, 3.866370541048525*^9}, {3.866370586394085*^9, 
   3.866370607876096*^9}, {3.8663707547717*^9, 3.866370757696903*^9}, {
   3.866370926163419*^9, 3.866370929489147*^9}, {3.866371042659484*^9, 
   3.8663710475373373`*^9}, {3.866371595734161*^9, 3.866371595814637*^9}, {
   3.866371630486404*^9, 3.866371630623527*^9}, {3.866371683122916*^9, 
   3.866371701147089*^9}, {3.866371789324903*^9, 3.866371822547234*^9}, {
   3.8663718525974607`*^9, 3.8663718606429367`*^9}, {3.866371974165319*^9, 
   3.866371979075355*^9}, {3.866372122293806*^9, 3.8663721296757917`*^9}, {
   3.866372551518608*^9, 3.866372561132722*^9}, {3.866372627211433*^9, 
   3.866372636080841*^9}, {3.8663728112322397`*^9, 3.866372812994047*^9}, {
   3.866372895895451*^9, 3.866372901477323*^9}, {3.8664377149946833`*^9, 
   3.8664377176580143`*^9}, {3.86643884019552*^9, 3.86643884333634*^9}, {
   3.866438919186672*^9, 3.866438921864346*^9}, {3.8664391767222757`*^9, 
   3.866439182016387*^9}, {3.866439413057221*^9, 3.8664394237656918`*^9}, {
   3.866440165425671*^9, 3.8664401663535337`*^9}, {3.8664414544278717`*^9, 
   3.866441455406114*^9}, {3.8664415241527863`*^9, 3.866441526297073*^9}, {
   3.866441636299324*^9, 3.866441637325185*^9}, {3.8664421743093033`*^9, 
   3.866442174534107*^9}, {3.866444116919817*^9, 3.866444119674713*^9}, {
   3.86644604617083*^9, 3.866446049128669*^9}, {3.866512861360115*^9, 
   3.866512866295472*^9}, {3.866512916479863*^9, 3.866512918447736*^9}, {
   3.866634565957718*^9, 3.866634566999825*^9}, {3.86680026940904*^9, 
   3.866800269792528*^9}, {3.8675831417592773`*^9, 3.867583145913877*^9}, {
   3.869221218808393*^9, 3.869221231059099*^9}, {3.869225972028479*^9, 
   3.8692260010575743`*^9}, {3.869226207781839*^9, 3.869226212280487*^9}, {
   3.8692262960682364`*^9, 3.869226330905139*^9}, {3.869226390653082*^9, 
   3.869226434585244*^9}, {3.869226464845196*^9, 3.869226465900545*^9}, {
   3.869277398980557*^9, 3.86927740136417*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],

Cell[CellGroupData[{

Cell[BoxData["trainableSoftNet"], "Input",
 CellChangeTimes->{{3.869221232121078*^9, 3.869221234978818*^9}, 
   3.869277421619462*^9, {3.869284608873015*^9, 3.8692846132481823`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -15.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"16\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]16\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]16\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999999999993`, 
                    6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]16\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]16\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-0.9999999732051026, 1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 25, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {223.0000014737193, 103.49999999999997`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"SoftBits" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{320}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{320}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {320}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{320}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Clip" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {320}|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{320}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Clip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Weights", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Clip", "Outputs", 
                    "Output"]}|>|>, "Edges" -> {
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftBits", "Outputs", "Output"]}|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{32, 10}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Sort" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 32, 
                    "$InputShape" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{32, 
                    10}, NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Medians" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 6}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "Harden" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_220c3873_ee66_41d7_911e_eb6aed3cb232", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
pF+uIr99aLgVXFIs7pwggD2DVdYPRqrlxZ4GJSQJN0ZbygfnwDI8ZnoDI5rw
jdJ8iKiv0Trv4wbw9u/xkrjaOaqC0NHmvPyOIb8mkOevo5avMdDt0ejQAAza
h2fKnyDvOYSzas8p0BC0U9ySB2vCk0S+3aiQheqbjmM13Ko4/Y3tiO29l7xx
qddaAn7/Ziih5NGAbcPc1Ozq3vEmXV+sC/tXJnMdsvcW+qjd27hO3vlZeIYs
lvNucjDCn8vth3vAGZWNcovVBbAMyMed9o0wcNoZUbj5tYJKqBZX+bCYPoSL
3Q4S3rejHcYN8M+maoPJG6rpg6U5YXYKMLsJqNQPxrYG5S4p7fldvD68rX0P
OEpM5fAcvWHBXu/5/xW/buDx6zlhjrlgwIQpx8t5k/cJLItNZib/7Lkn+rsZ
P//nu2jFb5EBe/Ykzyzx/Dn6ePImz593BCRHL3Eql2ybJ6NN/3vd1eghebxZ
7nOJbBvt3K1dJ29+KDi/x8zxJRaM3sfkt8uHrnbWux+0b/5V4nF1T2OiRbH7
3tIV9BPasn9ONYpLz8eaXbv7C9nizt3g031HepJlW4Rf3675YKLsb3R/58v9
VWJ5M/ov94N8KDEedNa5h9lyLX4kTe89+TpUcfVtvfsle39iYPe9bQ8p595y
J5wrjN0jlxfc32Vm3SM9Rz47/2qwmfVq0nZuisxftuUT7yzrx7dXxKWZlItS
lkWS+Y9v02Qu285P6D9Sp7cNzf5TjfzUcPSjcR4zuMXxk/qPtOpFnE/elv6y
q+e2PLGhjP6ttizqTo24jUHhnjVOJ9fIh84nDvexWw3TZ3AfKvL6T8u6j/x4
U1xqp4VovHtefO71DjPrxUmAyvrHgJQcu0A+e+fBDrNf++vc3wUDhfIdfwH2
EQT2txR7H8sLrkSaXWtA2Jve3GHmeOAb8fjNf2Fj2DfusY/WdSl/7GOb6AJ+
D4Nv97N7EKYPQ5362SXjM2kuMsb+becXWmifOR7xl3v5QskEhrkF5+zxYZll
ypbfw82u3ZecI1uckO8wu/YWjX/i5h6z3AeENLvrX3cMwRtrBc63GpCjYN7A
0qRIi3fKrRZRG/3PyJQKpSHLMBBdGR7+Hhs/Ubnj9K30X1/DGL/hQ3Q517wd
fhxulluIIYUo7Nlz8/3pq+K23ZbAq6THkRsvKOvc/57YfySaKUHM3vsgtn54
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
GwBGeQdgojgAEzp/mxOUbh78l6CZBWAxDAALT4HRHF0AzGzJs2Nn0gCs2x2N
Nu3XvwRV320ONf57DID1I7CT316ZRVlrXn/szCUA818DYLdmjqkTNI+D0Xq1
Aew/U4LW0Z7DaMk7AKzo5uTQRz4bn94Iqp0DuPUaAZgbE8Cm7ofRJrgCCYcA
rKUSRkvfyqAT3zVAd4jPUNAd4gQWukOsR9whZksmWMrIM1iqC8Qi46Ney4+6
jmEHUCXYJiqXkYT+J1OWcEhEkfGPko9/UQHdLxZ8vl/si9p+E479b/eLVdd1
VY//+T3g/7WRiHvCNnxr/n+5J4wuAKPvNrCLMvFrvzrbhdopdLog0AcdojuH
0YLSXTXH4Aol2lGW6hN0LhwfUmeR1LYkM0Afv4LbWyYJeZZFYu+kVvFci9cu
EFhu+JNX8nK1o2FcKVYkZDFdpDrkA07JARQXPsP/x2QX0WTO+YXb9puQlxwP
Sz/rf8vcnGKbEST81r/R338fljGFS5unq/tGy6Y5XXq4hFJcyJy/WfNmxuF1
rIMBmS9rqZs4F/21FvP3h3FS5vIp6MqSnebK0k6K5trKOLJTRpDlYeLuTxbl
0LjDa5N+NqFRdZ9LkrBcrq7mMs0bTH3x59t9/npbjI9NzXiNCVmRNN3xzwGI
SzmMnV8yg+Vm6IQlf+mb7MRNDuMUNuu2oWEwPc0wfZphHu4TGm4xPmWJ31sK
eCcs0dp+LPPt/jPMgWZdS3TNBl3Swm87kQw1t538GN4Bx0Rnyafw+1HvhB1a
c7lThFvAk34tlEx+RV4ONJ4dg2i01FLTuN2UvCYj6OIVnMbNv1OWmjb6H5Oc
nSWczdfi2HHz0H2olFWa+1CV5pJ9a/eHjMXv8Vg5VZUH6G4ZcyWMY7naUgvd
aVqjutOUabz/P+NczCntK6oml9DcmmlUYTSLa0tX36SR7CqyItnj9ypeSPt0
t/M9syr064uE987QwyR6tcJF/FzpV/7VpobaFqf5T5Ity/V3UsalLlyfWcXm
UMu0bqJT2Rz8zOwbsub+hJ7IoVwgkXKoJTq0mZbVOpeytIum3MVKdEjTM4qs
ko1PEPc19WlxmZ2UGeX6MtJqUpTIoTCLFKlFVR/zXZhJmVcuOCgyJk7ebvan
/7gwq8hKZBxTUihznYNOXx7U3HBNctQcbZ3Mzimxoky4CHNA/XcaZZp+XpWO
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
GqlOhN/4Pyec2dw=
                    "]]|>, "orcInstance" -> 91482096, "orcModuleId" -> 
                    88718320, "targetMachineId" -> 72771520|>, 
                    139921645954880, 139921645954736, 139921645954816, 
                    139921645948928, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1f0c8917_583d_456a_b1cc_6fc9b7a417e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
0v8UNQoL/w4gzcAP
                    "]]|>, "orcInstance" -> 93534288, "orcModuleId" -> 
                    88946512, "targetMachineId" -> 90926016|>, 
                    139921645941280, 139921645940880, 139921645940960, 
                    139921645940736, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {32}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "27ad3a0edf58e754", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sort", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Medians", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sort", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Medians", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Harden", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> NeuralNetworks`ValidatedParameter[{2, 
                    16}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{2, 16}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 16}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{2, 16}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Error" -> <|"Type" -> "CrossEntropyLoss", 
                    "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 2, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 2]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Outputs", "Loss"]}|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], 
                    "Target" -> <|"Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {True, False}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 2, "$Version" -> "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8692846140728807`*^9, 3.869284685781642*^9, 
  3.8692934271654387`*^9, 3.869310298316814*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"b67cc9c9-ea67-4c3d-969b-2b6e8ff85146"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-\
78e337587528"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableSoftNet", ",", "trainData", ",", "All", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}, {3.866272907421722*^9, 3.866272908705574*^9}, {
   3.866274679974001*^9, 3.866274683777981*^9}, {3.866275126894273*^9, 
   3.866275130882132*^9}, {3.866275621030303*^9, 3.86627562449095*^9}, {
   3.866275800963348*^9, 3.866275804851942*^9}, {3.866278286918571*^9, 
   3.866278290408846*^9}, {3.866279939718389*^9, 3.8662799438283052`*^9}, {
   3.8662825835076027`*^9, 3.866282587086446*^9}, {3.8662848978232517`*^9, 
   3.8662849013340178`*^9}, {3.866301199025255*^9, 3.866301208705173*^9}, {
   3.866302091405136*^9, 3.866302093072084*^9}, {3.8663022330606956`*^9, 
   3.8663022743807373`*^9}, {3.866303190918262*^9, 3.8663031961042967`*^9}, {
   3.8663508996403513`*^9, 3.866350903983953*^9}, {3.8663558607588453`*^9, 
   3.866355860917651*^9}, {3.86637013313169*^9, 3.866370138430928*^9}, {
   3.866370237003203*^9, 3.866370239455555*^9}, {3.8663703291644793`*^9, 
   3.866370333111907*^9}, {3.866370363265703*^9, 3.866370363711856*^9}, {
   3.8663720431119947`*^9, 3.866372048852154*^9}, {3.866372163198892*^9, 
   3.8663721862104397`*^9}, 3.8663723957836103`*^9, {3.866372460806899*^9, 
   3.866372466981298*^9}, {3.8663728465397882`*^9, 3.866372846690668*^9}, {
   3.866439863015705*^9, 3.866439889076521*^9}, {3.866444399919945*^9, 
   3.866444403398275*^9}, 3.866445596437694*^9, 3.866445994629862*^9, {
   3.866446077093233*^9, 3.8664460772227592`*^9}, {3.866514058957122*^9, 
   3.866514061965129*^9}, {3.866514093672724*^9, 3.8665140946276417`*^9}, 
   3.866514530731886*^9, {3.866514784096607*^9, 3.866514784235477*^9}, {
   3.8665148543229303`*^9, 3.86651485485518*^9}, {3.866517197949828*^9, 
   3.866517203967832*^9}, 3.866517357579501*^9, 3.8665174374755917`*^9, 
   3.8665175119230967`*^9, {3.866517590284361*^9, 3.866517620168564*^9}, 
   3.8665176619240017`*^9, {3.8665179325026484`*^9, 3.8665179399815683`*^9}, {
   3.866518111910069*^9, 3.866518112233807*^9}, {3.866518521945266*^9, 
   3.866518522115803*^9}, {3.866518571201038*^9, 3.866518588328702*^9}, {
   3.866518646862028*^9, 3.866518650143523*^9}, 3.866518704027602*^9, {
   3.866519202548511*^9, 3.8665192068871107`*^9}, {3.866552934111923*^9, 
   3.866552991359269*^9}, {3.866553502473754*^9, 3.8665535030716467`*^9}, {
   3.866554417382031*^9, 3.866554420050095*^9}, {3.866554652086327*^9, 
   3.8665546522545357`*^9}, 3.866604776742971*^9, {3.86680027773044*^9, 
   3.866800278113852*^9}, {3.868094967186932*^9, 3.868094986665822*^9}, {
   3.868095019045618*^9, 3.868095019220586*^9}, {3.868361304394638*^9, 
   3.868361304829949*^9}, {3.868361488191626*^9, 3.868361491259301*^9}, 
   3.868361525155517*^9, {3.8692213052091*^9, 3.8692213346561832`*^9}, {
   3.8692810440868177`*^9, 3.8692810484261227`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"306b98cf-6a16-4b58-bf92-\
e841969834f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "|>"}], ",", 
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", "targetEncoder", "]"}]}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], 
       "\[IndentingNewLine]", "]"}]}], "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866262883598037*^9, 3.866262913813736*^9}, {
   3.866800388275832*^9, 3.866800388780817*^9}, {3.8683615002909307`*^9, 
   3.868361522978859*^9}, {3.869221408816246*^9, 3.8692214711637383`*^9}, 
   3.869221553810891*^9, {3.869221654008464*^9, 3.869221732536498*^9}, {
   3.8692218215629063`*^9, 3.869221866933878*^9}, {3.86922191254809*^9, 
   3.869221913409645*^9}, {3.869221946220015*^9, 3.869221992865573*^9}, {
   3.8692220239803658`*^9, 3.869222074362282*^9}, {3.869222542284799*^9, 
   3.869222618659419*^9}, {3.869225398347341*^9, 3.8692254268744698`*^9}, {
   3.869225457230851*^9, 3.869225468811384*^9}, {3.869227062000464*^9, 
   3.8692270744112864`*^9}, {3.869277551850852*^9, 3.869277552935012*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", "testData"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.8692215859194508`*^9, {3.869277581499093*^9, 3.8692775834166107`*^9}, 
   3.869294465445704*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "c318d96f-388e-4428-bdca-2309aac8085f"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "205"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"100.0000000000000", "00", "22"}, 
                    "AroundSeq", SyntaxForm -> PlusMinus], 
                    Around[100.`3., 2.220446049250313080847263`3.*^-14]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"50.2", "3.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    50.2439024390243886842`3., 3.5006585596115531445`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9482984504054426944`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051795947413136867`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.937939260922815321`3.", "\", \"", 
                    "0.9586576398880700678`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 0.937939260922815321`3.,
                     ", ", 0.9586576398880700678`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0530860051700925914`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054619608261161287`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.042162083517860334`3.", "\", \"", 
                    "0.0640099268223248419`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 0.042162083517860334`3.,
                     ", ", 0.0640099268223248419`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.68`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.97`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{
                    0.8931471675891599, 0.5261448483899148, 
                    0.005319903559222008}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {
                    0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["102", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{102, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["103", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{103, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{102, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" example\"", "\"s\"", "\" of class \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{103, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{102, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{103, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["102", TraditionalForm]}, {0.5, 
                    FormBox["103", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["102", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["103", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwViX881Hccxw+JzUOyh3uQJfQLSYtJFz7vl0LEyUXl3CkuP0J+XKxTmMd3
huRntdqjwtJEd5Sikrlc08x6VNdvqz1alFCrJurhYYuY/fN8/XjabksNidPl
8XjphtMIkWWsTkuT7Qmd+f+IlSV96ZKkM129phFXG44FHWGosZ1H+6IWUN1t
S3LTE6NVuAExPhtg4OROPcvE2KHrCpOGKtKcrCR5nDMsDjvDvKKSThq6YGSk
ktL1XZBa7wzVm1rqMnHEtoTT1HRCSYrrS1Dy3gEPXjhAU3eK7I84Ij/PEVpD
Pp5UP6SAS1r618QCMruHtDX/d/pmoQU0R7U05PuQyMscb3ZI4HQnAiW/5dHz
MSNKOcgQ05VHsT4SzJ/MI76xFJ1aBrcCM1zse0Zhqj7aO2iBmeXP6PvVz6i7
ywzR/iZoiu8jV9Vd8lkoRYTDO3VviRR+QxLktnMwsdyvPnLVVt3zlsNkDtSf
chw+ekypwwTR0Lfk0CDfol4cFg2jjdHoHX3elto/wCQlHPozONjFBqG9VQir
V9kI/pjhOVgrhG1WINWN5XieLRdS04tcz0Urcz2T62IoJUCMeT9I0XZHCo/g
tVjuthbstikl7pLi3r+mtLh7O+XkcKhYxtDow0Gt4LBZwGBdyaHK+kDb5jQO
9r1+uNCTT1VDQjxtERKfBdG9k6VkLAug9lVBaMy3heluIdIHLtOE9jIFtnaQ
X6Q1bufboMTeBhcOdNLxchtceW2Fia9toGvcSSvPqYkbkNIUP4Lm2qWjOT6C
Xh31x6FCfwSmrmetRelo7whiZsN+bKZPGRkEutDdPwTYJSqjtvWu1B/wLUV1
hOJltitVtwowcTUE/GYeNq3nIY3mgKe9SQ1reMiv4WH+mAWur9aSbe0kHdO8
oVuRdiib3UwPvJuJprNxfjNdrDtL58qbqEVuj7bHTSROtsMN4XZK0U+A5dsE
CI7F0uw78eD8W1htYQJmV/CJN+gLXkkjC9m/gl4JQxHsLcZfvVaUuiUEPXwx
1oWKwRmFgJOLUfTSjdonkrDnajKif02Cx/kj7GDBMaaZkYydeslQZh1lodNe
MDMFuo4iVIyKEBkrQtNjRv0nRHDx8qLNAhEWlRJp7gUjdIMIJ2rk6Nwrx1x+
FusqzGaxTnLw8zLYpXI5UkRyeBtksbifMtmjUg+svFBEvfrFdL/cHSllq+Be
XEy2H0pIxC+i6rMeEA6uwsXMORg//JqGBTwYud+iGyo+pmqmSH9QSwUmPJz/
c4rGUs1wRec9088ZYZpSGV66/8N0modZhu8oG1fKMGwlwwP9IfbV+2FGFafJ
7toSsM9Pk0GMIwwfOeC46VI8LlDSJXLAiKCephaq6NT1cNR9YU7ZGyU4nhmB
NUozGii0pKEGCTbul0BWP+1l4cgaeUKjTj3kPZwIxWQiiu8nIqbAHsYJPfSJ
yxm2T2tHM5oTgXfWKFYIoessomrbIJp1TUPd16xx87ufaTho+k9ZR3q/WONQ
1RJ8Nr4U9OMpShivo5qKegpY7ojchnpS9alIJ1NJkmIldQd9YOG1UZilisLf
m2ToPh+FbcootHd9ZJldH5j7mXHW4jPJdmsUaG0yZzufJlJhjgJeSgW2evki
MlcBrYMv9OIVWCGdw/4DIcEi+Q==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {320}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {320}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{32, 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 32, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 6}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_220c3873_ee66_41d7_911e_eb6aed3cb232", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJRAXFBRQ0AWUUwABQsirsW6sCgqyr66BRJA
ia0KttZi64LWqu3rggUXUGRVqQKiWMGyC4oWIVgQ0AD5n7k3idDv/Z7v9z3P
7/n3eeXOzD0zc/ZzZjJzX/PA8BWBJAzD2oIxzMW1sHGuIYZpQT2QyZ/8xdq7
W8SKHL+xyyVeCMaciWGnOBg2lmyOkaE+Hv7RpbwjojLqEhpL4PgtKYU5RYth
PIn6TaDEdBHZ5duxLm0sgaEDg+OpLYiSeUSUmvPc9FMPskTfkjeXMa4Zcl0X
y7h/kARRKZwZljPSrfdmrT/CfVAG4x7gYthmeAosysZwAxdj5jMnZ5iaT4E/
xtOY+86l+0dtXs+dvDUpc/x+7DVDKCVHU/357hIWaU7w15YB//zy1n7Z1+YW
blVnGYUryCwqLVmUyeJSJr5mkL/gtERkav0j+qScyCfNJDHfGbKxHuV0rmVp
5iK2ZGgmyWrecF2iNkPbettyqr/yC+ybw8pYC91UoWTCYgeHN9Kw9OFEulfh
FxjFaRG1cPBfkB8K9AvPth5wwMikrzkk7pkDxvoHqKtD+JmPGBK2gP6UE8Dn
Hp4u2OfCFU1yNaWRSNJtQq1oJgwvtLX4lk3jCY4H+jAOaqcIXLfwLcZtfGq4
vLgtWreHO5a9a3mbW4HtFBjguSkp5ajtoqP8odIPbgXNtgZPvFZoky2XrHQb
892y9ct6PaGwcgZtNrllEf/r42fGffeknHm5SLJ9cRnzzZav3UJYQp9KaJDF
LZZNvLg1iTLkdWQ6izxGW5fKMbeZfNZYICUbr+YKPfS9SKZn+Fxs7hjRnImW
PkfX2GotB/kHgFxMZM1K+I/OZdqxXLDJJjJz7JiO7nvURvHXlphhiZgHptVb
RPt5ALWR+FoIcjHma5LRinfM1MFWYoNYusS5VsIlpWNjhXSTdDdM35/0m06K
C7Y3q8iXhso0A2ysTyh/AslXsj25xbCQvMrk4ANsfOZfzUI0zkLsPDZAwuiF
Zph+FYxgiUa4qLPfEAYM5U4l+9qxDAG99BnEyPunYGOyQtKvoK5mOAISSrMe
NoZBydTD5tVyA/49pg8pAAMqpilwKrZRCg2xhdhkHNh/GykLi8mSvhiGV4nY
S6wbH+pNsg6zH+dDFY3gg9AshJuHNSfrpEzDHtFeEkOl27H8WdjWLCkjmeQA
rziMQuMQ7v1MrNKfIqLRImgmGQIGtgKr5DLSuTqZOvuMqSJJiGWlkEHeTJHS
qBE0bAnIwgRkYZAizOBSS1IkGSxDg5TCDKGpx1kv1tdBLsv5h3q8WJnbirmz
qlO4x/k+3881vzWVWptiXn10TJFdQPO8cJfupSxnfgZLUkSVaiePoXJkRZz0
ohQS876EOZUaxDfPnMrYEkEzINtmsGTgBAwm7S2kOA1oOWUm20lSI7dR4jzo
8Rfpe2v9tV9V0Toz6fC3m0uPx+i7+fSoTHo0lx6K6UVF0CPxMmokAKDsT4/J
pMcJ6aHpuvAXVatoryX0iEx6JJe+s4rWJaHvZtHjiI7422wWPUpC/0KPwdZ3
2X/wKEaydck40VV03XHvzZbguLW6X1estzZibk54JCrPuX2Y3hJpx3q4eMeB
6l5Dxi+Xbj/KzDik9W3R5t+PdlQ2mpMemKcUAfdY8I9Kz3Kdd86tm4ZhEqhy
HSTmqxdbQTtUyOCJOFghiflr3laRZDK0MOBfIRfT9fe4R5N3c4UWGAEJ8qTz
z/11YG0Gi8tGPeEfnyGhcFbkpq4kkfiY+j/TwvSvF14cy9A0YM3Y/lV8/WAh
jg0Zb4KhtL/7mkLOVOGIYYDV9yc3T2JhNHU3hNXGRRQKIAM15KMxNN0v3yyi
CTHuyKE+/eDIp2CYPgJjqcD+0EmBkSxVNOJg+ic9dDDuWlVPnMa5TtWmMBOi
W6JC/uHes/MwsmQkYn8OucVjVCEFw6fFsAjMdYbh7n9wXmFCDY32qzpheirB
ZgL/Wsu/KUQfDf4fnpwlkYQqTuMzan9/diFGLiSNmHH17OVnMGohRc0LmPG3
OAvKCsCcrG5DYF4B5wEx6kiwnN+9SAyJhv3N2GQ7huHrUgwrIyMcxqC4MymD
Y8z2Sj84Zqr7farrBEPylMXYdon2jQzKvINYeiAa7xrY30l42jAkpqUtplsM
SQtkrg4pJQddJPRdO+nRGZHM15heJ0u3V6Jrw3SZVFw0sfKM6Ra+Fg6WbFJO
WVDmuuAgZUH5zoMxEfQ9DPouj9SICPruCErcztQIbqpxOVv3XbpuC18vjK/X
2q3b7aNrwyqd2GhuWms+sThg0hb+Aac7yU5Vro45lPl3kuenUJzKuw3j/Ol7
ttHtt6VGwV9JakR6aoQ/Pc6SHjegBcPGS1L9GKmRnNSojNRdGVKrrm7drmbd
D4W67/iUwLIzpm1nTMvxv/UBpg/NTUulEx8G0J6nuzqWuTpm4H9vlTgcdXWQ
UZyOlsyBSQeTnJ5RnLJKmA+CUyN8U6MikmO20Xf6p8ZwUmMyU40rV+p1YXr/
+Oi2peu2CvVauLrvgAqu5cT6oknFoklPzU3rpZPqm03bWib+TZq0hbPcAUzx
RLJTuc9kFSH+qfE76Tszlnv1pushDkzaPulhgOkb84mNRRMTSJMQwuYTuwNo
q/YlO5SXOGW5LgCGDBbPb3N1kkG15OA9baA0NR7wYdB3W9KjMqTrW1m67wp1
X/no9vB5RU9Fk9pajGpbJjYCAh7GTlnJC3KSTVJKHA66OpaXzL9V5FhWAjTO
L/fIiWTQAatIYKBvqnHdfd13/nqdzeDP9F7x9V5x9fp8dMNYuq18Xaj2NNPe
Nuu2+egO8Hkv3wWYFksn1rYYvTOf+Np8Yqn5RJDgG3OzLdyTTndcF9yiOB5N
diz3vQPSB2J3A54eqfERwL1U3Vcs3W4cWzlftyddt9cHmTq2C0zGE55Rkzy4
rjKm8ZgogQeXJz145MgTt0yW5eb51gKXw+nmP2/jhpFWmvh/dQMU+8vwkC1R
AaFc1/DQiOCQoCiuYLa1zWzr2XzulvAorldwWOxO7k4HO66lne2swOAYSIm+
iA0L4lrbWXEFfIFg+uKoYK61gCuK3YrXudb28wS28+bahYTEhc4OCQ+PmB0X
tCkmPCp4d9DsoLCAwJCg//YmPnhzzLbPLzYHR8dEBQfGxqj7YBiPccA+iR9h
Qy1iSvmu/HIu6wHTRVrO5aQepE61HGdnd9vuB9vfBfZ5y8mTT9+2t7PJzbIz
ui3Izc2xv7k8afIv6qZrebZ2v8/Jy7nx+3Iyyml/BXs1h+dY7ShLsAP6bt+I
DOB9CWicY1VJ0mvT+2d03oiQmb5GwkH6Nd621V+33QfUVq8NKa9eu49ub5ZE
St9liVvVztRIQqd8I06UOOSQnM4lLzhaQt4BBmpa32JazzVtC0B/30gnFQeY
Vp0xLSMUgfQE/Bhy4/Ty+eeSnU6AMVEWZCbPB8NKL0E+KADkq6cH8ZbK1R9L
JTyhoaV0AodkKXOxzCRPJ08wdBtzEDNcyj4q+sNw0Rjo9B4izBKAs3AvS1+u
nRKG9AQcEOa3cld0TFCon9/SgAi/xX5+rn5+PgGbdgRtFkVFBezyWxEUEGJn
62f9P24U/PfG/yuzzONOiQuIsrbj22LYzJQ3a6092DlJGRn314p8vFovcWec
j1zDGl/tMFP2TfCJcdT7tpXaFpsmbNU6Y30oO6kWgUV4tYYwJmM27IpC2jm+
gTUzRKhtw76HV9hE5SI/izS93I1JMUkv9nKzxitUqJDfF0kPcgwxRhJperqI
s3lFLZtCwUR8vpYgK8lL2ynQH+MyaOd9aL7pSwLcmUyMWlRoWC4cK5j+TiYl
SbicjGLjENHUfROt+RiLSlkpTLYqO5fFo9GwJH9/7eBCreOGcaWFmJDF9BLp
3OF+V3yYw4HJpNMvFRnFtFVJSJz06aYeNswgLs1Ei+wikqTPMPWwZ0qNJSQt
UpRoQmEWyZpK5ddzL5E4BzkcfUaS6HttqWm5gOrCD/TxAtwmzOCsopZZSfk+
bAaJvL6bxg8RckkkFfCf2uDbspkUNhBpAPPe135oRXqik9xDCxaKJOu5dIBm
kkhMe0YMRiPQ9vnDJQu63GN7RftwZZyBM/eKbT0jeu/70GIKaSU0NwmdWmWS
bPxMasI0YYncsHzrE9KJWUVZJHY9idR7X0KLx8GE7EJb+r4kxtn5uem0c9Qy
rT1YCY1qwCqMSK6i+/MJxv45m3qO/6jQoUh474hND9/e3Dqcn+WCletbUebS
zUz3Nt+pCL2j491dNKebZO8TPVDUQq+8VX//VnOK2WCSWQQAWZpmNpeXhJZT
vMtL5kjIACQrNteuXFZ/f1lz6bLBJEsENN30XPO7+6HvaN7v7s9JR0AZxQHa
3k71ix81p0wfTJqOgGaYXmyurwzNYXpnFs/JREAXi89oe3fWL+5sTpkxmDQD
Ac00vdT87EnoJaZ3VvGcLAR0q7hF23t+w/2HzSkzB5NmIiAr08BmWVGojOQt
K5ojQ4iXFZuP9TapX2zS7GYymGSFgGaZ5jRfKgq9RPK+VDTnEsleQ/g4Omfy
CYFP5IkviqdTxj2YhVcOuuEVP7xS6okq7nfwyh288uD2iEqqGV5xG3OBucp0
GWq5JKGPuRBT0vzOZZYPi2s0QAbRuQqxEh2yg6SIUORVw6wTJVYlBlrVpoYM
C52EbUPd9GxqpS1dkiQ7Z2UhpeHtrIRtw8IKfbcGfrfI4R0ZdJTkqNHRDArS
UVBv0SJ9kVO5wGu1MB5my6TAbLtYSPKZumrJj/uC+p7/yD+gyJaulcTYZ/bX
kqPFVqI/dSgXdNuQZlbpajRTrtHM627+etnMF+NxzVw/cOZaysxyff8Snf+w
9LaBGsXig8n2m33lKSuyKnqu48opTJ6HCC6nqAl2WaAh2IbdDQQb0aAXliTj
WK73OleSRQoY+7sQq+D79nXrGjI83HVfSfQ+CV0k0N9FiFVPHsewmJQgIS3N
cV3whnzNBRDVA0RvuaCxixdqxl7Azii1KuEcFfErRFIumTZw5j3VtMqAm00N
QIbqXxhqJKPCmCtwISzR9AtkXyq1SjbOFBXi7N4sMfvK9yDlTxdJuf7RIuEi
brq0bUOEPszYjM/o8oWm51Z2YamV64RLxIxRMOPxfZPK9TNF9sz4dH2eCHha
qK/h6WySmqfXFvkYZDMjuHSCeROaU2+M7+R7ZtEa+D6zpfqGVAZNQCKV0EpZ
LOzFPWlMCauM6ol4+oyq5mnxUoSFuRSwiGUPlFpRTHJEau+0AfdOIhPmKirZ
hLsjosgb1EUK6hLo7wHvV2+U7fMtF9wqMqHyaPeoSf6ZLfsEnt20Ul3wfssA
tEUXx3ehBt8Pi/zHZzOjfQh8PUybU+8bXeZ7cukN/DvFy9qooJJSX41Kpmup
VXLKhKKvygW1pElUnLMxwNltB6l/ugJnnyHOVkl7aUYntICmAVxV08drnFQw
NcL6UTp9DwvXu3pSwrbzR8ZmU3dW6VBmn7vni5iRpaVmRtI6jUgusZ/ds6JA
cMdFcpY+cObyYs9y/XckqUjizzJigTRkIiG2yoT+VMeVZbQDyUhopJFRHKJ5
P/DE58niKqNs5t4qepFMZA1s3pYd4MMGXRIjXdoreVektRskRNVnFarEcIs9
4Yz1o2Z6Ikvl9+NMHloVmVV9AX54L4C6eeLcGdBw556JKLhccJA8g+DOGYnZ
X2E5JVZSS5+J0CUTyX8i3kVGU3fRmiTaXi44Wjyd6HIOuoSnaFW4AUMzi3Fd
mt6cSpv0nu8Zod3ALyzZ1quFZBOskU2mZqigSUU7ygXnimdQKeOkfXTmdOQw
2BOo6TvP1AdQyHN8k7H9OjJsDqM55U9JACVpGpnMCeN8RWEuxiNy5ldpErst
xr5F45KCdbWp7NWFeksX9AYc8x+XF1CW+txBR5vcRq6FjoEMhv8tUboOn4OH
62Rt56T6jKCd+3wZ5x0tWW5fkRbm9Mu+WUv+kruCwWJup5D36zBWMhiShxbC
2Vk6HDtupQVX0kIj2Rf6E0F9hoKRsOmYaPw284zXmUKWVGuw6u/kyVvGBEo3
mgtnV6Eugeaoi/RzlyHG/U3HzowPI7ochy7/bJqzZcw26XpzIX9AhwF9/M25
2O5vsFxsvn+tRPaNBNtvQn2PJROpyUXhZI+0tbT1Vfv8f0wmi0rHd7sq9DIy
ptzaByxxmb8zOQnLzUQdOYhLrEoNl2YcKVywxXhnkRHOpSPrC/UOuXltOiY0
ygtwONDD0NMmU5M/SFRsmnCfLNps1J3MXEydtCppQa2rfdSmW+YcPX5GEAar
TZxfu4FfhrkH1pL9MiMZ6WPrKSCkKJzFEj01ix8uSlJkBFmmRkMXjOVWJWrx
bZtftlj3nMl+oXMtjquzBtcuHNcxgOtvRwoXbjEuFpkmsZMDySJ+1bbSTAvh
ljGlAZkWrGISKXVsH8zGmMyVsCmu8P5ilJub2+ZjAaZl5hxry6mQium4H11L
juI+B8Q+IdAaHLEBDWK/uZMNjgd5pMYStJSTFtpOCv5mbVI0txa6uFChywu8
C4et7jLDizzueJA/PZ6xE3HebWK3K8XgfcYU39QYvVeV+ndKcI/k1Jw6fmqr
tWezrpsB6PsB0PcAA9ygLclqJ3Z8SbdFNhPWmOB5hK4dPvrZ1j6RhZXzQtCz
rHKe5I8QCN052br/4ZtAPO+8VPJV+X3hPalTR8SkbNEtNjfFhCSo51Ih6vH1
egm/VEpJ2BZmMSGb+k+VTsnG0rKvkV+qYmj80iGNX4rR7y2zcl1Q7wp+6Qw3
Se+P6GnTXN6wuUZtCPpvNnJ/WTy1+1t9ihooeJSupyCmqYVpdq6AafqFO6BL
L+oSinfp/tzlNHWL4FGh3jArpsR/yOMwwkQ2RpNzHNdgclb/0h9WJQtT3AgP
qTdwZt9DGXhIygs3iT82FXnIZjch1sCP2UKeagieKJiMRyKE4FTNbL9RowSP
uPqTiYy1FxC8WGySTR0G/xx6aclxNPutz7Of0Mx+Rb/+DyvXJSeI2cn6A2eu
PzQu108pRUkP44vJ31zahrs2ntTsx/9kFlmRlsSUFFpE/o5jEqPBxH+aJqm5
TBUDq/RnEphkUBO2Zf8DmEyDjDu8dswJhEmbBpPiUxpMcvVlD60onrfcAGXT
d0tO4knaZ5QvagDv6p94aFXiWapiGKD84eHhcv1LbvbMq9iM3bCAWM+foYkg
v2gU7pBn4YxspkBkQERNz+bUqbM7QUf1G/hZ7r8OjkGJ3G8az3xRW+2Z980W
XSoXPCtdSjh5vtTsr9zBIiuR1wnLLG2mPXVrIC2b6XCEGLbMqzn12OzbfE+h
QZsRqP5/YEDSBByTLA0muZ4RM7OZ84qILrKlzanPZ/dbe0YYUCdBl0vQxXwS
3iVH0+UPzyzosuC9AZ6pMXwtTe9kfGHP/I/PzKuIYMlMDcF5mj4tnqzZ2cwA
6/EEZt7NqXFzmkWXUNScbw1R06noSalWPpLhDpzkQQ3Jf86R5pYLMvd9RZDs
LDWbUFBYZlW0rFy/jb4MyVWmlbBtcAVkAJtE19hcjmwsyoSy2SzseDnKj2Rj
ryL5HR2rEXSuJj+aYnDrkRVl7dFF6vzoDyI/Wovyo7XcTZFFeaPzo4dl39wp
F2TcW6vOj84cFHhGjG/gDxbnHR2LAuptjdgKx6ppeCUoyi8XXFq0jqAhWGr2
1aPaB1bSr8AedbvPzkYK3KNRYJ85mlSnnDooeNQ8PoJQ4CwgVPCdbjY1VOQP
FNUjigKJ7Ohzlwoq1+YRyyia6HIHutj1QJeIJzqU3W2P7iBWdGtYkVSgUeX5
BkfLrSgb3yzCVdnCaOBMJ3NBuX65VpE7ZEcCZPtl7pAd2eHZkUCBRC0UaEQ9
laLOjo4srRJkM2OWG6mzo02b8OwoFsk5Rlp+T2sGZVR2tM3Axtrmkb9RvHpV
HGcH2dGGmJIqvRmuAsSbWRQ1b7oFGjdTR7WzeZRllEkQ2gaEhrSaZVN3P9Ep
Cb/j9RARWsbU2GyFhtAog3flVq5+gwShxUDovYol5fqS+7gB+EG4sG+z9uw2
cqOBNCtQuKDhFDpQ1Mr8Ymm3TTbzjPUEWGWLBHxXWEmnlN0ik2CyueYCqvBn
mPoNmvoXHOdCGzXO3zdSN9k8Ek44T+AsoyVs28UzyKb+/ETH1av7YAXCeVCD
s0utBudEg8wKq5Lgc4txnFdMGDjzsWJpuX4GrcJD4i+0Q8J55iHE2rQhTX+B
zHwsjvJWDcrfezfbZTN/K5pALPC2N6cunjdf5AnJ4bn7kG1n0uZOMLqoAzN7
49yq08z8m0F5hZXrjjvEzL/DzL8c9i3Xz6J9hJm78ZklS4SYrR54rHqYebke
PnOUZuYi73T7bGaWuQnhYHY0p/bN2wr8nTAZkCU1QBeRNpFfa7o88a6CLjkB
RBePkOZUO6cd1p5ckwZ+RkpDoY4WKUnaKFTZmU60lCswGRDRfu+ZNv2a/Z6V
dptt6lllOpxywZ2SUMLgroPT6Cq9ZyUNjSnpHr9npT1SqgSNUmHzNAKSUy/Y
PJKY5IGAMK7s3f7i95UNhH6BrO6uNMqm5omugZQO6iIfQ5irpvefA9RLNo8K
Te6yu3HEw8GtO+8Bt24SM40UVfQWMD4yDaf1Vw2tJ5dhTtnMAvYkQjA7m1O3
OF912aMPBtOCDKZZOnBf6xKgmnIadyq3dDVrBGdRZ7lARt9F0NgKseBT1UMr
0i7weROuJM9DNF7T0Mh30hjOIDXP5pHPpHZVVKQnbOveBAlEu+gXfVhGIsIu
6KMuEZ+7DFHvAlsm/U10OQddeqtnZlP/Blt7XO/9DuntG12Nrck12vPJ4OBj
q5LdOe6ErU0aOPNK70W5fg79T3fJ+mYnUJ56d7zLwOd9D4MTj62S9xQSXf6B
Lh/0ynwSwCuT9oJXLt7D7YwsGgBWFpnhrHylYeUhn0LnbOZ7azNC0/YC912m
2HjyzWJmAvc/Iu7PxLu8/cx9H2xhNrM3gOjiIQbuu8gFnv5mvzpp9hAzT/eM
WRH/ee9x4VuDc12abcSihOfTPBo+bz8OZS1Lz1up2bYcXH6aG3tBswP5sdpZ
9Le3Zueyt12c9OykZhPynd4gFRI5yE66Sh9/wvNFPY2nHsI5lAIcsjXsBQ4l
vHPnqzap2h4ItWYyBs5sXQh+ZKA5bRB1fafp6qLUdHUyTK+yoiT2ukO88zFn
0H7UPf7YqighpoQvGIpeCBoT4dq9EJc6vPxTT8vS9lGzmRL55VWA4GvXv208
q8yiaVKBqrveyXKrosR3f6RQSFg3A8NeL4lYJYzpEIdlUt213G42yqdNZLEr
JIa7H/fcGq6x7+JNm8RdSn/CvdfQ7tSknHtFUWbMSWhl/eB/muyt5bYrrcZ5
RU9emm+OcAWJXVmXk5bRAIUw+a1lCtlc7cnjWK9i/RSyIjoqxSQqyqYsqhbZ
ehyR3/SuWXhYIVtKvGhUyMaMhVLLfDF003UYx3ob+1jh0SB3DsykPBMy2EWs
il53N3PblQkKWT7dh2LuRnW1rTZj76vyipXzvjRCGGpdqctrUCo6ec/npK8S
Hu0Y6uIdc0al9tguHm2hUCeFxWY+8Up0M3Sx6cxJOxEndLOlrKjPvysf9GvN
SavXRtU3Tpfln8Jh3kukJVpujktrnKO8WU+YHmfkOY11CysVZeLViIBrTXv8
quMvVycC5o7aPh68z/j0dfH2m2StEp6rmd/Fc44KNITeRe0OV6uVnby5BQrZ
Il1E8u2lCpmxHirN36CQBdOg9Ge+t0I2DufZ3ESFbCJqaxnIhynpHmjOyP6P
le2Jh1qdA6VUwC03rM45cIiCSt7tzlG/kdgwUWT/p8MdiUsB/3/II/lmcEoh
W6I9im92ct5Ul1XCVXW12fMLm+cc7mEZCT6WjaO5obmkHTcS5AvTgDhd/5Gd
bqQ9WyDnPXdCbJUPdvGM1uCcP920t1EJ7wY7ea/nj2L02xtpJ4wIPl+pGTjd
4xy421PL7daGVudOXr8xrmkfD3c4DtXkdPKMJuCatu9K/50NyrmHFGX3CMKl
HXbL+hNPdjgHliFyHf2qnQO/poD27a7ocF7RfzONc064krS8ovpOk8N3aZw1
oIAJPTfSOGeRTt6tzks7ESycO9Et2TD+dH/cEPCv+nqa7xA2l+XixnezGWIv
Z1Tk1DgHvkeD7zpV7Rz1PelJDEtnRXPe5daPTcBbM7zapjgpV/j1O0edI/2J
6m92N9V8DActBcQuIXR2wcvAmpw03yiEjndrrtItJY3TBEhsbL0B9pDvCAL9
sFSRozR1jnqMy0va0X+3OlFc5xz1gPSUmCS/46Nf3e00390I+yvt19Nqd+Kl
pltpvjF4qeZ2GicRSss3dkDpMipV1OWnrf/KFhG5M0weO9xxK61+JV69FdYR
M9yan+Z7DcGFtd5Jqy9u20B+7yWrvlTqtqjitEK2b7RixMl5W+aMEmJLXprp
t+5W+lLDD6Ed4sN1sSdbFY39cyuVA528vrkjIf90DryAs2JZO7AZkBBj95zH
CkIlKYy6l4yHoa0FoYvg9fW7PblzlkvTOG+xfbafpXAUZPOQbPj0s95Wg/ov
pwndbMC6mxQVygVdvPEzwbhS6uZ2gWl2qZlWUf3Rrx0YZC4Czl9pykecr1X5
pBtpvsGodKrjRlpGEF5qzU3z7UL8OFwDnOnBS+0302p/XAm+q+nOMsXjFh7d
lEUrtWB7LG+60dh+a0ON48a6XeLW2ATldTDY67jpfjwEfgsvDVxWyO7pjmLj
ri7eg/Eqz5m3QZnXxXtuNYqrDXfSagNxFHvy00y3YfdHMErcnri0yTnK6ukI
RZOl+Q6PVlpwAE8pI9n1HbjHSBoffMm88J65nbwt05vBUHtyO3kf7ipkx5H+
xav0r55gXb34bs8Hv1bgUS/iAvLgtW2odBf4VtuOSgk919PWJwpdcSM+XN1b
YLIZYX24Hdw+jv/hJmDiT8C6jR15OOtoDsg/NA108VI5EdceJ3mZcM2Lbzgk
RTUNPAZjyaBWjXBN3y3XG8W3eV28vtnQf1UP9L//L0W8nZbxCscJFLxWjuMJ
zKsfp/YwvadBhWS4ezwM+tGidoqVHYmHQCOTSNUjZwYGOTQjT+3UxYtdpiib
OB8p2qkmx41KUAauCIa/UgcTnf4dPORC+kvesekRI9H56JEPFr8TObST1eDQ
7ucA2f0x4PYDX5BwK5A7rwAbXb9F6IZbj7gmd6j/TlrGPziva4Dr53AfVZeb
lqHyVnfSfPeit979eWm1Wbh6gAfjZOPWKwc45WgdaHIOvDE6RF4BVz92FEvj
5bzX85Am9O/s5MWFKspakEXda+jYtUzZD36XO9KJD8iGxtqCStvfVSxzG5Bd
R2HolS144yeENz4it/drSjwJnvwDCpG37oI37sBLpwCXV3gpAaS8n4zcKXjo
wI+oFHsV9PkPXB5H5ANXOhJDe5yj1j8hdPBKTf9piFnSUYQYVCpkAaN1Y3cX
70sTIQoaew/3zBuC+WpAUErEmyvV4AsDC21H8CZGUfaHiCA077LSqZO32ATp
ZfUHkPuUUXKU3cODrSOkKifxUi7kJgFEGxjOGWQ4fYdxwwl8jMegU6BNpXgp
AThRg5fugj2+QqXYAiglUUcSUw0Dvh3tID5CbsVhqTKX2w3KO4Dgz6D3HTc3
KMoOrVZFvqvtC7t4cx8rykJVXnDXXeX1Lt4PBqpQOS9RCUka3UwVSntyhmvA
80xdiCc+Hzt5F7SIbE5+fQgMlrMCWHUZpWlhhStIRzZC6jZQ9oGmCrN9p+SJ
G0As02RNDqVTnn04wkWZnk+1UfLAIdf1LuKfXuMW13o9rV7npb1u5JjYsDOI
3o8VIIkMvHQZ5L0aCgP5IM9vkTI4nIIRGzWGWJd4CICTcOBDEExFxFyKJ8Rc
rVtNcUo+effYK2tudPEuEHNfPr1ZqIpn8v5hiPmmbByDuYmLiQGGLn9OFmoS
T4IADo4ydgPIAY9B4Gi1hcQDU3HdsVIJTvgZENUIRA2UTTfHU9vqmhQ0adIG
M0N8khvilfgktTdX495+ECKAmMhXwxSyIyhla3FC2Sxeup0PaRN6+6oPdGc5
DnfnpEK2AW+LS1OUBRHTtF/Yj0/TUPdzIYrhYOe1eRP1RynJni7ea6dRPvDV
nbT1RjhafQlbCLQG1xIDtqaasXb9IJxv8NJ2pvXy5T1NF5Jw5oWu2ypBcu+P
kfNoM5Bm1EG6teUosKMGcmO6iUp55JCHxXbyHqjzMvmtoRpgVw2OZvHSdf2j
ovU5EPW+UeHHoFFR9gJHJaKO1o5GnyuvHo4ekC0ncl5gAlsflfKARb/irMxt
UMim4G3zDivK3hKdm5574Bn87k6ePUeCT375dACGE90f9nKUl/jurqKMRMOV
J6K9JgIHDv0NKd7OJnDOv6BsxPE0qEM16My9FjTEx33IlBbdbf1YqbQDC4nE
O4UdGaUvKyF4kREb4q+23xkCB71+E4FAfKJRKuL6Gzrej5zAxau9Rqn4MBt+
whO+Gkgiyj4Q5LTSjXEiyN5Nm4kxdoZGQdAYACfaybsxH9HaA3K4YErkv43y
+RuV14ExQURuAZq1Dy/t9FOUrSVoldTdVA2a4KeFol/zp5Pt/X6QSC5n4Xnl
Te+ORG/wI3g6f6Y9/0pTQahCNmu0dt3u4tnjjuReRfunRqV9J48e4WHAWpoY
epr0BfBtQ41zscnfhSMDThvP7qSiLF+FRU8c4Whud/LsRif+ryCn2aVeYfX3
+rXeTqs3VofpwauA6O8kXHubhyJxHJdXx5xsT4R874Bq7PYfJhAUXllHeC0I
l96oUJ2bdiKQYKR9+BeehHxf8twnqheqigTlB0DyFTFQejXNFPf7dl28NTdR
7ninC2LWCdwFHQZn1EfEMYhPn0iVeEDam9AzlPbTLiLvzk+rXY2WFPL8NM4e
IinPS6sPFxJcz28f9IMkslaMJ+SAGqcFd5LV+WknHqBlQA04FmTlf9I8Ri4T
nQPbR+sxrC3N6QTC7e0q2R5edx0N1gD5uylFld23Owx3OEdNf0JkhlflH8PB
DttJS4ENDTXDBmznwB9GZzmgyJ85c1f5oUFRZo2vws905DfWLAT7GaOatyme
qtL4BUrwh77ReCLSDmvjKILduWFOwKrrGyHJ8vYk8puXvPiJEfjoCTV9G5v2
nOxPFMudozpVyxv7ZXWJJ4HHWaRROcpSRdlqYtLM6tcmkpGK8wJSJgjq2xCn
G1Fi+hueGEFbRgievPdAnn8DT4cgRVq/WBUV2nOHa3LT6vUmDk4tcmD3KW3Y
jnOyfEqVQ/+6i3J92fqyVXKIhNuJNcHtNFOR6f+gTxtvC/KcKfJboEXTUX7a
D745dZzKYvdsUELYjacj/kH6Yz8kv5VmuokIWR8TOnYOQZqa8bcEFKIRVoi1
vV28G/O4qyEji5UvZLfw7CoUslxtK5SfVyqup5nuJPj9SXxJZSS3RYQHqFR4
ROrzg3K+0dH7bt1Le8fEFwTAmw/vVdpeswZfnaM4Zz8JV6Okwz9dxPkFC7L1
u4mR8xLeqToqHFXSlxtNxMFdKs3+GrloE9cVwLJCrAdJ4Z/iBMUhSJdi6f/e
FQAHkKrZKNpToIwF3/NRhVHdVhMfVcC9c0oJ+fRcSFDm4UuEO128Y454abec
96UZ4eu96xQI3VOwVj2xi0B3d4Jche6dy/9KCeU8e0N89FN18wqU9nIefQ37
GzfuvcPyvUvr5jYq53XyvjQlCDts8hIkAFnPrbRn4k7e+An8UXtCzlH/qCYZ
qqC5QYjYd7d6cKkyVqyQ6eC54K2l4ImnQMEBmrT+tQ0FAXUB7skhHbPD951a
h8C7E/4RZrv5Aa1pcrp4eEwYcyJ+TKmNuXe2vsG4uYld6u0Xc9932dxqmocs
a9bhzHo7ZatzVIMKpz4tzTbQlZrEUHCg/1Et4fZW1n30g4VDRgRur3Xgnfaq
vFNFTa9fOyxAQiS4JuY19sQpa65Domk2ylm/yEnzPQ4LuISmW/gCbg3aQUvp
2dPJo1miUkc+LG5m4W39kJB8D4WmBXLeVn2VwB39lOBctxI7h/FX5U7DNTdB
w2fjPRy7eEbGGHqzM6FnrrIfVuHBo/L0UoWsYhZwtf+QAlyNm8agh8B1+uJL
8o4bOFpbTEdh/SesUN/hzlZ+Pa32Mu4meqBN5TBgrdSHr+zlsGo0xxdz4Msz
LPASuPD1a22JTaGOD8MdkNJKVBP37B5uBbd2fyK+YoqV8z5sVJTF0lSLn5uH
+xOX1jgHOnxBbGOk1eIbnghD2Th8G2/+IYWsAU94HCDivkVN88C83+M7ezdA
c2Lxl06wTntC5EDggl/QL5U8DnzqxleGkx8rhxb2/+vyXc2/r9SdJie5ML8y
JNXid+sKhi5IMlnJ4xdhfVepWW8GwhWl+7xSSQTTOxyHa26lnditicaDfu2w
pF+uIr99aLgVXFIs7pwggD2DVdYPRqrlxZ4GJSQJN0ZbygfnwDI8ZnoDI5rw
jdJ8iKiv0Trv4wbw9u/xkrjaOaqC0NHmvPyOIb8mkOevo5avMdDt0ejQAAza
h2fKnyDvOYSzas8p0BC0U9ySB2vCk0S+3aiQheqbjmM13Ko4/Y3tiO29l7xx
qddaAn7/Ziih5NGAbcPc1Ozq3vEmXV+sC/tXJnMdsvcW+qjd27hO3vlZeIYs
lvNucjDCn8vth3vAGZWNcovVBbAMyMed9o0wcNoZUbj5tYJKqBZX+bCYPoSL
3Q4S3rejHcYN8M+maoPJG6rpg6U5YXYKMLsJqNQPxrYG5S4p7fldvD68rX0P
OEpM5fAcvWHBXu/5/xW/buDx6zlhjrlgwIQpx8t5k/cJLItNZib/7Lkn+rsZ
P//nu2jFb5EBe/Ykzyzx/Dn6ePImz593BCRHL3Eql2ybJ6NN/3vd1eghebxZ
7nOJbBvt3K1dJ29+KDi/x8zxJRaM3sfkt8uHrnbWux+0b/5V4nF1T2OiRbH7
3tIV9BPasn9ONYpLz8eaXbv7C9nizt3g031HepJlW4Rf3675YKLsb3R/58v9
VWJ5M/ov94N8KDEedNa5h9lyLX4kTe89+TpUcfVtvfsle39iYPe9bQ8p595y
J5wrjN0jlxfc32Vm3SM9Rz47/2qwmfVq0nZuisxftuUT7yzrx7dXxKWZlItS
lkWS+Y9v02Qu285P6D9Sp7cNzf5TjfzUcPSjcR4zuMXxk/qPtOpFnE/elv6y
q+e2PLGhjP6ttizqTo24jUHhnjVOJ9fIh84nDvexWw3TZ3AfKvL6T8u6j/x4
U1xqp4VovHtefO71DjPrxUmAyvrHgJQcu0A+e+fBDrNf++vc3wUDhfIdfwH2
EQT2txR7H8sLrkSaXWtA2Jve3GHmeOAb8fjNf2Fj2DfusY/WdSl/7GOb6AJ+
D4Nv97N7EKYPQ5362SXjM2kuMsb+becXWmifOR7xl3v5QskEhrkF5+zxYZll
ypbfw82u3ZecI1uckO8wu/YWjX/i5h6z3AeENLvrX3cMwRtrBc63GpCjYN7A
0qRIi3fKrRZRG/3PyJQKpSHLMBBdGR7+Hhs/Ubnj9K30X1/DGL/hQ3Q517wd
fhxulluIIYUo7Nlz8/3pq+K23ZbAq6THkRsvKOvc/57YfySaKUHM3vsgtn54
z1/u3rhUB0zbYz8ViEvdD4aBuAt2/HVBXNqNGP7PiRpx6TkKlCIazotLX2uh
NsUNcWkxaovaDezeDoXtC6BzLbA94vZ98V+JumbXvkKU/FgQanbNJ+ln8tk9
F4JLxo1iUlide/lKzGQkk0Bg0WbXIlHP9U2gnsOIY+vb482s10Cbxd6aXWaO
p7YjagcGX/cM3xSfaww2y1VK9iML2DPx6scCe7n0F/LZvMc7zP5QZB9Qac8J
ubKuj63Q8Z3BfRr6Ux/bzLGCYPs/Q43vP8n3mFnHoCkHr0Sb5XZiB0dIXNGo
nHBVXPrjSIWdavb+yM9JwELt/Pb4H5XRde4hkYXIEj42uv89qZ/9SA9pxY6G
PvbtJTO4v8VCIToaNHpHfV+w0nFvm9VZ3FSi14Gy3RWXZuB8nNAkLs3TGjXN
nT528kQ0VPyGfraBDjIKBSidE1K/4p5ToHT428h5/Ud+1rmISE16HO4sTwR8
8vrZP+tmpi/+zOy/6929GUjQEUOVewYL4s0cjZGWlMXPb//Q1CUu/UrrPAhx
Q3uk39emhQ/Ef7kzxcgDPN5R5+5ljXuAyDr3gwIoXXzeD283otJr8A/MdARX
A3Y0+6U5Mf77Ybm4dPcoYs4r+tgUvVHi397g7hU1ykYegrf4daSz+ANEZd2F
20oBCKkZlfbKQaM8kUate9DjyZQhusk1nUN3ExOA9ZMdZnDzYvcWTCGIW3+h
0+yxuG07chcvX8eevKC83XekDnk6bfGF+J+G+xvcu+ZzCbY07hm8+r7R/coU
wsl17RhC5sD8G3mJDpXzpGpZnmN/lpBJP3uTKfiepx2ncN+T91hcOogbyEkw
lfGo1J0PDu/sMeSOgMvul2YiBkY2uOvOE/6oe1aknd+0a76yQ9F3pOR27VbR
eZ10VsA6U1GuXNEUbWYdOcp1jgFTY4xWEfA81TjJH07cfYp9DTRXxedd/aDs
Y/8ECHQjBCISwGE2WnUIxydF/0g6zrrwa/QnMCPreGRQJx4DW4dwl9MOptVA
hJI94sfvC8AWHO+qHQugA11OAdNN5B/rpAT/Yicp5fXuVygW4w8Ivz519f3Q
1V1m1/5GLvbE41CzX2Pr3bv4GMHb5+HD7UBPnQTCTX5jJBhQtE46kpxFk3yi
XJkHyM4jfHYXuIBIM2t/HLsL4BA3I+zqK8PNrOdeIFvUV0KsOl3iHvIlrn/h
9e5W4aCcN8MbwV/9hVtSHthr0mjlAznxRivf3w3u7/6lfOCWhWiuO42hZtYb
cHcDjueaknBBe8yuiXG3JAc63kl2jNRS9+1goHtMIwjvciRPLm6LU8XD6J8K
IKLEmuU+Ipzyh3UPPhSAQ+Xj1J6qBAcGjO2XngcJPNilPMAwc3xGxO8u56b3
g1eDG9ytbJD5PQZTC0GkXo1tAFL7EKn/fPVAXLoFCXl743NxaQIqRdW9FrcN
qzzMnpvy0wBMxr33ndfi0hWUH0El78qHplnsLa0crUuDfWxPw1FMCgELLUfR
ILrxwlB7N9tkClK1/jt2D4hABnJ6gZsk6FNubtm89H21J0j/6fnUBKx8iUdQ
CLXXRDhTIRDnzlXFpasf/MBQ9OlXRjnVX/eAg4lHzuRBaL2718pCZHhvG9y3
n+pj83S2gc+LbugDK2NvmgSVh+8HUeVI9E6kjPMLoucrIUr04apcALP+gVA0
rQEF8oWAYFF/d1dBH9sA98xvF/Qf6VFnFtF3GhMbQ/AABmL5FmeholHc9sYC
LKb4dvqvlf2JYHdviLBXKS49OFq1wAKdkHMP3diPnHvps9G5zY+geTjX4hvs
ooiwBgF7EHt0m/oSbHHtgQNf/6jso2wtvHS0+aLkTeOHwXO47KoU4gv9C0GT
n+IT3wahNp8lcpT1N3v8wL8epo9yRSf72HW6I9KgrwAkh6JOg56DcdsTtr3h
ZqcfxBrnMWdH4vkXDY/1TkDqV/SskXKBRCmv78htnczkpsmcacXDiVMt2rXG
fz1QoFxGEpnTZn2NvfMb4//kfUHfgbHH382DwGOI4lM/hNk94/H0COS3B49Z
H+Dtd+N8USjc0A8yqhjl3qbfFLd5U94024+5fyBLefpA2S7pPothuXKl0Ecm
+sYCU3xJ9o0ZvCl+6TL1pxvitgyKBTh1F/muSTeVn8B/fEsfpc35fexNRqNz
snp3XUvc5wIHh4fDG9wrL6iquxYoIyEnrHcPmwe58sWunr/cB++bz275AsUN
l5rgDQ8SIX7xkgFz+QkkZ4imulNR56/3FkQ7K0Mb3dH3AayJ+63r9uu03GA2
FIUaz0+pE+xl3AxiUKBwkFQcatyHwSuxJGLd/oXCW7NcLbn1x8ynscIeNRsA
mKUOgJ2gAdgnCoAppQBmJ7o1q+QnACN5AxhrBoBxxgFYlTaAhWgB2I7kiHW0
GwBGeQdgojgAEzp/mxOUbh78l6CZBWAxDAALT4HRHF0AzGzJs2Nn0gCs2x2N
Nu3XvwRV320ONf57DID1I7CT316ZRVlrXn/szCUA818DYLdmjqkTNI+D0Xq1
Aew/U4LW0Z7DaMk7AKzo5uTQRz4bn94Iqp0DuPUaAZgbE8Cm7ofRJrgCCYcA
rKUSRkvfyqAT3zVAd4jPUNAd4gQWukOsR9whZksmWMrIM1iqC8Qi46Ney4+6
jmEHUCXYJiqXkYT+J1OWcEhEkfGPko9/UQHdLxZ8vl/si9p+E479b/eLVdd1
VY//+T3g/7WRiHvCNnxr/n+5J4wuAKPvNrCLMvFrvzrbhdopdLog0AcdojuH
0YLSXTXH4Aol2lGW6hN0LhwfUmeR1LYkM0Afv4LbWyYJeZZFYu+kVvFci9cu
EFhu+JNX8nK1o2FcKVYkZDFdpDrkA07JARQXPsP/x2QX0WTO+YXb9puQlxwP
Sz/rf8vcnGKbEST81r/R338fljGFS5unq/tGy6Y5XXq4hFJcyJy/WfNmxuF1
rIMBmS9rqZs4F/21FvP3h3FS5vIp6MqSnebK0k6K5trKOLJTRpDlYeLuTxbl
0LjDa5N+NqFRdZ9LkrBcrq7mMs0bTH3x59t9/npbjI9NzXiNCVmRNN3xzwGI
SzmMnV8yg+Vm6IQlf+mb7MRNDuMUNuu2oWEwPc0wfZphHu4TGm4xPmWJ31sK
eCcs0dp+LPPt/jPMgWZdS3TNBl3Swm87kQw1t538GN4Bx0Rnyafw+1HvhB1a
c7lThFvAk34tlEx+RV4ONJ4dg2i01FLTuN2UvCYj6OIVnMbNv1OWmjb6H5Oc
nSWczdfi2HHz0H2olFWa+1CV5pJ9a/eHjMXv8Vg5VZUH6G4ZcyWMY7naUgvd
aVqjutOUabz/P+NczCntK6oml9DcmmlUYTSLa0tX36SR7CqyItnj9ypeSPt0
t/M9syr064uE987QwyR6tcJF/FzpV/7VpobaFqf5T5Ity/V3UsalLlyfWcXm
UMu0bqJT2Rz8zOwbsub+hJ7IoVwgkXKoJTq0mZbVOpeytIum3MVKdEjTM4qs
ko1PEPc19WlxmZ2UGeX6MtJqUpTIoTCLFKlFVR/zXZhJmVcuOCgyJk7ebvan
/7gwq8hKZBxTUihznYNOXx7U3HBNctQcbZ3Mzimxoky4CHNA/XcaZZp+XpWO
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
GqlOhN/4Pyec2dw=
                    "]]|>, "orcInstance" -> 91482096, "orcModuleId" -> 
                    88718320, "targetMachineId" -> 72771520|>, 
                    139921645954880, 139921645954736, 139921645954816, 
                    139921645948928, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1f0c8917_583d_456a_b1cc_6fc9b7a417e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
0v8UNQoL/w4gzcAP
                    "]]|>, "orcInstance" -> 93534288, "orcModuleId" -> 
                    88946512, "targetMachineId" -> 90926016|>, 
                    139921645941280, 139921645940880, 139921645940960, 
                    139921645940736, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {32}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "27ad3a0edf58e754", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 16}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 16}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 16}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 102776, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 12, 17, 33, 59.839597`8.529563633103317}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzNVstNRDEMfOJIF1SyPVACEmcqpRdKgPNKw3yzEGkPL7HHTjwe78vbx+v7
03Vdnz+/5wutr9vv++ycfbs4bB/ZsfjqOh0XvYtrn+bB9tFa1cm1U++P7NX4
Kq6aVxqX4be8bvvlFA/durW61fKk1bMWp8Vz+eDyzuUnisvO3Xql/cjyW79T
qi9rnWz7WcW9X6frdqpPV7jIblXvtd6384idt/mquKs5ieKy79W8bOccs0v9
V3x3/VT7Vt/W/ZTqUavrrl62Ov3X75e+p6sHbRwWv71/q8cpf9w8VByWF8Jp
de9UHuv6qDhotX3EcF09W/VDmwfDb/VkfT/0rdq3+tDmhVbLGxf31PutcJk9
w0/zUc9P84/hpnNtpdPtu6rxVby2X1sdW+sr+kZ5sf013x6tKyoOyye9xzrv
Vl/X/b/mi2t3Cn9VFxa/1QF0ntYB4ap5uH6req77NZ1brv6ocd254cZt/Vx+
tfNQxUXnql+rGylOut/ywuUnOmd+a76f0pvV+6S4CF9dax1JV8oX5o++1fjI
rtW9lAfM3+2z0+fu/4P2vdhK9YThIXxk5+bD/Fh+p+f4qi9d3rH4apw0Hlrp
/wLVru0zN4+0Dml927nf8myV7/1K67Sau6u8Wh1n+a30OLVb8aqNx1bLP4TD
4ql5uHHWfcP8WVyGl85fV8dWuubee62bLK/T/Fjp1apfWzs3n9NzqeVDivMo
vrT67/J+VQdXj9v+dPl778/2U7uV/rn9e/o92L7qt+Jhyu91/d381HhpHNV+
HTedT62OIDvXT7VP46txWT7r+7e8SPUdrZTHbLXv0upLmtdqnqd9oOaJ7Fz8
VZxH1TXFOXXfdd1W78zyQX7tPF3Xta3nWkdcnFM6xvJx/VLc/3L/r9s3oCLU
DQ==
         "], 
        "Output" -> {
         False, True, False, False, False, True, True, True, False, True, 
          True, True, True, True, True, False, False, False, True, True, 
          False, True, False, True, False, False, True, True, False, False, 
          False, True, False, False, False, True, False, True, True, True, 
          True, False, True, False, False, True, False, False, False, False, 
          False, False, True, True, False, False, False, False, True, True, 
          True, False, True, False, True, False, False, False, False, True, 
          True, False, True, False, False, True, True, True, False, False, 
          True, False, True, False, True, True, True, True, False, True, 
          False, False, False, True, True, False, True, True, False, True, 
          True, True, False, False, False, False, True, False, True, False, 
          True, True, False, True, False, True, True, False, False, True, 
          True, False, True, False, False, False, True, False, True, True, 
          False, False, False, True, False, True, False, False, True, True, 
          False, False, False, False, False, True, False, True, True, True, 
          True, False, False, True, True, False, True, False, False, True, 
          True, True, True, True, True, True, False, False, True, True, False,
           True, False, True, True, False, True, True, True, True, False, 
          False, False, True, False, False, True, True, True, True, False, 
          True, False, False, False, True, False, True, True, False, False, 
          False, True, False, False}|>, 
      "Predictions" -> {
       False, True, False, False, False, True, True, True, False, True, True, 
        True, True, True, True, False, False, False, True, True, False, True, 
        False, True, False, False, True, True, False, False, False, True, 
        False, False, False, True, False, True, True, True, True, False, True,
         False, False, True, False, False, False, False, False, False, True, 
        True, False, False, False, False, True, True, True, False, True, 
        False, True, False, False, False, False, True, True, False, True, 
        False, False, True, True, True, False, False, True, False, True, 
        False, True, True, True, True, False, True, False, False, False, True,
         True, False, True, True, False, True, True, True, False, False, 
        False, False, True, False, True, False, True, True, False, True, 
        False, True, True, False, False, True, True, False, True, False, 
        False, False, True, False, True, True, False, False, False, True, 
        False, True, False, False, True, True, False, False, False, False, 
        False, True, False, True, True, True, True, False, False, True, True, 
        False, True, False, False, True, True, True, True, True, True, True, 
        False, False, True, True, False, True, False, True, True, False, True,
         True, True, True, False, False, False, True, False, False, True, 
        True, True, True, False, True, False, False, False, True, False, True,
         True, False, False, False, True, False, False}, 
      "LogProbabilities" -> CompressedData["
1:eJyllk8oRFEUxp83JVMWktEsJrGw0DRZsaUUCynNgv2YKUqZpcbGbFCyUbOw
s2OjrOx0b82CFDaUP6nXIDsjRYoFyrX4vfT1spim0733nO985zvnvK7cXLbg
e553/PX7/o8PnlTLU012Nln8KAbbJigVRjMD1lznspfPsQZ7fnFUq7S22IO9
WuK+sm54391z7/g+PV6vlprPTP9p+05H7MXQpv9gYndjrbxg/PhWPmhss/TH
c4fD4XJ+nN/F/Z7h+s2Y6Z5cfXr0Upb4GT+zdPi24ift/NDD9O1I3tA/7V+c
P7iIj++Ij/FUfOZD/LSJj/yzLpuJ1Gva67TLV3czve99oXPGYTziZV58T75c
Xi5PvqfeaNM/8+d94me+vM96kk+lD8VvqB9FPyh+otaL8YmfttK3qoeaN8yH
+qfNfFR/My/Vz8RD/l1dXZ0VPvKn8Kt8FP+qXgqfmr/kQ+mH+Imb/aX4UvVj
vqH9JeZ31H2g5rnSP885L9S8j6o3xY/c/6KfFB41n5SeFR/qXOFnP6v+oU09
qHmi5oHSq9KT2se02Y8qfzW/6I/5q3nNPRAVz3/rqfpB7WP1nvf/+k50NvkJ
8SfmidSP6A+lJ7UPlF7V99wn2rTIng==
       "], "CountMatrix" -> {{102, 0, 0}, {0, 103, 0}}, 
      "IndicesMatrix" -> {{{2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 22, 
         24, 27, 28, 32, 36, 38, 39, 40, 41, 43, 46, 53, 54, 59, 60, 61, 63, 
         65, 70, 71, 73, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 94, 95, 97, 
         98, 100, 101, 102, 107, 109, 111, 112, 114, 116, 117, 120, 121, 123, 
         127, 129, 130, 134, 136, 139, 140, 146, 148, 149, 150, 151, 154, 155,
          157, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 174, 175, 
         177, 178, 179, 180, 184, 187, 188, 189, 190, 192, 196, 198, 199, 
         203}, {}, {}}, {{}, {1, 3, 4, 5, 9, 16, 17, 18, 21, 23, 25, 26, 29, 
         30, 31, 33, 34, 35, 37, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 
         57, 58, 62, 64, 66, 67, 68, 69, 72, 74, 75, 79, 80, 82, 84, 89, 91, 
         92, 93, 96, 99, 103, 104, 105, 106, 108, 110, 113, 115, 118, 119, 
         122, 124, 125, 126, 128, 131, 132, 133, 135, 137, 138, 141, 142, 143,
          144, 145, 147, 152, 153, 156, 158, 159, 167, 168, 171, 173, 176, 
         181, 182, 183, 185, 186, 191, 193, 194, 195, 197, 200, 201, 202, 204,
          205}, {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {205}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00020169756097560977`, 
      "SingleEvaluationTime" -> 0.0016804375, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "cb2696ca-ed20-4cb1-9518-5a9585547b5e"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "205"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"100.0000000000000", "00", "22"}, 
                    "AroundSeq", SyntaxForm -> PlusMinus], 
                    Around[100.`3., 2.220446049250313080847263`3.*^-14]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    TemplateBox[{"50.2", "3.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    50.2439024390243886842`3., 3.5006585596115531445`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9482984504054426944`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051795947413136867`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.937939260922815321`3.", "\", \"", 
                    "0.9586576398880700678`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 0.937939260922815321`3.,
                     ", ", 0.9586576398880700678`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0530860051700925914`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0054619608261161287`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.042162083517860334`3.", "\", \"", 
                    "0.0640099268223248419`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 0.042162083517860334`3.,
                     ", ", 0.0640099268223248419`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.02`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"11.5`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{
                    0.8931471675891599, 0.5261448483899148, 
                    0.005319903559222008}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {
                    0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["102", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{102, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["103", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{103, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{102, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" example\"", "\"s\"", "\" of class \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{103, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "102", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{102, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "103", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{103, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["102", TraditionalForm]}, {0.5, 
                    FormBox["103", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["102", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["103", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DpACIYGuwhGBnA
xGDi6GrQ5XCJ4TMLXQ0uNi61pJiHSz+xZuMLA2z+wwWI0YNNDaEwxqYXnzgu
dfj8jksdLn3E2kkovAi5CV8YkuoeYvXh8y+u8MDmX2LjCps+XGKEzMZnByF3
4wszYvyCy/2kpg1ccYNLL+48BQBDMocX
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {320}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {320}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{32, 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{320}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 32, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 6}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_220c3873_ee66_41d7_911e_eb6aed3cb232", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
pF+uIr99aLgVXFIs7pwggD2DVdYPRqrlxZ4GJSQJN0ZbygfnwDI8ZnoDI5rw
jdJ8iKiv0Trv4wbw9u/xkrjaOaqC0NHmvPyOIb8mkOevo5avMdDt0ejQAAza
h2fKnyDvOYSzas8p0BC0U9ySB2vCk0S+3aiQheqbjmM13Ko4/Y3tiO29l7xx
qddaAn7/Ziih5NGAbcPc1Ozq3vEmXV+sC/tXJnMdsvcW+qjd27hO3vlZeIYs
lvNucjDCn8vth3vAGZWNcovVBbAMyMed9o0wcNoZUbj5tYJKqBZX+bCYPoSL
3Q4S3rejHcYN8M+maoPJG6rpg6U5YXYKMLsJqNQPxrYG5S4p7fldvD68rX0P
OEpM5fAcvWHBXu/5/xW/buDx6zlhjrlgwIQpx8t5k/cJLItNZib/7Lkn+rsZ
P//nu2jFb5EBe/Ykzyzx/Dn6ePImz593BCRHL3Eql2ybJ6NN/3vd1eghebxZ
7nOJbBvt3K1dJ29+KDi/x8zxJRaM3sfkt8uHrnbWux+0b/5V4nF1T2OiRbH7
3tIV9BPasn9ONYpLz8eaXbv7C9nizt3g031HepJlW4Rf3675YKLsb3R/58v9
VWJ5M/ov94N8KDEedNa5h9lyLX4kTe89+TpUcfVtvfsle39iYPe9bQ8p595y
J5wrjN0jlxfc32Vm3SM9Rz47/2qwmfVq0nZuisxftuUT7yzrx7dXxKWZlItS
lkWS+Y9v02Qu285P6D9Sp7cNzf5TjfzUcPSjcR4zuMXxk/qPtOpFnE/elv6y
q+e2PLGhjP6ttizqTo24jUHhnjVOJ9fIh84nDvexWw3TZ3AfKvL6T8u6j/x4
U1xqp4VovHtefO71DjPrxUmAyvrHgJQcu0A+e+fBDrNf++vc3wUDhfIdfwH2
EQT2txR7H8sLrkSaXWtA2Jve3GHmeOAb8fjNf2Fj2DfusY/WdSl/7GOb6AJ+
D4Nv97N7EKYPQ5362SXjM2kuMsb+becXWmifOR7xl3v5QskEhrkF5+zxYZll
ypbfw82u3ZecI1uckO8wu/YWjX/i5h6z3AeENLvrX3cMwRtrBc63GpCjYN7A
0qRIi3fKrRZRG/3PyJQKpSHLMBBdGR7+Hhs/Ubnj9K30X1/DGL/hQ3Q517wd
fhxulluIIYUo7Nlz8/3pq+K23ZbAq6THkRsvKOvc/57YfySaKUHM3vsgtn54
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
GwBGeQdgojgAEzp/mxOUbh78l6CZBWAxDAALT4HRHF0AzGzJs2Nn0gCs2x2N
Nu3XvwRV320ONf57DID1I7CT316ZRVlrXn/szCUA818DYLdmjqkTNI+D0Xq1
Aew/U4LW0Z7DaMk7AKzo5uTQRz4bn94Iqp0DuPUaAZgbE8Cm7ofRJrgCCYcA
rKUSRkvfyqAT3zVAd4jPUNAd4gQWukOsR9whZksmWMrIM1iqC8Qi46Ney4+6
jmEHUCXYJiqXkYT+J1OWcEhEkfGPko9/UQHdLxZ8vl/si9p+E479b/eLVdd1
VY//+T3g/7WRiHvCNnxr/n+5J4wuAKPvNrCLMvFrvzrbhdopdLog0AcdojuH
0YLSXTXH4Aol2lGW6hN0LhwfUmeR1LYkM0Afv4LbWyYJeZZFYu+kVvFci9cu
EFhu+JNX8nK1o2FcKVYkZDFdpDrkA07JARQXPsP/x2QX0WTO+YXb9puQlxwP
Sz/rf8vcnGKbEST81r/R338fljGFS5unq/tGy6Y5XXq4hFJcyJy/WfNmxuF1
rIMBmS9rqZs4F/21FvP3h3FS5vIp6MqSnebK0k6K5trKOLJTRpDlYeLuTxbl
0LjDa5N+NqFRdZ9LkrBcrq7mMs0bTH3x59t9/npbjI9NzXiNCVmRNN3xzwGI
SzmMnV8yg+Vm6IQlf+mb7MRNDuMUNuu2oWEwPc0wfZphHu4TGm4xPmWJ31sK
eCcs0dp+LPPt/jPMgWZdS3TNBl3Swm87kQw1t538GN4Bx0Rnyafw+1HvhB1a
c7lThFvAk34tlEx+RV4ONJ4dg2i01FLTuN2UvCYj6OIVnMbNv1OWmjb6H5Oc
nSWczdfi2HHz0H2olFWa+1CV5pJ9a/eHjMXv8Vg5VZUH6G4ZcyWMY7naUgvd
aVqjutOUabz/P+NczCntK6oml9DcmmlUYTSLa0tX36SR7CqyItnj9ypeSPt0
t/M9syr064uE987QwyR6tcJF/FzpV/7VpobaFqf5T5Ity/V3UsalLlyfWcXm
UMu0bqJT2Rz8zOwbsub+hJ7IoVwgkXKoJTq0mZbVOpeytIum3MVKdEjTM4qs
ko1PEPc19WlxmZ2UGeX6MtJqUpTIoTCLFKlFVR/zXZhJmVcuOCgyJk7ebvan
/7gwq8hKZBxTUihznYNOXx7U3HBNctQcbZ3Mzimxoky4CHNA/XcaZZp+XpWO
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
GqlOhN/4Pyec2dw=
                    "]]|>, "orcInstance" -> 91482096, "orcModuleId" -> 
                    88718320, "targetMachineId" -> 72771520|>, 
                    139921645954880, 139921645954736, 139921645954816, 
                    139921645948928, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1f0c8917_583d_456a_b1cc_6fc9b7a417e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
0v8UNQoL/w4gzcAP
                    "]]|>, "orcInstance" -> 93534288, "orcModuleId" -> 
                    88946512, "targetMachineId" -> 90926016|>, 
                    139921645941280, 139921645940880, 139921645940960, 
                    139921645940736, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {32}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "27ad3a0edf58e754", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 16}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 16}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 16}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 102776, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 12, 17, 33, 59.951392`8.530374244420665}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzNVstNRDEMfOJIF1SyPVACEmcqpRdKgPNKw3yzEGkPL7HHTjwe78vbx+v7
03Vdnz+/5wutr9vv++ycfbs4bB/ZsfjqOh0XvYtrn+bB9tFa1cm1U++P7NX4
Kq6aVxqX4be8bvvlFA/durW61fKk1bMWp8Vz+eDyzuUnisvO3Xql/cjyW79T
qi9rnWz7WcW9X6frdqpPV7jIblXvtd6384idt/mquKs5ieKy79W8bOccs0v9
V3x3/VT7Vt/W/ZTqUavrrl62Ov3X75e+p6sHbRwWv71/q8cpf9w8VByWF8Jp
de9UHuv6qDhotX3EcF09W/VDmwfDb/VkfT/0rdq3+tDmhVbLGxf31PutcJk9
w0/zUc9P84/hpnNtpdPtu6rxVby2X1sdW+sr+kZ5sf013x6tKyoOyye9xzrv
Vl/X/b/mi2t3Cn9VFxa/1QF0ntYB4ap5uH6req77NZ1brv6ocd254cZt/Vx+
tfNQxUXnql+rGylOut/ywuUnOmd+a76f0pvV+6S4CF9dax1JV8oX5o++1fjI
rtW9lAfM3+2z0+fu/4P2vdhK9YThIXxk5+bD/Fh+p+f4qi9d3rH4apw0Hlrp
/wLVru0zN4+0Dml927nf8myV7/1K67Sau6u8Wh1n+a30OLVb8aqNx1bLP4TD
4ql5uHHWfcP8WVyGl85fV8dWuubee62bLK/T/Fjp1apfWzs3n9NzqeVDivMo
vrT67/J+VQdXj9v+dPl778/2U7uV/rn9e/o92L7qt+Jhyu91/d381HhpHNV+
HTedT62OIDvXT7VP46txWT7r+7e8SPUdrZTHbLXv0upLmtdqnqd9oOaJ7Fz8
VZxH1TXFOXXfdd1W78zyQX7tPF3Xta3nWkdcnFM6xvJx/VLc/3L/r9s3oCLU
DQ==
         "], 
        "Output" -> {
         False, True, False, False, False, True, True, True, False, True, 
          True, True, True, True, True, False, False, False, True, True, 
          False, True, False, True, False, False, True, True, False, False, 
          False, True, False, False, False, True, False, True, True, True, 
          True, False, True, False, False, True, False, False, False, False, 
          False, False, True, True, False, False, False, False, True, True, 
          True, False, True, False, True, False, False, False, False, True, 
          True, False, True, False, False, True, True, True, False, False, 
          True, False, True, False, True, True, True, True, False, True, 
          False, False, False, True, True, False, True, True, False, True, 
          True, True, False, False, False, False, True, False, True, False, 
          True, True, False, True, False, True, True, False, False, True, 
          True, False, True, False, False, False, True, False, True, True, 
          False, False, False, True, False, True, False, False, True, True, 
          False, False, False, False, False, True, False, True, True, True, 
          True, False, False, True, True, False, True, False, False, True, 
          True, True, True, True, True, True, False, False, True, True, False,
           True, False, True, True, False, True, True, True, True, False, 
          False, False, True, False, False, True, True, True, True, False, 
          True, False, False, False, True, False, True, True, False, False, 
          False, True, False, False}|>, 
      "Predictions" -> {
       False, True, False, False, False, True, True, True, False, True, True, 
        True, True, True, True, False, False, False, True, True, False, True, 
        False, True, False, False, True, True, False, False, False, True, 
        False, False, False, True, False, True, True, True, True, False, True,
         False, False, True, False, False, False, False, False, False, True, 
        True, False, False, False, False, True, True, True, False, True, 
        False, True, False, False, False, False, True, True, False, True, 
        False, False, True, True, True, False, False, True, False, True, 
        False, True, True, True, True, False, True, False, False, False, True,
         True, False, True, True, False, True, True, True, False, False, 
        False, False, True, False, True, False, True, True, False, True, 
        False, True, True, False, False, True, True, False, True, False, 
        False, False, True, False, True, True, False, False, False, True, 
        False, True, False, False, True, True, False, False, False, False, 
        False, True, False, True, True, True, True, False, False, True, True, 
        False, True, False, False, True, True, True, True, True, True, True, 
        False, False, True, True, False, True, False, True, True, False, True,
         True, True, True, False, False, False, True, False, False, True, 
        True, True, True, False, True, False, False, False, True, False, True,
         True, False, False, False, True, False, False}, 
      "LogProbabilities" -> CompressedData["
1:eJyllk8oRFEUxp83JVMWktEsJrGw0DRZsaUUCynNgv2YKUqZpcbGbFCyUbOw
s2OjrOx0b82CFDaUP6nXIDsjRYoFyrX4vfT1spim0733nO985zvnvK7cXLbg
e553/PX7/o8PnlTLU012Nln8KAbbJigVRjMD1lznspfPsQZ7fnFUq7S22IO9
WuK+sm54391z7/g+PV6vlprPTP9p+05H7MXQpv9gYndjrbxg/PhWPmhss/TH
c4fD4XJ+nN/F/Z7h+s2Y6Z5cfXr0Upb4GT+zdPi24ift/NDD9O1I3tA/7V+c
P7iIj++Ij/FUfOZD/LSJj/yzLpuJ1Gva67TLV3czve99oXPGYTziZV58T75c
Xi5PvqfeaNM/8+d94me+vM96kk+lD8VvqB9FPyh+otaL8YmfttK3qoeaN8yH
+qfNfFR/My/Vz8RD/l1dXZ0VPvKn8Kt8FP+qXgqfmr/kQ+mH+Imb/aX4UvVj
vqH9JeZ31H2g5rnSP885L9S8j6o3xY/c/6KfFB41n5SeFR/qXOFnP6v+oU09
qHmi5oHSq9KT2se02Y8qfzW/6I/5q3nNPRAVz3/rqfpB7WP1nvf/+k50NvkJ
8SfmidSP6A+lJ7UPlF7V99wn2rTIng==
       "], "CountMatrix" -> {{102, 0, 0}, {0, 103, 0}}, 
      "IndicesMatrix" -> {{{2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 22, 
         24, 27, 28, 32, 36, 38, 39, 40, 41, 43, 46, 53, 54, 59, 60, 61, 63, 
         65, 70, 71, 73, 76, 77, 78, 81, 83, 85, 86, 87, 88, 90, 94, 95, 97, 
         98, 100, 101, 102, 107, 109, 111, 112, 114, 116, 117, 120, 121, 123, 
         127, 129, 130, 134, 136, 139, 140, 146, 148, 149, 150, 151, 154, 155,
          157, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 174, 175, 
         177, 178, 179, 180, 184, 187, 188, 189, 190, 192, 196, 198, 199, 
         203}, {}, {}}, {{}, {1, 3, 4, 5, 9, 16, 17, 18, 21, 23, 25, 26, 29, 
         30, 31, 33, 34, 35, 37, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 
         57, 58, 62, 64, 66, 67, 68, 69, 72, 74, 75, 79, 80, 82, 84, 89, 91, 
         92, 93, 96, 99, 103, 104, 105, 106, 108, 110, 113, 115, 118, 119, 
         122, 124, 125, 126, 128, 131, 132, 133, 135, 137, 138, 141, 142, 143,
          144, 145, 147, 152, 153, 156, 158, 159, 167, 168, 171, 173, 176, 
         181, 182, 183, 185, 186, 191, 193, 194, 195, 197, 200, 201, 202, 204,
          205}, {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {205}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00008692682926829268, "SingleEvaluationTime" -> 
      0.0020238125, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.86922158804959*^9, 3.869221713139295*^9, 3.869221916584944*^9, 
   3.869221949016221*^9, 3.8692219949471207`*^9, {3.869222057606943*^9, 
   3.8692220713339243`*^9}, 3.8692254296954308`*^9, {3.869227070722014*^9, 
   3.8692270775786343`*^9}, {3.8692775584383593`*^9, 3.869277584282023*^9}, 
   3.869280268335588*^9, 3.869280411917354*^9, 3.869280831560107*^9, 
   3.8692809874689207`*^9, 3.869281066352899*^9, 3.8692811724409447`*^9, 
   3.869281425928671*^9, 3.869281499910817*^9, 3.869281551694984*^9, 
   3.869281835979891*^9, 3.869282043779932*^9, 3.8692847524226227`*^9, 
   3.869284805759396*^9, 3.869293452523674*^9, {3.8692944587734823`*^9, 
   3.869294466449047*^9}, 3.869296784945951*^9, 3.869296856376144*^9, 
   3.8692994406780653`*^9, 3.8692996693200827`*^9, 3.869302407155458*^9, 
   3.8693025154415073`*^9, 3.869302623316126*^9, 3.869310317773045*^9, 
   3.8693107637484093`*^9, 3.86931084016854*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"e49e7f21-9a24-43d8-a344-8514cef1d8c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"2690b326-fb91-4c09-a746-\
cb42f085f60a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}, {3.869227140760223*^9, 3.869227149194792*^9}, {
   3.8692798649790173`*^9, 3.869279876404379*^9}, {3.8692987446359167`*^9, 
   3.8692987456828957`*^9}, 3.869298793152401*^9},
 CellLabel->"In[60]:=",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", "targetEncoder", "]"}], ",", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"Last", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869284839496479*^9, {3.8692934957441673`*^9, 3.86929350723984*^9}, 
   3.8692935774265747`*^9, {3.869293613088286*^9, 3.8692936550243273`*^9}, {
   3.8692944972849493`*^9, 3.869294556962762*^9}, {3.869294872582518*^9, 
   3.869294912979456*^9}, {3.869294971357285*^9, 3.8692950293879957`*^9}, {
   3.869295060242984*^9, 3.8692950718682213`*^9}, {3.869297055293254*^9, 
   3.869297056155302*^9}, {3.8692987230967207`*^9, 3.8692987318391743`*^9}, 
   3.8692996779039917`*^9, {3.869300234495809*^9, 3.869300238804558*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{
  3.869277655279928*^9, {3.869277716385961*^9, 3.8692777380640306`*^9}, {
   3.869277958266292*^9, 3.86927796811233*^9}, {3.869278386117118*^9, 
   3.869278386462037*^9}, {3.869278514787964*^9, 3.86927851825823*^9}, {
   3.8692787116732492`*^9, 3.869278752387225*^9}, {3.869279742103284*^9, 
   3.869279791698346*^9}, {3.869281009188909*^9, 3.869281010497501*^9}, {
   3.869281858882139*^9, 3.869281912459756*^9}, {3.8692848378347797`*^9, 
   3.869284838188376*^9}, {3.8692986858888702`*^9, 3.869298692159895*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],

Cell[BoxData["0.6390243902439025`"], "Output",
 CellChangeTimes->{
  3.869277655728921*^9, 3.8692777398939238`*^9, {3.869277961128234*^9, 
   3.869277975777204*^9}, {3.869278396867972*^9, 3.869278403423416*^9}, {
   3.869278519441985*^9, 3.869278527085862*^9}, 3.8692785861522217`*^9, {
   3.8692786808131857`*^9, 3.869278753533243*^9}, {3.869279737898945*^9, 
   3.869279778640175*^9}, 3.869279838973418*^9, 3.8692800459075193`*^9, 
   3.8692802751783533`*^9, 3.869280419231905*^9, 3.869280592951248*^9, 
   3.869280843385973*^9, 3.869280875003345*^9, {3.869280994982608*^9, 
   3.869281015596586*^9}, 3.8692810720085907`*^9, 3.869281188587433*^9, 
   3.869281430589746*^9, 3.8692815550880527`*^9, {3.869281840830484*^9, 
   3.869281913552459*^9}, 3.869282051422833*^9, {3.869282208214678*^9, 
   3.869282269960136*^9}, 3.869284759001915*^9, 3.869284809015271*^9, 
   3.869293522176825*^9, {3.8692936307127657`*^9, 3.869293649166299*^9}, 
   3.8692945145288267`*^9, 3.869294902705243*^9, {3.869294977740821*^9, 
   3.86929501781463*^9}, 3.869295074333514*^9, 3.869296798831221*^9, 
   3.869296862842252*^9, 3.869297060097459*^9, 3.869298727034895*^9, 
   3.869299448462125*^9, 3.869299679648573*^9, {3.869300226050564*^9, 
   3.869300241717463*^9}, 3.869300594867757*^9, 3.869301452973411*^9, 
   3.8693020566590233`*^9, 3.869302245640436*^9, 3.8693024155863953`*^9, 
   3.8693025205611877`*^9, 3.869302629413692*^9, 3.869304499493321*^9, 
   3.869305018304846*^9, 3.869305387224924*^9, 3.869305656074689*^9, 
   3.869310325943562*^9, 3.869310769831406*^9, 3.869310846048052*^9, 
   3.869311233953961*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"aeda4591-74c9-41ee-b29b-5477b969b753"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"Last", "[", "#", "]"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "testData"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}, {3.8692787783714046`*^9, 
  3.869278787906781*^9}, {3.8692948373831453`*^9, 3.869294848226471*^9}, {
  3.869298696937389*^9, 3.8692987383197727`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.869278789622883*^9, 3.8692804206876087`*^9, 3.869280848042408*^9, {
   3.8692809962303677`*^9, 3.869281024988372*^9}, 3.869281073128274*^9, 
   3.869281189739897*^9, 3.869281431738426*^9, 3.86928155628786*^9, 
   3.869281841834961*^9, 3.869282052670763*^9, 3.8692847599449587`*^9, 
   3.869284810292136*^9, 3.8692936592620487`*^9, 3.869294848924099*^9, 
   3.869295075551647*^9, 3.869296799752571*^9, 3.869296864065097*^9, {
   3.8692986986071157`*^9, 3.869298738736906*^9}, 3.869299449532473*^9, 
   3.869299680960174*^9, 3.869300242854801*^9, 3.869300595945923*^9, 
   3.869301454574747*^9, 3.869302064899097*^9, 3.869302248427836*^9, 
   3.869302416939876*^9, 3.869302521702746*^9, 3.869302630550453*^9, 
   3.869305019568828*^9, 3.8693053909142237`*^9, 3.869310327258253*^9, 
   3.8693107709371634`*^9, 3.8693108470289307`*^9, 3.869311235483984*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"8299f67e-fdc8-45cb-9f62-fd4eff17a12b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],

Cell[BoxData[
 TemplateBox[{"0.0390625`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869278792689138*^9, 
   3.8692804220574636`*^9, 3.8692808499930363`*^9, 3.869280998755859*^9, 
   3.869281074256464*^9, 3.869284760836566*^9, 3.869293660792145*^9, 
   3.8692968012889338`*^9, 3.869296866349676*^9, 3.869299451366023*^9, 
   3.869299682477159*^9, 3.869300597023597*^9, 3.8693026329139*^9, 
   3.8693050205921583`*^9, 3.869305391619213*^9, 3.8693103289215813`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"82f9bf7d-78c0-402d-ba8a-638070c6e6b6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9, 3.869296803018434*^9, 
   3.869299459793828*^9},
 CellLabel->
  "In[200]:=",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"0a2ce80a-fe81-4612-966f-\
edb1d9a9f984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Target\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}, {3.869293711665983*^9, 
  3.8692937224093533`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.45], 
               PointSize[0.13], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], {
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "10", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {10.77890625, {0., 10.77890625}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               GrayLevel[0.45], 
               PointSize[0.13], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], {
                GrayLevel[0.7], 
                
                PointBox[{{-0.9815166384819979, 
                 0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, AspectRatio -> 1, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, Background -> GrayLevel[0.94], 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, 
             PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True, 
             PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "10", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["160", "SummaryItem"]}]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 160, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "Input" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|"FeatureNames" -> {"Input"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 1|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 160, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>,
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Standardize", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                    0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                   "StandardDeviation" -> {0.4952508833914383, 
                    0.49964831381682856`, 0.4999609359740019, 
                    0.49859176687947826`, 0.4999609359740019, 
                    0.4998437255783051, 0.49964831381682856`, 
                    0.49859176687947826`, 0.49859176687947826`, 
                    0.4999609359740019}, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBMQPO/CFib1JlAgAAAAoAAAAKAAAAXuTX22F5r7/WgkQq5drZP+ion5ec
4Hy/m4cV4Z0p5L9xuBzUGZ+zv/35NRqHfrC/pTWsf5Lp1L88LDLmNITWv0t0
WqoA7du/5Nl0JYAasj8keSaAJKLWvwAefRovCtm/sa1Fmpo2bD8TGTM++x/M
P+qxYbhZ8LI/72QoELJA27/Du+69cnDhv+rxaUBM784/5sBgjKsQ17/bNiX5
/rGjP1bcul72b9k/ZV+F6H6n2T/3BceDii7Rv8BOJLTpZbe/G6fUlC8yqj9K
fZ08g1vCv/VBNj605ti/cnuklanc4j+jEvEKN/nRPzitU5akmHs/5XSjGAq9
078Fi/tr3QXAP+dbLDK3JtQ/XsYugtodwz8NXwTf2/jTv/JRW7UzeOQ/AnMw
npcP3b8BynzZNVm0P3FBYhUwocg/yw1OCb+ouz/mwBiNFSTbvznIinwzPt8/
ip5cBI7rwr/QAACw0gzSP8Z26dBrosQ//FpetFbmqr/7M7ZpRQOqP21AGJkp
Haa/zMsvoSPZmb/6zTYatWLlv4epktZ76ro/nkp0smqoz78NAW5RgwnWP1qc
RJqzONe/uacrv+Tr4T+oNYKgSK3VP2ijyltAoZ6/DtAOQuQy0j8/JcRRa0jC
v+6/GtmAiti/dnu9Jjkth78G5kuiOF/cvzdzwy2WPuG//RabBfFC0L90z5QT
H9jBvzAt7J1zncA/qeHyTeL80b+2On1WR+XRv0qb+d69U9Y/U2oEzO9b17/l
GtdKbI3Sv11tUvHfZ6C/FK9zWgJ+3T+LrhIIdAHZvztEp+HrBdG/PK3cR2kB
3b852EE9mfu7P+QvB/S5fMA/Tq6EQdom3j+9ucqxsYjDvzv/QDxWqtu/Cour
LZT2tT/IgzvvS2vHv3bi0LuxRL2/K5qd5jDw4z/qnn+N5VSEP7/UX/Sjo4e/
t2+0vlzqu78uZCT40LPXP5vQaZ0KI94/BOnyIkBK2b+wEMaI/fCrvwgcSflv
9di/4HzexD1k0r8h8DLstAHRv5+2ffHrIss/0ulb3qVL2D8pUd8qVsXgP9+5
K8Zd3c+/XTZQ3n94uT+3+LIO
                   "], 
                  "Precisions" -> {0.7257174478060948, 0.7980900832683177, 
                   0.8714991822739657, 0.8935443606188151, 0.9304648215319101,
                    1.0709663859255598`, 1.1255499499187143`, 
                   1.2640914768101463`, 1.3745785065496414`, 
                   1.4571090277638326`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.00009585191189936116, \
-0.000026002148434818574`, 
                    0.0004825802401201562, -0.0005366240962883858, \
-0.00022208729013047728`, -0.0003670023338188111, 0.00021840859062624424`, 
                    0.0006710405718560929, 
                    0.0008348456504142656, -0.0006369960470426359}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6590044052364615545|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 10, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {-0.0000958519118993556, -0.00002600214843478388,
                     0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                   "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 10, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   4154342778301398384|>], "InputDimension" -> 0, 
                "OutputDimension" -> 10, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, 
                    "ID" -> 6072081202834183359|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.111475, "MaxTrainingMemory" -> 3204752, 
                  "DataMemory" -> 15760, "FunctionMemory" -> 35056, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 12, 12, 48, 42.754424`8.383556037572742}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.9848310120311979, -0.9848310120311979, \
-0.8884471454831475, -0.7517462237678633, -0.6354660134088475, \
-0.5656403763149495, -0.511145001827811, -0.48625869883714107`, \
-0.4859572129774997, -0.45176085615485134`, -0.4334777402766434}, 
                   "LeftBoundary" -> -0.8884471454831475, "LeftScale" -> 
                   0.04819193327402521, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[6.194730281079952, 0.6114759665574782], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 895810465636885430|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
              0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
             "StandardDeviation" -> {0.4952508833914383, 0.49964831381682856`,
               0.4999609359740019, 0.49859176687947826`, 0.4999609359740019, 
              0.4998437255783051, 0.49964831381682856`, 0.49859176687947826`, 
              0.49859176687947826`, 0.4999609359740019}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5750822634109734636|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 6153537743509581873, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 335429500972439703|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       False -> 0.5123456790123456, True -> 0.48765432098765427`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Target", "Order" -> {"Input", "Target"}|>], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
GpR+tOLK7GLh/zSU4aU=
                "], "Biases" -> 
               RawArray["Real32",{0.007586608175188303, 
                 0.004130740184336901, -0.003439494641497731, 
                 0.0011237405706197023`, 
                 0.0015705602709203959`, -0.006614836398512125, \
-0.0018645193194970489`, -0.0019555322360247374`, 0.003394663566723466, 
                 0.0054919905960559845`, -0.00010034607839770615`, 
                 0.012683391571044922`, -0.004204754717648029, 
                 0.0018647263059392571`, -0.004093781113624573, 
                 0.0025232837069779634`, -0.010073653422296047`, \
-0.00446350546553731, -0.0005600734730251133, 
                 0.0027902403380721807`, -0.006823718082159758, \
-0.006846791598945856, 0.0032366779632866383`, 
                 0.004454604350030422, -0.007528161164373159, 
                 0.002654435345903039, 0.009209441021084785, 
                 0.0034437868744134903`, 0.0028226024005562067`, 
                 0.003014068817719817, 
                 0.006908661685883999, -0.00495754973962903, \
-0.0019600426312536, 0.0005209469236433506, 0.0006473163957707584, 
                 0.0013040441554039717`, 
                 0.00005686868462362327, -0.0014400897780433297`, 
                 0.005742934532463551, 
                 0.0076113673858344555`, -0.003591280896216631, 
                 0.000705207756254822, 0.003198676509782672, 
                 0.0007772960816510022, -0.012217092327773571`, 
                 0.011351937428116798`, -0.0017649834044277668`, \
-0.006030149757862091, -0.006369924638420343, 0.001736971433274448}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               10, "$InputDimensions" -> {10}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
4w==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.0026186557952314615`, -0.0016987576382234693`, 
                 0.0014968644827604294`, -0.003594791516661644, 
                 0.00006177173054311424, 0.003362583229318261, 
                 0.0002820208901539445, 
                 0.00363851897418499, -0.0010246483143419027`, 
                 0.009928206913173199, -0.004033091478049755, \
-0.002561482833698392, -0.004127171356230974, -0.0008917942177504301, \
-0.002043253742158413, 0.00002712264540605247, 0.00258741551078856, 
                 0.005019847769290209, 0.005651443265378475, 
                 0.0007637562230229378, 0.0010623190319165587`, 
                 0.005563205108046532, -0.001955776009708643, 
                 0.008689261972904205, -0.007955365814268589, \
-0.007604903541505337, 0.004579477943480015, 
                 0.0012351189507171512`, -0.005790797062218189, 
                 0.00014774220471736044`, -0.005985989235341549, \
-0.005370402242988348, 0.002337882062420249, -0.0027976972050964832`, 
                 0.004389017820358276, 
                 0.0014165359316393733`, -0.002496752655133605, \
-0.002623909153044224, 0.003312438726425171, 
                 0.003665399271994829, -0.004828959703445435, \
-0.0013859589817002416`, -0.0018373954808339477`, 
                 0.003334455192089081, -0.000723132339771837, 
                 0.0020369216799736023`, 
                 0.0006338009843602777, -0.0011910079047083855`, \
-0.008230804465711117, 0.0015584765933454037`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACFuCk+srunvdFpET5IMYE9GxuCPd1OzD3aaHE9XdbovULFbr6l
3Ng9SVU2vnFPQr5LPVu8pwm+PS9wBjyQTIk+dFDTPEXntDyKWdk9CXkfPl7B
Kz7JNxs+JZMSvrEJFz6yWUy+22BXvJ5Gtz1deu28y+/mveMy2D3eGxy+uIOC
vSc9BD27p/K9LLT+Owzicz3YfR2+/FgvPQH/fr68mR8+IysdPKmaBr4uYIw6
5Q5VPAoJtj2le0S9gdw9PZLKez4g1Ba+5/SXPefcML64OnK8SlScPfFmgj2b
C809sueWPK2TWT2FcQO+WdgovjV4hj1YtDs9DvewPFz3bT7g7Ks+H9cJPhhn
P74Asjg+/ib1vdN1WL2YWk++HymcvC681z2VUlk7kixEPaNv57yDyfQ90fz9
vJS8Tr6qL9Q7XmoPvmGoyjuIYQg+zzdJvgsfCj1VcZe9o2qvvADykbwvgDU9
J6uWvualST2WeCU+2SJ3PDpCRj5uCi69PoLnPR7lQr5Qwb09fV+0Plc7aL2+
1JG9zf/D2w==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.0024223430082201958`, -0.002422342775389552}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.90165, "MeanInputsPerSecond" -> 
        21294.2937947097|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {-0.0005023999945228452, 0.00007433176593497834, 
              0.0006188508015755739, -0.00008477018728076658, 
              0.0008792203394160481, 
              0.000050793602720121404`, -0.0000839088388257775, 
              0.0007638920487112067, 
              0.0003070956565740468, -0.000670738065477329}, 
             "StandardDeviation" -> {1.0007197495535074`, 1.0001870458459403`,
               0.9994399444092847, 0.9993622913548977, 0.9996632371621096, 
              1.0005274002904267`, 0.999976989224157, 1.0004247198328566`, 
              0.9998659727781949, 0.999493083073257}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5627578033704932426|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "FeatureNumber" -> 10, "Calibrator" -> None, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3100, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15000000000000002`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.3856`6.037682018726764, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
         Around[0.5606106804399626, 0.1231054725977526], "EvaluationTime" -> 
         0.0009882117688026185, "TestSize" -> 32, "ModelMemory" -> 60368, 
         "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 128, 
         "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 398040, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.7132941076513983, 0.05803780225416599]}, 
         "AccuracyHistory" -> {
           Around[0.5606106804399626, 0.08704871447504557]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3100, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 160|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.1745278727732025`, 0.710660934850662], "Accuracy" -> 
              Around[0.44625604829418686`, 0.055180203926597934`], 
              "EvaluationTime" -> 0.0011804791017922904`, "TestSize" -> 152, 
              "ModelMemory" -> 56272, "ModelUtility" -> -5.342420477746496, 
              "TrainingSize" -> 8, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 444792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.1745278727732025`, 0.5025131661572743]}, 
              "AccuracyHistory" -> {
                Around[0.44625604829418686`, 0.03901829638375395]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0011804791017922904`, "MeanCrossEntropy" -> 
             Around[5.1745278727732025`, 0.710660934850662], "ModelMemory" -> 
             56272, "TrainingMemory" -> 444792, "TrainingTime" -> 
             8.221921916437788|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5455176631156329`, 0.26344121636134366`], "Accuracy" -> 
              Around[0.538237052163241, 0.06146290488827804], 
              "EvaluationTime" -> 0.0027539657749461486`, "TestSize" -> 130, 
              "ModelMemory" -> 60368, "ModelUtility" -> -3.032111100078587, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 371824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5455176631156329`, 0.18628107053313855`]}, 
              "AccuracyHistory" -> {
                Around[0.538237052163241, 0.0434608368379252]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
              "ModelMemory" -> 60368, "ModelUtility" -> -1.3623460347423109`, 
              "TrainingSize" -> 128, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 398040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7132941076513983, 0.05803780225416599]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.877479549546502, 0.38858605004838054`], "Accuracy" -> 
              Around[0.48303078358727053`, 0.0553376762000866], 
              "EvaluationTime" -> 0.0009325096914738674, "TestSize" -> 152, 
              "ModelMemory" -> 60368, "ModelUtility" -> -4.159693500103897, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 295744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.877479549546502, 0.274771831063705]}, 
              "AccuracyHistory" -> {
                Around[0.48303078358727053`, 0.03912964609618665]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0009325096914738674, "MeanCrossEntropy" -> 
             Around[2.877479549546502, 0.38858605004838054`], "ModelMemory" -> 
             60368, "TrainingMemory" -> 295744, "TrainingTime" -> 
             1.4328569182838289`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6469707462070442`, 0.4678470098200977], "Accuracy" -> 
              Around[0.46970158953087165`, 0.12379214994859225`], 
              "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
              "ModelMemory" -> 91752, "ModelUtility" -> -3.1590714144018075`, 
              "TrainingSize" -> 128, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 397088, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6469707462070442`, 0.33081779320164034`]}, 
              "AccuracyHistory" -> {
                Around[0.46970158953087165`, 0.08753426868631149]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.7842704102204543`, 0.6679427217107834], "Accuracy" -> 
              Around[0.5482043846458831, 0.06094984786979444], 
              "EvaluationTime" -> 0.0007286039311515623, "TestSize" -> 130, 
              "ModelMemory" -> 91752, "ModelUtility" -> -4.781770803778026, 
              "TrainingSize" -> 30, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 375896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.7842704102204543`, 0.47230682796589385`]}, 
              "AccuracyHistory" -> {
                Around[0.5482043846458831, 0.04309805074102009]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007286039311515623, "MeanCrossEntropy" -> 
             Around[3.7842704102204543`, 0.6679427217107834], "ModelMemory" -> 
             91752, "TrainingMemory" -> 375896, "TrainingTime" -> 
             4.526167090380248|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.675985439182979, 0.5662912603643842], "Accuracy" -> 
              Around[0.4605210292572121, 0.05557979016574277], 
              "EvaluationTime" -> 0.0005803592023889151, "TestSize" -> 152, 
              "ModelMemory" -> 162320, "ModelUtility" -> -5.277154515730969, 
              "TrainingSize" -> 8, "TrainingTime" -> 1., "TrainingMemory" -> 
              601512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[4.675985439182979, 0.4004283903303328]}, 
              "AccuracyHistory" -> {
                Around[0.4605210292572121, 0.039300846523122095`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8112304544476486, 0.13894358697675882`], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.003125, "TestSize" -> 32, "ModelMemory" -> 
              162320, "ModelUtility" -> -1.90781856606398, "TrainingSize" -> 
              128, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              610848, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8112304544476486, 0.09824795255364903]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
             Around[0.8112304544476486, 0.13894358697675882`], "ModelMemory" -> 
             162320, "TrainingMemory" -> 610848, "TrainingTime" -> 
             2.573656764742709|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9285852429250843`, 0.6492543638659594], "Accuracy" -> 
              Around[0.5303076501369324, 0.12379201079532379`], 
              "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32, 
              "ModelMemory" -> 60368, "ModelUtility" -> -3.458660847734166, 
              "TrainingSize" -> 128, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 388616, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9285852429250843`, 0.459092163404578]}, 
              "AccuracyHistory" -> {
                Around[0.5303076501369324, 0.08753417029009174]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.251416473534061, 0.7820778441733018], "Accuracy" -> 
              Around[0.511000315694987, 0.06081556351355926], 
              "EvaluationTime" -> 0.0012545825726770717`, "TestSize" -> 130, 
              "ModelMemory" -> 60368, "ModelUtility" -> -4.982374472419596, 
              "TrainingSize" -> 30, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 298792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.251416473534061, 0.5530125470306977]}, 
              "AccuracyHistory" -> {
                Around[0.511000315694987, 0.04300309736211893]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0012545825726770717`, "MeanCrossEntropy" -> 
             Around[4.251416473534061, 0.7820778441733018], "ModelMemory" -> 
             60368, "TrainingMemory" -> 298792, "TrainingTime" -> 
             11.369217701071342`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.570761773346241, 0.747586201055562], "Accuracy" -> 
              Around[0.5005419461081866, 0.0614169849836683], 
              "EvaluationTime" -> 0.0007078621353105369, "TestSize" -> 130, 
              "ModelMemory" -> 162320, "ModelUtility" -> -5.248145453637503, 
              "TrainingSize" -> 30, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 620672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.570761773346241, 0.5286232722878775]}, 
              "AccuracyHistory" -> {
                Around[0.5005419461081866, 0.04342836656198421]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007078621353105369, "MeanCrossEntropy" -> 
             Around[4.570761773346241, 0.747586201055562], "ModelMemory" -> 
             162320, "TrainingMemory" -> 620672, "TrainingTime" -> 
             13.030868074309083`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.570022988477733, 0.47056125103694063`], "Accuracy" -> 
              Around[0.46808812170326913`, 0.055391654477629025`], 
              "EvaluationTime" -> 0.0010729982529474953`, "TestSize" -> 152, 
              "ModelMemory" -> 99728, "ModelUtility" -> -4.667976437863389, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 466072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.570022988477733, 0.332737051571846]}, 
              "AccuracyHistory" -> {
                Around[0.46808812170326913`, 0.03916781450227367]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.6244495740942417`, 0.48773046377476875`], "Accuracy" -> 
              Around[0.5909137107429928, 0.12195270099035052`], 
              "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32, 
              "ModelMemory" -> 99728, "ModelUtility" -> -3.172558737016106, 
              "TrainingSize" -> 128, "TrainingTime" -> 1., "TrainingMemory" -> 
              495688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.6244495740942417`, 0.34487751832639874`]}, 
              "AccuracyHistory" -> {
                Around[0.5909137107429928, 0.08623358185429224]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0012440849079796785`, "MeanCrossEntropy" -> 
             Around[1.6244495740942417`, 0.48773046377476875`], "ModelMemory" -> 
             99728, "TrainingMemory" -> 495688, "TrainingTime" -> 
             1.8809573444801932`|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[6.033033423949699, 0.7752242879962036], "Accuracy" -> 
              Around[0.45343777380296446`, 0.05538878083813811], 
              "EvaluationTime" -> 0.0005377730260816514, "TestSize" -> 152, 
              "ModelMemory" -> 99728, "ModelUtility" -> -5.708634968507651, 
              "TrainingSize" -> 8, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 447448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[6.033033423949699, 0.5481663509826286]}, 
              "AccuracyHistory" -> {
                Around[0.45343777380296446`, 0.03916578253230296]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005377730260816514, "MeanCrossEntropy" -> 
             Around[6.033033423949699, 0.7752242879962036], "ModelMemory" -> 
             99728, "TrainingMemory" -> 447448, "TrainingTime" -> 
             10.35078643439093|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[8.21220490974844, 0.9380313896761981], "Accuracy" -> 
              Around[0.45328643244984645`, 0.05573477005721432], 
              "EvaluationTime" -> 0.0006231480990112045, "TestSize" -> 152, 
              "ModelMemory" -> 185360, "ModelUtility" -> -6.424714064252742, 
              "TrainingSize" -> 8, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 766064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[8.21220490974844, 0.6632883566058805]}, 
              "AccuracyHistory" -> {
                Around[0.45328643244984645`, 0.039410433855329184`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006231480990112045, "MeanCrossEntropy" -> 
             Around[8.21220490974844, 0.9380313896761981], "ModelMemory" -> 
             185360, "TrainingMemory" -> 766064, "TrainingTime" -> 
             13.030868074309083`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3100|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.1697124352322645`, 0.5842252170709464], "Accuracy" -> 
              Around[0.515670025051118, 0.06149043644573219], 
              "EvaluationTime" -> 0.0006124725700823033, "TestSize" -> 130, 
              "ModelMemory" -> 56272, "ModelUtility" -> -4.363456613895947, 
              "TrainingSize" -> 30, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 275280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.1697124352322645`, 0.4131096127310489]}, 
              "AccuracyHistory" -> {
                Around[0.515670025051118, 0.04348030458889766]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.71315214729188, 0.08135402189964082], "Accuracy" -> 
              Around[0.5606106804399626, 0.1231054725977526], 
              "EvaluationTime" -> 0.003125, "TestSize" -> 32, "ModelMemory" -> 
              56272, "ModelUtility" -> -1.467224702434685, "TrainingSize" -> 
              128, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              355120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.71315214729188, 0.05752598056203491]}, 
              "AccuracyHistory" -> {
                Around[0.5606106804399626, 0.08704871447504557]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
             Around[0.71315214729188, 0.08135402189964082], "ModelMemory" -> 
             56272, "TrainingMemory" -> 355120, "TrainingTime" -> 
             3.753003305505267|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 160, 
      "PreprocessorEvaluationTime" -> 3.59375*^-6, "PreprocessorMemory" -> 
      49544, "InputDimension" -> 10, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6928423179977401, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869297370424875`16.34020709736964*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 8.12172683094538, 
          "ElapsedTimes" -> 17.449253000000002`, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 11.602466901350537`, 
          "ElapsedTimes" -> 13.665400000000002`, "ExperimentCounts" -> 5|>, <|
         "TrainingSizes" -> 128, "TimeBudgets" -> 16.57495271621505, 
          "ElapsedTimes" -> 16.218941, "ExperimentCounts" -> 6|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, "ID" -> 
           6049509919062986817|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 48.925742, 
      "MaxTrainingMemory" -> 13959504, "DataMemory" -> 109616, 
      "FunctionMemory" -> 284600, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 12, 12, 49, 31.527207`8.251260478943298}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9, 
   3.869293712698818*^9, 3.869293771584032*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"ed75754f-b9ec-4db8-96c1-d9b71427f486"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Target\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}, {
  3.8692937803386793`*^9, 3.869293781129095*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "df702fc8-9357-4d06-854d-c965acc04380"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "40"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"55.", "8."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    55.0000000000000071054`3., 7.9662750681569294287`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"60.", "8."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[60.`3., 7.844645405527375992`3.]], ")"}], "\"%\"", 
                 "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.4641594659226853103`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0378565480912961549`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.3884463697400930005`3.", "\", \"", 
                   "0.5398725621052775647`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.3884463697400930005`3., 
                   ", ", 0.5398725621052775647`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.7675271092416309227`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0814692065102869956`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.6045886962210569315`3.", "\", \"", 
                   "0.9304655222622049138`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.6045886962210569315`3., 
                   ", ", 0.9304655222622049138`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.81`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"518.`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                 FractionBox["\"Examples\"", "\"Seconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 0.42, 0.}, {0.8978700888752068, 
                  0.5214532201704827, 0.005084762522782647}}, {{
                  0.8978700888752068, 0.5214532201704827, 
                  0.005084762522782647}, {0.9091744743232819, 
                  0.7728144692269537, 0.4277701645673613}}}, {{0, 0}, {2, 
                  2}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6875`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5499999999999999`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.4583333333333333}], 
                    Row[{"Recall = ", 0.6875}], 
                    Row[{"FScore = ", 0.5499999999999999}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "True", 
                    "\" misclassified as \"", "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.5416666666666666}], 
                    Row[{"Row fraction = ", 0.5416666666666666}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.3125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.3125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.3125}], 
                    Row[{"Row fraction = ", 0.3125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5499999999999999`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " examples of ", True, " correctly classified"}], 
                    Row[{"Precision = ", 0.6875}], 
                    Row[{"Recall = ", 0.4583333333333333}], 
                    Row[{"FScore = ", 0.5499999999999999}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", "False"},
                     "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6875`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 0.6875}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" of class \"", "True"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 0.4583333333333333}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4583333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 0.4583333333333333}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 0.6875}]}], "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["24", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["24", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->181.2,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 160, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "Input" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|"FeatureNames" -> {"Input"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 1|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 160, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 10|>|>,
                     "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                    0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                    "StandardDeviation" -> {0.4952508833914383, 
                    0.49964831381682856`, 0.4999609359740019, 
                    0.49859176687947826`, 0.4999609359740019, 
                    0.4998437255783051, 0.49964831381682856`, 
                    0.49859176687947826`, 0.49859176687947826`, 
                    0.4999609359740019}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwBMQPO/CFib1JlAgAAAAoAAAAKAAAAXuTX22F5r7/WgkQq5drZP+ion5ec
4Hy/m4cV4Z0p5L9xuBzUGZ+zv/35NRqHfrC/pTWsf5Lp1L88LDLmNITWv0t0
WqoA7du/5Nl0JYAasj8keSaAJKLWvwAefRovCtm/sa1Fmpo2bD8TGTM++x/M
P+qxYbhZ8LI/72QoELJA27/Du+69cnDhv+rxaUBM784/5sBgjKsQ17/bNiX5
/rGjP1bcul72b9k/ZV+F6H6n2T/3BceDii7Rv8BOJLTpZbe/G6fUlC8yqj9K
fZ08g1vCv/VBNj605ti/cnuklanc4j+jEvEKN/nRPzitU5akmHs/5XSjGAq9
078Fi/tr3QXAP+dbLDK3JtQ/XsYugtodwz8NXwTf2/jTv/JRW7UzeOQ/AnMw
npcP3b8BynzZNVm0P3FBYhUwocg/yw1OCb+ouz/mwBiNFSTbvznIinwzPt8/
ip5cBI7rwr/QAACw0gzSP8Z26dBrosQ//FpetFbmqr/7M7ZpRQOqP21AGJkp
Haa/zMsvoSPZmb/6zTYatWLlv4epktZ76ro/nkp0smqoz78NAW5RgwnWP1qc
RJqzONe/uacrv+Tr4T+oNYKgSK3VP2ijyltAoZ6/DtAOQuQy0j8/JcRRa0jC
v+6/GtmAiti/dnu9Jjkth78G5kuiOF/cvzdzwy2WPuG//RabBfFC0L90z5QT
H9jBvzAt7J1zncA/qeHyTeL80b+2On1WR+XRv0qb+d69U9Y/U2oEzO9b17/l
GtdKbI3Sv11tUvHfZ6C/FK9zWgJ+3T+LrhIIdAHZvztEp+HrBdG/PK3cR2kB
3b852EE9mfu7P+QvB/S5fMA/Tq6EQdom3j+9ucqxsYjDvzv/QDxWqtu/Cour
LZT2tT/IgzvvS2vHv3bi0LuxRL2/K5qd5jDw4z/qnn+N5VSEP7/UX/Sjo4e/
t2+0vlzqu78uZCT40LPXP5vQaZ0KI94/BOnyIkBK2b+wEMaI/fCrvwgcSflv
9di/4HzexD1k0r8h8DLstAHRv5+2ffHrIss/0ulb3qVL2D8pUd8qVsXgP9+5
K8Zd3c+/XTZQ3n94uT+3+LIO
                    "], 
                    "Precisions" -> {0.7257174478060948, 0.7980900832683177, 
                    0.8714991822739657, 0.8935443606188151, 
                    0.9304648215319101, 1.0709663859255598`, 
                    1.1255499499187143`, 1.2640914768101463`, 
                    1.3745785065496414`, 1.4571090277638326`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.00009585191189936116, \
-0.000026002148434818574`, 
                    0.0004825802401201562, -0.0005366240962883858, \
-0.00022208729013047728`, -0.0003670023338188111, 0.00021840859062624424`, 
                    0.0006710405718560929, 
                    0.0008348456504142656, -0.0006369960470426359}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 6590044052364615545|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 10, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {-0.0000958519118993556, \
-0.00002600214843478388, 
                    0.00048258024012009935`, -0.0005366240962883885, \
-0.0002220872901304509, -0.00036700233381877433`, 0.00021840859062626644`, 
                    0.0006710405718561214, 
                    0.0008348456504143454, -0.0006369960470426414}, 
                    "StandardDeviation" -> {0.9994830176439881, 
                    0.9994762044040622, 0.9999165235575326, 
                    0.9996411381088086, 1.0008781861972393`, 
                    0.9999896043691929, 1.0002561936817158`, 
                    1.0003024538807717`, 0.999273305652646, 
                    1.0004398496085913`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 10, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    4154342778301398384|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 10, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, 
                    "ID" -> 6072081202834183359|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.111475, "MaxTrainingMemory" -> 
                    3204752, "DataMemory" -> 15760, "FunctionMemory" -> 35056,
                     "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 12, 12, 48, 42.754424`8.383556037572742}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-0.9848310120311979, -0.9848310120311979, \
-0.8884471454831475, -0.7517462237678633, -0.6354660134088475, \
-0.5656403763149495, -0.511145001827811, -0.48625869883714107`, \
-0.4859572129774997, -0.45176085615485134`, -0.4334777402766434}, 
                    "LeftBoundary" -> -0.8884471454831475, "LeftScale" -> 
                    0.04819193327402521, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.194730281079952, 0.6114759665574782], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 895810465636885430|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {0.56875, 0.48125, 0.50625, 0.4625, 0.50625, 
                 0.5125000000000001, 0.51875, 0.5375, 0.4625, 0.50625}, 
                "StandardDeviation" -> {0.4952508833914383, 
                 0.49964831381682856`, 0.4999609359740019, 
                 0.49859176687947826`, 0.4999609359740019, 0.4998437255783051,
                  0.49964831381682856`, 0.49859176687947826`, 
                 0.49859176687947826`, 0.4999609359740019}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5750822634109734636|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 6153537743509581873, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 335429500972439703|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          False -> 0.5123456790123456, True -> 0.48765432098765427`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Target", "Order" -> {"Input", "Target"}|>], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwVi3k0lvkbxnlFQimjTEm2sSVLZGzP936YNPSmUikZ08hefpHIkKbFErJF
iFI5r2xlKSHb+70fJMswpYhKnEwSFUWGMWR+zR+f61yfc51L1f3obm+eiIhI
kOTX2O0WYh0Y6HZij8R/4uV2xNjoyH+j0VekvuIXtgF3BrsKXa4t4hxGvsCf
L11YK51H6GhUjaUrPMhoryqJ/1GC8/kZGI3i7YQXlQwbP8Ti8X4Zqq5RDA5r
eFj/0ImoL5OhJ0oOCL3T9CFtgx53A57U+Z6JwlnDRNw8I0Cvh6sg1fJPkpIr
g5XTdTBpokkUHA+CdmsrLM3lUMPdAHfXIpo4akGP02rGbjcPrbkY0Nk8x4gm
JePt+cvwRvEEeVXohvtC+XgoZy02hPCgxTib5mcXkEbFfjL9pJPkhkmyp6Q0
qMBSHB4pK0L49Odan1Ip+G2bFKu8yRQ+CqxhbLM1BLt+IbM6CShTKWCc/f2J
zycDNv97Vug5PkRnr77GVqUaZGw0cUnKLzRNpZ8x0b+LAeqVwqWfunCmvpCs
GCCk3PcE1S6VRHeL/5HK7hdkblRAHAcrsLzHDn0GWkAD1VmDoiacaBVn98sY
wPVjNWhE9eFF7hXKa4jDTplNJKYgEXQWWXBPD85COa8N1GpaqOzihjrpuJMw
7TJOfzX1A8k3b+mFdx3QuUuK85hfQp3VqkEo50y5ckWwuJOHx063Q7t8FaQ6
LeIOfZcjHI+Mo5KnRXG86SbsO8NHLUsKDuwYiO9IwbjDnZCsmoj9QcpM2tA/
NLBFCaIreOB7JYnMfFrHTvZOUq3qdVjiLcCp9SuweoSAtOcpTCBdJHh2FSs9
mA7Nr1qYNXYK1MLsM7Yle3KlH/twNLuBPJorJykioVDqloqHixMIbyYaT4UU
k9T72lBTVUz/PpmFQyv2EPu9t4nW3Qbc+qwb8sP0MHtTGyFrgvDBfAu4eRQD
o1sL0rZvwPDJOeTPq4CGoAVHVvbCv3QM72+RIHx9HSaULAfL30OI/2QHXV3X
KnQeyIX5Qxq1ebqdMLkhjip4JoChiTwxXVoBbOx+mmkySg81+wkvb/kJ+aEC
4Q5+DNXNKENt1hF5CiGQZKiME3PPcHiogfgJbIl+nwE5erS1LjxiDJyF59G+
6wiszT9P7rUtCLv4PJL6WZd5l/sGki/bQWXiaZQYsobYph3Cy383QzAnCgFG
QaQwUgLGvJ1o6IWv/zt8+lfZAJj1ZFNj/mMSXTiF4cEDmOmrij/wo0hRqgxR
EG2HiO4EYqysj6pTi+mBpQuWZzXjoN5LkQRu8Sf+2S+pm2cyPB4+zHrZeNA9
SpOoviuGBjj0QHB9Ad15+iIo7NTjirKvkzKFWAy2TaizapggddAMXE8KJl+L
Rx3vQch72kxLCtPIeFs5Dt9chS0Zh7jWhxJsFvcchvbO0572PCIrKAIJu43M
u/Q6kH27kp2Tf08C9p3GiWAbsjrIAt2e1eDmMkOy5r0ScCmeeE85Hn3PigkH
/JXxgeZ74Nevhu6rfbiz6SLkN5tjrokLPPgsxuZXCFBb7zFGZH4Pd20zcGJY
m4syl+c6JvvpkEQehk6oscyudJJTVYYvL/aSdtsqdDjQB4ukqnFjxwyVNTTn
YhaqiYr6tNDU9jJm/pVJVYILMbpLjTvldQWULNazDjaroEs8nNn6/AIpqW6H
C6U87HztQ5UjKHWLtMEk80AiZi8Kui/OkcJtCXjGSYCurD1Ix0ehPDZD2DsP
vGVVhl7xtmgQKULv/DRFTyoososT6shBs2x4ZfMtTIvLcK9qvmXu1caB5Nhy
oVjfd1iF7jQkSgHl0m5AePptcNGShes1zlhstJgbiS1AqydzIPXBGMyLKsj9
8B3C/qtJOPPFgXyIYGGSd4V5P/DQokTCFqam3DFZLgb46Xo4FnOJpFk9xLDs
IFwfJs+NblNGMTGWbpxUwcNpy8G+cQ5EhgvxRMgfdNdKV8wwN8N4hQH8Y0KO
9K6co6ITy7im4UzIvK2JpU9MUDurAUtSVtC1kW8ZT1c5TGB/IX5K1vhz7i34
QbwXsNIRL9ms4c7GxmJ/gDPJXZ6Hsg+a8KOWHG0MHwEzz2W010CD2+kwgrmi
3Xi1RgPvRT4lFq6ncGFDB+5PvASCqhAsdJaEwXOJEPNPAhY1FOK27W30hpwI
uzZgG0xdWkzOOydghFMz4zsuyqr9mgT7a1MxcOs7/EbrX5g+Z4x7LnWAbJML
nD9+BNx3L617YNKNHzLM2btnt2OK23qi5X0D7gxkEwcXU4z3FDLs4HOq/fs2
GNyoCNM39uFymxTL2EkDTvOTN9aHT5Ome+qMfZ8P6nqsJN0TekxBvCirMucP
bsVvYMNwKwmIU8eCkDJ0GAyF3Iq3ZEfOTWZ4NIek4xl0dS+hcVmVKB+iykUs
+9ovvyDemuvQViOMuvq0YVejOHobikNvQBbY1N+nahgP4ksWMR9Vt+Ld1wsk
e+9rGui1BLpldISzNqPMKzkBNt8yg9Fb+hB0rQhXRWaBiF8ORE+eg98EUbDQ
d5252M3nksJTaXRLBpHvvYja/BqcjTiGa4MV2ILjIdAYPUz2pKnRRtMB8qVD
GpR+tOLK7GLh/zSU4aU=
                   "], "Biases" -> 
                  RawArray["Real32",{0.007586608175188303, 
                    0.004130740184336901, -0.003439494641497731, 
                    0.0011237405706197023`, 
                    0.0015705602709203959`, -0.006614836398512125, \
-0.0018645193194970489`, -0.0019555322360247374`, 0.003394663566723466, 
                    0.0054919905960559845`, -0.00010034607839770615`, 
                    0.012683391571044922`, -0.004204754717648029, 
                    0.0018647263059392571`, -0.004093781113624573, 
                    0.0025232837069779634`, -0.010073653422296047`, \
-0.00446350546553731, -0.0005600734730251133, 
                    0.0027902403380721807`, -0.006823718082159758, \
-0.006846791598945856, 0.0032366779632866383`, 
                    0.004454604350030422, -0.007528161164373159, 
                    0.002654435345903039, 0.009209441021084785, 
                    0.0034437868744134903`, 0.0028226024005562067`, 
                    0.003014068817719817, 
                    0.006908661685883999, -0.00495754973962903, \
-0.0019600426312536, 0.0005209469236433506, 0.0006473163957707584, 
                    0.0013040441554039717`, 
                    0.00005686868462362327, -0.0014400897780433297`, 
                    0.005742934532463551, 
                    0.0076113673858344555`, -0.003591280896216631, 
                    0.000705207756254822, 0.003198676509782672, 
                    0.0007772960816510022, -0.012217092327773571`, 
                    0.011351937428116798`, -0.0017649834044277668`, \
-0.006030149757862091, -0.006369924638420343, 0.001736971433274448}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
4w==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.0026186557952314615`, -0.0016987576382234693`, 
                    0.0014968644827604294`, -0.003594791516661644, 
                    0.00006177173054311424, 0.003362583229318261, 
                    0.0002820208901539445, 
                    0.00363851897418499, -0.0010246483143419027`, 
                    0.009928206913173199, -0.004033091478049755, \
-0.002561482833698392, -0.004127171356230974, -0.0008917942177504301, \
-0.002043253742158413, 0.00002712264540605247, 0.00258741551078856, 
                    0.005019847769290209, 0.005651443265378475, 
                    0.0007637562230229378, 0.0010623190319165587`, 
                    0.005563205108046532, -0.001955776009708643, 
                    0.008689261972904205, -0.007955365814268589, \
-0.007604903541505337, 0.004579477943480015, 
                    0.0012351189507171512`, -0.005790797062218189, 
                    0.00014774220471736044`, -0.005985989235341549, \
-0.005370402242988348, 0.002337882062420249, -0.0027976972050964832`, 
                    0.004389017820358276, 
                    0.0014165359316393733`, -0.002496752655133605, \
-0.002623909153044224, 0.003312438726425171, 
                    0.003665399271994829, -0.004828959703445435, \
-0.0013859589817002416`, -0.0018373954808339477`, 
                    0.003334455192089081, -0.000723132339771837, 
                    0.0020369216799736023`, 
                    0.0006338009843602777, -0.0011910079047083855`, \
-0.008230804465711117, 0.0015584765933454037`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACFuCk+srunvdFpET5IMYE9GxuCPd1OzD3aaHE9XdbovULFbr6l
3Ng9SVU2vnFPQr5LPVu8pwm+PS9wBjyQTIk+dFDTPEXntDyKWdk9CXkfPl7B
Kz7JNxs+JZMSvrEJFz6yWUy+22BXvJ5Gtz1deu28y+/mveMy2D3eGxy+uIOC
vSc9BD27p/K9LLT+Owzicz3YfR2+/FgvPQH/fr68mR8+IysdPKmaBr4uYIw6
5Q5VPAoJtj2le0S9gdw9PZLKez4g1Ba+5/SXPefcML64OnK8SlScPfFmgj2b
C809sueWPK2TWT2FcQO+WdgovjV4hj1YtDs9DvewPFz3bT7g7Ks+H9cJPhhn
P74Asjg+/ib1vdN1WL2YWk++HymcvC681z2VUlk7kixEPaNv57yDyfQ90fz9
vJS8Tr6qL9Q7XmoPvmGoyjuIYQg+zzdJvgsfCj1VcZe9o2qvvADykbwvgDU9
J6uWvualST2WeCU+2SJ3PDpCRj5uCi69PoLnPR7lQr5Qwb09fV+0Plc7aL2+
1JG9zf/D2w==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.0024223430082201958`, -0.002422342775389552}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 0.90165, "MeanInputsPerSecond" -> 
           21294.2937947097|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {-0.0005023999945228452, 0.00007433176593497834, 
                 0.0006188508015755739, -0.00008477018728076658, 
                 0.0008792203394160481, 
                 0.000050793602720121404`, -0.0000839088388257775, 
                 0.0007638920487112067, 
                 0.0003070956565740468, -0.000670738065477329}, 
                "StandardDeviation" -> {1.0007197495535074`, 
                 1.0001870458459403`, 0.9994399444092847, 0.9993622913548977, 
                 0.9996632371621096, 1.0005274002904267`, 0.999976989224157, 
                 1.0004247198328566`, 0.9998659727781949, 0.999493083073257}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5627578033704932426|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 10, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3100, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15000000000000002`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.3856`6.037682018726764, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
            Around[0.5606106804399626, 0.1231054725977526], "EvaluationTime" -> 
            0.0009882117688026185, "TestSize" -> 32, "ModelMemory" -> 60368, 
            "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 128, 
            "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 398040, 
            "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
              Around[0.7132941076513983, 0.05803780225416599]}, 
            "AccuracyHistory" -> {
              Around[0.5606106804399626, 0.08704871447504557]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3100, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 160|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.1745278727732025`, 0.710660934850662], "Accuracy" -> 
                 Around[0.44625604829418686`, 0.055180203926597934`], 
                 "EvaluationTime" -> 0.0011804791017922904`, "TestSize" -> 
                 152, "ModelMemory" -> 56272, 
                 "ModelUtility" -> -5.342420477746496, "TrainingSize" -> 8, 
                 "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 444792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.1745278727732025`, 0.5025131661572743]}, 
                 "AccuracyHistory" -> {
                   Around[0.44625604829418686`, 0.03901829638375395]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0011804791017922904`, "MeanCrossEntropy" -> 
                Around[5.1745278727732025`, 0.710660934850662], "ModelMemory" -> 
                56272, "TrainingMemory" -> 444792, "TrainingTime" -> 
                8.221921916437788|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5455176631156329`, 0.26344121636134366`], 
                 "Accuracy" -> Around[0.538237052163241, 0.06146290488827804],
                  "EvaluationTime" -> 0.0027539657749461486`, "TestSize" -> 
                 130, "ModelMemory" -> 60368, 
                 "ModelUtility" -> -3.032111100078587, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 371824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5455176631156329`, 0.18628107053313855`]}, 
                 "AccuracyHistory" -> {
                   Around[0.538237052163241, 0.0434608368379252]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7132941076513983, 0.08207784707816934], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
                 "ModelMemory" -> 60368, 
                 "ModelUtility" -> -1.3623460347423109`, "TrainingSize" -> 
                 128, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 398040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7132941076513983, 0.05803780225416599]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.877479549546502, 0.38858605004838054`], "Accuracy" -> 
                 Around[0.48303078358727053`, 0.0553376762000866], 
                 "EvaluationTime" -> 0.0009325096914738674, "TestSize" -> 152,
                  "ModelMemory" -> 60368, 
                 "ModelUtility" -> -4.159693500103897, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 295744, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.877479549546502, 0.274771831063705]}, 
                 "AccuracyHistory" -> {
                   Around[0.48303078358727053`, 0.03912964609618665]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0009325096914738674, "MeanCrossEntropy" -> 
                Around[2.877479549546502, 0.38858605004838054`], 
                "ModelMemory" -> 60368, "TrainingMemory" -> 295744, 
                "TrainingTime" -> 1.4328569182838289`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6469707462070442`, 0.4678470098200977], "Accuracy" -> 
                 Around[0.46970158953087165`, 0.12379214994859225`], 
                 "EvaluationTime" -> 0.0009882117688026185, "TestSize" -> 32, 
                 "ModelMemory" -> 91752, 
                 "ModelUtility" -> -3.1590714144018075`, "TrainingSize" -> 
                 128, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 397088, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6469707462070442`, 0.33081779320164034`]}, 
                 "AccuracyHistory" -> {
                   Around[0.46970158953087165`, 0.08753426868631149]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.7842704102204543`, 0.6679427217107834], "Accuracy" -> 
                 Around[0.5482043846458831, 0.06094984786979444], 
                 "EvaluationTime" -> 0.0007286039311515623, "TestSize" -> 130,
                  "ModelMemory" -> 91752, 
                 "ModelUtility" -> -4.781770803778026, "TrainingSize" -> 30, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 375896, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7842704102204543`, 0.47230682796589385`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5482043846458831, 0.04309805074102009]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0007286039311515623, "MeanCrossEntropy" -> 
                Around[3.7842704102204543`, 0.6679427217107834], 
                "ModelMemory" -> 91752, "TrainingMemory" -> 375896, 
                "TrainingTime" -> 4.526167090380248|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.675985439182979, 0.5662912603643842], "Accuracy" -> 
                 Around[0.4605210292572121, 0.05557979016574277], 
                 "EvaluationTime" -> 0.0005803592023889151, "TestSize" -> 152,
                  "ModelMemory" -> 162320, 
                 "ModelUtility" -> -5.277154515730969, "TrainingSize" -> 8, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 601512, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.675985439182979, 0.4004283903303328]}, 
                 "AccuracyHistory" -> {
                   Around[0.4605210292572121, 0.039300846523122095`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8112304544476486, 0.13894358697675882`], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.003125, "TestSize" -> 32, 
                 "ModelMemory" -> 162320, "ModelUtility" -> -1.90781856606398,
                  "TrainingSize" -> 128, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 610848, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8112304544476486, 0.09824795255364903]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
                Around[0.8112304544476486, 0.13894358697675882`], 
                "ModelMemory" -> 162320, "TrainingMemory" -> 610848, 
                "TrainingTime" -> 2.573656764742709|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9285852429250843`, 0.6492543638659594], "Accuracy" -> 
                 Around[0.5303076501369324, 0.12379201079532379`], 
                 "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32,
                  "ModelMemory" -> 60368, 
                 "ModelUtility" -> -3.458660847734166, "TrainingSize" -> 128, 
                 "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 388616, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9285852429250843`, 0.459092163404578]}, 
                 "AccuracyHistory" -> {
                   Around[0.5303076501369324, 0.08753417029009174]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.251416473534061, 0.7820778441733018], "Accuracy" -> 
                 Around[0.511000315694987, 0.06081556351355926], 
                 "EvaluationTime" -> 0.0012545825726770717`, "TestSize" -> 
                 130, "ModelMemory" -> 60368, 
                 "ModelUtility" -> -4.982374472419596, "TrainingSize" -> 30, 
                 "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 298792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.251416473534061, 0.5530125470306977]}, 
                 "AccuracyHistory" -> {
                   Around[0.511000315694987, 0.04300309736211893]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0012545825726770717`, "MeanCrossEntropy" -> 
                Around[4.251416473534061, 0.7820778441733018], "ModelMemory" -> 
                60368, "TrainingMemory" -> 298792, "TrainingTime" -> 
                11.369217701071342`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.570761773346241, 0.747586201055562], "Accuracy" -> 
                 Around[0.5005419461081866, 0.0614169849836683], 
                 "EvaluationTime" -> 0.0007078621353105369, "TestSize" -> 130,
                  "ModelMemory" -> 162320, 
                 "ModelUtility" -> -5.248145453637503, "TrainingSize" -> 30, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 620672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.570761773346241, 0.5286232722878775]}, 
                 "AccuracyHistory" -> {
                   Around[0.5005419461081866, 0.04342836656198421]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0007078621353105369, "MeanCrossEntropy" -> 
                Around[4.570761773346241, 0.747586201055562], "ModelMemory" -> 
                162320, "TrainingMemory" -> 620672, "TrainingTime" -> 
                13.030868074309083`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.570022988477733, 0.47056125103694063`], "Accuracy" -> 
                 Around[0.46808812170326913`, 0.055391654477629025`], 
                 "EvaluationTime" -> 0.0010729982529474953`, "TestSize" -> 
                 152, "ModelMemory" -> 99728, 
                 "ModelUtility" -> -4.667976437863389, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 466072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.570022988477733, 0.332737051571846]}, 
                 "AccuracyHistory" -> {
                   Around[0.46808812170326913`, 0.03916781450227367]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.6244495740942417`, 0.48773046377476875`], 
                 "Accuracy" -> 
                 Around[0.5909137107429928, 0.12195270099035052`], 
                 "EvaluationTime" -> 0.0012440849079796785`, "TestSize" -> 32,
                  "ModelMemory" -> 99728, 
                 "ModelUtility" -> -3.172558737016106, "TrainingSize" -> 128, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 495688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.6244495740942417`, 0.34487751832639874`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5909137107429928, 0.08623358185429224]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0012440849079796785`, "MeanCrossEntropy" -> 
                Around[1.6244495740942417`, 0.48773046377476875`], 
                "ModelMemory" -> 99728, "TrainingMemory" -> 495688, 
                "TrainingTime" -> 1.8809573444801932`|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[6.033033423949699, 0.7752242879962036], "Accuracy" -> 
                 Around[0.45343777380296446`, 0.05538878083813811], 
                 "EvaluationTime" -> 0.0005377730260816514, "TestSize" -> 152,
                  "ModelMemory" -> 99728, 
                 "ModelUtility" -> -5.708634968507651, "TrainingSize" -> 8, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 447448, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[6.033033423949699, 0.5481663509826286]}, 
                 "AccuracyHistory" -> {
                   Around[0.45343777380296446`, 0.03916578253230296]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005377730260816514, "MeanCrossEntropy" -> 
                Around[6.033033423949699, 0.7752242879962036], "ModelMemory" -> 
                99728, "TrainingMemory" -> 447448, "TrainingTime" -> 
                10.35078643439093|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[8.21220490974844, 0.9380313896761981], "Accuracy" -> 
                 Around[0.45328643244984645`, 0.05573477005721432], 
                 "EvaluationTime" -> 0.0006231480990112045, "TestSize" -> 152,
                  "ModelMemory" -> 185360, 
                 "ModelUtility" -> -6.424714064252742, "TrainingSize" -> 8, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 766064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[8.21220490974844, 0.6632883566058805]}, 
                 "AccuracyHistory" -> {
                   Around[0.45328643244984645`, 0.039410433855329184`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006231480990112045, "MeanCrossEntropy" -> 
                Around[8.21220490974844, 0.9380313896761981], "ModelMemory" -> 
                185360, "TrainingMemory" -> 766064, "TrainingTime" -> 
                13.030868074309083`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3100|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.1697124352322645`, 0.5842252170709464], "Accuracy" -> 
                 Around[0.515670025051118, 0.06149043644573219], 
                 "EvaluationTime" -> 0.0006124725700823033, "TestSize" -> 130,
                  "ModelMemory" -> 56272, 
                 "ModelUtility" -> -4.363456613895947, "TrainingSize" -> 30, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 275280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.1697124352322645`, 0.4131096127310489]}, 
                 "AccuracyHistory" -> {
                   Around[0.515670025051118, 0.04348030458889766]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.71315214729188, 0.08135402189964082], "Accuracy" -> 
                 Around[0.5606106804399626, 0.1231054725977526], 
                 "EvaluationTime" -> 0.003125, "TestSize" -> 32, 
                 "ModelMemory" -> 56272, "ModelUtility" -> -1.467224702434685,
                  "TrainingSize" -> 128, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 355120, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.71315214729188, 0.05752598056203491]}, 
                 "AccuracyHistory" -> {
                   Around[0.5606106804399626, 0.08704871447504557]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.003125, "MeanCrossEntropy" -> 
                Around[0.71315214729188, 0.08135402189964082], "ModelMemory" -> 
                56272, "TrainingMemory" -> 355120, "TrainingTime" -> 
                3.753003305505267|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         160, "PreprocessorEvaluationTime" -> 3.59375*^-6, 
         "PreprocessorMemory" -> 49544, "InputDimension" -> 10, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6928423179977401, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869297370424875`16.34020709736964*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 8.12172683094538, 
             "ElapsedTimes" -> 17.449253000000002`, "ExperimentCounts" -> 
             6|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 
             11.602466901350537`, "ElapsedTimes" -> 13.665400000000002`, 
             "ExperimentCounts" -> 5|>, <|
            "TrainingSizes" -> 128, "TimeBudgets" -> 16.57495271621505, 
             "ElapsedTimes" -> 16.218941, "ExperimentCounts" -> 6|>}, 
           TypeSystem`Vector[
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{0., 1., 1., 0., 0., 1., 1., 0., 0., 1.}}, "ID" -> 
              6049509919062986817|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 48.925742, 
         "MaxTrainingMemory" -> 13959504, "DataMemory" -> 109616, 
         "FunctionMemory" -> 284600, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 12, 12, 49, 31.527207`8.251260478943298}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> CompressedData["
1:eJy9lcsNgEAIRNd4swtvdmEPlmDi2dYtQe9KeAysJBujLMPwyTjv53aMrbXl
OcNzpmbZtX4/PaP3o3jRuKhRvrQvlt/Dqe67ypPi0nf6XZ2v2qfoPD0cmkfl
Uz1fy6r3tGo/LH5ZnKhF50n5UZzsfll+j6darxVP8/XSXxqXtSo9VOdLeanx
qr5QPlU6aN3P6qOXj+JU1a/OLaunNE/2fu+9p3mqeP2tU2q92f/L238DAVzg
ZA==
       "], 
      "Output" -> {
       False, True, True, True, True, True, True, False, True, True, False, 
        True, True, True, False, True, True, True, False, True, False, True, 
        False, False, False, False, False, True, False, True, True, False, 
        True, False, False, True, True, False, True, True}|>, 
    "Predictions" -> {
     False, False, False, True, True, False, False, False, False, False, 
      False, True, False, True, True, False, True, False, False, True, True, 
      False, True, True, False, False, False, True, False, False, False, 
      False, False, False, True, True, True, False, True, True}, 
    "LogProbabilities" -> CompressedData["
1:eJwVz01MkgEAh3EmamNJklsedKbmx8iwA7mcurSWVtqmrtz8WMYsjYkH1iam
pikTNdkKyZMfhfOgNbOpy4aY/MlqlYOQzBBpQ0IREhB7/SBRy/fw7Hd+Im/x
r5X5UCgU5kGknb9+J7kCDOiX1+YKaX8QmJqx00r8hChH2qthuXEqqnBYuGk5
0FBcLbWByqHKVt5sg15Hr5PVz6A0oVg8GLyOx7pKWgOxAPntZU1R3BLpYWOe
DfRcfVuTcRyNimzW1KSPqkWR42If0qPP1TEhiyEwTjkZWnbBQspvu2NHhGMr
LrjSTNo3rljFRoWbX0H9jr2Q3btXaJvIaq75VKNYIW3Ke72EeEb8tH1PC/8+
vyVRtAeJc4Ld0WYn6cv2s4tIP800WTUOUmr46CLOBb1NE8zPQOK7ppXytqG6
JGiUGNaxHzIn7C43wDrRssiNNWLnVWR1zb4bpWxOq/+DGXSq9X8lB9+eqK8m
qceJtcs9adl6E14oWYKWbivpGH9qGe989mhOr4WUyhDbIB47ejxRSVENFISa
TxhUYEYLY2+EbUHW7hvibfiGubCSJ7OZZtKgws1VVEfcTGyiLh6o7BmZdULt
raq9ytaDUD7lLQQQUOfPZzSHrpK+b7WbUben1bvZC+D8I8rPVK6jauu6gaaz
kEqnJ2yQ82I+3Ov6jPwhkfy81YuoriMWiXoObf0XiVQzAV2dUVcSqEUXPyU5
S+JBvkLDDPYxkz4XFzlg5eYkT3JdUGufOSSZJhSxzB2RSjd4I6Jw+rARQX4/
khyxdlJDepUFXMZAyqNZExIeztbf9zrRpTw2FcTxQrsxxMgVfcFgr4fa2OBB
gd9HGZOtxX8/83Rz
     "], "CountMatrix" -> {{11, 5, 0}, {13, 11, 0}}, 
    "IndicesMatrix" -> {{{1, 8, 11, 19, 25, 26, 27, 29, 32, 34, 38}, {15, 21, 
       23, 24, 35}, {}}, {{2, 3, 6, 7, 9, 10, 13, 16, 18, 22, 30, 31, 33}, {4,
        5, 12, 14, 17, 20, 28, 36, 37, 39, 40}, {}}}, 
    "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {40}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0019392250000000002`, "SingleEvaluationTime" -> 
    0.004819, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.86896617348654*^9, 3.868966311492532*^9, 3.8689668453138514`*^9, 
   3.869211547634626*^9, {3.869293774351564*^9, 3.8692937815692053`*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"7bb09724-29b7-4520-840d-674f4ad62edc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"First", "@", "classifier"}], ")"}], "[", "\"\<Model\>\"", "]"}], 
  "[", "\"\<Network\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8692938293476267`*^9, 3.869293870353177*^9}, {
  3.8692939195305443`*^9, 3.869293944513091*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.869293832969639*^9, 3.869293870749839*^9}, {
  3.869293926735614*^9, 3.869293945170747*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"79d7821e-b121-479f-abf0-e41c242f671b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}, {3.869293792603034*^9, 3.869293814925658*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],

Cell[BoxData[
 TemplateBox[{"290.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.869293808448848*^9, 3.8692938154579077`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"6d965a5a-4659-41b3-8743-dcf54ea641cd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c299b150-0a55-4bbe-bf20-ef4cd4ee4428"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 4, 98, "Title",ExpressionUUID->"e80ffaf1-ce7d-4821-a091-e123c51e05cc"],
Cell[834, 28, 775, 15, 29, "Input",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],
Cell[CellGroupData[{
Cell[1634, 47, 925, 23, 29, "Input",ExpressionUUID->"be03a0a4-d6ba-4d00-8654-7239ad3abdbb"],
Cell[2562, 72, 1557, 39, 55, "Output",ExpressionUUID->"b6934236-05d6-4d41-92c5-777ec6c58a63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4156, 116, 1027, 22, 29, "Input",ExpressionUUID->"7eabc349-f02d-408b-b61f-795fda00a34c"],
Cell[5186, 140, 935, 21, 56, "Output",ExpressionUUID->"59f55994-f454-42d1-8c22-b7903d21a9c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6158, 166, 204, 4, 69, "Chapter",ExpressionUUID->"ff3102a6-3c5a-457a-910a-4abcf0a85217"],
Cell[6365, 172, 5343, 96, 116, "Input",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],
Cell[CellGroupData[{
Cell[11733, 272, 233, 4, 29, "Input",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],
Cell[11969, 278, 884, 23, 33, "Output",ExpressionUUID->"15dae793-3a54-40db-b061-a6beebb85dd8"]
}, Open  ]],
Cell[12868, 304, 8455, 201, 37, "Input",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21360, 510, 317, 5, 69, "Chapter",ExpressionUUID->"a83aa6fb-db66-4018-aace-2706a2be80da"],
Cell[21680, 517, 381, 9, 29, "Input",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],
Cell[22064, 528, 623, 13, 29, "Input",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22724, 546, 355, 6, 69, "Chapter",ExpressionUUID->"b6f53683-da40-4a5d-9d7a-130f6c5ca4dc"],
Cell[23082, 554, 3455, 58, 154, "Input",ExpressionUUID->"278acab4-3241-466c-905c-bc0ec791ddf1"],
Cell[26540, 614, 1056, 23, 113, "Input",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],
Cell[27599, 639, 13902, 195, 32, "Input",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],
Cell[CellGroupData[{
Cell[41526, 838, 261, 3, 29, "Input",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],
Cell[41790, 843, 149477, 2865, 68, "Output",ExpressionUUID->"b67cc9c9-ea67-4c3d-969b-2b6e8ff85146"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[191316, 3714, 355, 6, 69, "Chapter",ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-78e337587528"],
Cell[191674, 3722, 16316, 229, 133, "Input",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208027, 3956, 456, 7, 69, "Chapter",ExpressionUUID->"306b98cf-6a16-4b58-bf92-e841969834f5"],
Cell[208486, 3965, 1696, 34, 92, "Input",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],
Cell[CellGroupData[{
Cell[210207, 4003, 423, 10, 29, "Input",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],
Cell[210633, 4015, 158861, 2968, 465, "Output",ExpressionUUID->"e49e7f21-9a24-43d8-a344-8514cef1d8c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[369543, 6989, 507, 8, 69, "Chapter",ExpressionUUID->"2690b326-fb91-4c09-a746-cb42f085f60a"],
Cell[370053, 6999, 1093, 17, 29, "Input",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],
Cell[371149, 7018, 966, 18, 29, "Input",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],
Cell[CellGroupData[{
Cell[372140, 7040, 819, 14, 51, "Input",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],
Cell[372962, 7056, 1685, 24, 33, "Output",ExpressionUUID->"aeda4591-74c9-41ee-b29b-5477b969b753"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374684, 7085, 1289, 27, 71, "Input",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],
Cell[375976, 7114, 1987, 28, 33, "Output",ExpressionUUID->"8299f67e-fdc8-45cb-9f62-fd4eff17a12b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378000, 7147, 570, 14, 32, "Input",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],
Cell[378573, 7163, 970, 14, 44, "Output",ExpressionUUID->"82f9bf7d-78c0-402d-ba8a-638070c6e6b6"]
}, Open  ]],
Cell[379558, 7180, 522, 10, 29, "Input",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380117, 7195, 412, 6, 69, "Chapter",ExpressionUUID->"0a2ce80a-fe81-4612-966f-edb1d9a9f984"],
Cell[CellGroupData[{
Cell[380554, 7205, 742, 15, 29, "Input",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],
Cell[381299, 7222, 84678, 1506, 69, "Output",ExpressionUUID->"ed75754f-b9ec-4db8-96c1-d9b71427f486"]
}, Open  ]],
Cell[CellGroupData[{
Cell[466014, 8733, 386, 7, 29, "Input",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],
Cell[466403, 8742, 104080, 1924, 465, "Output",ExpressionUUID->"7bb09724-29b7-4520-840d-674f4ad62edc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[570520, 10671, 371, 8, 29, "Input",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],
Cell[570894, 10681, 26802, 533, 162, "Output",ExpressionUUID->"79d7821e-b121-479f-abf0-e41c242f671b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[597733, 11219, 410, 6, 29, "Input",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],
Cell[598146, 11227, 250, 4, 44, "Output",ExpressionUUID->"6d965a5a-4659-41b3-8743-dcf54ea641cd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

