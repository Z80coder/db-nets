(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    999819,      18359]
NotebookOptionsPosition[    994785,      18265]
NotebookOutlinePosition[    995223,      18282]
CellTagsIndexPosition[    995180,      18279]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning XOR", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 3.8684260746987667`*^9}, {3.869278884416973*^9, 
  3.869278885792972*^9}},ExpressionUUID->"e80ffaf1-ce7d-4821-a091-\
e123c51e05cc"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"ff3102a6-3c5a-457a-910a-\
4abcf0a85217"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"numBooleanVariables", "=", "20"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    SuperscriptBox["2", "numBooleanVariables"], " ", "possible", " ", 
    "inputs"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10", ",", "#11", ",", "#12", ",", "#13",
         ",", "#14", ",", "#15", ",", "#16", ",", "#17", ",", "#18", ",", 
        "#19", ",", "#20"}], "]"}], "&"}], ",", "\"\<BooleanFunction\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", 
   RowBox[{"Min", "[", 
    RowBox[{"10000", ",", 
     SuperscriptBox["2", "numBooleanVariables"]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numClasses", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Soften", "/@", "x"}], "->", 
         RowBox[{"bf", "@@", "x"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}, {3.8648255889830313`*^9, 3.864825592504498*^9}, {
   3.864825624917417*^9, 3.864825626880946*^9}, {3.864829407265236*^9, 
   3.8648294087742167`*^9}, {3.864829443456806*^9, 3.864829444846697*^9}, {
   3.864829792396603*^9, 3.8648297927316837`*^9}, {3.864830032545388*^9, 
   3.8648300662967587`*^9}, 3.86483040909219*^9, {3.864830633132044*^9, 
   3.8648306348014383`*^9}, {3.8648309522842607`*^9, 
   3.8648309524254227`*^9}, {3.864831241412085*^9, 3.8648312465735483`*^9}, {
   3.864831361588151*^9, 3.864831427353725*^9}, {3.864831467589365*^9, 
   3.864831467738257*^9}, {3.8650545097885313`*^9, 3.865054521919083*^9}, {
   3.865574752812943*^9, 3.865574784399784*^9}, {3.865592534192895*^9, 
   3.865592534298318*^9}, {3.865592762627692*^9, 3.8655927636071053`*^9}, {
   3.865594557687479*^9, 3.865594557984342*^9}, {3.865594963476437*^9, 
   3.8655949635928717`*^9}, {3.865780594387285*^9, 3.8657805954725647`*^9}, {
   3.86578528554428*^9, 3.865785286930284*^9}, {3.8658288989019117`*^9, 
   3.865828899235673*^9}, {3.865830427368958*^9, 3.865830428545253*^9}, {
   3.865830742328867*^9, 3.8658307442321053`*^9}, {3.865831732136331*^9, 
   3.8658317341109133`*^9}, {3.865837020252844*^9, 3.865837020623869*^9}, {
   3.8658371834605103`*^9, 3.865837184543343*^9}, {3.8658377080420017`*^9, 
   3.865837708413855*^9}, {3.865837740366976*^9, 3.86583774055787*^9}, {
   3.865859522557151*^9, 3.865859523313833*^9}, {3.865859830431425*^9, 
   3.865859831995036*^9}, {3.865866201299968*^9, 3.865866202414603*^9}, {
   3.8658663169608183`*^9, 3.865866318295281*^9}, {3.865866383754406*^9, 
   3.8658663858232803`*^9}, {3.8660002644683657`*^9, 3.866000265575876*^9}, {
   3.866000397664502*^9, 3.866000398839758*^9}, {3.8660004574432163`*^9, 
   3.8660004580794077`*^9}, {3.8666042520823517`*^9, 3.866604264374364*^9}, {
   3.866604302861124*^9, 3.866604304397232*^9}, {3.866604362727042*^9, 
   3.866604365684434*^9}, {3.866634397416646*^9, 3.86663441391949*^9}, {
   3.866634545413786*^9, 3.866634547171479*^9}, {3.8666346718798122`*^9, 
   3.866634702156291*^9}, {3.867671157222414*^9, 3.867671157363698*^9}, {
   3.868095338683979*^9, 3.868095349658772*^9}, {3.8692257543862534`*^9, 
   3.869225760070663*^9}, {3.869226350038672*^9, 3.8692263530848923`*^9}, {
   3.869226445388289*^9, 3.869226447765545*^9}, {3.869227314728384*^9, 
   3.869227438401598*^9}, {3.8692778466039267`*^9, 3.869277860306823*^9}, {
   3.869280781904627*^9, 3.869280784726466*^9}, {3.8692942712492027`*^9, 
   3.8692943131087103`*^9}, 3.869294699302785*^9, {3.8692967045596027`*^9, 
   3.869296708100168*^9}, {3.869299553854471*^9, 3.8692995957754602`*^9}, {
   3.869653262716093*^9, 3.869653295528536*^9}, {3.8696550592852573`*^9, 
   3.869655063315099*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"examples", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.869294701690948*^9, 3.8692947036918592`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", 
      "1.`", ",", "0.`"}], "}"}], "\[Rule]", "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", 
      "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`"}], "}"}], "\[Rule]", "False"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "1.`", ",", "0.`", ",", 
      "1.`", ",", "1.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "1.`", ",", 
      "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", 
      "0.`", ",", "0.`"}], "}"}], "\[Rule]", "False"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.869294703931072*^9, 3.869296709793788*^9, 3.8692995993322277`*^9, 
   3.8693102752164717`*^9, 3.869551960884112*^9, 3.869554574261319*^9, 
   3.8695549832573833`*^9, 3.869561061731083*^9, 3.8695668988357286`*^9, 
   3.8695683489990053`*^9, 3.869639096719898*^9, 3.8696461939813833`*^9, {
   3.869653286727476*^9, 3.8696532975993013`*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"7e5221e9-e7fe-40b5-923d-3d5cea6b73e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"a83aa6fb-db66-4018-aace-\
2706a2be80da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.86678913871952*^9, 3.86678914729805*^9}, {
  3.8692943328044443`*^9, 3.869294348259564*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"targetEncoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}], ",", 
      "\"\<IndicatorVector\>\""}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869277326407647*^9, 3.86927733940766*^9}, {
  3.8692807974788446`*^9, 3.869280799898975*^9}, {3.869284676787505*^9, 
  3.8692846810647993`*^9}, {3.86928477155538*^9, 3.869284775848857*^9}, {
  3.8692967298312063`*^9, 3.869296740112113*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"b6f53683-da40-4a5d-9d7a-\
130f6c5ca4dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"32", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNOT", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralMajority", "[", 
         RowBox[{"classificationLayerSize", ",", "inputSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869299418713677*^9, {3.8692994812626457`*^9, 3.869299509217765*^9}, {
   3.8692996464312763`*^9, 3.869299648695244*^9}, {3.8693023829191008`*^9, 
   3.869302383206976*^9}, {3.869302606635058*^9, 3.869302607503434*^9}, {
   3.8695519944197283`*^9, 3.8695520116113234`*^9}, {3.8695520497476788`*^9, 
   3.86955205361952*^9}, {3.8695522074191504`*^9, 3.8695522084918833`*^9}, 
   3.869552337095097*^9, {3.869552371303269*^9, 3.869552373171102*^9}, 
   3.869552475387332*^9, {3.869552534414999*^9, 3.869552536002717*^9}, {
   3.869563004255267*^9, 3.8695630090855827`*^9}, {3.869563076916162*^9, 
   3.869563136725778*^9}, {3.869568010599187*^9, 3.86956801472672*^9}, {
   3.8696406520683823`*^9, 3.8696406521900187`*^9}, {3.8696407109698544`*^9, 
   3.8696407121576643`*^9}, {3.869646348929699*^9, 3.869646396536577*^9}, {
   3.869646524418833*^9, 3.869646524952177*^9}, {3.869655070412064*^9, 
   3.869655070849679*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"64", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"HardNeuralReshapeLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869569245687269*^9, 3.869569254196104*^9}, 
   3.869627237783164*^9, {3.869639889848153*^9, 3.869639918933481*^9}, {
   3.86964020681771*^9, 3.86964020726963*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"d1ef7b56-3413-4a9e-b2bd-d56f8df851c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableSoftNet", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<NeuralLogicNet\>\"", "->", "softNet"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NeuralLogicNet\>\"", "->", "\"\<Loss\>\""}], "}"}], ",", 
     RowBox[{"\"\<Target\>\"", "->", "targetEncoder"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.86626215222803*^9, 
   3.8662621832516203`*^9}, {3.866263109109415*^9, 3.86626311329671*^9}, {
   3.8662634113702927`*^9, 3.866263445027198*^9}, {3.8662637295611134`*^9, 
   3.8662637341766987`*^9}, {3.8662638454628477`*^9, 3.86626384912811*^9}, {
   3.866264629557499*^9, 3.866264632526574*^9}, {3.866264756302319*^9, 
   3.866264756571878*^9}, {3.86626485570925*^9, 3.8662648604861727`*^9}, {
   3.866264906589533*^9, 3.866264909654014*^9}, {3.8662650173821917`*^9, 
   3.866265024103039*^9}, {3.866267932128647*^9, 3.866267936947571*^9}, {
   3.866272289890004*^9, 3.866272326071719*^9}, 3.866272498086396*^9, {
   3.866272605318948*^9, 3.8662726100556726`*^9}, {3.866272697696899*^9, 
   3.8662727061238422`*^9}, {3.866272804197109*^9, 3.866272807076984*^9}, {
   3.866272890576043*^9, 3.8662729018249826`*^9}, {3.866273061136441*^9, 
   3.866273079881092*^9}, {3.8662739928242073`*^9, 3.866274026656089*^9}, {
   3.866274121640194*^9, 3.86627415310497*^9}, {3.8662742538084593`*^9, 
   3.866274260924819*^9}, {3.86627447707015*^9, 3.866274491178595*^9}, {
   3.866274954835182*^9, 3.866274972215249*^9}, {3.8662751949711027`*^9, 
   3.866275214973873*^9}, {3.866275317133552*^9, 3.866275326157571*^9}, {
   3.866276341927771*^9, 3.866276342361364*^9}, {3.866276444445874*^9, 
   3.866276444758065*^9}, 3.866276574032675*^9, {3.8662774805759163`*^9, 
   3.866277486441833*^9}, {3.866277730486899*^9, 3.866277745606361*^9}, {
   3.866277812901185*^9, 3.8662778241863747`*^9}, {3.866277923447342*^9, 
   3.866277942127078*^9}, {3.866278044847097*^9, 3.866278070211129*^9}, {
   3.866278491367318*^9, 3.866278493966505*^9}, {3.866278580024693*^9, 
   3.8662785830122213`*^9}, {3.866278895153315*^9, 3.866278898232675*^9}, {
   3.866280230366321*^9, 3.86628024016776*^9}, 3.866280351079256*^9, {
   3.866280499461529*^9, 3.8662805080447283`*^9}, {3.866280639515723*^9, 
   3.8662806449211483`*^9}, {3.866280754797947*^9, 3.86628075810079*^9}, {
   3.866280876373425*^9, 3.866280889329287*^9}, 3.866281009490582*^9, {
   3.8662811039106913`*^9, 3.866281107962268*^9}, {3.866281186723476*^9, 
   3.866281191533492*^9}, {3.8662812575988626`*^9, 3.866281268830084*^9}, {
   3.8662813166116953`*^9, 3.866281325765922*^9}, {3.866282044987713*^9, 
   3.866282048676916*^9}, {3.866282148870701*^9, 3.866282152685348*^9}, {
   3.86628313823394*^9, 3.8662831431981792`*^9}, {3.866283203895447*^9, 
   3.8662832148382063`*^9}, {3.8662832951824627`*^9, 
   3.8662833056304398`*^9}, {3.866283478244402*^9, 3.866283487341878*^9}, {
   3.8662841436542883`*^9, 3.86628415025281*^9}, {3.866284940968055*^9, 
   3.866284945101494*^9}, {3.866285029031362*^9, 3.866285034053158*^9}, {
   3.866285238231142*^9, 3.8662852400450497`*^9}, {3.8662854784494677`*^9, 
   3.866285480030343*^9}, {3.8662855684494333`*^9, 3.866285589220209*^9}, {
   3.866285661897065*^9, 3.866285665049341*^9}, {3.866286012525502*^9, 
   3.866286023701212*^9}, {3.866286183975936*^9, 3.866286197019022*^9}, {
   3.866286343624745*^9, 3.8662863761838703`*^9}, {3.86628647476213*^9, 
   3.866286478513227*^9}, {3.866286583730136*^9, 3.866286589629998*^9}, {
   3.8662866316154537`*^9, 3.866286632298744*^9}, {3.866286684611227*^9, 
   3.866286694033737*^9}, {3.866286815683847*^9, 3.866286826001635*^9}, {
   3.8662869515842*^9, 3.866286957090143*^9}, {3.866287432190014*^9, 
   3.866287433732437*^9}, {3.8662875714309177`*^9, 3.866287575508819*^9}, {
   3.866287972431319*^9, 3.866287979390542*^9}, {3.8662881211610413`*^9, 
   3.866288128734665*^9}, {3.866301184432645*^9, 3.866301189032214*^9}, {
   3.866301252666163*^9, 3.866301255952261*^9}, {3.866301376402754*^9, 
   3.866301391652487*^9}, {3.866301466042976*^9, 3.866301469288639*^9}, {
   3.866301630395039*^9, 3.866301653060717*^9}, {3.866301748836125*^9, 
   3.866301755312545*^9}, {3.86630188485115*^9, 3.866301888560711*^9}, {
   3.866302280747377*^9, 3.8663022952887983`*^9}, {3.866302405795878*^9, 
   3.866302419001148*^9}, {3.866302495340143*^9, 3.866302504605687*^9}, {
   3.866350591374894*^9, 3.8663505951022243`*^9}, {3.866351142159863*^9, 
   3.866351179558625*^9}, {3.8663515938249702`*^9, 3.866351597311022*^9}, {
   3.8663516429930353`*^9, 3.866351646919097*^9}, {3.8663540899964314`*^9, 
   3.866354091250739*^9}, 3.866354227060774*^9, {3.866354342347616*^9, 
   3.866354366019519*^9}, {3.866354536533381*^9, 3.866354542835105*^9}, {
   3.866354615988611*^9, 3.866354616498942*^9}, {3.866354747316181*^9, 
   3.866354747986311*^9}, {3.866354820971937*^9, 3.866354830674176*^9}, {
   3.866354985259542*^9, 3.866355003354249*^9}, {3.866355243555305*^9, 
   3.866355280233426*^9}, {3.866355363275181*^9, 3.8663553649290257`*^9}, {
   3.866355508482728*^9, 3.8663555086333237`*^9}, {3.866355904531114*^9, 
   3.8663559105053043`*^9}, {3.866355992402801*^9, 3.866356013229351*^9}, {
   3.866356256538742*^9, 3.866356257041319*^9}, {3.866356472449071*^9, 
   3.866356473280033*^9}, {3.8663565818412313`*^9, 3.866356588441074*^9}, {
   3.866356990748909*^9, 3.866356994266841*^9}, {3.8663571204214773`*^9, 
   3.866357120574224*^9}, {3.8663572027579412`*^9, 3.8663572078996153`*^9}, {
   3.866357620436617*^9, 3.866357634688436*^9}, {3.866357667446629*^9, 
   3.866357681140574*^9}, {3.8663583040873337`*^9, 3.866358308549032*^9}, {
   3.866358702488315*^9, 3.866358710660177*^9}, {3.866358792502235*^9, 
   3.866358792643732*^9}, {3.8663588650968037`*^9, 3.866358870370079*^9}, {
   3.8663590601050797`*^9, 3.866359061311141*^9}, {3.866359100825281*^9, 
   3.8663591032317047`*^9}, {3.866360392667655*^9, 3.866360402393593*^9}, {
   3.866360446451545*^9, 3.866360454122822*^9}, {3.866360518763679*^9, 
   3.866360523813664*^9}, {3.8663605658118258`*^9, 3.866360586933572*^9}, {
   3.866360874844895*^9, 3.866360875286996*^9}, {3.8663609358459*^9, 
   3.866360946523975*^9}, {3.8663629695673723`*^9, 3.8663629719826107`*^9}, {
   3.8663639844553833`*^9, 3.8663639851026163`*^9}, {3.866364664263899*^9, 
   3.866364667805708*^9}, {3.8663647416864157`*^9, 3.866364751498241*^9}, {
   3.8663648173209887`*^9, 3.8663648239090853`*^9}, {3.866364861552744*^9, 
   3.866364866359233*^9}, {3.866364911593669*^9, 3.866364912091476*^9}, {
   3.8663650443606586`*^9, 3.8663650452161922`*^9}, {3.866365512692107*^9, 
   3.866365515810193*^9}, 3.866365740980801*^9, {3.866366124781304*^9, 
   3.866366128103511*^9}, {3.86636615827591*^9, 3.866366161795991*^9}, 
   3.8663675572465467`*^9, {3.8663679823247623`*^9, 3.8663679840072737`*^9}, {
   3.8663685724947968`*^9, 3.866368575523563*^9}, {3.866368617885765*^9, 
   3.866368630439355*^9}, {3.8663688420628223`*^9, 3.866368846739706*^9}, {
   3.866368921365861*^9, 3.866368935403892*^9}, {3.866368992805874*^9, 
   3.8663689939334173`*^9}, {3.8663690430938*^9, 3.8663690474648046`*^9}, {
   3.866369083709838*^9, 3.8663691118719187`*^9}, {3.866369202398569*^9, 
   3.866369214195849*^9}, {3.866369334334588*^9, 3.866369336388123*^9}, {
   3.866369454951181*^9, 3.8663694569323397`*^9}, {3.866369515406219*^9, 
   3.866369518628167*^9}, {3.8663703695855513`*^9, 3.8663703750077*^9}, {
   3.8663705385538683`*^9, 3.866370541048525*^9}, {3.866370586394085*^9, 
   3.866370607876096*^9}, {3.8663707547717*^9, 3.866370757696903*^9}, {
   3.866370926163419*^9, 3.866370929489147*^9}, {3.866371042659484*^9, 
   3.8663710475373373`*^9}, {3.866371595734161*^9, 3.866371595814637*^9}, {
   3.866371630486404*^9, 3.866371630623527*^9}, {3.866371683122916*^9, 
   3.866371701147089*^9}, {3.866371789324903*^9, 3.866371822547234*^9}, {
   3.8663718525974607`*^9, 3.8663718606429367`*^9}, {3.866371974165319*^9, 
   3.866371979075355*^9}, {3.866372122293806*^9, 3.8663721296757917`*^9}, {
   3.866372551518608*^9, 3.866372561132722*^9}, {3.866372627211433*^9, 
   3.866372636080841*^9}, {3.8663728112322397`*^9, 3.866372812994047*^9}, {
   3.866372895895451*^9, 3.866372901477323*^9}, {3.8664377149946833`*^9, 
   3.8664377176580143`*^9}, {3.86643884019552*^9, 3.86643884333634*^9}, {
   3.866438919186672*^9, 3.866438921864346*^9}, {3.8664391767222757`*^9, 
   3.866439182016387*^9}, {3.866439413057221*^9, 3.8664394237656918`*^9}, {
   3.866440165425671*^9, 3.8664401663535337`*^9}, {3.8664414544278717`*^9, 
   3.866441455406114*^9}, {3.8664415241527863`*^9, 3.866441526297073*^9}, {
   3.866441636299324*^9, 3.866441637325185*^9}, {3.8664421743093033`*^9, 
   3.866442174534107*^9}, {3.866444116919817*^9, 3.866444119674713*^9}, {
   3.86644604617083*^9, 3.866446049128669*^9}, {3.866512861360115*^9, 
   3.866512866295472*^9}, {3.866512916479863*^9, 3.866512918447736*^9}, {
   3.866634565957718*^9, 3.866634566999825*^9}, {3.86680026940904*^9, 
   3.866800269792528*^9}, {3.8675831417592773`*^9, 3.867583145913877*^9}, {
   3.869221218808393*^9, 3.869221231059099*^9}, {3.869225972028479*^9, 
   3.8692260010575743`*^9}, {3.869226207781839*^9, 3.869226212280487*^9}, {
   3.8692262960682364`*^9, 3.869226330905139*^9}, {3.869226390653082*^9, 
   3.869226434585244*^9}, {3.869226464845196*^9, 3.869226465900545*^9}, {
   3.869277398980557*^9, 3.86927740136417*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetFlatten", "[", "trainableSoftNet", "]"}]], "Input",
 CellChangeTimes->{{3.869221232121078*^9, 3.869221234978818*^9}, 
   3.869277421619462*^9, {3.869284608873015*^9, 3.8692846132481823`*^9}, {
   3.869552225068637*^9, 3.869552227697998*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-8.999999999999996, 
                    2.411540732620606*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/4\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -13.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss/Error\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Hard..\"", "\"Loss/Harden\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/Harden", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftProbs\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftmaxLayer\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftmaxLayer", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/1\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-10.9999999732051, 
                    1.000000294743867}], 
                    
                    Offset[{0, -13.5}, {-10.9999999732051, 
                    1.000000294743867}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/2\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    Offset[{0, -13.5}, {-9.9999999732051, 1.00000026794897}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/3\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.9999999732051, 1.000000241154073}], 
                    
                    Offset[{0, -13.5}, {-8.9999999732051, 
                    1.000000241154073}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/5\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -15.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/6\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet/7\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.8890871923183177`, 
                    3.889087400733702}, {-8.449999985262803, 
                    0.5500002264168798}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334004,
                     0.7071067622396942}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"32\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"1280\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-10.449999973205099`, 
                    1.0000002800066736`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox["\"1280\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-9.449999973205099, 
                    1.0000002532117764`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"20\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.4499999732051, 
                    1.0000002264168797`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"20\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"20\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"64\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2\"", "\"32\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999999999996, 
                    2.411540732620606*^-7}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.9999999732051, 
                    1.000000294743867}, {-9.9999999732051, 
                    1.00000026794897}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.9999999732051, 
                    1.00000026794897}, {-8.9999999732051, 
                    1.000000241154073}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.9999999732051, 
                    1.000000241154073}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.449999985262803, 
                    0.5500002264168798}, {-0.25, 0}, 
                    Offset[8], {1.000000026794896, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-10.449999973205099`, 
                    1.0000002800066736`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999973205099, 
                    1.0000002532117764`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.4499999732051, 
                    1.0000002264168797`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
64\[Times]20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 64\[Times]20\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 2\[Times]32\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8.999999999999996, 2.411540732620606*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/4", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"CE\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss/Error\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Error", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/Harden\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Harden", Bold], 
                    Style[CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftProbs\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftmaxLayer\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-10.9999999732051, 
                    1.000000294743867}], 
                    
                    Offset[{-10.5, -10.5}, {-10.9999999732051, 
                    1.000000294743867}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-10.9999999732051, 1.000000294743867}], 
                    
                    Offset[{10.5, 10.5}, {-10.9999999732051, 
                    1.000000294743867}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-10.9999999732051, 
                    1.000000294743867}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-9.9999999732051, 1.00000026794897}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-9.9999999732051, 1.00000026794897}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/2", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-8.9999999732051, 1.000000241154073}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-8.9999999732051, 
                    1.000000241154073}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/3", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Sort\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/5", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[LeftDoubleBracket] \[RightDoubleBracket]\"", 
                    GrayLevel[0.33], 13, Bold, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/6", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet/7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet/7", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-8.999999999999996, 
                    2.411540732620606*^-7}, {-7.9999999732051, 
                    1.000000214359176}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-10.9999999732051, 
                    1.000000294743867}, {-9.9999999732051, 
                    1.00000026794897}, {-8.9999999732051, 
                    1.000000241154073}, {-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 21, 8, 21, 21, 21, 21, 21, 21, 25, 21, 
                    21}, NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {662.9999999999998, 103.00001326347402`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29., 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1280}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 20}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> 64, "$InputShape" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f584aca1_4e2c_4638_8abf_1678d16b8d7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
TrVz2mHjyTVp4GekNBTqaJGSpI1ClZ3pREu5ApMBEe33nqnTrtnvWWm3eU49
q0yHUy64UxJKGNx1cBpdpfespaExJd3j96y0R0qVoFEqbJ5GQHLqhTmPJCZ5
ICCMK3u3v/h9ZQOhXyCruyuNsql5omsgpYO6yMcQ5qrp/ecA9dKcR4Umd9nd
OOLh4Nad94BbN4mZSooqegsYH5mK0/qrhtaTyzCnbGYBeyIhmJ3NqVucr7rs
0QeDaUEG0ywduK91CVBNOY07lVu6mjWCs6izXCCj7yJobIVY8KnqoTVpF/i8
CVeS5yEar2lo5DtpDGeQmjfnkc/EdlVUpCds694ECUS76Bd9WEYiwi7ooy4R
n7sMUe8CWyb+TXQ5B116q2dkU/8GW3tc7/0O6e0bXY2tyTXa88ng4GPrkt05
7oStTRw480rvRbl+Dv1Pd8n6ZidQnnp3vMvA530PgxOPrZP3FBJd/oEuH/TK
fBLAK5P2glcu3sPtjCwaAFYWmeOsfKVh5SGfQuds5nsbc0LT9gL3XSbP8eSb
x8wA7n9E3J+Bd3n7mfs+2MJsZm8A0cVDDNx3kQs8/c1/ddLsIWae7hmzIv7z
3uPCtwbnujTbiEUJz6d6NHzefhzKWpaet1KzbTm4/DQ39oJmB/JjtbPob2/N
zmVvuzjp2UnNJuQ7vUEqJHKQnXSVPv6E54t6Gk89hHMoBThka9gLHEp4585X
bVK1PRBqzWAMnNm6EPzIQHPaIOr6TtPVRanp6mSYXmVNSex1h3jnY8Gg/ah7
/LF1UUJMCV8wFL0QNCbCtXshLnV4+aeelpXto2ZzJfLLqwDB165/z/GsMo+m
SQWq7nony62LEt/9kUIhYd0MDHu9JGKVMKZDHJZJdddyu9kon2rGYldIDHc/
7rk1XGPfxZs6kbuU/oR7r6HdqUk594qizJiT0Mr6wf802VvLbVdajfOKnrw0
3xzhChK7si4nLaMBCmHyW8sUsrnak8axXsX6KWRFdFSKSVSUTV5ULbL1OCK/
6V2z8LBCtpR40aiQjRkLpZb5Yuim6zCO9Tb2scKjQe4cmEl5JmSwi1gVve5u
FrYrExSyfLoPxcKN6mpbbc7eV+UVK+d9aYQw1LpSl9egVHTyns9OXyU82jHU
xTvmjErtsV082kKhTgqLzXzilehm6DKnMyftRJzQzZayoj7/rnzQrzUnrV4b
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
8Bv/B9Mw2iU=
                    "]]|>, "orcInstance" -> 81997792, "orcModuleId" -> 
                    82336848, "targetMachineId" -> 79512544|>, 
                    140548319590208, 140548319590064, 140548319590144, 
                    140548319584256, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e45e62a2_4ddf_4592_bc6e_850723773c7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
NQoL/w5nPr/n
                    "]]|>, "orcInstance" -> 80869952, "orcModuleId" -> 
                    52654352, "targetMachineId" -> 81867088|>, 
                    140548319576608, 140548319576208, 140548319576288, 
                    140548319576064, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 32},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6e310331dc5af4c5", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 32}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Error" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 2, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], 
                    "Target" -> <|"Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {True, False}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 2, "$Version" -> "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/4"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/7"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/4"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet/7"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8692846140728807`*^9, 3.869284685781642*^9, 3.8692934271654387`*^9, 
   3.869310298316814*^9, {3.8695522199738617`*^9, 3.869552228548277*^9}, 
   3.869552543654649*^9, 3.8695526214970293`*^9, 3.869552678464608*^9, 
   3.869552712040965*^9, 3.869554614318481*^9, 3.8695549895842113`*^9, 
   3.869555139045484*^9, 3.869561134345007*^9, 3.8695690591689796`*^9, 
   3.869569281503888*^9, 3.869639170664979*^9, 3.869639287328896*^9, {
   3.8696398983034077`*^9, 3.8696399218679237`*^9}, 3.869640209479702*^9, {
   3.869640443765613*^9, 3.869640472418601*^9}, 3.8696405690776978`*^9, 
   3.8696406236621943`*^9, 3.869640655638855*^9, 3.869640715833083*^9, 
   3.869646220902361*^9, {3.8696463588996487`*^9, 3.869646400019401*^9}, 
   3.8696465282712517`*^9, 3.86965333610235*^9, 3.869655074774062*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"e18a8e19-a2e0-4cb5-9878-94a7bdbdb4ad"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-\
78e337587528"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableSoftNet", ",", "trainData", ",", "All", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}, {3.866272907421722*^9, 3.866272908705574*^9}, {
   3.866274679974001*^9, 3.866274683777981*^9}, {3.866275126894273*^9, 
   3.866275130882132*^9}, {3.866275621030303*^9, 3.86627562449095*^9}, {
   3.866275800963348*^9, 3.866275804851942*^9}, {3.866278286918571*^9, 
   3.866278290408846*^9}, {3.866279939718389*^9, 3.8662799438283052`*^9}, {
   3.8662825835076027`*^9, 3.866282587086446*^9}, {3.8662848978232517`*^9, 
   3.8662849013340178`*^9}, {3.866301199025255*^9, 3.866301208705173*^9}, {
   3.866302091405136*^9, 3.866302093072084*^9}, {3.8663022330606956`*^9, 
   3.8663022743807373`*^9}, {3.866303190918262*^9, 3.8663031961042967`*^9}, {
   3.8663508996403513`*^9, 3.866350903983953*^9}, {3.8663558607588453`*^9, 
   3.866355860917651*^9}, {3.86637013313169*^9, 3.866370138430928*^9}, {
   3.866370237003203*^9, 3.866370239455555*^9}, {3.8663703291644793`*^9, 
   3.866370333111907*^9}, {3.866370363265703*^9, 3.866370363711856*^9}, {
   3.8663720431119947`*^9, 3.866372048852154*^9}, {3.866372163198892*^9, 
   3.8663721862104397`*^9}, 3.8663723957836103`*^9, {3.866372460806899*^9, 
   3.866372466981298*^9}, {3.8663728465397882`*^9, 3.866372846690668*^9}, {
   3.866439863015705*^9, 3.866439889076521*^9}, {3.866444399919945*^9, 
   3.866444403398275*^9}, 3.866445596437694*^9, 3.866445994629862*^9, {
   3.866446077093233*^9, 3.8664460772227592`*^9}, {3.866514058957122*^9, 
   3.866514061965129*^9}, {3.866514093672724*^9, 3.8665140946276417`*^9}, 
   3.866514530731886*^9, {3.866514784096607*^9, 3.866514784235477*^9}, {
   3.8665148543229303`*^9, 3.86651485485518*^9}, {3.866517197949828*^9, 
   3.866517203967832*^9}, 3.866517357579501*^9, 3.8665174374755917`*^9, 
   3.8665175119230967`*^9, {3.866517590284361*^9, 3.866517620168564*^9}, 
   3.8665176619240017`*^9, {3.8665179325026484`*^9, 3.8665179399815683`*^9}, {
   3.866518111910069*^9, 3.866518112233807*^9}, {3.866518521945266*^9, 
   3.866518522115803*^9}, {3.866518571201038*^9, 3.866518588328702*^9}, {
   3.866518646862028*^9, 3.866518650143523*^9}, 3.866518704027602*^9, {
   3.866519202548511*^9, 3.8665192068871107`*^9}, {3.866552934111923*^9, 
   3.866552991359269*^9}, {3.866553502473754*^9, 3.8665535030716467`*^9}, {
   3.866554417382031*^9, 3.866554420050095*^9}, {3.866554652086327*^9, 
   3.8665546522545357`*^9}, 3.866604776742971*^9, {3.86680027773044*^9, 
   3.866800278113852*^9}, {3.868094967186932*^9, 3.868094986665822*^9}, {
   3.868095019045618*^9, 3.868095019220586*^9}, {3.868361304394638*^9, 
   3.868361304829949*^9}, {3.868361488191626*^9, 3.868361491259301*^9}, 
   3.868361525155517*^9, {3.8692213052091*^9, 3.8692213346561832`*^9}, {
   3.8692810440868177`*^9, 3.8692810484261227`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"306b98cf-6a16-4b58-bf92-\
e841969834f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "|>"}], ",", 
       RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", "targetEncoder", "]"}]}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], 
       "\[IndentingNewLine]", "]"}]}], "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866262883598037*^9, 3.866262913813736*^9}, {
   3.866800388275832*^9, 3.866800388780817*^9}, {3.8683615002909307`*^9, 
   3.868361522978859*^9}, {3.869221408816246*^9, 3.8692214711637383`*^9}, 
   3.869221553810891*^9, {3.869221654008464*^9, 3.869221732536498*^9}, {
   3.8692218215629063`*^9, 3.869221866933878*^9}, {3.86922191254809*^9, 
   3.869221913409645*^9}, {3.869221946220015*^9, 3.869221992865573*^9}, {
   3.8692220239803658`*^9, 3.869222074362282*^9}, {3.869222542284799*^9, 
   3.869222618659419*^9}, {3.869225398347341*^9, 3.8692254268744698`*^9}, {
   3.869225457230851*^9, 3.869225468811384*^9}, {3.869227062000464*^9, 
   3.8692270744112864`*^9}, {3.869277551850852*^9, 3.869277552935012*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", "testData"}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{
  3.8692215859194508`*^9, {3.869277581499093*^9, 3.8692775834166107`*^9}, 
   3.869294465445704*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "f4e16377-62f8-421a-8448-46d5c7e60796"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "2000"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"99.75", "0.11"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[99.75`3., 0.1116914835327734862`3.]], ")"}], 
                   "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"51.9", "1.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    51.8999999999999985789`3., 1.1175058879956190072`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9742590275264074728`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017815582456097712`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9706959110351879305`3.", "\", \"", 
                    "0.9778221440176270152`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9706959110351879305`3., ", ", 0.9778221440176270152`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0260780686770134551`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0018286279135101072`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0224208128499932408`3.", "\", \"", 
                    "0.0297353245040336694`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0224208128499932408`3., ", ", 0.0297353245040336694`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.14`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"33.8`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{0.9240207434566605, 0.8313383118032704, 
                    0.5686812109371688}, {1., 0.42, 0.}}, {{
                    0.9327910742147568, 0.4867636138131979, 
                    0.0033461443691232538`}, {0.9407494762323266, 
                    0.8945518903345672, 0.7331051781107936}}}, {{0, 0}, {2, 
                    2}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["961", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "961", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958549222797928`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.998960498960499`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9974052932018682`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{961, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9958549222797928}], 
                    Row[{"Recall = ", 0.998960498960499}], 
                    Row[{"FScore = ", 0.9974052932018682}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004145077720207254`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0038535645472061657`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.004145077720207254}], 
                    Row[{"Row fraction = ", 0.0038535645472061657`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010395010395010396`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.0010395010395010396`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1034", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1034", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9990338164251208`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9961464354527938`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9975880366618428`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1034, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9990338164251208}], 
                    Row[{"Recall = ", 0.9961464354527938}], 
                    Row[{"FScore = ", 0.9975880366618428}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "962", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.998960498960499`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{962, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 0.998960498960499}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1038", "\" example\"", "\"s\"", "\" of class \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9961464354527938`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1038, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 0.9961464354527938}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "965", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958549222797928`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{965, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 0.9958549222797928}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1035", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9990338164251208`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1035, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 0.9990338164251208}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["962", TraditionalForm]}, {0.5, 
                    FormBox["1038", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["965", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1035", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
Rr4if93pZLfbEX+YeMC+vzsaLrmjppcbWu+7Y4l6L/zh7ootm91RO9KDtmq8
F1OfzWHp4xKY2pPFqrMDlZi2doGYUhKp+twvGVsS52FNBY/rsf7swLG5KFl8
Vbwy/KM4KIjH6T94eE/l8Sjpkehn2C4eGBDNRtNMfK2cJZr24vF9B4+hnesF
s5x88bchj/2PlKi9OZt2SJp17BqPQ/qzKSrYGRsP8kg15RGya4VQrv0n5eby
mCR3wshfWqJ/mw6Z6Idg5tVMenhem6z+noX2AHuc+alN97/Z4/2AEPBGIXA9
HIyJBzuTjok94vYHY+/EOFo7LhgrTDWpvikYyT2noK0tiQpMCygnhcO9k4nI
SuLg3yMOKdcXkn2CHPrPJU1/moj1bxOR9DURr+ZHouV4Nj3ZH8uOxi6izRcS
4dGUiOvvElG4XgE31Rvmoq/EiVZnWqn2VKxd5oXBQ5xoucBjQjgPuuus0lZM
h3w2RzpXlHWi6EiBaamqR6U83NT9xVu3Q0XHlTwiLbyQP41HjqTNx7CI66aV
hR5cJpY0+XIvHC/aGZsqON3yLCS+CMCMI5kYuyOXszmZiaSGHKidmI1LJUFo
LQjAwksKOysNE2qR9O+IbjYSIvdw/B2pTtHdVDEBPN4vHC4YZV4WvS1GiC1R
3Yhv7quarMVjUWs4Km8tFSOezRcqJ3qJjafuCquu6olLtnShHztDcXVPFBb/
pUlh9T1V/T/a4vukSfB8NoQuVAfik7shXTnal9ZnBqJ4RAh+Ni6lfj2DsGGh
ITU7BMJwRyEVRxiQ4kQhXX07Cc6Ng0ireijxP/VpQOMAcrabgjAvJbLSeYSf
5xGU7CnUX+Fhlsoj2ssB7yWMhW2eLMao8RiXkYWz/aU4mQe/NYUapHiwYj51
v+eAMXMc8Ff5GtHzPwVGeM9ju7bH4YhhDtujnYQhKp71fJjDyix51vVBFQv9
FgfL5fOg+zMJiiw59ryLw6R2nh2JicfAtZKuf1RgyVee/X1vHVvtaYErta4q
3RU8qlpHwWfHVyF37QSx8MEWIXx1mHhW8k5/tj6us+w3GnMX7aACgy00yJxH
stFocFu30Yqr+0Ttw1tUau1KFCfzOHPGkTS2OMH36Upa/9od8q1+5FRP0Ahz
RfDB8Zhu6oaoNe54PL6EXocG0UVfF/RpnoaS72G02bmEvpe7YJ3XSrrhOp1c
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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1280}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 20}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 64, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f584aca1_4e2c_4638_8abf_1678d16b8d7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
TrVz2mHjyTVp4GekNBTqaJGSpI1ClZ3pREu5ApMBEe33nqnTrtnvWWm3eU49
q0yHUy64UxJKGNx1cBpdpfespaExJd3j96y0R0qVoFEqbJ5GQHLqhTmPJCZ5
ICCMK3u3v/h9ZQOhXyCruyuNsql5omsgpYO6yMcQ5qrp/ecA9dKcR4Umd9nd
OOLh4Nad94BbN4mZSooqegsYH5mK0/qrhtaTyzCnbGYBeyIhmJ3NqVucr7rs
0QeDaUEG0ywduK91CVBNOY07lVu6mjWCs6izXCCj7yJobIVY8KnqoTVpF/i8
CVeS5yEar2lo5DtpDGeQmjfnkc/EdlVUpCds694ECUS76Bd9WEYiwi7ooy4R
n7sMUe8CWyb+TXQ5B116q2dkU/8GW3tc7/0O6e0bXY2tyTXa88ng4GPrkt05
7oStTRw480rvRbl+Dv1Pd8n6ZidQnnp3vMvA530PgxOPrZP3FBJd/oEuH/TK
fBLAK5P2glcu3sPtjCwaAFYWmeOsfKVh5SGfQuds5nsbc0LT9gL3XSbP8eSb
x8wA7n9E3J+Bd3n7mfs+2MJsZm8A0cVDDNx3kQs8/c1/ddLsIWae7hmzIv7z
3uPCtwbnujTbiEUJz6d6NHzefhzKWpaet1KzbTm4/DQ39oJmB/JjtbPob2/N
zmVvuzjp2UnNJuQ7vUEqJHKQnXSVPv6E54t6Gk89hHMoBThka9gLHEp4585X
bVK1PRBqzWAMnNm6EPzIQHPaIOr6TtPVRanp6mSYXmVNSex1h3jnY8Gg/ah7
/LF1UUJMCV8wFL0QNCbCtXshLnV4+aeelpXto2ZzJfLLqwDB165/z/GsMo+m
SQWq7nony62LEt/9kUIhYd0MDHu9JGKVMKZDHJZJdddyu9kon2rGYldIDHc/
7rk1XGPfxZs6kbuU/oR7r6HdqUk594qizJiT0Mr6wf802VvLbVdajfOKnrw0
3xzhChK7si4nLaMBCmHyW8sUsrnak8axXsX6KWRFdFSKSVSUTV5ULbL1OCK/
6V2z8LBCtpR40aiQjRkLpZb5Yuim6zCO9Tb2scKjQe4cmEl5JmSwi1gVve5u
FrYrExSyfLoPxcKN6mpbbc7eV+UVK+d9aYQw1LpSl9egVHTyns9OXyU82jHU
xTvmjErtsV082kKhTgqLzXzilehm6DKnMyftRJzQzZayoj7/rnzQrzUnrV4b
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
8Bv/B9Mw2iU=
                    "]]|>, "orcInstance" -> 81997792, "orcModuleId" -> 
                    82336848, "targetMachineId" -> 79512544|>, 
                    140548319590208, 140548319590064, 140548319590144, 
                    140548319584256, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e45e62a2_4ddf_4592_bc6e_850723773c7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
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
NQoL/w5nPr/n
                    "]]|>, "orcInstance" -> 80869952, "orcModuleId" -> 
                    52654352, "targetMachineId" -> 81867088|>, 
                    140548319576608, 140548319576208, 140548319576288, 
                    140548319576064, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 32},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6e310331dc5af4c5", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 106872, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 17, 12, 27.801908`8.196649583664668}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzVVs0NbTFPfGJDAzRAJfRACZ/EmlYphRJYIo40ml/nPry5Ook9niT2+P7r
P/7z3//jn/78+fNf//znz7/8Yfbf//Z/f1V/df+Lj+LRPvtmOC6eex/MXL4q
jnovLj77ZfnT93bfmfmp50nrtc3D8NJ8btw1rhrH1lF8i3f1/ghftTaufc+V
tXVxPZdYfjVv2lervlzncXG//ize9XfrcsVXxUvPvbqPlY6q++r7rOaNe270
rVqqD6u5tu5vZqu50N4b81/d+5Uup/xVa997pR/Xepy+v5qXxTH81VxkPNK+
UXGRverja31e13vqd3UPKH+6//VrdQbhMT/1241r+1S19r4Yn3buvK5zllfd
ZzxUv+t5h+LS/x3X9ZHyQ9bmUW3V92q865/yQ3lU3FV8qhtqfreeGI/WX+2b
dp6v5qGKv5qHal6Uh/mreMjv6v7cPCx/2w8qHuOj4rPvtI7T/kHW9t3Ve7X5
EN7fpqtt3a3iU31rz9PqJ7N0vqT379Yf82N51/MTxbm4KL7Vw/bcbp23Oof8
Vfu1viL/Nc+V3rt1nt7j35Yn1WsW7+Ko+2lcq69q/lYfUru65/Vcc/8nrHgw
nNS/1XeWn/FJ373FYX6unqzzf/db3VRxVWv7NdXd9RxU8Vd9gvi0c4zlcX/d
eDd/yhvtf9cRXhrP4tR8CMft6/Q9mbVzvZ0XK91134dZe46ruHTOrHQA5Un7
XV1ned18r+/B1fv0vdC3ut6+s3tuN6+7z/i5ONd10OpEOifb+cjw2rq+xlVt
PUdSPVjtI2vn6Wreu3lbnHX9u34tLvJ3/Va6+7rervSE5WOW5mHxyE/lubpX
1Vo9eh2HcNg647FeZ3nVbzU/y6PiuHqr+q10ub0/tJ7qz/W5rurK1WHV0nmd
vuOqL9S49T2zdZUXW0/91rq+queVrfoP4SK8to5YvhVumk+919X8ZTzb+eHy
WPFq+6p97+s6bvkgXixfey6Wv82b3ssqbjV/27m85nfVT+k8b99dtdU9rvOo
edN5o+Zf1YX7nqs56fJf/Z9w+TIebf2v+vZ1/Cu9XZ0jrWvmz/Kr8e3++vyr
/Kr/Ov5KV9r/By7Od3/9/yDNl+KyPCpumnf1nu57pPXg5lXx1fwsL8JJ57G7
3uZz5xPDRebWFcNZzVOVz9VcbPuxvQ9mbR2479Lqbfr/SLUrnWjn90qPVvW/
ng8t/jdezeP6uXOL4bbzrf1/4uKv7s19xyvdTu9/VWcur/ReU71sv1c8V3lZ
fNuH7nna91b91vrU6m+aJ+Wv7qe41/WFcNI6WO8jnswPxanvx3AYPvJv70nl
w/yu6qp9V7fPWV733Vf9vdKB9t1ZnNtn6T1e1UE6n67mS1pfbb+hb4aT6myr
7ykPhp/iuHatD+l9Mj5pnbn82PrKVv3A8Fd60upeqneqP+O1et/0Htu5uO7P
tD5cfogn46Xa9fxx8du6a+er+16qXztHWf52Lq+/kb1631d64FraJ6v50+pI
+j9A5efyWfFKebi6qdp6Drn47Nv1c+9btfS8aZ+595HqW6u3a74sr1unrp/L
k9lVn6R6lfJXcdV3QziMR1pnbX24+rzqb4aP/Npzszwonq0z3LYeXH7ud9t3
bv8xXDXvdx/FqfnWetr2B8NL/dd1topjfi7vlNfaj/FsdTvFfcWr1Y1UX67n
o5u/zevqHNp353Ebj/yu6md13vb9kKl4zB/hpvqo2qo+1/2X1ms6T1f1nfJy
+a30g+VnvBh+er8qL3Uf8WP7rn6ovFq9Qt8oP1tvz4fW1/MwvZ/2nlZzLZ1z
V/2O/K/7KfVP61T1c98hnTfuPsN1rdU5t/6v4tP5stbxdq6o+Vx85n+VX827
5qHmZ99uP7b5UFw671Qe7TxD1vZdOt9bvXHPsdJ1l4+bp+2fVt/a+lX3kX+r
h8iv1Qn3vdH6SlfaOYvysHXGk+2n78bs9f2o/q2+qvuID+PJrNWH9r3benD5
tfWj5lvNS9Uf8Uv1fvWuDK/lldZV2o+tnqv+yFZ1p9qqT9z+dnHU+lLzsO+0
D1Vebt2m9b7WQTWfyjuNW8+dle4iP7SPvlW/tt/Qeqv363tK/do6+K67trpH
tu/Wm5ov/W7rOa2Htf6ktq5rlkfNq8av7Fr33Tzt/EvrbTUn1DxXc+lXeq7y
XOsV4+XOi5R3us6s1U+3DtN+aevmqo9UHMaP4VzzdfFd3UT77T0yS+vQ9UP7
rr6gvIzPFY/U2j5dvxvjydav5tBazxh+qkupredjq1fteyFb6dM6T3ru1bxg
fszcd1nNr5aP+57pu691xs2v8knn3/Ucdecni0/1bnX/zFbzxp3TKa+VPqbv
7dbh9fun/dyeR8VX86d5VB7X973uR7be+qX76bt8/a51WI1b/V9Y3fOV7qfn
dfO4eVW8dd2leoXw1Dh3va0/V98Zj5Ufs7YuV32w4qnmR/7Mz91v64fxc9+F
4bn+7vu6+2l+ZFdz1Y1n6+n9rOaH259qvnafxbW8V3ML4ar+6jrLd90naX+r
8SovFn/1nulcYnalr24e1Z/lX81h99wuH/cdUz2/7s8WH/mt9AzhXedDfut5
19ZnmpflV/m4turztO/WcyfVHWQpL2ZtPV2/P9u/vk83z1p3GU7bx27+lc6y
vO17t/Xs8lufk/FJv1V+6vqrPOm7rPiqfm7fuLbWe7bv3qvKaz2f1Xjmp5qL
t643lPdKL9d15/JczTmEr+KlfNz1dj6s+gN9q/lX94D8VvdzNX/c3zTvd/9r
rf/1HFTv5euv8mjrRf1mPJifiqvmcd8jfXeXlxrH8FreV33I4lP89LxrnU5x
03Oy/Gn/tH2Z6nnLm/Fk+6murc6xrjfGT8VZn2/9vqu5ufK/wvnGIbuKW/dv
G8e+V3rr4ro6uz53mmc9Z9K8Lk5ah25/qnEIR/Vb4a7fcYXfvueqv9K5qFpb
P+u+XZ3vuh9S/WN+Kx1qebl91d5v2lfrc6k4bL29RxU/xUOWxrF4975bXWl1
+FpvV3goPq1H5I9wGb7br20frOssnctpPbb6z/wYP5UHspWO/S34bh+19b7S
t9U8cnm0989spZ/XermeR2q+775qri65+18/t/5YvnZOMXyXx/qc7dz+7re2
muur/xev5r7Kh+EhXLau8kzzrf8XrHRxVSeptfOSrbN8K337lV6t9WhVr259
qu961SfIH+G5/NI+bd+R4az6pe3H9h7SvmU4aR2otp4Pq7m30qN03jJ/1289
d9l+Wwcqnru/1hmVB8qzrks1r5vvat4xfun/iHbOuPW4mutufSC/tP9Uftc6
p+Iyv9U8us7n+q/qzcVH/ipvtr7qT5VH2ueutfju3F7rGbL1HFBxXP6trrr3
kc63FCfFc3HVvKv86TumfNu57c659H8Bwkl1O9U1xoPxY7zc9VRXkKV6tta1
tj9W+ZA/W//uq98qLvJL58Kv587XVn2zmnvpPGP5rvBZPNpf51nXJ1tnuC6O
y0Pt9/aeWdyqHt17VvOxPOn8dN9B5aPmZX6que/F9lc67L5TG4dwkJ9qq/tN
+zbFYfGunrH1tI8Qbvv/Q83T5lfx3LxunbdzD1l63rUeMEvPz/Bcv1a33DzM
T91vz4n81W+V32qupPncuDTP36I/q7pk+dH++lwpjxTXrVfV2vpEeGqe9hyu
rqf+bb219afm/a63c2PNB62v5m47z9j6WpfUOGbu/a380r5o51X7f2E1P1JT
z5Ge2+WR7iO/VpdWdeLuM1vNq/Ze2/9V63mfzpv1O7Q63vJP8zIeq/tf6831
vE/rEdnV/affKj9XF936XcWr5uZX41P8lc66++450/wqfvsebD3VIebn5m3n
D7O0jtl+ep/om/mnfFoeanxbv65+qPlV/oxPip/yTPmq+Vb17vJN3x/ZSn9Y
HItX9aC9T7Te9g1bR/Zqbqb9w/Dd+PU8VPFfzS81bjWfkV3pyFW9pt/p3FP5
pHNgpVOM7/pcaVyrP1f6zXi466v7QrxcPJe/u56eW82DrO1Hhqfma+Ov6iR9
n5RH+s7IWr1GOIzPqu7cODef+t3iuTirueDiMV7tt3uv6v5ax1UclweLc3m7
+rXOm+rZVb2m99HiI0vf37W2TlW/dP61eqpayqN9X/a9wme47fndvKq588aN
V/2v9RDhobjWT41P9dbNi+zq/VNdde97NQ9RfpZvFef2r3tuFsd4sf10TqQ8
V3XrWvr/Y+WX1knaLwgvtbXeqLhu/lR31G93veXrfrfz8+p+0nnE9t2+Ui2t
H4a3mmdsfTU/XP1DOC4P1T+t31avXZ1h5tbFqt7X9bjW8zRPi6eup/EtfvqL
8FleZKt3Xuufmp9ZW3cMd1Vfar42jvm588L1S+eWW4frfv7us++07lp+Kl/3
nCxevX+Xp5qX8US4ahzzZzhuv6j77Zxdx6XryG/d1y7+qt5dvqmteaTz8upc
K15pXSMcZm39rvKr8dc6qMYxnLbO0jnB8BC+q2eMJ8vv+rX1sPJr53Y6d6/0
re2PtK5Q/lXfsO9V/bP1FQ8XJ+W3OvfqHVK+zJ/xVW2l/6murNbT91jPjbQ/
XR6pzl/pYdt/7nx18Vb9m55TtVU/Mly2/t1ff7fvkdaNays9T9+z7dfvOvpW
ebA8Ll7Ks63n1fxt49rzuf2r5nd5Mn81j8sP4az7a6XDX3y2vv5/4NaJ6rea
Lyouik/vS7WrfGn9pXxSHLTP1r/m3kMaz3DTerh+Zzcfw2+t1Q0Vf6Vnaj6V
z9UcYHbVR2mdrfcZb5Wfqzvpe17r6wof8Wb7bf9d9en1/GrnHfNDdnUOxufq
Xtx3Xvef6v/dT/0ZT4a7rrNU/37F050DqzpL64fhq/lZfHo/KH6Fx9bbuefa
63mQ6k37vmqfp3ql4l7NAZYP7bNvt6+v5oR7P+l9pvNA5eHmS8+t4iE/dX2l
O209tfnRvsqjvYcWr53H63pI9T2dK8hfxWntVV+l89XlwfKh+JS/ipeeQ+XH
/No86/OouOu5sdLt1bxd5VfXr+ZPeq8In+VN60z9Tv3aOdbWibqf4rvvkPq7
8StdTu9LjU/nIMvT4jEclQdbZ3lW822ll8zaPMhvpTvt+7D9q356PYeZtXxW
/df+P1DztTrC8qT+rU60++28Teul1S93jjI+zB/5rfsg9Wc4Lq+0Lxgftp/q
BcNP7zvNp1pan63f6n+Kaldznfm3eoTw035mPNy8q33GE327fFe6ouZ3+bj3
o/K4/v+ymifuu631vcVx+9091+oef6UbCFeNT/V0rf/pvSGctG5W79D23Ypv
+z5rPUj7tp2TrbX1iNbTekjnVrqv+rvvmPYL49XOh1/Nuat3Ws2ltp/a+bKq
m3QOt7rZ8mN47XxY8XPn3qo/Ea5rbX20ffwaB/m775fifONUXi6Plh+ydO4w
Pmpe1Vxd+X63/erqxEr32z74rqv8WJyaL53Hq75V8dO6Xc2tdn9VbyiPmv/r
x3BX/cm+V3MBfTNb83bvCe1f3zPLj77VOJQ/tV/hM79Uh1netp7S+/rbeKq2
mpcu/nqOsnxon+Gv5pfLN+3LtV6l98FwUZ7VHEfraT1e1W07Z1yc9RxL78/l
hfBcHi6OGp/ifC3tH5bXzee+20r/Wl6r+l/pgauz6Xnad0jzqTirvkV5mP/r
d0vjfvXeKr7rh/K1cyI9f9sPr+vTjVPxkKl13M6pb1w759p7de9bjU/ztXWw
0l+Vz1pHGP53383L4pm1+Ot7YPnQN8t/VU9uXsT/Ki71X9cjw1H9rupnpQuM
T9tfyF/ltdLJK1vrhhrf1ourt4xf+u4s75WeqTip/+t5w9bd+HR+uThr/W51
v51XDF/dT+eri8us7V+U19Xl1Tu1c83FTf1YPLLV/FzxUXmxOHfeofj1HGnf
Q+Whrqs8GD81LtWjNm41B9Y6oNp6nl7VlRqX4q/zuXqU6nb7TiqfNN93X11n
vNr4tk/Wc7btq/U8eKVTqY69ru9vPFtvz5HyvarzFR+Wj+VB+yp/1VZziMWt
64PxaOuk7TeXTzt3EG91Pd13/VjcSp9XPFz81T26eK/1XdVLZKs5sp6jqT6w
PCqO+15unPuOqt9KV9s6Xutoeg8r/W7x0jypHqa6w3itcVb37N4L80OWvjPL
095v+96upe+zqgfkj+Je6wKLT+8jzcvw3ftZ3x/6Zvir+0r7Mr239Vxj8QyP
WTp/Ur+vv8rP9Vud3zX3XVlcip/qKsvn4qTnT+Nd3Db/ej6u5tRKr1sda+c8
Mjdvqg+pveLT9j3yS+v5+n9AyzPFYd+r+l/dr/v/YH0uhqvybS19j1RPr/K4
OpK+N/u+zn81N1L9bftTza/mdb9X99G+F7KVXiFcdz/VvfRdV3xcHmp+5r/S
Bbf+VD7M311f9S/Ddc/L8rh527m10ovVO67nAopn627cSh9X/dPO6XSeruYh
+v6aq6Mr/9X9r+YCy4vyqXlXuro+H8qnrl/rYYvn9i3bv9atNS6KU83VMRe3
rQtXX1a6xfi4+Ku+VM2t++/6qg6v9PrVXFB/vzjqdxq3rq/rPnPN1X8Up+Zx
cVe6vJ5v6XxJ37+dN4yXiuPyW/dbWq+Mb6ozDP+q7pildbfSd/ad6t3r91fj
VEvfo9136zvtO4aL8rB1xg/lUfm5+RmfNS+Wn8WnutrWIbK0ntp+b/mq/mpc
e/9tftWu9KjNr8at+TA8l4e7vroH1Z/hXM8DZu08fD3XVzireZT6o+8U18Vj
fFx8dz/tE1eH0vtl/ipfxoPxad8L5WF5VfxVPTB/936u5mSr/+s6WOnHqm/T
PkQ47flavPWcY+uunqz1uD2nm6d9f/TNeKTfbT7m1865dv6j9VW9q3nTukt1
DeVv37nVVTefipvqqsrH1a32f8dKt9fv2J7f5efipHOk1ef0/0lal6nup/8L
Ur7MVnM07df1HFnjtDyv6sLl6cat9Q7lZesMP9Wj1Ry7uicW59aHG9/qG7JU
b1QcFr/Sufa+Wzw335UuqHXc3oNq6dxx38HFdXmqeRke48lwXZxX9cksrU8U
3+pmWlcqT5bPfVeVTxvv8k31lVl63y4/dR35XeMzu8qT1h2yq/pZ6x6ydg67
95bOTZTvV++p4qzqU8VV49b3o+ZJ52pal6mOMpz2/wXKl+L/Sm9YvOrn9sV1
PV/prGttHvVe03dXeaj8Wn1EuC4Pxq/db+fy1w99IzwWn+KsdFjFTXHS+ani
pTjIPz2vipP6rdbXOprWSzp301/Ep+37dd+l98Lw1HwMF9mq3xlP19r6RHxY
vnV9qvbKv53XKH/bv4w3ilf9W7+2j9J+Zv4uD/St4jA+La9XPFocZKv51+ZD
+dm6m6fVk3SuqfjM1nNuNe9cHiv81f2nOOzbrSdmK51g+Ks6YZbq76ov2/dx
+al+bj2kdZvut+/Wnpvhpn3C8qC8Kn5bl9fnS/vO/b7WlzVfhN/mY/Fov8VB
tpoXjM9Kr5lfyrPVg/Z86rebn8WxPMjSemQ4bR2uddKNX+vaFzetF9W/nXMs
76v/CWp82g9tv6T6lM7R9p1VXHe97eP0ndo+WP1PWJ3frYOrulnzb+crM1dX
27pwdZWtr77bd0X+zNp3XPWpioviW/2+5qviMLyUd1v3qt96nq/6ta2D1f21
8wPFtfpwrRereZeeczVHV3GruZr2P/Nb6YrblypOe9/IUl5pHyPcNL6tI/bt
9oWa92/V25VuofW1zjA+Ll/VP33f63nkrjP8VmdZPpUP+17NIcYvnRsqDsuP
vllcm4/xaOdp+pvisrjvuurX6hSyVb25/m1fqfmQrXUh1b1UH9x4hOfGqbxc
Pzcvi0P51Xxtv7Y8WPz1vGnrWd1n5r4H+251xeW30iW0v+K30q92DjLc67mg
5mN4aXz7jXi4/Nq6YjzavIwHszSfirM+n5s/9Ut5pfNS9X+ls26fXt2rO4/a
umnnOftO32/F62ur87hxKQ8U53638xPtp+db6b7LI9Xtlf4gU/OnvF089Rvx
UPdb/U/zoDgVj8Wv69bN4/Jc6YNa/9d6m9a5+t7I2v5T+azx0T76VnmoeGkc
W2c8mR+zdD6097/W9ZR36s94tfqJ7EoX0jpw+aZ5V+da6zLKh76Rted1+aR1
uNJBhp+e91c80jmo+qV6pr7vWv9XPK90qz0H2k/jmb/7fqq5OqjmbeutrWc3
L+Lh4rr3keZh663OtPfc8lL9WTzj1epzytfFT/8PuHXZzsuruJZ/OgfSd27f
28VTebnxbr2357jyQ9/MVvN3PReu/te49c5w0D6LV9dVHmv+q7nh9pXKF/mp
tp6LKq+2flyc63dY3/v6HVC8y8+tF5eH++6t31qP2nWVnxqH8qXvl75/O8fS
OdX6r3UkzYvirt4xfa/Vd9uf7fu4c3b1Hmq+FHelh6k/slXdX+Vx99V8ri4z
P7cO0r52cVHcWkfdOamuu/lS/XLzun2m4qv51Hjmh/ZT/ULr7bxjfFWeaL3V
NXUd7af11N4Xw0Nxaj+sdLadkwg/zYfiEL6aV+WTxqv4bV70rVpbz6s+UHml
utzWYVtnqqXzUt1vdbftfxVXtdW7tfnWfZDqpBt/pafreHWfxa31nvFq9Xyl
z1f6jfK08zytD5Wn+52+b9t3jMd1fah+6/8R6T2yPCxfy7PNn+o9w2V5Vv4u
P3c/xWl1SI1j+dt5sMq/uh9mKm7af24+ln9V36keruLaemHryC+t5xZfjXP9
Vnq56oNX+AjH5aXyvqqf9J7cvKtzsXVkq/pW49T86/dueaI4dT/Vk7ZPVdy1
fql+6/pO61XFcfkwv9f6u1pP64b5recui3d5MT8VX82X9g/yV/kznPT8qq3q
Fvm152b+1/tp/6TnuKrnNa+27hhOOt/cPMx/pU+tTq7yue+60jWEr+Kt5pfb
b+m50npT87/SCcYnnUurd0nrAuGq3wxnpRvtt1vf7dxX+bQ6mc67tF6ZufW4
Wmd83P2VPq7WkaX9k/4iHLbOeKt8kV+6ruZtdf9ap1W/lkdbTwinxXOtrZOW
V6vD6flX79/q7/X8S/Gv5hDK0/JL91c65tq6b9P+YX7pXGW83PxsvdVtFXc9
r9v6///2viudSvUhPadq7nnS/wMpn9Sv7QP2veLH/N3+TuOZP/pmpvJk8Sqe
msetY8Zv1R9X8+h1ntaPWTs/2z5w8RgOsiv+r3T2V3rqrrt1mepi+06r91jj
IVv3Qapzq3tO35ntt++2fg/1HtI52+ot47GeR1d15/q/7usVHxSPbN2v6/1X
uod4uPla3Vrdv7qe5k31KM2H/Fxr+4/hIH/Eg/mv3vtvw3X7ZD0X3e9X82d1
DoR7pYspD/f+1bwrHLS/0qW0r1bzcq2vLJ+aZ8XD7RPGo+331ZxwdeLVfHH5
IUvr3L1flE9dZ3gMB+2nvyku47/iy/JcnRPlY+vM1nM5rV/Gr9UBhveqHhhv
lS/Kp/Jo9ZFZq8upjq3qA8UzPxan4q30C/m7eFc8GY7adyjO3V/VX9onLa+r
vOm3mq/tL/X8af2yfOl9qnnUdTcPW0d2NT/cOl/X40pn2ryrub6ahyvdXtdH
qhMsn6sn7b0zvDTvSgfauZPqi7u+6iMVX91neIwfWk95tPPy6r5aXWr7ipnL
t72/dD2da62+Mzy2vuLh1g/Dc/OpPJm5vFleNd9aZ1ZxLt+279u6SecM+nb5
rev06v0QPotnccwv1SfVP72fdJ5d65ya3/392us6RNbeK+Pjmjvn1LxX9cD2
fzUXXXzVP60X5nfNj+Gv52+qX9f17tYhw1fzrXi67+TmQ/6vvl1bzxs1Ls2L
8rU47vuluoT80/mt5lHzr3SmfZ9r/BYH+af96vZ1Wmeq33oeq7zcc63wEP71
O7j9tq5PxsPFSfms9dnlxfilfND6WidSPm09qrxW7+jWoXsvDMfN1873VG9b
HUz7YNXXjI/ql/aHm3+tC6v/De47pDqPeK10w8Vv9eS6X9J7b+u6fQ/Vz+1T
tM/wV/qZ6sOV3rS8XJzV3FrvM75XPL5+jF/b1yyfyrutY9Xa+XCVp9VDNe/1
vET7LD/yd/O1OO59q/mYf/p/IO3f1f1fvWc751Eel4e7n/qjuNV5Ux4p3nUd
tLae8+u5jPzV/df/M9r3ces6rcf0fVxr/++84qfyUfHa+07zqnEuPxTn4qV9
1OpC2/8ursqznWvp/wWX30o/1vNhNbdSW88Ptu72T3vetA9XOp/yUXHc+FXd
r/1dfq2OI0vrQMVN50arl1ffK51s34n5Xdc149Xqq5qH5WPxa91t60HNs9pP
87v31upMytutB4Sf1nnKa63nbn266yoPl69qrZ6v6mmteyierbvx7nert+o6
ysv4rO5pldfNs5pD7np7DrSv8ki/VVvrXnru9j1QvlSfVP/2vCyO8VHzufxc
XqvzuXXF8FO9cfO6+VX/K/1M5zrzS3V8pcOpjrj9up5Tbt6UJ8Jxean5134r
XV3PlbQO1HtQ/Zkfy9Pe01p/Ga5bJ258+j6r+2r16lXfIT9k67nW1g/zZzjM
VnOi7aeUr7ue9g/DQ34qj6v7YH4pjorbxiGc9B5TfU3vB5l7/rXutzzUdReH
+ad9c62P6Rx091FehKNaqmsqXrrP/FXdcf3W8yzVjVbPkB9bZ9bWr6rj6/O3
fFG8a62OqDxW84r5t7rhvn96D6u+bus3rRtk7Ry/muvpPbm81nWn5lm9Y3pv
bjzLy9bTfKt5v8631g1kK/1jltZr2p9qfhfPrXeVh8pr/X8B4TDeKv5K91fv
p/JI3xfhqeuMD4pf8Wr323pL7z/VzTbPGl/FQzjpPFPzM790faWjK31ezZnW
P333tO9UHmrdrd55dZ52Pqt47f+WdP6zdZQnxVv9/1DxkL9qrR5d1c/V/xmU
R11Xv9k6y5fiMPy2LlP9YXxcvmleFp+ut/Mx7du0Tq/n8vW9MWvPnf5/WP0v
YHlYXPoeLJ/KJ+1DZK5+sbwp77YP0vpv+wvhMHzX37X0HC4e8lvVE8JV193v
9H9DWpdt/vSeGV7q39Zvq6epjjM+KX5r6/pu863n6+r/Q8p7XacsL/Nz5wfL
1+J+/VPebB3ZWvfVdfeX5V/3jeq3Ogfjqa4jv1VdqLzU+FYnXFPrgn2v/xe4
+KtzuHzUfKq1/ytW95HyWvV7Gu/2mbq/OnfKh+VR8VSclJ+63s4R1dr6bOca
4tPWGfte9+n1u/1K913/q/e91sl2Xq308JrXCj/VGxSfzsX2fhCf1N/t71U+
NR7huedRcV1Lz4P23Tmbvl+7z0yNT8+t5m3nqYrv+rvf6T2kful9qPEu/tWc
d/t+fQ8tn2+cO5/buZ/isHWEg6z9f7LST9e/nWvt+7m6wmxdLwiX4TFL753l
TedxitfWSVpXCEddRzgpvnseNT/zW8/z1T2rlr5z+45XcyTNdzWH1PhX/dnO
IRXXPb8bp97nWj9dPXHrdzVvWD5kK31J66J9V5WHyjN9Z8YX+aFv5tf+pnwQ
D3Ud+a3q56ouWn8Ut67XVrfa+cPw1bwqLltPca/6+HqOrnVJzdfWZ1vHKk+2
ruL8LX3S1mdblymvlB/Daesqfd/0vGlehufmU9ddXDcu/Wb503ty/d13W+lT
is/yrfOn75zqVsoL8VHX2/dn/szcPmvx03tn+6l+qTyYH+On+qv8Uj7Iv9XV
dE6kc/Rr7Vxc9an7vda99BfZql7bvljpdltP7n7KS83T8lbjr+og5X2lP+7+
19L7RubqgWopzvo+Vjri8k/tWvdW8e69sLi1Xq/fbz1PWf5WD690Z/UO7RxB
fN06UuNQ/Fq3V/23qk+3fhiP9r4QLltX86W6xqydh2h9rYPu/bX3ttIhhqfm
b3Vnrdtpfa/uB+Gr+Vxe6bfLr52P7jna/nD30znN8qx00X0PNW41f9t3anWA
4av53XztPvK/ngto362fFNfN5+6reVs9SPfbe37t186ha1wXj/kjP7ae8mrn
jYrX6nfLt9WF1A/Fpbq27if33Rg/lIfxTPkxnul6my/tp/R9VnWl8m31C+Gs
dNzlkdqVPqK4Nq9qbV0hPMZrXcdrHPe7rW/Vb/U+61+WR11H3+76ei61cYgn
45Xei3vP6X0xv6s5yL7bvnDxr86BeKZxqznG/FL/Vt9QvjS/i6euq3yv8rb1
iuxqrrW8WJ6031zc67mk8lL5IPz2PRk+80vvT/1GeK0+reZtev/reel+t/3Q
6qcav66f9nvNe8Wf2Vr/GH7KB+Vv9THFXd1Dqx8Mr9XN9F1dPWnfx72v9F6Q
uTq9mstunKsX6Zxo5yfjk/bFOp/q3/ahyhN9s3zruFW/rPTItbbO03m/ynd1
/2z/SgfU+2WWvhPyX+ltO8/YOrPVHF3Xa6szzK/tRzWPus94tflS/ut5v5p3
bR+8rtO0fpn/a35X9Z/q4PWcXet2q2tuHaRzfqVXbT+69894rOZnWs8svtXp
tY6r+tz2kZpvNb+QvdIdNW/6HiyPy0PdX+dr817r4kpPWF43LtVHF899N5SP
5UXW6gyztB/aPmrv9bpfrurbrQu3jt18zNp57L4Tyruq/1ZHUvzWrnQIxbf9
sdarVT25etT6rfCRfxrX1kU6J1j+dt+9T+TX6kdbly3+q3dEcSofNV7lx+JS
a/Om/bGuJ9fv6+/aSp/TeLfuVvnRPltv63TNB+G5882tg3Qf5U3f07V03qX5
U91N+8Tl0c6RFY8UP9XndX41nuVz95mt/1e094n2kaV8VBzVH/Fd6fT1+VI8
d73Fd/dXuqjmSedGWjdX75R+Mx4u37b/1fyrOaLiofgrHm19fi2d0+28RHnU
vOl8Y7auF5WX+w4q3ys9QtbmW+lgOyfb+lnVO4tj6y6+i8e+2zwMb60nK1vr
wiofyqvipHWxmu/ML51XCD/Nm+JcxyFbzaH0Xa/yIUvjWP60j9P7X+tE+k5q
3lZvW76t7rX1m9aLyzutx/U9snhkK51p+y59n3WftHPS3Xff261/FVfl6+Kl
7+3OqZbX+l7Y/rqu2jnNcNf5VnO4jUf+jDfCT201L9fzNuWJ4tK8Kp+Vnn/9
1XwsjuVp77W1tl7ae2B+qY59v1f1ms5jFbftz9XcY3lY/FrvUZyLx3DSeb3u
49V8dOvQ5beeL6v/Falep/2zfhcVn9n6/0F6foSz6pure1qtqzxTfU33ka31
1T1vez8qD7Sf4qj+Kz1C+a7yI391f6Vvbf2hfRav8k7rXM2PLNWP6/5S+bT4
Kp6Ku+pXlWeqry4u8l/fhxp3NcdUfixfOzcYD/f+1HwMD32zvGmdunldnHZ+
rOaJmxftX8UzXHd99R7su9WD1TlSvWp5oG/XUj250v2r+avuI3+Vb6qPrh/j
m+ofs7Y+r+dLiuvaSocY3tU9uDxb3XN1kOGhuFW/uedc9YGbB/mrOK0+rPWI
5V3PO4Sb1vd6va0btN7OW7cOW91n/uq+mtfF+/qredx6Vut2je++J4tH+22f
tLqfWsoDxat50L6bZzXHVve/2k/xEA7zR5byVXGu7nOli8xWdc3wV/vrOm95
rHkxU+NXfdXeG8J3+bl4LS5bv+qbVB9SHUjr6Luv4qfv61rbH60uqesrezUX
03pX/dv+c/sjrXvmv5pDa9z23pGl82bl5/JY3yPDZXirb8QH8WP+KC7V/Sv9
cHm6fbXqJ2TpvbRzJ31PdT/VUYbf6ruLr9qVjl3Ns9X8bOuixWHW6nw6l1N8
xp+to3iGu5oLK71c62KLm/JQ49w6v343htf2h9svLp+0LxCeamlfuHm+OOgb
5WM4KC7VYRVPjXf317rt8kzv76p/WB7V342/4u/Gq/2QzvOVvq11es13pd9s
/bu/6uO0T1N9d3W4rYO2n1U89zzIr53/6/yqX/uuzFZ6ubrntr4Yr1bv0vyI
D7OVXqjfKp91/7jxyNI6Unmt+kT1X8eneKu5sNaZtI5W8y+d+wxf9Vv9r2B+
7ru6PK/qZ6XP7T2751/1AeOJ8JAfW3fzvopz+4Xhr/pdjUvfz7WVTql94M5b
1+/q/85qDqT34/JFfuhbjUN5133B8qznWnqOK91u64vZWjfbe1vpcYvP4lf3
m8at9VS19f+H9h5SHDWu5dPe/9WcSfddnq2fywPFq/lbfU/X1f5u30H9dnlc
98HX0r5N37/lkd7LVR8wvHQOo/X23dv/FQy3vSd3/rZ6kupDmo/xYHFr/U7j
VnWY6rK6nvp9/VN9Zzhq3qv/Ay2Pq/e7mpNtH650Kv1/0Z4nPV9b720/fONc
Xu49ML/U/+u30v203tr3bPVvpScpzlq/Vv3Q6k3K19Uj9r2aEyv9VPO098ns
V3qr4iO+rr3SFZeHys/N4+Zn+O47rvKt9913W5275bvW+7bv2vOqdq0P6/5e
4bt1tsZh1upkWocpP7au7qv4yG917jbuNf6rfl3VH+LXzgvmz/zW9bLS1bZ/
V/ePcNl3W08Iz+WD/Ff361paX6qfW39pf3/3VX/XrnTT3U/r+pV+sfU0Lq0T
dZ19X51TzYtwXbvSMebf1m37Lu38Y/urOZfOxbYvVByWX91f9wvLm87Vlb5e
6XB7r2h/raPM1n2P8F1TebF4hov8U/1Jdf5V3TM+qq3yrev3b/FH8eu+auet
W4+qn6tfq7xqPvad9puLg+IRDsNX8Zgfy5/6uXFpHaXxqbnv4/ohf3fd5fNd
R9/Mr+0flsfFRZbWr5sv1Y+1rXXErSuGq+Zl+dp6d+Ou5x3imeops5Sfi8O+
W9129RPtt/3b1kWKw8x9v6u51eZzeaws1U+Gt5r7jGf7/iku82//D6RzDu2v
+mrVb+n9MEvneVqvaz7relzXM8vDcFRr9aPFc83VIzXe1edWd1Rb6/z1nG31
Jp1bKl46pxAu+171D9pf9QP7bu8prUe3ntL+Sr9VPPec6T0xXuv6Zt/X99G+
x4o3+mbrzK+9L+aP8rd63+K49XxVbynP9p5/XUcqXmtX8+yqzhhOq5PXfdvq
LsqL7Ore1HwtL3Wf5Un12rX1PPr6v9LJ9p7bdYaf1mt6LpUHi1fzre4rXV/1
mbvPcNV1NS/Lt9Y95N/W0dW5VJzV+Vf/C9S8DHf1v0JdZ7b6n5Guq3xUnLaP
2/OrPNb6oZ5HxXF5tOdE1uZp64nxup4jK79X+qbyceNZ3CudZniprryuIzee
+a/1hNlKT1Q/t3/ce1npmGrpnFidy41H36q5uOv56e637/PqOzX3/lH8GmfV
522/unXn8nLzMn8V50oPVX6/qndmV++7utdWD9f/F9w49t32m8oj1ZW1Dqb1
0+Iha/vO1YO2/tbz2b13lR+z9lyrc179svwuv+86+mb4aX+yfGkfpveq8kr3
V++5rueUd2tuHbr11sYhHsjaOmW8Wr1M9S3to6v1VV+t+bR9psaptu4XF5fx
UtfV/C4PlLftvxb3qr5XeuPaSs/SuknPtZqj63dneRi/VmdbvPU8SfmpPNF6
+r6pLrU81v2M+LA4t/7Vb9XWOuLec6sLKl83X8vj6l7UPMiv5bvWFfW7jWO8
2j5s6yP1Y3FsfcWr1dUrHIbv9qO6rvJhfsxSvVr1eaqTDE/N5/J61eeMh+p/
lQfhXs3Blieylh/CSfOncVdzPOWT+q1w3Hzse32fK527+lV5rvsznSer+bHi
o/JT8zG7ev8vPsvb8mttNQ++3+08d/vXzXOlL258qw+/0q91nHt/yFY4ap72
XlO9faVXaH+t0yu9S++Z4SC8tB9UvNX7M2vPwfzbvmzvQ8277oP2nCnelT63
77t6j/YdrnXC3V/Va6vvri4znJVOtXOsret2/iFb4bfzh/FJre1Dt27Wcxj5
obg0j3uetv6RtXXs7rf6kOplW3cqj/TcyNZ90N7v1VxlPNw4t05SnPW7u/fn
4qTnWr8Hysv4pH4ujov3as6occyu6lHNy/BTvWbxLp/2ftV8Lv7KP9UPhr+e
T2m9tu+76pP03tP5s9IFFt++F+Oh5nfxvuutfqt4zK/VA5eHyyfN1/Zvqv/t
HPnGMb7IWp29qlMW39YfWk/zXb/rCpdZitPq6ZUutPN0PYddXur69Zxf65rL
y83D4lLdc+9hdU8s/rvv4qrxzC/FYzgofqUfV/NOzY/2maV1rOK29YpwVT5p
P6n51XyrOkn7vNVrFMf4/q/9DxduZYg=
         "], 
        "Output" -> {
         True, True, True, True, True, False, False, False, True, True, True, 
          True, True, True, False, False, True, False, False, False, False, 
          True, False, False, True, False, False, True, False, False, True, 
          True, True, False, True, True, False, True, False, False, False, 
          True, False, False, True, False, False, True, False, False, True, 
          True, False, True, False, False, False, True, False, False, False, 
          False, True, True, False, False, False, False, True, False, False, 
          False, False, True, False, True, False, False, False, False, True, 
          True, True, False, True, False, True, False, True, False, True, 
          True, True, False, False, False, False, True, True, False, False, 
          True, False, True, False, False, True, False, True, False, False, 
          True, True, False, False, True, False, True, True, False, True, 
          True, False, True, False, True, True, True, True, True, False, True,
           True, True, True, True, True, False, True, False, False, False, 
          True, False, False, False, True, False, True, False, False, True, 
          False, False, False, True, False, False, False, False, False, True, 
          False, False, False, False, True, True, True, True, False, True, 
          False, False, False, True, True, False, False, False, True, True, 
          True, False, True, True, False, True, False, False, False, False, 
          False, False, False, True, False, True, True, False, False, True, 
          False, True, False, False, False, True, True, True, False, False, 
          True, True, True, True, True, True, True, True, True, False, True, 
          False, False, False, True, True, True, True, False, True, True, 
          True, False, True, False, True, True, False, False, True, False, 
          True, True, False, False, False, False, False, True, False, False, 
          True, True, True, False, False, False, False, False, False, True, 
          False, False, True, False, True, False, False, False, True, True, 
          True, True, False, False, True, True, True, True, False, False, 
          False, False, True, True, True, True, False, True, True, False, 
          False, True, False, False, False, True, True, True, False, True, 
          True, False, True, False, True, True, False, False, True, True, 
          False, False, False, False, True, True, False, True, False, False, 
          True, True, True, True, True, False, True, False, True, False, 
          False, False, False, False, False, True, True, True, True, False, 
          False, True, True, False, True, False, True, True, True, True, 
          False, False, True, False, True, False, False, True, False, False, 
          True, False, True, True, False, True, True, True, False, True, 
          False, True, True, True, False, False, False, False, False, False, 
          False, False, True, False, True, True, True, False, True, True, 
          True, True, False, True, False, True, True, False, False, False, 
          False, False, True, True, True, True, False, True, False, True, 
          False, True, False, True, False, True, True, True, True, False, 
          True, False, True, True, False, False, True, True, False, True, 
          False, True, True, True, False, False, True, False, False, True, 
          True, True, True, True, True, False, False, False, False, True, 
          True, False, True, True, True, True, True, True, False, True, True, 
          False, False, False, False, True, True, False, False, False, True, 
          True, True, True, False, False, True, True, True, True, True, True, 
          False, False, False, False, True, True, True, False, True, True, 
          True, False, False, True, True, False, True, True, False, False, 
          False, True, True, True, True, False, True, False, False, True, 
          False, False, False, False, False, False, True, False, True, False, 
          False, True, False, False, True, False, False, False, False, False, 
          False, True, True, False, True, False, False, False, True, False, 
          True, True, False, True, True, False, False, True, False, True, 
          False, False, True, True, False, False, False, True, False, False, 
          False, False, True, True, True, False, False, False, True, True, 
          False, False, True, False, True, False, True, False, True, True, 
          True, False, False, True, False, False, True, False, False, True, 
          True, True, False, False, True, False, True, True, True, True, True,
           True, True, True, False, True, False, False, False, False, False, 
          False, True, False, False, True, False, False, True, True, False, 
          False, False, True, True, True, True, True, False, False, True, 
          False, True, False, False, False, True, True, False, True, False, 
          False, False, True, False, True, True, True, False, False, True, 
          True, True, True, False, True, True, False, False, False, False, 
          False, True, True, False, False, True, False, False, False, False, 
          False, False, False, False, False, True, True, False, True, False, 
          False, False, True, False, True, False, False, False, False, False, 
          False, True, False, False, True, True, False, False, True, False, 
          True, True, False, False, False, True, True, True, True, True, 
          False, True, False, False, True, False, True, True, True, False, 
          True, False, True, False, True, True, True, True, True, True, False,
           False, False, True, True, False, False, True, False, False, True, 
          False, True, False, True, True, False, False, False, True, True, 
          True, True, True, False, False, True, True, False, True, False, 
          True, True, True, True, True, False, False, False, True, False, 
          False, True, False, True, False, True, False, False, False, True, 
          True, True, True, True, False, True, False, True, True, True, True, 
          True, False, True, True, False, True, False, True, False, True, 
          False, True, True, False, False, False, False, False, False, True, 
          True, True, False, True, True, False, False, True, False, True, 
          False, False, False, True, False, True, True, False, False, True, 
          True, True, False, True, False, False, True, True, True, False, 
          True, True, True, True, False, True, False, True, True, True, False,
           True, False, True, False, True, True, True, True, True, False, 
          False, False, False, False, False, True, True, False, False, True, 
          True, False, False, False, False, False, False, False, True, True, 
          False, False, True, False, False, True, False, True, True, True, 
          True, True, True, False, False, True, True, True, False, True, True,
           False, True, False, False, True, False, False, False, True, True, 
          True, False, False, False, True, False, True, True, False, False, 
          True, True, False, False, True, False, False, True, True, True, 
          True, False, True, False, False, True, False, True, False, False, 
          False, False, False, False, False, False, True, False, True, False, 
          False, False, False, True, False, True, False, False, False, True, 
          True, True, False, False, True, False, True, True, False, True, 
          True, True, True, True, False, False, False, False, True, False, 
          False, False, True, True, True, False, True, False, True, False, 
          True, False, False, True, False, True, False, True, True, False, 
          False, True, False, True, False, False, True, True, False, False, 
          True, False, True, False, False, True, True, False, True, True, 
          False, True, False, True, False, False, False, True, False, False, 
          False, False, True, False, True, False, False, False, True, True, 
          False, True, False, True, True, False, False, False, False, True, 
          False, True, True, False, True, True, False, False, True, True, 
          False, False, True, False, False, True, True, False, True, True, 
          True, False, True, True, False, True, False, True, True, True, True,
           True, False, True, True, False, True, True, False, False, True, 
          False, False, True, True, False, True, False, False, False, False, 
          False, False, True, False, True, True, True, True, True, True, 
          False, False, False, False, False, False, True, True, True, True, 
          True, False, True, False, False, False, False, True, False, False, 
          True, True, False, True, False, False, True, True, False, True, 
          True, False, False, False, True, True, False, True, False, False, 
          False, True, False, True, True, False, False, False, True, True, 
          False, False, False, False, False, False, True, False, False, False,
           True, False, True, True, False, True, True, False, False, False, 
          True, False, True, True, False, False, True, True, True, True, True,
           True, False, True, False, False, True, True, True, False, False, 
          True, False, False, True, False, False, False, True, False, True, 
          False, True, True, False, False, False, True, True, True, True, 
          False, False, False, True, False, False, False, False, True, True, 
          False, True, False, False, False, True, False, False, False, False, 
          True, True, True, True, True, True, False, False, True, True, True, 
          True, True, True, True, False, False, False, False, False, True, 
          False, True, True, False, False, True, False, True, False, False, 
          False, False, False, False, True, True, False, False, True, False, 
          True, True, False, False, False, True, False, True, False, False, 
          True, False, True, False, False, True, True, False, False, False, 
          True, True, False, False, True, True, False, True, False, True, 
          True, True, True, True, False, False, True, True, False, True, 
          False, False, True, False, True, False, False, True, True, False, 
          True, False, True, False, False, True, False, True, False, False, 
          True, True, False, False, False, False, True, False, False, True, 
          True, True, True, False, True, True, False, True, False, False, 
          False, True, False, True, False, False, True, True, False, True, 
          True, False, True, False, True, True, True, False, True, False, 
          False, False, True, False, True, True, False, False, False, False, 
          False, False, False, False, True, False, False, True, False, False, 
          False, True, True, True, True, False, True, False, True, True, 
          False, True, True, True, True, False, True, False, False, False, 
          True, False, False, True, False, False, True, False, False, False, 
          False, True, False, True, True, False, False, True, True, False, 
          False, True, False, True, True, True, True, True, True, True, True, 
          False, False, False, False, False, False, True, False, True, True, 
          False, True, True, False, True, False, True, False, True, False, 
          False, True, True, False, False, True, True, True, False, True, 
          False, False, False, True, True, False, True, True, False, True, 
          True, True, False, False, False, False, False, True, True, False, 
          False, True, True, False, True, True, True, False, False, True, 
          False, False, False, False, True, False, True, False, False, True, 
          False, True, True, True, True, True, False, False, False, False, 
          False, False, False, True, False, True, True, True, False, False, 
          False, False, False, True, False, True, True, False, True, False, 
          False, True, False, True, False, True, True, False, False, False, 
          True, True, False, False, False, False, True, False, False, True, 
          True, False, True, False, True, True, False, False, False, True, 
          False, True, False, False, True, False, True, False, False, False, 
          False, True, True, False, False, True, True, False, False, False, 
          True, False, False, True, True, True, True, False, False, False, 
          True, True, False, True, True, True, True, True, True, False, False,
           False, True, True, False, False, True, False, True, True, False, 
          False, True, False, True, False, True, True, True, False, True, 
          False, False, True, True, True, False, True, False, True, False, 
          False, True, False, True, False, False, False, True, False, False, 
          False, False, True, True, True, False, True, True, False, True, 
          True, False, False, False, True, False, True, True, True, False, 
          True, False, False, True, True, True, True, False, False, False, 
          False, False, False, False, False, False, False, True, True, True, 
          True, False, False, True, False, True, True, True, False, False, 
          True, False, True, False, True, False, True, False, True, True, 
          False, True, False, True, True, False, False, True, True, False, 
          False, False, False, True, False, True, False, False, False, False, 
          False, True, False, True, True, False, True, False, False, False, 
          False, True, False, True, True, False, False, True, True, False, 
          True, False, True, False, False, True, False, False, False, False, 
          False, True, False, True, False, True, True, False, False, True, 
          True, False, False, False, False, True, False, True, True, True, 
          False, False, True, False, False, False, True, True, True, False, 
          False, False, False, False, False, True, False, True, False, False, 
          False, True, False, True, False, False, True, False, False, True, 
          False, False, False, True, False, True, False, True, False, False, 
          False, True, True, False, False, False, False, False, False, True, 
          False, False, False, True, True, True, True, True, False, True, 
          True, True, False, False, False, True, False, False, True, False, 
          True, False, False, True, True, True, True, True, True, False, 
          False, False, True, False, False, False, False, False, True, True, 
          False, True, True, False, False, True, True, False, True, False, 
          True, True, True, False, False, True, True, False, False, True, 
          False, False, False, False, False, False, True, True, True, True, 
          False, False, True, True, True, True, True, False, True, False, 
          False, True, True, True, False, True, True, True, True, False, True,
           False, True, True, False, True, True, False, True, True, True, 
          False, True, True, False, False, True, True, True, False, True, 
          True, False, False, True, False, False, False, False, False, False, 
          False, False, False, False, True, True, False, False, True, False, 
          False, False, True, False, True, True, True, False, True, True, 
          False, True, True, True}|>, 
      "Predictions" -> {
       True, True, True, True, True, False, False, False, True, True, True, 
        True, True, True, False, False, True, False, False, False, False, 
        True, False, False, True, False, False, True, False, False, True, 
        True, True, False, True, True, False, True, False, False, False, True,
         False, False, True, False, False, True, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, False, False, False, False, True, False, False, False, 
        False, True, False, True, False, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, True, True, True, 
        False, False, False, False, True, True, False, False, True, False, 
        True, False, False, True, False, True, False, False, True, True, 
        False, False, True, False, True, True, False, True, True, False, True,
         False, True, True, True, True, True, False, True, True, True, True, 
        True, True, False, True, False, False, False, True, False, False, 
        False, True, False, True, False, False, True, False, False, False, 
        True, False, False, False, False, False, True, False, False, False, 
        False, True, True, True, True, False, True, False, False, False, True,
         True, False, False, False, True, True, True, False, True, True, 
        False, True, False, False, False, False, False, False, False, False, 
        False, True, True, False, False, True, False, True, False, False, 
        False, True, True, True, False, False, True, True, True, True, True, 
        True, True, True, True, False, True, False, False, False, True, True, 
        True, True, False, True, True, True, False, True, False, True, True, 
        False, False, True, False, True, True, False, False, False, False, 
        False, True, False, False, True, True, True, False, False, False, 
        False, False, False, True, False, False, True, False, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, False, False, False, False, True, True, True, True, False, True,
         True, False, False, True, False, False, False, True, True, True, 
        False, True, True, False, True, False, True, True, False, False, True,
         True, False, False, False, False, True, True, False, True, False, 
        False, True, True, True, True, True, False, True, False, True, False, 
        False, False, False, False, False, True, True, True, True, False, 
        False, True, True, False, True, False, True, True, True, True, False, 
        False, True, False, True, False, False, True, False, False, True, 
        False, True, True, False, True, True, True, False, True, False, True, 
        True, True, False, False, False, False, False, False, False, False, 
        True, False, True, True, True, False, True, True, True, True, False, 
        True, False, True, True, False, False, False, False, False, True, 
        True, True, True, False, True, False, True, False, True, False, True, 
        False, True, True, True, True, False, True, False, True, True, False, 
        False, True, True, False, True, False, True, True, True, False, False,
         True, False, False, True, True, True, True, True, True, False, False,
         False, False, True, True, False, True, True, True, True, True, True, 
        False, True, True, False, False, False, False, True, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, True, True, False, False, False, False, True, True, True, False,
         True, True, True, False, False, True, True, False, True, True, False,
         False, False, True, True, True, True, False, True, False, False, 
        True, False, False, False, False, False, False, True, False, True, 
        False, False, True, False, False, True, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, True, False, True, True, False, False, True, False, True,
         False, False, True, True, False, False, False, True, False, False, 
        False, False, True, True, True, False, False, False, True, True, 
        False, False, True, False, True, False, True, False, True, True, True,
         False, False, True, False, False, True, False, False, True, True, 
        True, False, False, True, False, True, True, True, True, True, True, 
        True, True, False, True, False, False, False, False, False, False, 
        True, False, False, True, False, False, True, True, False, False, 
        False, True, True, True, True, True, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, False, False, 
        True, False, True, True, True, False, False, True, True, True, True, 
        False, True, True, False, False, False, False, False, True, True, 
        False, False, True, False, False, False, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, False, False, False, False, False, False, True, False, 
        False, True, True, False, False, True, False, True, True, False, 
        False, False, True, True, True, True, True, False, True, False, False,
         True, False, True, True, True, False, True, False, True, False, True,
         True, True, True, True, True, False, False, False, True, True, False,
         False, True, False, False, True, False, True, False, True, True, 
        False, False, False, True, True, True, True, True, False, False, True,
         True, False, True, False, True, True, True, True, True, False, False,
         False, True, False, False, True, False, True, False, True, False, 
        False, False, True, True, True, True, True, False, True, False, True, 
        True, True, True, True, False, True, True, False, True, False, True, 
        False, True, False, True, True, False, False, False, False, False, 
        False, True, True, True, False, True, True, False, False, True, False,
         True, False, False, False, True, False, True, True, False, False, 
        True, True, True, False, True, False, False, True, True, True, False, 
        True, True, True, True, False, True, False, True, True, True, False, 
        True, False, True, False, True, True, True, True, True, False, False, 
        False, False, False, False, True, True, False, False, True, True, 
        False, False, False, False, False, False, False, True, True, False, 
        False, True, False, False, True, False, True, True, True, True, True, 
        True, False, False, True, True, True, True, True, True, False, True, 
        False, False, True, False, False, False, True, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, 
        False, False, True, False, False, True, True, True, True, False, True,
         False, False, True, False, True, False, False, False, False, False, 
        False, False, False, True, False, True, False, False, False, False, 
        True, False, True, False, False, False, True, True, True, False, 
        False, True, False, True, True, False, True, True, True, True, True, 
        False, False, False, False, True, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, False, True, 
        False, True, False, True, True, False, False, True, False, True, 
        False, False, True, True, False, False, True, False, True, False, 
        False, True, True, False, True, True, False, True, False, True, False,
         False, False, True, False, False, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, True, True, 
        False, False, False, False, True, False, True, True, False, True, 
        True, False, False, True, True, False, False, True, False, False, 
        True, True, False, True, True, True, False, True, True, False, True, 
        False, True, True, True, True, True, False, True, True, False, True, 
        True, False, False, True, False, False, True, True, False, True, 
        False, False, False, False, False, False, True, False, True, True, 
        True, True, True, True, False, False, False, False, False, False, 
        True, True, True, True, True, False, True, False, False, False, False,
         True, False, False, True, True, False, True, False, False, True, 
        True, False, True, True, False, False, False, True, True, False, True,
         False, False, False, True, False, True, True, False, False, False, 
        True, True, False, False, False, False, False, False, True, False, 
        False, False, True, False, True, True, False, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, True,
         True, True, True, False, True, False, False, True, True, True, False,
         False, True, False, False, True, False, False, False, True, False, 
        True, False, True, True, False, False, False, True, True, True, True, 
        False, False, False, True, False, False, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, True, True, True, True, False, False, True, True, True, 
        True, True, True, True, False, False, False, False, False, True, 
        False, True, True, False, False, True, False, True, False, False, 
        False, False, False, False, True, True, False, False, True, False, 
        True, True, False, True, False, True, False, True, False, False, True,
         False, True, False, False, True, True, False, False, False, True, 
        True, False, False, True, True, False, True, False, True, True, True, 
        True, True, False, False, True, True, False, True, False, False, True,
         False, True, False, False, True, True, False, True, False, True, 
        False, False, True, False, True, False, False, True, True, True, 
        False, False, False, True, False, False, True, True, True, True, 
        False, True, True, False, True, False, False, False, True, False, 
        True, False, False, True, True, False, True, True, False, True, False,
         True, True, True, False, True, False, False, False, True, False, 
        True, True, False, False, False, False, False, False, False, False, 
        True, False, False, True, False, False, False, True, True, True, True,
         False, True, False, True, True, False, True, True, True, True, False,
         True, False, False, False, True, False, False, True, False, False, 
        True, False, False, False, False, True, False, True, True, False, 
        False, True, True, False, False, True, False, True, True, True, True, 
        True, True, True, True, False, False, False, False, False, False, 
        True, False, True, True, False, True, True, False, True, False, True, 
        False, True, False, False, True, True, False, False, True, True, True,
         False, True, False, False, False, True, True, False, True, True, 
        False, True, True, True, False, False, False, False, False, True, 
        True, False, False, True, True, False, True, True, True, False, False,
         True, False, False, False, False, True, False, True, False, False, 
        True, False, True, True, True, True, True, False, False, False, False,
         False, False, False, True, False, True, True, True, False, False, 
        False, False, False, True, False, True, True, False, True, False, 
        False, True, False, True, False, True, True, False, False, False, 
        True, True, False, False, False, False, True, False, False, True, 
        True, False, True, False, True, True, False, False, False, True, 
        False, True, False, False, True, False, True, False, False, False, 
        False, True, True, False, False, True, True, False, False, False, 
        True, False, False, True, True, True, True, False, False, False, True,
         True, False, True, True, True, True, True, True, False, True, False, 
        True, True, False, False, True, False, True, True, False, False, True,
         False, True, False, True, True, True, False, True, False, False, 
        True, True, True, False, True, False, True, False, False, True, False,
         True, False, False, False, True, False, False, False, False, True, 
        True, True, False, True, True, False, True, True, False, False, False,
         True, False, True, True, True, False, True, False, False, True, True,
         True, True, False, False, False, False, False, False, False, False, 
        False, False, True, True, True, True, False, False, True, False, True,
         True, True, False, False, True, False, True, False, True, False, 
        True, False, True, True, False, True, False, True, True, False, False,
         True, True, False, False, False, False, True, False, True, False, 
        False, False, False, False, True, False, True, True, False, True, 
        False, False, False, False, True, False, True, True, False, False, 
        True, True, False, True, False, True, False, False, True, False, 
        False, False, False, False, True, False, True, False, True, True, 
        False, False, True, True, False, False, False, False, True, False, 
        True, True, True, False, False, True, False, False, False, True, True,
         True, False, False, False, False, False, False, True, False, True, 
        False, False, False, True, False, True, False, False, True, False, 
        False, True, False, False, False, True, False, True, False, True, 
        False, False, False, True, True, False, False, False, False, False, 
        False, True, False, False, False, True, True, True, True, True, False,
         True, True, True, False, False, False, True, False, False, True, 
        False, True, False, False, True, True, True, True, True, True, False, 
        False, False, True, False, False, False, False, False, True, True, 
        False, True, True, False, False, True, True, False, True, False, True,
         True, True, False, False, True, True, False, False, True, False, 
        False, False, False, False, False, True, True, True, True, False, 
        False, True, True, True, True, True, False, True, False, False, True, 
        True, True, False, True, True, True, True, False, True, False, True, 
        True, False, True, True, False, True, True, True, False, True, True, 
        False, False, True, True, True, False, True, True, False, False, True,
         False, False, False, False, False, False, False, False, False, False,
         True, True, False, False, True, False, False, False, True, False, 
        True, True, True, False, True, True, False, True, True, True}, 
      "LogProbabilities" -> CompressedData["
1:eJyl3U2oVHUYBvDpXtSMCIkMF1IWFZWZq4JWRUVSEoiQQUtTKBBqGbYoCSqI
NoKLWgktahO4cpczJVEEVosKLYSLfSFEpqCFRUTQafEchh8Ps5LjzPy/3s/n
ed//uTftfm7n3qXJZPLlmsnk339f/uCOR86dfnx665Nv/PbrZOPshYd+fub7
bXumW1799I/XlzbM8vOVXUfeevPAi9Olte/uWVl93eg5///oycsXVk1umZ1f
/mbHrhNrpqcvnd28bnLz7MM9Dx8/ctem6b4Nz//1/Mp707UPfH78wNNXzj45
emb9j4cOTr8++dmZQ9eum+XnwzjDuK99+8OzW/+8Z3p4/cZLmyebRuudrbqw
dWly22zf26sPPvbK+WO5nvz+sO/hHIZ1DOt6avsvJyaT22dPvHTjNds+PnUs
95PjDesa1pnfz/PO+YdxhnFz/Fxf/l7yTfl9t3vnqQvLV8xW9u/dvuX+2Wh9
KY+cb/OOc8f3X/3V9N4vrn//huWLIz3J88/fp/yHeYZ5c7xcX55Xnn/uN8fP
59QvySv1U/KRvHK/ub/8PMcb9H6wA51XPqe+js7zPz0Z9Cbnz9/nelPfUv6p
L3m+OV/KL88/n2UfknfuX/rZ+ovU19yHfp/7HexysNNcb+p76k+Ol/qS6xvp
Y9hZyjfXk/vP8XK9ub4cbzj3QQ653vx+669TH3L8XF9+zvERb/P3OX7+PuWh
8VPftP72OefL9c3LO4Zn2U/rn/L30vf8PP1R7jf1X/Ei16P153rkL2VPyo9y
PuWTOV8+53hpv9qP/IXyGfkT2U/uP9en76e/zs/z3GQf0g/J+9x9l/9+8O6f
/v9X9tCer+KD/EGOl/mF8rk8J+UPwh/5u8xfWvwjPNbmk/ksfcvnzPc1n85b
v1e8zvgrf5nylL+Xvcq+0v5TvxW/cv2KDy1e17P8fe4v/bXy05w3v698KvG+
xk/7Tf0RXmI8iPHkH4T/0z6FJ/I57VXxKT9PeUrftb+cT/Ym+aS/l7y13tQ/
+a+Uh+K94mPKu80PM95oP5Jnjp/6xHgV8sv1SL/yc9ljnn/OJ/5D/j71SflR
mz/o+8rfUz6p37KHPK/UJ+VXko/wk/IZxUvlizme9HekH6HPijfyH9LHPG/F
6/y+cLj4YO0n5Sk++feLS2eXL3107PBV7zw6mdxJPiLzpdS31If8PNcnf614
PKx72EeuN/2V8izh59yf8uUWH8ielF/kc8YvrUf2l9/Xflt/yvxjwXxa+ip7
lH3k5+Jfcr+qz8i+cr6sl8n/aT+jfB31nIxXyu8Ur9v6pcYXfhUfIP+Y+Yjq
CcqXVX/I80//L7yr/IrxuIxPi9pf7lf6Kv8l/ZL9qH6q/ae8cn6dl/RbfKXw
lOojyodbvCm8pfGUz6q+rvORf2r7B+SPpU/i53M9ud9cv+q9iufKN6T/uZ+c
L3+f55N8lOKl+BjZ18g/AG/nvJKf+Dn5u5E/RX+C6vniA1Q/Uv4jf678tM3X
F+3HUj6i3wuvif9VfEt7yPmER5Qv5PzCr4pviV9SH3We4k/Fv0kewk9tfGj5
KPH7uX71P4hvavsV2nq0/JHiU8vntPxlm88qH2r7BVTvUX1KeEj2o3qH7Ed8
cq4v+dO2/67Fl+1+pFfi+8R/tPVmxQfVb+QfVc/I8dXPmPvLzxUvFK/aerj8
Y56P8GHKd+BhBl5G8hIeVb+v9FXxSPgj/bV+r/govCp8Ma+PeJ6+qL9W8mz7
1dI+ZG/z+l7m1XPVL6B4Jf/b1guV37b6qvNRf1ur35K/+g10fqoXq79B+XDy
v+IL1S8hfl3xTv3+inc6T8lHfJ/4nfa+g/C97GXR/DLna/FEyx+Jrxa+b+8D
yJ4V71V/bu+XaH3iG9v+RdmT4ltbz2v5IZ237FH5up7F96qfMefP8xeeVL1E
+q3+7LafTP5C/LP6jdr7E4oX8lft+Uv+6lcSPyJ9UX4ofNjWR4TXFP/yfLKe
qXxe/JrkLf5Y+Le9/6dnnZf0r+3vbfWt1a9F+QHVE5XPql9c+EX5nurv4qt1
XtJH8XHiF8R/if9Q/it/LT4l+fmWj5E8VJ9p8Vyr7yk/8THCd+Jvxf/rPFp/
1PYjy1/pvqr8q+SZ+EHyVj456g8MfVD/uD5Xfil9lz2LL2nxkPhQ8b3CPzme
8Lz0XXy77El8iHCG+h9UX9DzqD8szjv5HfU3pL/W/WHFQ/kb6VvmB8qvlO/p
Pq/4RvW7CE+o/3hkn3h/gfqh5T/EP7V8uvo32n67Fq/nfKn/0mfVH7M/Qnhd
+Z/wvOrzyp/SfyoeSX+UD+R5qH9V/kPzaf7WHqRvqe+aT/ch5P9UzxH/1vo3
3e+WP5B/VX+I/KPwXc4v+1P9pM0nlL+o30p8lvI/4W/5F9lXW89R/JP/a/Nf
4TPZu+7Xp3zUv6Z43b4PRfyz/G/LHyufaeOR9EH1WuW/af8pT9Ubxb+oHik8
p/pxe5+z7ffXs+Sf8yufUP+6+Jrk5ySflr9q32+gfErn2fZDtvdVha/UTyB8
2/bvtP3ZskfpseTf3qfJ8dQvon4KxV/2D4F/Ev+ofEx4Q/qX9qp6XCuv9n0N
ijft/oQPxSeKb23rXcIDsg/dX1T/h+4PK5+WPrb1f+GzFr8onqp/OD/n+0HQ
H6v8QPlA27+m/K2tx8sf6jxUz9N9Qtlbyy/Lv6me0vZHt3i+jd/CH6rnid9W
fiH8Jf8svCO+Xny45K39Jt5X/0Tut7UX6Xtb/xVeFb4W3y1+ocWrbbxN+5E9
tf0twivqjxT+1vvzhDeUv+t9LOJLZP/CJ62/1fvt5f9VzxU+Vr6V8+XniTfl
r2XPbbxTP0KLX2Q/6meRP5Z+CC/rvkX67zx/8Y3iMzSf/InyP/H5LV8i/ym8
3PKFLV8j/5l4PfVL47X9ReJjcn75X9lz2y8qvCL/0/bf6v1s4tdH/g/3g7U+
8X06L9V/83PxFfmc+pTr099PUXxQv4ryFeVXyjdUr1K9S/lyyw+rniI+UvFH
9qX8Tf5G8hafJP6rfR9f2z+yaH9Qfp72kt8X/yN9EZ/S9l+qvqp+PuXXKb/c
v+KX8EDb3yl5qx9A5yf7UT1c+YTir+qVuT/x3Xn+qlfOw7Xz+st0PsKryg/V
v5j7E75S/4Xu37T9zDme+m3Vz6143t7vFr5TPUr3DyRf9RO2+KzNhxd9n4ri
We5P+VeL58S/qp9K9/sUz4Uvc3/5vmDxlRovz1vxWnx0i0flD9r3FaqeIH+i
+N/673Y90n/pl/h9xUvlS2lf+Sx+T+el+k37LHyjeDPKL3FfTuvS+zzF7+a4
+nt2qqcJX6t/Q/gk9Vf3cZVPC6+Lj100vrf8p+KF6lGqf0lfWnys9et9oKpH
6f5C20/b9u8qXisfE/7M9bX9EcKbrfxy/xnP8/v6exnt3xNTPVLnI3/G+5/l
+3TSP4kv1/ravw+reCk+V/X3tj9T+KN9P6/8s+JTe/9R9qj7slp/21+hZ+Er
1V+lP6nf/wCKtRgS
       "], "CountMatrix" -> {{961, 1, 0}, {4, 1034, 0}}, 
      "IndicesMatrix" -> {{CompressedData["
1:eJwt1nd8CAYWB/AYbY0YrVLUjpq1t3P2jDojoRJBgqo9aoTWlSKI2DmjjtKa
F0pj1GitnhVJBTVqpHaNGqHoOatfn7s/vp/3/v+9z3uveI/BHQZlCAgI2JMp
IOBlzYg2IDOvkJVsZCeQHOTkdfJRgEIUpRjFCaIkpShHBSpTjerUpC4NaEgz
gnmP9nQghI68TxhdiKArPehJb/rQn4EMYSjDGUk0o/mYMXzKWMbxGeOZSAyT
mMwUYoljJvHMZQGL+IpVrOZfJLCWb0hkM9+yhW1s53v2c4BDpHCEoxzjBCc5
xc+c5gxnOUca57nMFa7yK9e5wU1ucYe73OcBD3nCc17wMuDXyEYguXmdN8hD
Pt4iPwUoQlGKUZwgSlKa8rxLBSpRmapUpwa1qUN9GtCIpjSjOS1oSTDvEUIo
HelEGOFE0I3uRBJFL3rTlwG8HODBDOUjhjGCaEYxmvFMJIZJTCGWqcQxnZnM
Yh7zWcDn/JPFLOFLlrGcFaxkNQmsYR3rSWQjm9jMVr7je3awk13sZh/7OUgS
h0gmhR9J5QgnOMkZznKONC5wkUtc5gpXuclv3OIOd0nndx7wiD94wlOe8TzD
/5ZAJrIRSC7eoAAFKUQxShDEO5SiLOWpSCWqUZs61KU+DWhMU5rTklYE04Z2
hBBKRzoTThci6Eo3uhNJFD3px0CGMJQRjCSaUYxmDJ8yngnEEEsc05jOLGYz
h3jmMo9FLGYpCazhaxLZyHZ2sJM9/Ju9HCSJQySTwmGO8hPHOcEpTnOWc6Tx
C+e5wBWucp3fuM1d0nnAQx7xB//hCU95/v+FnoGMZCIzWchODnKRhzfJSz7e
ogBvU4jCFKEoxSlBSUpRhnKUpyrVqE5NalGXejSkMU1oTgtaEkwb/kZb2tOB
EELpRGfCCCeCbkQSRQ960ov+DGAwQxjFaMYwls8YzwQmEsMkYplKHNOZwSzi
mc8CPmcxS1jKMpazigTWsJavWc8GNrGDXexlP4dIJoVUjnKM45zgJKf4mTQu
conLXOUaN7jFHdK5xwMe8Zj/8owXL3N3zDPxCq+ShWzkJA95KUBBClGEopSk
FKUpSzkqUJEqVKcGtahNHf5CPerTkEY0pglNaU4LWhFMG9rRnhDCiaAr3ehO
JFH0oS/96M8ABjGMkUQzmjH8nbGMYyIxTCaO6cxgDvEs5AuW8iXLWM5qEljD
OtbzDYlsYCOb2co2trOD3exlPwdJ4kcOk8oRjnOaM5zjAlf5lWtc5wY3uc0d
7pLOPe7zO495wlNekMHTloWsBJKTXOQhL/kpSGGKUIIgSlGaspTnXSpQkUpU
pRo1qE1d/kp9GtKYZrQgmNa0I4RQOtKJzoTRhe5E0YsP+JA+9GMAAxnEEIYz
kmjGMYHJTCGWqUxjBjOZzRzi+QfzWMhilrKCVaxmDWtZTyIb2MgmNvMtW9jK
LvbwA3vZxwGSSOYwqRzjJ45zkjOcJY1fuMBFLnGdG9ziNndJ5x4PeMwTnr98
yF+VMRnJRGYCyUkucpOP/BTgbYpQjBIEUZoyVKAyVahGDWpSl3o0oBHNaUEw
rWlLB0IIpSNhhBNBV7rRnUii+IDe9KU/AxjMUIYxnBFE8zGfMIZPGccEYohl
BjOZxRzimcs8FrKIxXzBUpaxnBWsJJENbGQTW9jGdr5jJ7v5gb3s5wBJJJNC
Kkc4wSnSOM8FLnGNG9zkNndI5z4PecIzXhDwmizJTFayE0gOcvMmeclHYYoS
xDuUoTyVqEI1alGbBjShKc1oTgtaEUxr2tKBUN6nM2GE04UIIunNh/SlHwMZ
xBA+YhjDiWYUnzCeCUwkhinEMpU4pjGD2cwhnrnMYz4LWMgiFrOEpXzFMpaz
klUksIa1rGM9G9jBTvawjwMcJIlkUjhMKkf4E7aD7Rg=
         "], {196}, {}}, {{908, 1297, 1356, 1635}, CompressedData["
1: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
         "], {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {2000}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0000295535, "SingleEvaluationTime" -> 
      0.0031443125, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "53b21574-825d-4596-968a-c548c0ecb313"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "2000"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"99.75", "0.11"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[99.75`3., 0.1116914835327734862`3.]], ")"}], 
                   "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"51.9", "1.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    51.8999999999999985789`3., 1.1175058879956190072`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9742590275264074728`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0017815582456097712`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9706959110351879305`3.", "\", \"", 
                    "0.9778221440176270152`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9706959110351879305`3., ", ", 0.9778221440176270152`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0260780686770134551`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0018286279135101072`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0224208128499932408`3.", "\", \"", 
                    "0.0297353245040336694`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0224208128499932408`3., ", ", 0.0297353245040336694`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.18`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"31.6`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  
                  GraphicsBox[
                   RasterBox[{{{0.9240207434566605, 0.8313383118032704, 
                    0.5686812109371688}, {1., 0.42, 0.}}, {{
                    0.9327910742147568, 0.4867636138131979, 
                    0.0033461443691232538`}, {0.9407494762323266, 
                    0.8945518903345672, 0.7331051781107936}}}, {{0, 0}, {2, 
                    2}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["961", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "961", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958549222797928`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.998960498960499`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9974052932018682`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{961, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9958549222797928}], 
                    Row[{"Recall = ", 0.998960498960499}], 
                    Row[{"FScore = ", 0.9974052932018682}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004145077720207254`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0038535645472061657`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.004145077720207254}], 
                    Row[{"Row fraction = ", 0.0038535645472061657`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "True", "\" misclassified as \"",
                     "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.000966183574879227`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0010395010395010396`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.000966183574879227}], 
                    Row[{"Row fraction = ", 0.0010395010395010396`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1034", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1034", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9990338164251208`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9961464354527938`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9975880366618428`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1034, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9990338164251208}], 
                    Row[{"Recall = ", 0.9961464354527938}], 
                    Row[{"FScore = ", 0.9975880366618428}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "962", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.998960498960499`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{962, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 0.998960498960499}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1038", "\" example\"", "\"s\"", "\" of class \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9961464354527938`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1038, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 0.9961464354527938}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "965", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9958549222797928`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{965, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 0.9958549222797928}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1035", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9990338164251208`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1035, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 0.9990338164251208}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["962", TraditionalForm]}, {0.5, 
                    FormBox["1038", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["965", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1035", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->181.2,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 2, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|"Input" -> <|"Type" -> "Expression"|>|>, 
              "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
              "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|True -> 0.5, False -> 0.5|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {True, False}, "InputDepth" -> 1, "Multilabel" -> 
                   False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "NeuralLogicNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJylk1FKA2EQg1eh4jW8gh5AvEI9wQr1qSDUB/HNo9siBf3Jl+S3C9vuzs4/
SWYydy9v29frZVneb48/2/Xj6XBYP59vTi+7df9wv786Pi6b08/X48/9+zrH
zvExZ/ymYuoe8xUe1XDcqN4YV3zHc45P6pHqlTsz4jYciA+dSdpJV8uvfW7e
HV9V2+U4PyRvpWfFM3mp1T/jK4XnLupRsztun9sdUTwUbvPe6CBNVLv1EnFo
ubSYjf+p1n93YMwlzS7PnU97RNooJ/XI9YTwGy5Ox4hHd8OhnbnineZPddL8
klfdTNK5xpdpz+i700MaVB7xpR4RD8Jy35MfHCb1ImlzsYTdYCYvqj6o76oX
Kkb8L9kF0kdX6+22xszMG46phwp3xjNOi4q53rg5ztRo6qQeEG91NvWLfOdw
0x4SftJEPNI80y673sxgJH0t9+Rj9e5w3f4SF6o9s2sul2oq/LYHTmfaAcpJ
e5OwSL/zCGlOO504ujkRP9cbV8vpTnhJV+r3qNfFm91IPlQc0rzGeFub+tHu
QuMJd8Z5pNX09/8bCI/3fA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1280}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 20}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NeuralLogicNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 64, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 20}, 
                    NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 10}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>|>, 
                    "NeuralLogicNet/7" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{2, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f584aca1_4e2c_4638_8abf_1678d16b8d7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
TrVz2mHjyTVp4GekNBTqaJGSpI1ClZ3pREu5ApMBEe33nqnTrtnvWWm3eU49
q0yHUy64UxJKGNx1cBpdpfespaExJd3j96y0R0qVoFEqbJ5GQHLqhTmPJCZ5
ICCMK3u3v/h9ZQOhXyCruyuNsql5omsgpYO6yMcQ5qrp/ecA9dKcR4Umd9nd
OOLh4Nad94BbN4mZSooqegsYH5mK0/qrhtaTyzCnbGYBeyIhmJ3NqVucr7rs
0QeDaUEG0ywduK91CVBNOY07lVu6mjWCs6izXCCj7yJobIVY8KnqoTVpF/i8
CVeS5yEar2lo5DtpDGeQmjfnkc/EdlVUpCds694ECUS76Bd9WEYiwi7ooy4R
n7sMUe8CWyb+TXQ5B116q2dkU/8GW3tc7/0O6e0bXY2tyTXa88ng4GPrkt05
7oStTRw480rvRbl+Dv1Pd8n6ZidQnnp3vMvA530PgxOPrZP3FBJd/oEuH/TK
fBLAK5P2glcu3sPtjCwaAFYWmeOsfKVh5SGfQuds5nsbc0LT9gL3XSbP8eSb
x8wA7n9E3J+Bd3n7mfs+2MJsZm8A0cVDDNx3kQs8/c1/ddLsIWae7hmzIv7z
3uPCtwbnujTbiEUJz6d6NHzefhzKWpaet1KzbTm4/DQ39oJmB/JjtbPob2/N
zmVvuzjp2UnNJuQ7vUEqJHKQnXSVPv6E54t6Gk89hHMoBThka9gLHEp4585X
bVK1PRBqzWAMnNm6EPzIQHPaIOr6TtPVRanp6mSYXmVNSex1h3jnY8Gg/ah7
/LF1UUJMCV8wFL0QNCbCtXshLnV4+aeelpXto2ZzJfLLqwDB165/z/GsMo+m
SQWq7nony62LEt/9kUIhYd0MDHu9JGKVMKZDHJZJdddyu9kon2rGYldIDHc/
7rk1XGPfxZs6kbuU/oR7r6HdqUk594qizJiT0Mr6wf802VvLbVdajfOKnrw0
3xzhChK7si4nLaMBCmHyW8sUsrnak8axXsX6KWRFdFSKSVSUTV5ULbL1OCK/
6V2z8LBCtpR40aiQjRkLpZb5Yuim6zCO9Tb2scKjQe4cmEl5JmSwi1gVve5u
FrYrExSyfLoPxcKN6mpbbc7eV+UVK+d9aYQw1LpSl9egVHTyns9OXyU82jHU
xTvmjErtsV082kKhTgqLzXzilehm6DKnMyftRJzQzZayoj7/rnzQrzUnrV4b
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
8Bv/B9Mw2iU=
                    "]]|>, "orcInstance" -> 81997792, "orcModuleId" -> 
                    82336848, "targetMachineId" -> 79512544|>, 
                    140548319590208, 140548319590064, 140548319590144, 
                    140548319584256, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e45e62a2_4ddf_4592_bc6e_850723773c7b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNCFBo4INSKe09TYPklQ0
QAiI4DMvSbRYo3K9aG0bre14O+18WNHr9faRAFpasQO1Vr16VRQf0/qsVm31
jrPPSaKMM/N9M99Mvi9nnb32Wnutvda/1977iAz1FQYEAEAKAChWBs7k8AGI
gm0Dh0yb/coX5hUPurVjyu2llIyIA8DPLADGMESAAdvj4R91pG5Q9LNmsXFJ
/kbEzUmPwhKSWW8a7IISRvHGMcV9uIQvwwRzYiQGr9raJ0pVxXvaccVGhrEf
280nlDO8xNeIxOAWTM2Y6hMv75q/gTjUD8ddQwAwHVJJijeaMMwAomfTOgWi
dPhIeIazeqdPZzDOJ9LMTn9cG7iEyR3OfAbZmSr3BuZsTZndubzmtyObDF6M
153B6OoAxSRHqWEZB8UzcY3Be0HGfXXAlxadkwpmtHCdnAaOQ75xyrs7sPgd
u8ge3ZBp7XbsY6cku9BVkvj6d/zynpFG7m1iDK+1fET1pTRdL9j1dqrdt/FD
b/yH7+1/98qEbeaUrbNmK+wbpSUd5K99v0Ah+PKB4T7G2OlTZbecV+9M+ExP
HMX+Rb5rSnwDhlccORc7fvcMPM5WZsULcZ175odb3FNAMfa902k7vwAth7l4
Ac490XvuEfyh8r/aMcQHxshr5WxEbY/alUv0gbQAQ5O47TwtEOBD+X8DPhBz
xRXbdoviMXUxcoGFfAupsi9kuh5SLNCN6GLsk0D8IJroSwPxOuSKjrkdB5Ms
1s1U/yQwDzwEdua5OBANx2GPpSwSExlVuTgXpCX6nqFUPoplp4HoLotvx9Mq
GNMfB6adIGZRHS+AD8F9BKABaE6D6MGdINv8G9WBeJmBOPsLIM0fl8uvxFn9
bTvineCkvAqxshO9b4JvdUxHdCABzIIxwGEMxnrlAm+0QiwiJ2OHxDBRii1E
Zg8rRfeW2YlzxrIvOyazhtzyrXjpWHdgC8mqzFFgH0crSNH+yawT7gBjbPLy
ALPgflSB35Vr9zQsYDar0SW70OUndDEXB9nX/Ch83iTQJQBdSqI2P9pIoLUg
zmZFG+h3ihkSgO86tMmPNsvRWh8XPqnmIPuSHbX60QYCbRlkX7ejS3G0OaRI
9+7BUZsdnR2H8eKL29o7ACIt7tx2Pbg3f/mfhmuaX+GuPTJfPIFjXHlYMdD9
l7fQ4YZc/JsZi9YcvcPHPvj4L4f9neuiNgaNn3b89O0ZEXJIVMkEQA6DggsC
3K998Y6J8B0uRHsAtFUKdocChtnhAwgCvrWNEwnAApEfU1DxRwULQUhKBoRl
FsZJozFqCDnNocbZ6yuXA/5jNTa50+bJ3w8LBGywaDGOTj1uvIYNArAmEHQh
0AHlR/u9uUANHaDNY5S5NYdUbADSKB+J8FAfrevn2IGAGgqEhzIl8yYCxD/a
qx+LknPocekJQdN20e/XVFoAKwAoiyBsMWnN6ZDOE+ctn8rlgBOKSsjigU0Y
1w6qRltcPdVIonJ6QuE5ErsV/puFCJCPx9hUzUnu5CfwSn3t0ZNnHmIpZ88A
VwRU/dsNHX8H0mzMLuwbFpr5yHSvUububS+2o60taGNnA+cSiLuGc+/Yudmc
4uSeYNK324VmMooWcyUOMKf3K6e3M6cPtLQ3WdFlGNqq9lit6FIrs7nFYyU8
CQM87lUfd5iMqyPjLtzk3tRws/G+pDMi4QlRUo8+2UyuKfjMVTCozO9mFn7m
KnQzCwZu8pt16LIFaN4Cjw0+7R6rz2PVoc0ZaPP9KDjsErtHi3kaBB5bp6e1
05F5/Sb3+jnuLwHuVZJp6N8uHNkuHKCfp/XCb0TCPkfSN3r2Dz5lfr8yv5N+
7u+VdShlXmZBR+/z0OhDZ8H3zIKuXs5XNR5rlcdmdTUtQFt0niaBp8nvSfh2
Xtx1EPezhjvi416Qxw0T3KtwFkRG0ulgco8i+TuR8LQj+fQ54chw0o9IsllQ
LutSTtvmKhjQpIUnovMsaUFbOstL7/jiqAgkL0z+Ri+8Iko6E0xaiSRTDouS
burZlatdsoHegi7ldBiQhz2FI8oCL2z2th+MgTP1LIH+YOjSDNTW6Zh/Aede
DXAvari3ydTgd4rkkeEJJ4aTzkAH1AkFXa7p3a5Ed6+sXZk/0Fu4P5jf3wvn
WDig7m7AUOhVAwxglSfh1CHuVV3ctXOwHsRdJOMuEnF3Ndw6nHuB5MLm7XPs
fz3HHdFw75Op56/qhT2OpBPDE66Kki6JkvpESTCDV0STzMQ7BZ8pp+9n5ne4
8geqPoPZh5NdCv1Ue5ZYYfQ83Is49ybt7Q2Se9vHvaPhUhhthbh/DVJbsppQ
ejkJ0TaJmkh1tG/YMKTy4xnGQrGk+C2f6P0WIoUxL1H3wbmYPsbL9RazTV9L
KOtrrTUWk42QZImzs8RZJGGutxGlNXWLW4gWWS6RkSt9zlDTNIXImL24zkSI
czMJCSmRTKlcTDUIxeI36DZ8nyaVTBNna+fqm2qaTVpt2eImvaHGUtPUqrTU
15m0M7Rajb56kcmosNn0rdoKk96SK9VK/mvm/8cg04j0Zr1NLJWV6WvqqH+I
IYFrlBXkOEgl2a/WOSv01XsWNc5Kfbbx/cR02c9/XladvWnMosbdz256e86y
xsR0ecWBMIv3T3OqUx/smLPo2cR0NfgjXO8iGPMxMbYMuI7QpVXWTpi7XojY
/MFe5yXhoe2xVxTUMr9EJZfC53jpBR33sgbCPm6EAn/cZQ33TpfdgbZm0Kuy
xdMQwmSVdVuvrBsp2Oma3tHLWAQXuPD0sPA0IRzRU88rjuQevXBwu7A/BCRk
CJZCqjahA4U7XQXb4GJkTve7CuHC9PVStUkP8VFP7ZeskkyqalJnOH474CsS
vpdHD2q4UeWMknJYGW/Bsgd3EfCse3WVmJyzW6SDJZqNJogzAM5y5Xv/2cw5
UqwhfDzX+3AX9QX8OqeZ49uk0fjMHGY3TTo6NLhvzM5EsXwbzmL+yMFSBw+I
M48pFfIsv+6EXcBgCOrwDFIgJu1wyEOxjPrNItzJc52HA9pPg63p+AGxdGKJ
Qt6WyOByZnA4BCvo3+CSc8wJ7BSBOONdOKqau+MVhuF9K0FV6dzqSrnx1L6g
YBx+srvu+UE5xgviR+7MVImkR6Nlqmzi4JGfcmpvPFrB4g5x1A33lpadvffe
a+3lyIaye807KuWVl5fVPvAOUer3atPUUaqcMw+8H2SMw48tXXGhyJAyI0q1
eP2pmAqk/JPLRYZMKLD3iwfe3xNQoPV66j9Q1s/+FlV4VCFVN9xuLTv1W/3Z
QHaSysVf8t7xO7WP9r+EQ0mzgnIyqhwZWgE8UmTozvFLBsg5KgMAEcO8wXm8
1jas28dh9VgS2l0nJQS2x6Thmg8HCE54H6JymELnUEnnkNrEpO2gA6TnAHe6
noqiYy3C4+hcPBcDU5By1z8KxAQMMlOmaYvFsgi7nmlIZeg2ExhK6VKF4xk7
P5DCe2Gl1p4i41yQrlSVolYSfPewpTYh/jtiLCNTzS71Hm2aq+yckRoW+OL2
KH/aRmGKHcJUh5zXoYh9jKlUWpbCFZvG1UGIq8O7ixd4x7mO8hMZZuU5Cy5k
f45PTHctmyLHoh5jrUta7HK1C/g45gwK57+azUZmZ+D93uCQmxCozX65IrvN
YMvIUGe3bXfSZMSWgfVH/bBOQMzFnMgxtptnV+S1lbxPcQWcRFwpB72xDJSd
ymbznbrBQYWcvYfjwKGJF6G8Ch3MdAyu2/6rJIYhOY27EUG7QKDBnAoXikwc
kHBUpEFTKMLYeLJqD0u1Efm0l60ieIGFw/IcOK/NLhqD609wK5ANK34qMkyD
MLm74oH3Hb7c+PCXWBWNjnutZWfvrn/Qjwg5dumqI5MUBob6wtgJklfWSfFi
FanK/juvHDsykjoBL0OHIGwv59T+9OW11H00SP+8/r73II3K66lFhqmzQzhd
f2LMPAjM43kU87lSCNUvju+Dkl9Tkr9RTCn0JHfdg/5o+ZOlcC3VTDl89MD6
E7EV1DooMmSoKZg/8N7KYBBlj9zT+2IpXMbSuGQ07OP0IxASrL9KMtFu0wJ8
weGbwsHNomL/c71u2WttMVAg4bwlQdZ3UmJHzj/Bx+r/rubwGbEXNXi6hn/w
f4ANwdPY8JOSJ9iorILYKH6CDaNPRWFjYQgbS0PYWEih4HgYG3shNlr+Jhhf
u4MgJhhJi5yDIJw8LCGS8lTUIRiQsIrDKfcJ5XtYxXltl3rhIFYlztaRBp0c
dqxLYpnJwyQe9CpuQcvyZvxIPP453h84fO71GFxikbP4yAIZNffsCEbOHlgv
oDFytsjGHGrCYytOr3j96J/+DgtNehSe8OUK1ppoYt2L8/ubAMokjmjv5abG
unEeZ6h0lYpfnP1rf5RqVKEJ16lWKs/PQ0TsfRciQrAWlqp194rOp/7QA4Hz
0y/rKJjEQJi8c2PvNShJzg6VsPWdHCr5F4psDJyqjLeXlp16sOqB9xgsbSeb
bqQ2h0EtoDECQT05hBEsVLP+r9g4Q2PjJRobWAQb0d/LE/jFU/jM2HQNO0rM
0PBLNNjIOkrHyJ7VaRK4df6vEt1tGLOa66vQmB1bV9e4eEwmrHck88V8c7Qz
XPyYcTXDmrISpkc3m84a4QhmKhUsuPhxp07HrvbL9rCCpapkzqQpd5Zjn37s
6Ck3kVlRKVvWyNrW85cWCZL/EPwcrnESD3iReAch2OWYiH+fNyARzoDZBwTG
Ng+yq3Ln4JoGHztG84fgfr7XOPm8oKjiyq83tzkSjNYbXbAYs0iDXQWFF5Ko
ysPuzVQ6KRcA5UIzzv5bpkJ+UDExw2jyjda3B5HEp/UDqDuhL0ge7soIeh2I
nRB0BidBlwbiWZXCiN65kwrhY72xwdhJU4yCmwUQhgwE1j/GVDgVhwhOpSuY
0acQcPJYFgBLYOnYwQa4oTOAgrS6KrADYmylHOWzRpxF1IaBYbr9ivtMstNk
fdefyBR4GcnU/l6MtMV6RYR9mK3nB3SbkbUw7gYG3MFfVWxJb4F989SYbrMf
LtjJcAPaNa4fbjs/HurawphEac9+rD1MaSu2RrQNw2+ndx4QV30EYigPKh97
UBUFPfA7dX3+TjnO8b86CDNtJUApxMXkfYW8W9RuP2/VmK/45X2rjn5lLeWV
PFyygks3z4a2tNwVON28bP4gLH90lnCeivfo80kHxSX8W2f/HpXh7CXnXpjZ
1xSrRjLjb529O52I6lL3rbowwUFtk48+OcuqAG+qHubVk+7ny4OxlPqXtdog
pX7qfhLd/ETbQzcfRtO69cebU0SxElHAaQy4ZWWXpX28EP/s3XGjF/atN+id
+Mt3Emc/2WiFDNrc3brXhkYdajatjKHdO/X57xRMkYqllB6dxFs9WJo7efSA
x7prnntR9ZDaUDrePv6zqo+WKQjv3Q1EqOZKuHiKm3GD1QJet2NudmegxR6z
KXTTBiZ48HgT0nhmh466HVPnQgs8TD4PKRV36lxZFR6PomOp63foZg3ehp1x
kH4EaUH4bABG9YOwPPWL3PcjlP4YlQaAMHxGiVCKj2UCMBW+88ATSvPTQnao
Tx4RGuG/BN8TwBMaGacuXJcjNGJ3Owh9WYjQCP8iEvJ59yi7AJ7fesJzidCI
/LGw3LGn/LwUbl96in8PhGIWoRE+G9odB57QCD8RCelHaISfCdtjwBMa4eeF
5fKeklcjoc8wERqJDxiVN3ZkXuF7Rjx4QiN86vc7iBlHCDP3KbxQ1y+ZrKau
pqlGb6lZCu909XUqeI2jLmMWS3NtlqnFaqpuyqoRz7CZTGVzF9eabDXV9C2u
YnFdU02tSau0mfRNptE9tGKtqbba2pplJWtkoUdNrnTWf7CjNUlzTLkSvUQr
NRrNWmlOvkRrqM41aWU5ZJ4kOy8vuzrPQDmiVc6qa66vppXo9ss2vdVqsmmV
eouFZpS0WG1PZOaalmgjl+YSm63e1mhqKmmpNlmpznlNrRZTpamxaaapSVtW
aaprrLdBteoFjyXU+joj1AzNKyxBGaAjEGq+AQdsMtnq9JYw43GsbDAkdU16
S1ZdPZyovjGrsbreasoymqot8PJOZokJo1GfLTNk67Pzc2WmnOxqkyHPKJXI
yJz8PH11TrXMWJ1LmnONeni118KbvbX6OQt11X+57PF3gP/VV4CsJZas0v8U
NQoL/w5nPr/n
                    "]]|>, "orcInstance" -> 80869952, "orcModuleId" -> 
                    52654352, "targetMachineId" -> 81867088|>, 
                    140548319576608, 140548319576208, 140548319576288, 
                    140548319576064, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2, 32},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "6e310331dc5af4c5", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath["Inputs", "Input"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 106872, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 17, 12, 28.064553`8.200733110879936}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> CompressedData["
1:eJzVVs0NbTFPfGJDAzRAJfRACZ/EmlYphRJYIo40ml/nPry5Ook9niT2+P7r
P/7z3//jn/78+fNf//znz7/8Yfbf//Z/f1V/df+Lj+LRPvtmOC6eex/MXL4q
jnovLj77ZfnT93bfmfmp50nrtc3D8NJ8btw1rhrH1lF8i3f1/ghftTaufc+V
tXVxPZdYfjVv2lervlzncXG//ize9XfrcsVXxUvPvbqPlY6q++r7rOaNe270
rVqqD6u5tu5vZqu50N4b81/d+5Uup/xVa997pR/Xepy+v5qXxTH81VxkPNK+
UXGRverja31e13vqd3UPKH+6//VrdQbhMT/1241r+1S19r4Yn3buvK5zllfd
ZzxUv+t5h+LS/x3X9ZHyQ9bmUW3V92q865/yQ3lU3FV8qhtqfreeGI/WX+2b
dp6v5qGKv5qHal6Uh/mreMjv6v7cPCx/2w8qHuOj4rPvtI7T/kHW9t3Ve7X5
EN7fpqtt3a3iU31rz9PqJ7N0vqT379Yf82N51/MTxbm4KL7Vw/bcbp23Oof8
Vfu1viL/Nc+V3rt1nt7j35Yn1WsW7+Ko+2lcq69q/lYfUru65/Vcc/8nrHgw
nNS/1XeWn/FJ373FYX6unqzzf/db3VRxVWv7NdXd9RxU8Vd9gvi0c4zlcX/d
eDd/yhvtf9cRXhrP4tR8CMft6/Q9mbVzvZ0XK91134dZe46ruHTOrHQA5Un7
XV1ned18r+/B1fv0vdC3ut6+s3tuN6+7z/i5ONd10OpEOifb+cjw2rq+xlVt
PUdSPVjtI2vn6Wreu3lbnHX9u34tLvJ3/Va6+7rervSE5WOW5mHxyE/lubpX
1Vo9eh2HcNg647FeZ3nVbzU/y6PiuHqr+q10ub0/tJ7qz/W5rurK1WHV0nmd
vuOqL9S49T2zdZUXW0/91rq+queVrfoP4SK8to5YvhVumk+919X8ZTzb+eHy
WPFq+6p97+s6bvkgXixfey6Wv82b3ssqbjV/27m85nfVT+k8b99dtdU9rvOo
edN5o+Zf1YX7nqs56fJf/Z9w+TIebf2v+vZ1/Cu9XZ0jrWvmz/Kr8e3++vyr
/Kr/Ov5KV9r/By7Od3/9/yDNl+KyPCpumnf1nu57pPXg5lXx1fwsL8JJ57G7
3uZz5xPDRebWFcNZzVOVz9VcbPuxvQ9mbR2479Lqbfr/SLUrnWjn90qPVvW/
ng8t/jdezeP6uXOL4bbzrf1/4uKv7s19xyvdTu9/VWcur/ReU71sv1c8V3lZ
fNuH7nna91b91vrU6m+aJ+Wv7qe41/WFcNI6WO8jnswPxanvx3AYPvJv70nl
w/yu6qp9V7fPWV733Vf9vdKB9t1ZnNtn6T1e1UE6n67mS1pfbb+hb4aT6myr
7ykPhp/iuHatD+l9Mj5pnbn82PrKVv3A8Fd60upeqneqP+O1et/0Htu5uO7P
tD5cfogn46Xa9fxx8du6a+er+16qXztHWf52Lq+/kb1631d64FraJ6v50+pI
+j9A5efyWfFKebi6qdp6Drn47Nv1c+9btfS8aZ+595HqW6u3a74sr1unrp/L
k9lVn6R6lfJXcdV3QziMR1pnbX24+rzqb4aP/Npzszwonq0z3LYeXH7ud9t3
bv8xXDXvdx/FqfnWetr2B8NL/dd1topjfi7vlNfaj/FsdTvFfcWr1Y1UX67n
o5u/zevqHNp353Ebj/yu6md13vb9kKl4zB/hpvqo2qo+1/2X1ms6T1f1nfJy
+a30g+VnvBh+er8qL3Uf8WP7rn6ovFq9Qt8oP1tvz4fW1/MwvZ/2nlZzLZ1z
V/2O/K/7KfVP61T1c98hnTfuPsN1rdU5t/6v4tP5stbxdq6o+Vx85n+VX827
5qHmZ99uP7b5UFw671Qe7TxD1vZdOt9bvXHPsdJ1l4+bp+2fVt/a+lX3kX+r
h8iv1Qn3vdH6SlfaOYvysHXGk+2n78bs9f2o/q2+qvuID+PJrNWH9r3benD5
tfWj5lvNS9Uf8Uv1fvWuDK/lldZV2o+tnqv+yFZ1p9qqT9z+dnHU+lLzsO+0
D1Vebt2m9b7WQTWfyjuNW8+dle4iP7SPvlW/tt/Qeqv363tK/do6+K67trpH
tu/Wm5ov/W7rOa2Htf6ktq5rlkfNq8av7Fr33Tzt/EvrbTUn1DxXc+lXeq7y
XOsV4+XOi5R3us6s1U+3DtN+aevmqo9UHMaP4VzzdfFd3UT77T0yS+vQ9UP7
rr6gvIzPFY/U2j5dvxvjydav5tBazxh+qkupredjq1fteyFb6dM6T3ru1bxg
fszcd1nNr5aP+57pu691xs2v8knn3/Ucdecni0/1bnX/zFbzxp3TKa+VPqbv
7dbh9fun/dyeR8VX86d5VB7X973uR7be+qX76bt8/a51WI1b/V9Y3fOV7qfn
dfO4eVW8dd2leoXw1Dh3va0/V98Zj5Ufs7YuV32w4qnmR/7Mz91v64fxc9+F
4bn+7vu6+2l+ZFdz1Y1n6+n9rOaH259qvnafxbW8V3ML4ar+6jrLd90naX+r
8SovFn/1nulcYnalr24e1Z/lX81h99wuH/cdUz2/7s8WH/mt9AzhXedDfut5
19ZnmpflV/m4turztO/WcyfVHWQpL2ZtPV2/P9u/vk83z1p3GU7bx27+lc6y
vO17t/Xs8lufk/FJv1V+6vqrPOm7rPiqfm7fuLbWe7bv3qvKaz2f1Xjmp5qL
t643lPdKL9d15/JczTmEr+KlfNz1dj6s+gN9q/lX94D8VvdzNX/c3zTvd/9r
rf/1HFTv5euv8mjrRf1mPJifiqvmcd8jfXeXlxrH8FreV33I4lP89LxrnU5x
03Oy/Gn/tH2Z6nnLm/Fk+6murc6xrjfGT8VZn2/9vqu5ufK/wvnGIbuKW/dv
G8e+V3rr4ro6uz53mmc9Z9K8Lk5ah25/qnEIR/Vb4a7fcYXfvueqv9K5qFpb
P+u+XZ3vuh9S/WN+Kx1qebl91d5v2lfrc6k4bL29RxU/xUOWxrF4975bXWl1
+FpvV3goPq1H5I9wGb7br20frOssnctpPbb6z/wYP5UHspWO/S34bh+19b7S
t9U8cnm0989spZ/XermeR2q+775qri65+18/t/5YvnZOMXyXx/qc7dz+7re2
muur/xev5r7Kh+EhXLau8kzzrf8XrHRxVSeptfOSrbN8K337lV6t9WhVr259
qu961SfIH+G5/NI+bd+R4az6pe3H9h7SvmU4aR2otp4Pq7m30qN03jJ/1289
d9l+Wwcqnru/1hmVB8qzrks1r5vvat4xfun/iHbOuPW4mutufSC/tP9Uftc6
p+Iyv9U8us7n+q/qzcVH/ipvtr7qT5VH2ueutfju3F7rGbL1HFBxXP6trrr3
kc63FCfFc3HVvKv86TumfNu57c659H8Bwkl1O9U1xoPxY7zc9VRXkKV6tta1
tj9W+ZA/W//uq98qLvJL58Kv587XVn2zmnvpPGP5rvBZPNpf51nXJ1tnuC6O
y0Pt9/aeWdyqHt17VvOxPOn8dN9B5aPmZX6que/F9lc67L5TG4dwkJ9qq/tN
+zbFYfGunrH1tI8Qbvv/Q83T5lfx3LxunbdzD1l63rUeMEvPz/Bcv1a33DzM
T91vz4n81W+V32qupPncuDTP36I/q7pk+dH++lwpjxTXrVfV2vpEeGqe9hyu
rqf+bb219afm/a63c2PNB62v5m47z9j6WpfUOGbu/a380r5o51X7f2E1P1JT
z5Ge2+WR7iO/VpdWdeLuM1vNq/Ze2/9V63mfzpv1O7Q63vJP8zIeq/tf6831
vE/rEdnV/affKj9XF936XcWr5uZX41P8lc66++450/wqfvsebD3VIebn5m3n
D7O0jtl+ep/om/mnfFoeanxbv65+qPlV/oxPip/yTPmq+Vb17vJN3x/ZSn9Y
HItX9aC9T7Te9g1bR/Zqbqb9w/Dd+PU8VPFfzS81bjWfkV3pyFW9pt/p3FP5
pHNgpVOM7/pcaVyrP1f6zXi466v7QrxcPJe/u56eW82DrO1Hhqfma+Ov6iR9
n5RH+s7IWr1GOIzPqu7cODef+t3iuTirueDiMV7tt3uv6v5ax1UclweLc3m7
+rXOm+rZVb2m99HiI0vf37W2TlW/dP61eqpayqN9X/a9wme47fndvKq588aN
V/2v9RDhobjWT41P9dbNi+zq/VNdde97NQ9RfpZvFef2r3tuFsd4sf10TqQ8
V3XrWvr/Y+WX1knaLwgvtbXeqLhu/lR31G93veXrfrfz8+p+0nnE9t2+Ui2t
H4a3mmdsfTU/XP1DOC4P1T+t31avXZ1h5tbFqt7X9bjW8zRPi6eup/EtfvqL
8FleZKt3Xuufmp9ZW3cMd1Vfar42jvm588L1S+eWW4frfv7us++07lp+Kl/3
nCxevX+Xp5qX8US4ahzzZzhuv6j77Zxdx6XryG/d1y7+qt5dvqmteaTz8upc
K15pXSMcZm39rvKr8dc6qMYxnLbO0jnB8BC+q2eMJ8vv+rX1sPJr53Y6d6/0
re2PtK5Q/lXfsO9V/bP1FQ8XJ+W3OvfqHVK+zJ/xVW2l/6murNbT91jPjbQ/
XR6pzl/pYdt/7nx18Vb9m55TtVU/Mly2/t1ff7fvkdaNays9T9+z7dfvOvpW
ebA8Ll7Ks63n1fxt49rzuf2r5nd5Mn81j8sP4az7a6XDX3y2vv5/4NaJ6rea
Lyouik/vS7WrfGn9pXxSHLTP1r/m3kMaz3DTerh+Zzcfw2+t1Q0Vf6Vnaj6V
z9UcYHbVR2mdrfcZb5Wfqzvpe17r6wof8Wb7bf9d9en1/GrnHfNDdnUOxufq
Xtx3Xvef6v/dT/0ZT4a7rrNU/37F050DqzpL64fhq/lZfHo/KH6Fx9bbuefa
63mQ6k37vmqfp3ql4l7NAZYP7bNvt6+v5oR7P+l9pvNA5eHmS8+t4iE/dX2l
O209tfnRvsqjvYcWr53H63pI9T2dK8hfxWntVV+l89XlwfKh+JS/ipeeQ+XH
/No86/OouOu5sdLt1bxd5VfXr+ZPeq8In+VN60z9Tv3aOdbWibqf4rvvkPq7
8StdTu9LjU/nIMvT4jEclQdbZ3lW822ll8zaPMhvpTvt+7D9q356PYeZtXxW
/df+P1DztTrC8qT+rU60++28Teul1S93jjI+zB/5rfsg9Wc4Lq+0Lxgftp/q
BcNP7zvNp1pan63f6n+Kaldznfm3eoTw035mPNy8q33GE327fFe6ouZ3+bj3
o/K4/v+ymifuu631vcVx+9091+oef6UbCFeNT/V0rf/pvSGctG5W79D23Ypv
+z5rPUj7tp2TrbX1iNbTekjnVrqv+rvvmPYL49XOh1/Nuat3Ws2ltp/a+bKq
m3QOt7rZ8mN47XxY8XPn3qo/Ea5rbX20ffwaB/m775fifONUXi6Plh+ydO4w
Pmpe1Vxd+X63/erqxEr32z74rqv8WJyaL53Hq75V8dO6Xc2tdn9VbyiPmv/r
x3BX/cm+V3MBfTNb83bvCe1f3zPLj77VOJQ/tV/hM79Uh1netp7S+/rbeKq2
mpcu/nqOsnxon+Gv5pfLN+3LtV6l98FwUZ7VHEfraT1e1W07Z1yc9RxL78/l
hfBcHi6OGp/ifC3tH5bXzee+20r/Wl6r+l/pgauz6Xnad0jzqTirvkV5mP/r
d0vjfvXeKr7rh/K1cyI9f9sPr+vTjVPxkKl13M6pb1w759p7de9bjU/ztXWw
0l+Vz1pHGP53383L4pm1+Ot7YPnQN8t/VU9uXsT/Ki71X9cjw1H9rupnpQuM
T9tfyF/ltdLJK1vrhhrf1ourt4xf+u4s75WeqTip/+t5w9bd+HR+uThr/W51
v51XDF/dT+eri8us7V+U19Xl1Tu1c83FTf1YPLLV/FzxUXmxOHfeofj1HGnf
Q+Whrqs8GD81LtWjNm41B9Y6oNp6nl7VlRqX4q/zuXqU6nb7TiqfNN93X11n
vNr4tk/Wc7btq/U8eKVTqY69ru9vPFtvz5HyvarzFR+Wj+VB+yp/1VZziMWt
64PxaOuk7TeXTzt3EG91Pd13/VjcSp9XPFz81T26eK/1XdVLZKs5sp6jqT6w
PCqO+15unPuOqt9KV9s6Xutoeg8r/W7x0jypHqa6w3itcVb37N4L80OWvjPL
095v+96upe+zqgfkj+Je6wKLT+8jzcvw3ftZ3x/6Zvir+0r7Mr239Vxj8QyP
WTp/Ur+vv8rP9Vud3zX3XVlcip/qKsvn4qTnT+Nd3Db/ej6u5tRKr1sda+c8
Mjdvqg+pveLT9j3yS+v5+n9AyzPFYd+r+l/dr/v/YH0uhqvybS19j1RPr/K4
OpK+N/u+zn81N1L9bftTza/mdb9X99G+F7KVXiFcdz/VvfRdV3xcHmp+5r/S
Bbf+VD7M311f9S/Ddc/L8rh527m10ovVO67nAopn627cSh9X/dPO6XSeruYh
+v6aq6Mr/9X9r+YCy4vyqXlXuro+H8qnrl/rYYvn9i3bv9atNS6KU83VMRe3
rQtXX1a6xfi4+Ku+VM2t++/6qg6v9PrVXFB/vzjqdxq3rq/rPnPN1X8Up+Zx
cVe6vJ5v6XxJ37+dN4yXiuPyW/dbWq+Mb6ozDP+q7pildbfSd/ad6t3r91fj
VEvfo9136zvtO4aL8rB1xg/lUfm5+RmfNS+Wn8WnutrWIbK0ntp+b/mq/mpc
e/9tftWu9KjNr8at+TA8l4e7vroH1Z/hXM8DZu08fD3XVzireZT6o+8U18Vj
fFx8dz/tE1eH0vtl/ipfxoPxad8L5WF5VfxVPTB/936u5mSr/+s6WOnHqm/T
PkQ47flavPWcY+uunqz1uD2nm6d9f/TNeKTfbT7m1865dv6j9VW9q3nTukt1
DeVv37nVVTefipvqqsrH1a32f8dKt9fv2J7f5efipHOk1ef0/0lal6nup/8L
Ur7MVnM07df1HFnjtDyv6sLl6cat9Q7lZesMP9Wj1Ry7uicW59aHG9/qG7JU
b1QcFr/Sufa+Wzw335UuqHXc3oNq6dxx38HFdXmqeRke48lwXZxX9cksrU8U
3+pmWlcqT5bPfVeVTxvv8k31lVl63y4/dR35XeMzu8qT1h2yq/pZ6x6ydg67
95bOTZTvV++p4qzqU8VV49b3o+ZJ52pal6mOMpz2/wXKl+L/Sm9YvOrn9sV1
PV/prGttHvVe03dXeaj8Wn1EuC4Pxq/db+fy1w99IzwWn+KsdFjFTXHS+ani
pTjIPz2vipP6rdbXOprWSzp301/Ep+37dd+l98Lw1HwMF9mq3xlP19r6RHxY
vnV9qvbKv53XKH/bv4w3ilf9W7+2j9J+Zv4uD/St4jA+La9XPFocZKv51+ZD
+dm6m6fVk3SuqfjM1nNuNe9cHiv81f2nOOzbrSdmK51g+Ks6YZbq76ov2/dx
+al+bj2kdZvut+/Wnpvhpn3C8qC8Kn5bl9fnS/vO/b7WlzVfhN/mY/Fov8VB
tpoXjM9Kr5lfyrPVg/Z86rebn8WxPMjSemQ4bR2uddKNX+vaFzetF9W/nXMs
76v/CWp82g9tv6T6lM7R9p1VXHe97eP0ndo+WP1PWJ3frYOrulnzb+crM1dX
27pwdZWtr77bd0X+zNp3XPWpioviW/2+5qviMLyUd1v3qt96nq/6ta2D1f21
8wPFtfpwrRereZeeczVHV3GruZr2P/Nb6YrblypOe9/IUl5pHyPcNL6tI/bt
9oWa92/V25VuofW1zjA+Ll/VP33f63nkrjP8VmdZPpUP+17NIcYvnRsqDsuP
vllcm4/xaOdp+pvisrjvuurX6hSyVb25/m1fqfmQrXUh1b1UH9x4hOfGqbxc
Pzcvi0P51Xxtv7Y8WPz1vGnrWd1n5r4H+251xeW30iW0v+K30q92DjLc67mg
5mN4aXz7jXi4/Nq6YjzavIwHszSfirM+n5s/9Ut5pfNS9X+ls26fXt2rO4/a
umnnOftO32/F62ur87hxKQ8U53638xPtp+db6b7LI9Xtlf4gU/OnvF089Rvx
UPdb/U/zoDgVj8Wv69bN4/Jc6YNa/9d6m9a5+t7I2v5T+azx0T76VnmoeGkc
W2c8mR+zdD6097/W9ZR36s94tfqJ7EoX0jpw+aZ5V+da6zLKh76Rted1+aR1
uNJBhp+e91c80jmo+qV6pr7vWv9XPK90qz0H2k/jmb/7fqq5OqjmbeutrWc3
L+Lh4rr3keZh663OtPfc8lL9WTzj1epzytfFT/8PuHXZzsuruJZ/OgfSd27f
28VTebnxbr2357jyQ9/MVvN3PReu/te49c5w0D6LV9dVHmv+q7nh9pXKF/mp
tp6LKq+2flyc63dY3/v6HVC8y8+tF5eH++6t31qP2nWVnxqH8qXvl75/O8fS
OdX6r3UkzYvirt4xfa/Vd9uf7fu4c3b1Hmq+FHelh6k/slXdX+Vx99V8ri4z
P7cO0r52cVHcWkfdOamuu/lS/XLzun2m4qv51Hjmh/ZT/ULr7bxjfFWeaL3V
NXUd7af11N4Xw0Nxaj+sdLadkwg/zYfiEL6aV+WTxqv4bV70rVpbz6s+UHml
utzWYVtnqqXzUt1vdbftfxVXtdW7tfnWfZDqpBt/pafreHWfxa31nvFq9Xyl
z1f6jfK08zytD5Wn+52+b9t3jMd1fah+6/8R6T2yPCxfy7PNn+o9w2V5Vv4u
P3c/xWl1SI1j+dt5sMq/uh9mKm7af24+ln9V36keruLaemHryC+t5xZfjXP9
Vnq56oNX+AjH5aXyvqqf9J7cvKtzsXVkq/pW49T86/dueaI4dT/Vk7ZPVdy1
fql+6/pO61XFcfkwv9f6u1pP64b5recui3d5MT8VX82X9g/yV/kznPT8qq3q
Fvm152b+1/tp/6TnuKrnNa+27hhOOt/cPMx/pU+tTq7yue+60jWEr+Kt5pfb
b+m50npT87/SCcYnnUurd0nrAuGq3wxnpRvtt1vf7dxX+bQ6mc67tF6ZufW4
Wmd83P2VPq7WkaX9k/4iHLbOeKt8kV+6ruZtdf9ap1W/lkdbTwinxXOtrZOW
V6vD6flX79/q7/X8S/Gv5hDK0/JL91c65tq6b9P+YX7pXGW83PxsvdVtFXc9
r9v6///2viudSvUhPadq7nnS/wMpn9Sv7QP2veLH/N3+TuOZP/pmpvJk8Sqe
msetY8Zv1R9X8+h1ntaPWTs/2z5w8RgOsiv+r3T2V3rqrrt1mepi+06r91jj
IVv3Qapzq3tO35ntt++2fg/1HtI52+ot47GeR1d15/q/7usVHxSPbN2v6/1X
uod4uPla3Vrdv7qe5k31KM2H/Fxr+4/hIH/Eg/mv3vtvw3X7ZD0X3e9X82d1
DoR7pYspD/f+1bwrHLS/0qW0r1bzcq2vLJ+aZ8XD7RPGo+331ZxwdeLVfHH5
IUvr3L1flE9dZ3gMB+2nvyku47/iy/JcnRPlY+vM1nM5rV/Gr9UBhveqHhhv
lS/Kp/Jo9ZFZq8upjq3qA8UzPxan4q30C/m7eFc8GY7adyjO3V/VX9onLa+r
vOm3mq/tL/X8af2yfOl9qnnUdTcPW0d2NT/cOl/X40pn2ryrub6ahyvdXtdH
qhMsn6sn7b0zvDTvSgfauZPqi7u+6iMVX91neIwfWk95tPPy6r5aXWr7ipnL
t72/dD2da62+Mzy2vuLh1g/Dc/OpPJm5vFleNd9aZ1ZxLt+279u6SecM+nb5
rev06v0QPotnccwv1SfVP72fdJ5d65ya3/392us6RNbeK+Pjmjvn1LxX9cD2
fzUXXXzVP60X5nfNj+Gv52+qX9f17tYhw1fzrXi67+TmQ/6vvl1bzxs1Ls2L
8rU47vuluoT80/mt5lHzr3SmfZ9r/BYH+af96vZ1Wmeq33oeq7zcc63wEP71
O7j9tq5PxsPFSfms9dnlxfilfND6WidSPm09qrxW7+jWoXsvDMfN1873VG9b
HUz7YNXXjI/ql/aHm3+tC6v/De47pDqPeK10w8Vv9eS6X9J7b+u6fQ/Vz+1T
tM/wV/qZ6sOV3rS8XJzV3FrvM75XPL5+jF/b1yyfyrutY9Xa+XCVp9VDNe/1
vET7LD/yd/O1OO59q/mYf/p/IO3f1f1fvWc751Eel4e7n/qjuNV5Ux4p3nUd
tLae8+u5jPzV/df/M9r3ces6rcf0fVxr/++84qfyUfHa+07zqnEuPxTn4qV9
1OpC2/8ursqznWvp/wWX30o/1vNhNbdSW88Ptu72T3vetA9XOp/yUXHc+FXd
r/1dfq2OI0vrQMVN50arl1ffK51s34n5Xdc149Xqq5qH5WPxa91t60HNs9pP
87v31upMytutB4Sf1nnKa63nbn266yoPl69qrZ6v6mmteyierbvx7nert+o6
ysv4rO5pldfNs5pD7np7DrSv8ki/VVvrXnru9j1QvlSfVP/2vCyO8VHzufxc
XqvzuXXF8FO9cfO6+VX/K/1M5zrzS3V8pcOpjrj9up5Tbt6UJ8Jxean5134r
XV3PlbQO1HtQ/Zkfy9Pe01p/Ga5bJ258+j6r+2r16lXfIT9k67nW1g/zZzjM
VnOi7aeUr7ue9g/DQ34qj6v7YH4pjorbxiGc9B5TfU3vB5l7/rXutzzUdReH
+ad9c62P6Rx091FehKNaqmsqXrrP/FXdcf3W8yzVjVbPkB9bZ9bWr6rj6/O3
fFG8a62OqDxW84r5t7rhvn96D6u+bus3rRtk7Ry/muvpPbm81nWn5lm9Y3pv
bjzLy9bTfKt5v8631g1kK/1jltZr2p9qfhfPrXeVh8pr/X8B4TDeKv5K91fv
p/JI3xfhqeuMD4pf8Wr323pL7z/VzTbPGl/FQzjpPFPzM790faWjK31ezZnW
P333tO9UHmrdrd55dZ52Pqt47f+WdP6zdZQnxVv9/1DxkL9qrR5d1c/V/xmU
R11Xv9k6y5fiMPy2LlP9YXxcvmleFp+ut/Mx7du0Tq/n8vW9MWvPnf5/WP0v
YHlYXPoeLJ/KJ+1DZK5+sbwp77YP0vpv+wvhMHzX37X0HC4e8lvVE8JV193v
9H9DWpdt/vSeGV7q39Zvq6epjjM+KX5r6/pu863n6+r/Q8p7XacsL/Nz5wfL
1+J+/VPebB3ZWvfVdfeX5V/3jeq3Ogfjqa4jv1VdqLzU+FYnXFPrgn2v/xe4
+KtzuHzUfKq1/ytW95HyWvV7Gu/2mbq/OnfKh+VR8VSclJ+63s4R1dr6bOca
4tPWGfte9+n1u/1K913/q/e91sl2Xq308JrXCj/VGxSfzsX2fhCf1N/t71U+
NR7huedRcV1Lz4P23Tmbvl+7z0yNT8+t5m3nqYrv+rvf6T2kful9qPEu/tWc
d/t+fQ8tn2+cO5/buZ/isHWEg6z9f7LST9e/nWvt+7m6wmxdLwiX4TFL753l
TedxitfWSVpXCEddRzgpvnseNT/zW8/z1T2rlr5z+45XcyTNdzWH1PhX/dnO
IRXXPb8bp97nWj9dPXHrdzVvWD5kK31J66J9V5WHyjN9Z8YX+aFv5tf+pnwQ
D3Ud+a3q56ouWn8Ut67XVrfa+cPw1bwqLltPca/6+HqOrnVJzdfWZ1vHKk+2
ruL8LX3S1mdblymvlB/Daesqfd/0vGlehufmU9ddXDcu/Wb503ty/d13W+lT
is/yrfOn75zqVsoL8VHX2/dn/szcPmvx03tn+6l+qTyYH+On+qv8Uj7Iv9XV
dE6kc/Rr7Vxc9an7vda99BfZql7bvljpdltP7n7KS83T8lbjr+og5X2lP+7+
19L7RubqgWopzvo+Vjri8k/tWvdW8e69sLi1Xq/fbz1PWf5WD690Z/UO7RxB
fN06UuNQ/Fq3V/23qk+3fhiP9r4QLltX86W6xqydh2h9rYPu/bX3ttIhhqfm
b3Vnrdtpfa/uB+Gr+Vxe6bfLr52P7jna/nD30znN8qx00X0PNW41f9t3anWA
4av53XztPvK/ngto362fFNfN5+6reVs9SPfbe37t186ha1wXj/kjP7ae8mrn
jYrX6nfLt9WF1A/Fpbq27if33Rg/lIfxTPkxnul6my/tp/R9VnWl8m31C+Gs
dNzlkdqVPqK4Nq9qbV0hPMZrXcdrHPe7rW/Vb/U+61+WR11H3+76ei61cYgn
45Xei3vP6X0xv6s5yL7bvnDxr86BeKZxqznG/FL/Vt9QvjS/i6euq3yv8rb1
iuxqrrW8WJ6031zc67mk8lL5IPz2PRk+80vvT/1GeK0+reZtev/reel+t/3Q
6qcav66f9nvNe8Wf2Vr/GH7KB+Vv9THFXd1Dqx8Mr9XN9F1dPWnfx72v9F6Q
uTq9mstunKsX6Zxo5yfjk/bFOp/q3/ahyhN9s3zruFW/rPTItbbO03m/ynd1
/2z/SgfU+2WWvhPyX+ltO8/YOrPVHF3Xa6szzK/tRzWPus94tflS/ut5v5p3
bR+8rtO0fpn/a35X9Z/q4PWcXet2q2tuHaRzfqVXbT+69894rOZnWs8svtXp
tY6r+tz2kZpvNb+QvdIdNW/6HiyPy0PdX+dr817r4kpPWF43LtVHF899N5SP
5UXW6gyztB/aPmrv9bpfrurbrQu3jt18zNp57L4Tyruq/1ZHUvzWrnQIxbf9
sdarVT25etT6rfCRfxrX1kU6J1j+dt+9T+TX6kdbly3+q3dEcSofNV7lx+JS
a/Om/bGuJ9fv6+/aSp/TeLfuVvnRPltv63TNB+G5882tg3Qf5U3f07V03qX5
U91N+8Tl0c6RFY8UP9XndX41nuVz95mt/1e094n2kaV8VBzVH/Fd6fT1+VI8
d73Fd/dXuqjmSedGWjdX75R+Mx4u37b/1fyrOaLiofgrHm19fi2d0+28RHnU
vOl8Y7auF5WX+w4q3ys9QtbmW+lgOyfb+lnVO4tj6y6+i8e+2zwMb60nK1vr
wiofyqvipHWxmu/ML51XCD/Nm+JcxyFbzaH0Xa/yIUvjWP60j9P7X+tE+k5q
3lZvW76t7rX1m9aLyzutx/U9snhkK51p+y59n3WftHPS3Xff261/FVfl6+Kl
7+3OqZbX+l7Y/rqu2jnNcNf5VnO4jUf+jDfCT201L9fzNuWJ4tK8Kp+Vnn/9
1XwsjuVp77W1tl7ae2B+qY59v1f1ms5jFbftz9XcY3lY/FrvUZyLx3DSeb3u
49V8dOvQ5beeL6v/Falep/2zfhcVn9n6/0F6foSz6pure1qtqzxTfU33ka31
1T1vez8qD7Sf4qj+Kz1C+a7yI391f6Vvbf2hfRav8k7rXM2PLNWP6/5S+bT4
Kp6Ku+pXlWeqry4u8l/fhxp3NcdUfixfOzcYD/f+1HwMD32zvGmdunldnHZ+
rOaJmxftX8UzXHd99R7su9WD1TlSvWp5oG/XUj250v2r+avuI3+Vb6qPrh/j
m+ofs7Y+r+dLiuvaSocY3tU9uDxb3XN1kOGhuFW/uedc9YGbB/mrOK0+rPWI
5V3PO4Sb1vd6va0btN7OW7cOW91n/uq+mtfF+/qredx6Vut2je++J4tH+22f
tLqfWsoDxat50L6bZzXHVve/2k/xEA7zR5byVXGu7nOli8xWdc3wV/vrOm95
rHkxU+NXfdXeG8J3+bl4LS5bv+qbVB9SHUjr6Luv4qfv61rbH60uqesrezUX
03pX/dv+c/sjrXvmv5pDa9z23pGl82bl5/JY3yPDZXirb8QH8WP+KC7V/Sv9
cHm6fbXqJ2TpvbRzJ31PdT/VUYbf6ruLr9qVjl3Ns9X8bOuixWHW6nw6l1N8
xp+to3iGu5oLK71c62KLm/JQ49w6v343htf2h9svLp+0LxCeamlfuHm+OOgb
5WM4KC7VYRVPjXf317rt8kzv76p/WB7V342/4u/Gq/2QzvOVvq11es13pd9s
/bu/6uO0T1N9d3W4rYO2n1U89zzIr53/6/yqX/uuzFZ6ubrntr4Yr1bv0vyI
D7OVXqjfKp91/7jxyNI6Unmt+kT1X8eneKu5sNaZtI5W8y+d+wxf9Vv9r2B+
7ru6PK/qZ6XP7T2751/1AeOJ8JAfW3fzvopz+4Xhr/pdjUvfz7WVTql94M5b
1+/q/85qDqT34/JFfuhbjUN5133B8qznWnqOK91u64vZWjfbe1vpcYvP4lf3
m8at9VS19f+H9h5SHDWu5dPe/9WcSfddnq2fywPFq/lbfU/X1f5u30H9dnlc
98HX0r5N37/lkd7LVR8wvHQOo/X23dv/FQy3vSd3/rZ6kupDmo/xYHFr/U7j
VnWY6rK6nvp9/VN9Zzhq3qv/Ay2Pq/e7mpNtH650Kv1/0Z4nPV9b720/fONc
Xu49ML/U/+u30v203tr3bPVvpScpzlq/Vv3Q6k3K19Uj9r2aEyv9VPO098ns
V3qr4iO+rr3SFZeHys/N4+Zn+O47rvKt9913W5275bvW+7bv2vOqdq0P6/5e
4bt1tsZh1upkWocpP7au7qv4yG917jbuNf6rfl3VH+LXzgvmz/zW9bLS1bZ/
V/ePcNl3W08Iz+WD/Ff361paX6qfW39pf3/3VX/XrnTT3U/r+pV+sfU0Lq0T
dZ19X51TzYtwXbvSMebf1m37Lu38Y/urOZfOxbYvVByWX91f9wvLm87Vlb5e
6XB7r2h/raPM1n2P8F1TebF4hov8U/1Jdf5V3TM+qq3yrev3b/FH8eu+auet
W4+qn6tfq7xqPvad9puLg+IRDsNX8Zgfy5/6uXFpHaXxqbnv4/ohf3fd5fNd
R9/Mr+0flsfFRZbWr5sv1Y+1rXXErSuGq+Zl+dp6d+Ou5x3imeops5Sfi8O+
W9129RPtt/3b1kWKw8x9v6u51eZzeaws1U+Gt5r7jGf7/iku82//D6RzDu2v
+mrVb+n9MEvneVqvaz7relzXM8vDcFRr9aPFc83VIzXe1edWd1Rb6/z1nG31
Jp1bKl46pxAu+171D9pf9QP7bu8prUe3ntL+Sr9VPPec6T0xXuv6Zt/X99G+
x4o3+mbrzK+9L+aP8rd63+K49XxVbynP9p5/XUcqXmtX8+yqzhhOq5PXfdvq
LsqL7Ore1HwtL3Wf5Un12rX1PPr6v9LJ9p7bdYaf1mt6LpUHi1fzre4rXV/1
mbvPcNV1NS/Lt9Y95N/W0dW5VJzV+Vf/C9S8DHf1v0JdZ7b6n5Guq3xUnLaP
2/OrPNb6oZ5HxXF5tOdE1uZp64nxup4jK79X+qbyceNZ3CudZniprryuIzee
+a/1hNlKT1Q/t3/ce1npmGrpnFidy41H36q5uOv56e637/PqOzX3/lH8GmfV
522/unXn8nLzMn8V50oPVX6/qndmV++7utdWD9f/F9w49t32m8oj1ZW1Dqb1
0+Iha/vO1YO2/tbz2b13lR+z9lyrc179svwuv+86+mb4aX+yfGkfpveq8kr3
V++5rueUd2tuHbr11sYhHsjaOmW8Wr1M9S3to6v1VV+t+bR9psaptu4XF5fx
UtfV/C4PlLftvxb3qr5XeuPaSs/SuknPtZqj63dneRi/VmdbvPU8SfmpPNF6
+r6pLrU81v2M+LA4t/7Vb9XWOuLec6sLKl83X8vj6l7UPMiv5bvWFfW7jWO8
2j5s6yP1Y3FsfcWr1dUrHIbv9qO6rvJhfsxSvVr1eaqTDE/N5/J61eeMh+p/
lQfhXs3Blieylh/CSfOncVdzPOWT+q1w3Hzse32fK527+lV5rvsznSer+bHi
o/JT8zG7ev8vPsvb8mttNQ++3+08d/vXzXOlL258qw+/0q91nHt/yFY4ap72
XlO9faVXaH+t0yu9S++Z4SC8tB9UvNX7M2vPwfzbvmzvQ8277oP2nCnelT63
77t6j/YdrnXC3V/Va6vvri4znJVOtXOsret2/iFb4bfzh/FJre1Dt27Wcxj5
obg0j3uetv6RtXXs7rf6kOplW3cqj/TcyNZ90N7v1VxlPNw4t05SnPW7u/fn
4qTnWr8Hysv4pH4ujov3as6occyu6lHNy/BTvWbxLp/2ftV8Lv7KP9UPhr+e
T2m9tu+76pP03tP5s9IFFt++F+Oh5nfxvuutfqt4zK/VA5eHyyfN1/Zvqv/t
HPnGMb7IWp29qlMW39YfWk/zXb/rCpdZitPq6ZUutPN0PYddXur69Zxf65rL
y83D4lLdc+9hdU8s/rvv4qrxzC/FYzgofqUfV/NOzY/2maV1rOK29YpwVT5p
P6n51XyrOkn7vNVrFMf4/q/9DxduZYg=
         "], 
        "Output" -> {
         True, True, True, True, True, False, False, False, True, True, True, 
          True, True, True, False, False, True, False, False, False, False, 
          True, False, False, True, False, False, True, False, False, True, 
          True, True, False, True, True, False, True, False, False, False, 
          True, False, False, True, False, False, True, False, False, True, 
          True, False, True, False, False, False, True, False, False, False, 
          False, True, True, False, False, False, False, True, False, False, 
          False, False, True, False, True, False, False, False, False, True, 
          True, True, False, True, False, True, False, True, False, True, 
          True, True, False, False, False, False, True, True, False, False, 
          True, False, True, False, False, True, False, True, False, False, 
          True, True, False, False, True, False, True, True, False, True, 
          True, False, True, False, True, True, True, True, True, False, True,
           True, True, True, True, True, False, True, False, False, False, 
          True, False, False, False, True, False, True, False, False, True, 
          False, False, False, True, False, False, False, False, False, True, 
          False, False, False, False, True, True, True, True, False, True, 
          False, False, False, True, True, False, False, False, True, True, 
          True, False, True, True, False, True, False, False, False, False, 
          False, False, False, True, False, True, True, False, False, True, 
          False, True, False, False, False, True, True, True, False, False, 
          True, True, True, True, True, True, True, True, True, False, True, 
          False, False, False, True, True, True, True, False, True, True, 
          True, False, True, False, True, True, False, False, True, False, 
          True, True, False, False, False, False, False, True, False, False, 
          True, True, True, False, False, False, False, False, False, True, 
          False, False, True, False, True, False, False, False, True, True, 
          True, True, False, False, True, True, True, True, False, False, 
          False, False, True, True, True, True, False, True, True, False, 
          False, True, False, False, False, True, True, True, False, True, 
          True, False, True, False, True, True, False, False, True, True, 
          False, False, False, False, True, True, False, True, False, False, 
          True, True, True, True, True, False, True, False, True, False, 
          False, False, False, False, False, True, True, True, True, False, 
          False, True, True, False, True, False, True, True, True, True, 
          False, False, True, False, True, False, False, True, False, False, 
          True, False, True, True, False, True, True, True, False, True, 
          False, True, True, True, False, False, False, False, False, False, 
          False, False, True, False, True, True, True, False, True, True, 
          True, True, False, True, False, True, True, False, False, False, 
          False, False, True, True, True, True, False, True, False, True, 
          False, True, False, True, False, True, True, True, True, False, 
          True, False, True, True, False, False, True, True, False, True, 
          False, True, True, True, False, False, True, False, False, True, 
          True, True, True, True, True, False, False, False, False, True, 
          True, False, True, True, True, True, True, True, False, True, True, 
          False, False, False, False, True, True, False, False, False, True, 
          True, True, True, False, False, True, True, True, True, True, True, 
          False, False, False, False, True, True, True, False, True, True, 
          True, False, False, True, True, False, True, True, False, False, 
          False, True, True, True, True, False, True, False, False, True, 
          False, False, False, False, False, False, True, False, True, False, 
          False, True, False, False, True, False, False, False, False, False, 
          False, True, True, False, True, False, False, False, True, False, 
          True, True, False, True, True, False, False, True, False, True, 
          False, False, True, True, False, False, False, True, False, False, 
          False, False, True, True, True, False, False, False, True, True, 
          False, False, True, False, True, False, True, False, True, True, 
          True, False, False, True, False, False, True, False, False, True, 
          True, True, False, False, True, False, True, True, True, True, True,
           True, True, True, False, True, False, False, False, False, False, 
          False, True, False, False, True, False, False, True, True, False, 
          False, False, True, True, True, True, True, False, False, True, 
          False, True, False, False, False, True, True, False, True, False, 
          False, False, True, False, True, True, True, False, False, True, 
          True, True, True, False, True, True, False, False, False, False, 
          False, True, True, False, False, True, False, False, False, False, 
          False, False, False, False, False, True, True, False, True, False, 
          False, False, True, False, True, False, False, False, False, False, 
          False, True, False, False, True, True, False, False, True, False, 
          True, True, False, False, False, True, True, True, True, True, 
          False, True, False, False, True, False, True, True, True, False, 
          True, False, True, False, True, True, True, True, True, True, False,
           False, False, True, True, False, False, True, False, False, True, 
          False, True, False, True, True, False, False, False, True, True, 
          True, True, True, False, False, True, True, False, True, False, 
          True, True, True, True, True, False, False, False, True, False, 
          False, True, False, True, False, True, False, False, False, True, 
          True, True, True, True, False, True, False, True, True, True, True, 
          True, False, True, True, False, True, False, True, False, True, 
          False, True, True, False, False, False, False, False, False, True, 
          True, True, False, True, True, False, False, True, False, True, 
          False, False, False, True, False, True, True, False, False, True, 
          True, True, False, True, False, False, True, True, True, False, 
          True, True, True, True, False, True, False, True, True, True, False,
           True, False, True, False, True, True, True, True, True, False, 
          False, False, False, False, False, True, True, False, False, True, 
          True, False, False, False, False, False, False, False, True, True, 
          False, False, True, False, False, True, False, True, True, True, 
          True, True, True, False, False, True, True, True, False, True, True,
           False, True, False, False, True, False, False, False, True, True, 
          True, False, False, False, True, False, True, True, False, False, 
          True, True, False, False, True, False, False, True, True, True, 
          True, False, True, False, False, True, False, True, False, False, 
          False, False, False, False, False, False, True, False, True, False, 
          False, False, False, True, False, True, False, False, False, True, 
          True, True, False, False, True, False, True, True, False, True, 
          True, True, True, True, False, False, False, False, True, False, 
          False, False, True, True, True, False, True, False, True, False, 
          True, False, False, True, False, True, False, True, True, False, 
          False, True, False, True, False, False, True, True, False, False, 
          True, False, True, False, False, True, True, False, True, True, 
          False, True, False, True, False, False, False, True, False, False, 
          False, False, True, False, True, False, False, False, True, True, 
          False, True, False, True, True, False, False, False, False, True, 
          False, True, True, False, True, True, False, False, True, True, 
          False, False, True, False, False, True, True, False, True, True, 
          True, False, True, True, False, True, False, True, True, True, True,
           True, False, True, True, False, True, True, False, False, True, 
          False, False, True, True, False, True, False, False, False, False, 
          False, False, True, False, True, True, True, True, True, True, 
          False, False, False, False, False, False, True, True, True, True, 
          True, False, True, False, False, False, False, True, False, False, 
          True, True, False, True, False, False, True, True, False, True, 
          True, False, False, False, True, True, False, True, False, False, 
          False, True, False, True, True, False, False, False, True, True, 
          False, False, False, False, False, False, True, False, False, False,
           True, False, True, True, False, True, True, False, False, False, 
          True, False, True, True, False, False, True, True, True, True, True,
           True, False, True, False, False, True, True, True, False, False, 
          True, False, False, True, False, False, False, True, False, True, 
          False, True, True, False, False, False, True, True, True, True, 
          False, False, False, True, False, False, False, False, True, True, 
          False, True, False, False, False, True, False, False, False, False, 
          True, True, True, True, True, True, False, False, True, True, True, 
          True, True, True, True, False, False, False, False, False, True, 
          False, True, True, False, False, True, False, True, False, False, 
          False, False, False, False, True, True, False, False, True, False, 
          True, True, False, False, False, True, False, True, False, False, 
          True, False, True, False, False, True, True, False, False, False, 
          True, True, False, False, True, True, False, True, False, True, 
          True, True, True, True, False, False, True, True, False, True, 
          False, False, True, False, True, False, False, True, True, False, 
          True, False, True, False, False, True, False, True, False, False, 
          True, True, False, False, False, False, True, False, False, True, 
          True, True, True, False, True, True, False, True, False, False, 
          False, True, False, True, False, False, True, True, False, True, 
          True, False, True, False, True, True, True, False, True, False, 
          False, False, True, False, True, True, False, False, False, False, 
          False, False, False, False, True, False, False, True, False, False, 
          False, True, True, True, True, False, True, False, True, True, 
          False, True, True, True, True, False, True, False, False, False, 
          True, False, False, True, False, False, True, False, False, False, 
          False, True, False, True, True, False, False, True, True, False, 
          False, True, False, True, True, True, True, True, True, True, True, 
          False, False, False, False, False, False, True, False, True, True, 
          False, True, True, False, True, False, True, False, True, False, 
          False, True, True, False, False, True, True, True, False, True, 
          False, False, False, True, True, False, True, True, False, True, 
          True, True, False, False, False, False, False, True, True, False, 
          False, True, True, False, True, True, True, False, False, True, 
          False, False, False, False, True, False, True, False, False, True, 
          False, True, True, True, True, True, False, False, False, False, 
          False, False, False, True, False, True, True, True, False, False, 
          False, False, False, True, False, True, True, False, True, False, 
          False, True, False, True, False, True, True, False, False, False, 
          True, True, False, False, False, False, True, False, False, True, 
          True, False, True, False, True, True, False, False, False, True, 
          False, True, False, False, True, False, True, False, False, False, 
          False, True, True, False, False, True, True, False, False, False, 
          True, False, False, True, True, True, True, False, False, False, 
          True, True, False, True, True, True, True, True, True, False, False,
           False, True, True, False, False, True, False, True, True, False, 
          False, True, False, True, False, True, True, True, False, True, 
          False, False, True, True, True, False, True, False, True, False, 
          False, True, False, True, False, False, False, True, False, False, 
          False, False, True, True, True, False, True, True, False, True, 
          True, False, False, False, True, False, True, True, True, False, 
          True, False, False, True, True, True, True, False, False, False, 
          False, False, False, False, False, False, False, True, True, True, 
          True, False, False, True, False, True, True, True, False, False, 
          True, False, True, False, True, False, True, False, True, True, 
          False, True, False, True, True, False, False, True, True, False, 
          False, False, False, True, False, True, False, False, False, False, 
          False, True, False, True, True, False, True, False, False, False, 
          False, True, False, True, True, False, False, True, True, False, 
          True, False, True, False, False, True, False, False, False, False, 
          False, True, False, True, False, True, True, False, False, True, 
          True, False, False, False, False, True, False, True, True, True, 
          False, False, True, False, False, False, True, True, True, False, 
          False, False, False, False, False, True, False, True, False, False, 
          False, True, False, True, False, False, True, False, False, True, 
          False, False, False, True, False, True, False, True, False, False, 
          False, True, True, False, False, False, False, False, False, True, 
          False, False, False, True, True, True, True, True, False, True, 
          True, True, False, False, False, True, False, False, True, False, 
          True, False, False, True, True, True, True, True, True, False, 
          False, False, True, False, False, False, False, False, True, True, 
          False, True, True, False, False, True, True, False, True, False, 
          True, True, True, False, False, True, True, False, False, True, 
          False, False, False, False, False, False, True, True, True, True, 
          False, False, True, True, True, True, True, False, True, False, 
          False, True, True, True, False, True, True, True, True, False, True,
           False, True, True, False, True, True, False, True, True, True, 
          False, True, True, False, False, True, True, True, False, True, 
          True, False, False, True, False, False, False, False, False, False, 
          False, False, False, False, True, True, False, False, True, False, 
          False, False, True, False, True, True, True, False, True, True, 
          False, True, True, True}|>, 
      "Predictions" -> {
       True, True, True, True, True, False, False, False, True, True, True, 
        True, True, True, False, False, True, False, False, False, False, 
        True, False, False, True, False, False, True, False, False, True, 
        True, True, False, True, True, False, True, False, False, False, True,
         False, False, True, False, False, True, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, False, False, False, False, True, False, False, False, 
        False, True, False, True, False, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, True, True, True, 
        False, False, False, False, True, True, False, False, True, False, 
        True, False, False, True, False, True, False, False, True, True, 
        False, False, True, False, True, True, False, True, True, False, True,
         False, True, True, True, True, True, False, True, True, True, True, 
        True, True, False, True, False, False, False, True, False, False, 
        False, True, False, True, False, False, True, False, False, False, 
        True, False, False, False, False, False, True, False, False, False, 
        False, True, True, True, True, False, True, False, False, False, True,
         True, False, False, False, True, True, True, False, True, True, 
        False, True, False, False, False, False, False, False, False, False, 
        False, True, True, False, False, True, False, True, False, False, 
        False, True, True, True, False, False, True, True, True, True, True, 
        True, True, True, True, False, True, False, False, False, True, True, 
        True, True, False, True, True, True, False, True, False, True, True, 
        False, False, True, False, True, True, False, False, False, False, 
        False, True, False, False, True, True, True, False, False, False, 
        False, False, False, True, False, False, True, False, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, False, False, False, False, True, True, True, True, False, True,
         True, False, False, True, False, False, False, True, True, True, 
        False, True, True, False, True, False, True, True, False, False, True,
         True, False, False, False, False, True, True, False, True, False, 
        False, True, True, True, True, True, False, True, False, True, False, 
        False, False, False, False, False, True, True, True, True, False, 
        False, True, True, False, True, False, True, True, True, True, False, 
        False, True, False, True, False, False, True, False, False, True, 
        False, True, True, False, True, True, True, False, True, False, True, 
        True, True, False, False, False, False, False, False, False, False, 
        True, False, True, True, True, False, True, True, True, True, False, 
        True, False, True, True, False, False, False, False, False, True, 
        True, True, True, False, True, False, True, False, True, False, True, 
        False, True, True, True, True, False, True, False, True, True, False, 
        False, True, True, False, True, False, True, True, True, False, False,
         True, False, False, True, True, True, True, True, True, False, False,
         False, False, True, True, False, True, True, True, True, True, True, 
        False, True, True, False, False, False, False, True, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, True, True, False, False, False, False, True, True, True, False,
         True, True, True, False, False, True, True, False, True, True, False,
         False, False, True, True, True, True, False, True, False, False, 
        True, False, False, False, False, False, False, True, False, True, 
        False, False, True, False, False, True, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, True, False, True, True, False, False, True, False, True,
         False, False, True, True, False, False, False, True, False, False, 
        False, False, True, True, True, False, False, False, True, True, 
        False, False, True, False, True, False, True, False, True, True, True,
         False, False, True, False, False, True, False, False, True, True, 
        True, False, False, True, False, True, True, True, True, True, True, 
        True, True, False, True, False, False, False, False, False, False, 
        True, False, False, True, False, False, True, True, False, False, 
        False, True, True, True, True, True, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, False, False, 
        True, False, True, True, True, False, False, True, True, True, True, 
        False, True, True, False, False, False, False, False, True, True, 
        False, False, True, False, False, False, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, False, False, False, False, False, False, True, False, 
        False, True, True, False, False, True, False, True, True, False, 
        False, False, True, True, True, True, True, False, True, False, False,
         True, False, True, True, True, False, True, False, True, False, True,
         True, True, True, True, True, False, False, False, True, True, False,
         False, True, False, False, True, False, True, False, True, True, 
        False, False, False, True, True, True, True, True, False, False, True,
         True, False, True, False, True, True, True, True, True, False, False,
         False, True, False, False, True, False, True, False, True, False, 
        False, False, True, True, True, True, True, False, True, False, True, 
        True, True, True, True, False, True, True, False, True, False, True, 
        False, True, False, True, True, False, False, False, False, False, 
        False, True, True, True, False, True, True, False, False, True, False,
         True, False, False, False, True, False, True, True, False, False, 
        True, True, True, False, True, False, False, True, True, True, False, 
        True, True, True, True, False, True, False, True, True, True, False, 
        True, False, True, False, True, True, True, True, True, False, False, 
        False, False, False, False, True, True, False, False, True, True, 
        False, False, False, False, False, False, False, True, True, False, 
        False, True, False, False, True, False, True, True, True, True, True, 
        True, False, False, True, True, True, True, True, True, False, True, 
        False, False, True, False, False, False, True, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, 
        False, False, True, False, False, True, True, True, True, False, True,
         False, False, True, False, True, False, False, False, False, False, 
        False, False, False, True, False, True, False, False, False, False, 
        True, False, True, False, False, False, True, True, True, False, 
        False, True, False, True, True, False, True, True, True, True, True, 
        False, False, False, False, True, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, False, True, 
        False, True, False, True, True, False, False, True, False, True, 
        False, False, True, True, False, False, True, False, True, False, 
        False, True, True, False, True, True, False, True, False, True, False,
         False, False, True, False, False, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, True, True, 
        False, False, False, False, True, False, True, True, False, True, 
        True, False, False, True, True, False, False, True, False, False, 
        True, True, False, True, True, True, False, True, True, False, True, 
        False, True, True, True, True, True, False, True, True, False, True, 
        True, False, False, True, False, False, True, True, False, True, 
        False, False, False, False, False, False, True, False, True, True, 
        True, True, True, True, False, False, False, False, False, False, 
        True, True, True, True, True, False, True, False, False, False, False,
         True, False, False, True, True, False, True, False, False, True, 
        True, False, True, True, False, False, False, True, True, False, True,
         False, False, False, True, False, True, True, False, False, False, 
        True, True, False, False, False, False, False, False, True, False, 
        False, False, True, False, True, True, False, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, True,
         True, True, True, False, True, False, False, True, True, True, False,
         False, True, False, False, True, False, False, False, True, False, 
        True, False, True, True, False, False, False, True, True, True, True, 
        False, False, False, True, False, False, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, True, True, True, True, False, False, True, True, True, 
        True, True, True, True, False, False, False, False, False, True, 
        False, True, True, False, False, True, False, True, False, False, 
        False, False, False, False, True, True, False, False, True, False, 
        True, True, False, True, False, True, False, True, False, False, True,
         False, True, False, False, True, True, False, False, False, True, 
        True, False, False, True, True, False, True, False, True, True, True, 
        True, True, False, False, True, True, False, True, False, False, True,
         False, True, False, False, True, True, False, True, False, True, 
        False, False, True, False, True, False, False, True, True, True, 
        False, False, False, True, False, False, True, True, True, True, 
        False, True, True, False, True, False, False, False, True, False, 
        True, False, False, True, True, False, True, True, False, True, False,
         True, True, True, False, True, False, False, False, True, False, 
        True, True, False, False, False, False, False, False, False, False, 
        True, False, False, True, False, False, False, True, True, True, True,
         False, True, False, True, True, False, True, True, True, True, False,
         True, False, False, False, True, False, False, True, False, False, 
        True, False, False, False, False, True, False, True, True, False, 
        False, True, True, False, False, True, False, True, True, True, True, 
        True, True, True, True, False, False, False, False, False, False, 
        True, False, True, True, False, True, True, False, True, False, True, 
        False, True, False, False, True, True, False, False, True, True, True,
         False, True, False, False, False, True, True, False, True, True, 
        False, True, True, True, False, False, False, False, False, True, 
        True, False, False, True, True, False, True, True, True, False, False,
         True, False, False, False, False, True, False, True, False, False, 
        True, False, True, True, True, True, True, False, False, False, False,
         False, False, False, True, False, True, True, True, False, False, 
        False, False, False, True, False, True, True, False, True, False, 
        False, True, False, True, False, True, True, False, False, False, 
        True, True, False, False, False, False, True, False, False, True, 
        True, False, True, False, True, True, False, False, False, True, 
        False, True, False, False, True, False, True, False, False, False, 
        False, True, True, False, False, True, True, False, False, False, 
        True, False, False, True, True, True, True, False, False, False, True,
         True, False, True, True, True, True, True, True, False, True, False, 
        True, True, False, False, True, False, True, True, False, False, True,
         False, True, False, True, True, True, False, True, False, False, 
        True, True, True, False, True, False, True, False, False, True, False,
         True, False, False, False, True, False, False, False, False, True, 
        True, True, False, True, True, False, True, True, False, False, False,
         True, False, True, True, True, False, True, False, False, True, True,
         True, True, False, False, False, False, False, False, False, False, 
        False, False, True, True, True, True, False, False, True, False, True,
         True, True, False, False, True, False, True, False, True, False, 
        True, False, True, True, False, True, False, True, True, False, False,
         True, True, False, False, False, False, True, False, True, False, 
        False, False, False, False, True, False, True, True, False, True, 
        False, False, False, False, True, False, True, True, False, False, 
        True, True, False, True, False, True, False, False, True, False, 
        False, False, False, False, True, False, True, False, True, True, 
        False, False, True, True, False, False, False, False, True, False, 
        True, True, True, False, False, True, False, False, False, True, True,
         True, False, False, False, False, False, False, True, False, True, 
        False, False, False, True, False, True, False, False, True, False, 
        False, True, False, False, False, True, False, True, False, True, 
        False, False, False, True, True, False, False, False, False, False, 
        False, True, False, False, False, True, True, True, True, True, False,
         True, True, True, False, False, False, True, False, False, True, 
        False, True, False, False, True, True, True, True, True, True, False, 
        False, False, True, False, False, False, False, False, True, True, 
        False, True, True, False, False, True, True, False, True, False, True,
         True, True, False, False, True, True, False, False, True, False, 
        False, False, False, False, False, True, True, True, True, False, 
        False, True, True, True, True, True, False, True, False, False, True, 
        True, True, False, True, True, True, True, False, True, False, True, 
        True, False, True, True, False, True, True, True, False, True, True, 
        False, False, True, True, True, False, True, True, False, False, True,
         False, False, False, False, False, False, False, False, False, False,
         True, True, False, False, True, False, False, False, True, False, 
        True, True, True, False, True, True, False, True, True, True}, 
      "LogProbabilities" -> CompressedData["
1:eJyl3U2oVHUYBvDpXtSMCIkMF1IWFZWZq4JWRUVSEoiQQUtTKBBqGbYoCSqI
NoKLWgktahO4cpczJVEEVosKLYSLfSFEpqCFRUTQafEchh8Ps5LjzPy/3s/n
ed//uTftfm7n3qXJZPLlmsnk339f/uCOR86dfnx665Nv/PbrZOPshYd+fub7
bXumW1799I/XlzbM8vOVXUfeevPAi9Olte/uWVl93eg5///oycsXVk1umZ1f
/mbHrhNrpqcvnd28bnLz7MM9Dx8/ctem6b4Nz//1/Mp707UPfH78wNNXzj45
emb9j4cOTr8++dmZQ9eum+XnwzjDuK99+8OzW/+8Z3p4/cZLmyebRuudrbqw
dWly22zf26sPPvbK+WO5nvz+sO/hHIZ1DOt6avsvJyaT22dPvHTjNds+PnUs
95PjDesa1pnfz/PO+YdxhnFz/Fxf/l7yTfl9t3vnqQvLV8xW9u/dvuX+2Wh9
KY+cb/OOc8f3X/3V9N4vrn//huWLIz3J88/fp/yHeYZ5c7xcX55Xnn/uN8fP
59QvySv1U/KRvHK/ub/8PMcb9H6wA51XPqe+js7zPz0Z9Cbnz9/nelPfUv6p
L3m+OV/KL88/n2UfknfuX/rZ+ovU19yHfp/7HexysNNcb+p76k+Ol/qS6xvp
Y9hZyjfXk/vP8XK9ub4cbzj3QQ653vx+669TH3L8XF9+zvERb/P3OX7+PuWh
8VPftP72OefL9c3LO4Zn2U/rn/L30vf8PP1R7jf1X/Ei16P153rkL2VPyo9y
PuWTOV8+53hpv9qP/IXyGfkT2U/uP9en76e/zs/z3GQf0g/J+9x9l/9+8O6f
/v9X9tCer+KD/EGOl/mF8rk8J+UPwh/5u8xfWvwjPNbmk/ksfcvnzPc1n85b
v1e8zvgrf5nylL+Xvcq+0v5TvxW/cv2KDy1e17P8fe4v/bXy05w3v698KvG+
xk/7Tf0RXmI8iPHkH4T/0z6FJ/I57VXxKT9PeUrftb+cT/Ym+aS/l7y13tQ/
+a+Uh+K94mPKu80PM95oP5Jnjp/6xHgV8sv1SL/yc9ljnn/OJ/5D/j71SflR
mz/o+8rfUz6p37KHPK/UJ+VXko/wk/IZxUvlizme9HekH6HPijfyH9LHPG/F
6/y+cLj4YO0n5Sk++feLS2eXL3107PBV7zw6mdxJPiLzpdS31If8PNcnf614
PKx72EeuN/2V8izh59yf8uUWH8ielF/kc8YvrUf2l9/Xflt/yvxjwXxa+ip7
lH3k5+Jfcr+qz8i+cr6sl8n/aT+jfB31nIxXyu8Ur9v6pcYXfhUfIP+Y+Yjq
CcqXVX/I80//L7yr/IrxuIxPi9pf7lf6Kv8l/ZL9qH6q/ae8cn6dl/RbfKXw
lOojyodbvCm8pfGUz6q+rvORf2r7B+SPpU/i53M9ud9cv+q9iufKN6T/uZ+c
L3+f55N8lOKl+BjZ18g/AG/nvJKf+Dn5u5E/RX+C6vniA1Q/Uv4jf678tM3X
F+3HUj6i3wuvif9VfEt7yPmER5Qv5PzCr4pviV9SH3We4k/Fv0kewk9tfGj5
KPH7uX71P4hvavsV2nq0/JHiU8vntPxlm88qH2r7BVTvUX1KeEj2o3qH7Ed8
cq4v+dO2/67Fl+1+pFfi+8R/tPVmxQfVb+QfVc/I8dXPmPvLzxUvFK/aerj8
Y56P8GHKd+BhBl5G8hIeVb+v9FXxSPgj/bV+r/govCp8Ma+PeJ6+qL9W8mz7
1dI+ZG/z+l7m1XPVL6B4Jf/b1guV37b6qvNRf1ur35K/+g10fqoXq79B+XDy
v+IL1S8hfl3xTv3+inc6T8lHfJ/4nfa+g/C97GXR/DLna/FEyx+Jrxa+b+8D
yJ4V71V/bu+XaH3iG9v+RdmT4ltbz2v5IZ237FH5up7F96qfMefP8xeeVL1E
+q3+7LafTP5C/LP6jdr7E4oX8lft+Uv+6lcSPyJ9UX4ofNjWR4TXFP/yfLKe
qXxe/JrkLf5Y+Le9/6dnnZf0r+3vbfWt1a9F+QHVE5XPql9c+EX5nurv4qt1
XtJH8XHiF8R/if9Q/it/LT4l+fmWj5E8VJ9p8Vyr7yk/8THCd+Jvxf/rPFp/
1PYjy1/pvqr8q+SZ+EHyVj456g8MfVD/uD5Xfil9lz2LL2nxkPhQ8b3CPzme
8Lz0XXy77El8iHCG+h9UX9DzqD8szjv5HfU3pL/W/WHFQ/kb6VvmB8qvlO/p
Pq/4RvW7CE+o/3hkn3h/gfqh5T/EP7V8uvo32n67Fq/nfKn/0mfVH7M/Qnhd
+Z/wvOrzyp/SfyoeSX+UD+R5qH9V/kPzaf7WHqRvqe+aT/ch5P9UzxH/1vo3
3e+WP5B/VX+I/KPwXc4v+1P9pM0nlL+o30p8lvI/4W/5F9lXW89R/JP/a/Nf
4TPZu+7Xp3zUv6Z43b4PRfyz/G/LHyufaeOR9EH1WuW/af8pT9Ubxb+oHik8
p/pxe5+z7ffXs+Sf8yufUP+6+Jrk5ySflr9q32+gfErn2fZDtvdVha/UTyB8
2/bvtP3ZskfpseTf3qfJ8dQvon4KxV/2D4F/Ev+ofEx4Q/qX9qp6XCuv9n0N
ijft/oQPxSeKb23rXcIDsg/dX1T/h+4PK5+WPrb1f+GzFr8onqp/OD/n+0HQ
H6v8QPlA27+m/K2tx8sf6jxUz9N9Qtlbyy/Lv6me0vZHt3i+jd/CH6rnid9W
fiH8Jf8svCO+Xny45K39Jt5X/0Tut7UX6Xtb/xVeFb4W3y1+ocWrbbxN+5E9
tf0twivqjxT+1vvzhDeUv+t9LOJLZP/CJ62/1fvt5f9VzxU+Vr6V8+XniTfl
r2XPbbxTP0KLX2Q/6meRP5Z+CC/rvkX67zx/8Y3iMzSf/InyP/H5LV8i/ym8
3PKFLV8j/5l4PfVL47X9ReJjcn75X9lz2y8qvCL/0/bf6v1s4tdH/g/3g7U+
8X06L9V/83PxFfmc+pTr099PUXxQv4ryFeVXyjdUr1K9S/lyyw+rniI+UvFH
9qX8Tf5G8hafJP6rfR9f2z+yaH9Qfp72kt8X/yN9EZ/S9l+qvqp+PuXXKb/c
v+KX8EDb3yl5qx9A5yf7UT1c+YTir+qVuT/x3Xn+qlfOw7Xz+st0PsKryg/V
v5j7E75S/4Xu37T9zDme+m3Vz6143t7vFr5TPUr3DyRf9RO2+KzNhxd9n4ri
We5P+VeL58S/qp9K9/sUz4Uvc3/5vmDxlRovz1vxWnx0i0flD9r3FaqeIH+i
+N/673Y90n/pl/h9xUvlS2lf+Sx+T+el+k37LHyjeDPKL3FfTuvS+zzF7+a4
+nt2qqcJX6t/Q/gk9Vf3cZVPC6+Lj100vrf8p+KF6lGqf0lfWnys9et9oKpH
6f5C20/b9u8qXisfE/7M9bX9EcKbrfxy/xnP8/v6exnt3xNTPVLnI3/G+5/l
+3TSP4kv1/ravw+reCk+V/X3tj9T+KN9P6/8s+JTe/9R9qj7slp/21+hZ+Er
1V+lP6nf/wCKtRgS
       "], "CountMatrix" -> {{961, 1, 0}, {4, 1034, 0}}, 
      "IndicesMatrix" -> {{CompressedData["
1:eJwt1nd8CAYWB/AYbY0YrVLUjpq1t3P2jDojoRJBgqo9aoTWlSKI2DmjjtKa
F0pj1GitnhVJBTVqpHaNGqHoOatfn7s/vp/3/v+9z3uveI/BHQZlCAgI2JMp
IOBlzYg2IDOvkJVsZCeQHOTkdfJRgEIUpRjFCaIkpShHBSpTjerUpC4NaEgz
gnmP9nQghI68TxhdiKArPehJb/rQn4EMYSjDGUk0o/mYMXzKWMbxGeOZSAyT
mMwUYoljJvHMZQGL+IpVrOZfJLCWb0hkM9+yhW1s53v2c4BDpHCEoxzjBCc5
xc+c5gxnOUca57nMFa7yK9e5wU1ucYe73OcBD3nCc17wMuDXyEYguXmdN8hD
Pt4iPwUoQlGKUZwgSlKa8rxLBSpRmapUpwa1qUN9GtCIpjSjOS1oSTDvEUIo
HelEGOFE0I3uRBJFL3rTlwG8HODBDOUjhjGCaEYxmvFMJIZJTCGWqcQxnZnM
Yh7zWcDn/JPFLOFLlrGcFaxkNQmsYR3rSWQjm9jMVr7je3awk13sZh/7OUgS
h0gmhR9J5QgnOMkZznKONC5wkUtc5gpXuclv3OIOd0nndx7wiD94wlOe8TzD
/5ZAJrIRSC7eoAAFKUQxShDEO5SiLOWpSCWqUZs61KU+DWhMU5rTklYE04Z2
hBBKRzoTThci6Eo3uhNJFD3px0CGMJQRjCSaUYxmDJ8yngnEEEsc05jOLGYz
h3jmMo9FLGYpCazhaxLZyHZ2sJM9/Ju9HCSJQySTwmGO8hPHOcEpTnOWc6Tx
C+e5wBWucp3fuM1d0nnAQx7xB//hCU95/v+FnoGMZCIzWchODnKRhzfJSz7e
ogBvU4jCFKEoxSlBSUpRhnKUpyrVqE5NalGXejSkMU1oTgtaEkwb/kZb2tOB
EELpRGfCCCeCbkQSRQ960ov+DGAwQxjFaMYwls8YzwQmEsMkYplKHNOZwSzi
mc8CPmcxS1jKMpazigTWsJavWc8GNrGDXexlP4dIJoVUjnKM45zgJKf4mTQu
conLXOUaN7jFHdK5xwMe8Zj/8owXL3N3zDPxCq+ShWzkJA95KUBBClGEopSk
FKUpSzkqUJEqVKcGtahNHf5CPerTkEY0pglNaU4LWhFMG9rRnhDCiaAr3ehO
JFH0oS/96M8ABjGMkUQzmjH8nbGMYyIxTCaO6cxgDvEs5AuW8iXLWM5qEljD
OtbzDYlsYCOb2co2trOD3exlPwdJ4kcOk8oRjnOaM5zjAlf5lWtc5wY3uc0d
7pLOPe7zO495wlNekMHTloWsBJKTXOQhL/kpSGGKUIIgSlGaspTnXSpQkUpU
pRo1qE1d/kp9GtKYZrQgmNa0I4RQOtKJzoTRhe5E0YsP+JA+9GMAAxnEEIYz
kmjGMYHJTCGWqUxjBjOZzRzi+QfzWMhilrKCVaxmDWtZTyIb2MgmNvMtW9jK
LvbwA3vZxwGSSOYwqRzjJ45zkjOcJY1fuMBFLnGdG9ziNndJ5x4PeMwTnr98
yF+VMRnJRGYCyUkucpOP/BTgbYpQjBIEUZoyVKAyVahGDWpSl3o0oBHNaUEw
rWlLB0IIpSNhhBNBV7rRnUii+IDe9KU/AxjMUIYxnBFE8zGfMIZPGccEYohl
BjOZxRzimcs8FrKIxXzBUpaxnBWsJJENbGQTW9jGdr5jJ7v5gb3s5wBJJJNC
Kkc4wSnSOM8FLnGNG9zkNndI5z4PecIzXhDwmizJTFayE0gOcvMmeclHYYoS
xDuUoTyVqEI1alGbBjShKc1oTgtaEUxr2tKBUN6nM2GE04UIIunNh/SlHwMZ
xBA+YhjDiWYUnzCeCUwkhinEMpU4pjGD2cwhnrnMYz4LWMgiFrOEpXzFMpaz
klUksIa1rGM9G9jBTvawjwMcJIlkUjhMKkf4E7aD7Rg=
         "], {196}, {}}, {{908, 1297, 1356, 1635}, CompressedData["
1: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
         "], {}}}, "ExtendedClasses" -> {True, False}, "Weights" -> 
      SparseArray[Automatic, {2000}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.000031652, "SingleEvaluationTime" -> 
      0.0031865625, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.86922158804959*^9, 3.869221713139295*^9, 3.869221916584944*^9, 
   3.869221949016221*^9, 3.8692219949471207`*^9, {3.869222057606943*^9, 
   3.8692220713339243`*^9}, 3.8692254296954308`*^9, {3.869227070722014*^9, 
   3.8692270775786343`*^9}, {3.8692775584383593`*^9, 3.869277584282023*^9}, 
   3.869280268335588*^9, 3.869280411917354*^9, 3.869280831560107*^9, 
   3.8692809874689207`*^9, 3.869281066352899*^9, 3.8692811724409447`*^9, 
   3.869281425928671*^9, 3.869281499910817*^9, 3.869281551694984*^9, 
   3.869281835979891*^9, 3.869282043779932*^9, 3.8692847524226227`*^9, 
   3.869284805759396*^9, 3.869293452523674*^9, {3.8692944587734823`*^9, 
   3.869294466449047*^9}, 3.869296784945951*^9, 3.869296856376144*^9, 
   3.8692994406780653`*^9, 3.8692996693200827`*^9, 3.869302407155458*^9, 
   3.8693025154415073`*^9, 3.869302623316126*^9, 3.869310317773045*^9, 
   3.8693107637484093`*^9, 3.86931084016854*^9, 3.869552751944106*^9, 
   3.8695546358467607`*^9, 3.8695549988502617`*^9, 3.869555146104582*^9, 
   3.8695611634305363`*^9, 3.8695690819901237`*^9, 3.869569406377159*^9, {
   3.8695694401594343`*^9, 3.869569464095893*^9}, 3.869639243984894*^9, 
   3.869639324888033*^9, 3.869640015570827*^9, 3.869640345638781*^9, 
   3.86964053337292*^9, 3.869640597863611*^9, 3.8696407000548*^9, 
   3.869640739910688*^9, 3.869646333133191*^9, 3.869646415526245*^9, {
   3.8696465139258013`*^9, 3.869646541702939*^9}, 3.869653385180955*^9, 
   3.869655148619483*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"a887498a-4217-4abe-9530-b1351f9bdad0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"2690b326-fb91-4c09-a746-\
cb42f085f60a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}, {3.869227140760223*^9, 3.869227149194792*^9}, {
   3.8692798649790173`*^9, 3.869279876404379*^9}, {3.8692987446359167`*^9, 
   3.8692987456828957`*^9}, 3.869298793152401*^9},
 CellLabel->"In[55]:=",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", "targetEncoder", "]"}], ",", 
     RowBox[{
      RowBox[{"First", "[", "#", "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"Last", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.869284839496479*^9, {3.8692934957441673`*^9, 3.86929350723984*^9}, 
   3.8692935774265747`*^9, {3.869293613088286*^9, 3.8692936550243273`*^9}, {
   3.8692944972849493`*^9, 3.869294556962762*^9}, {3.869294872582518*^9, 
   3.869294912979456*^9}, {3.869294971357285*^9, 3.8692950293879957`*^9}, {
   3.869295060242984*^9, 3.8692950718682213`*^9}, {3.869297055293254*^9, 
   3.869297056155302*^9}, {3.8692987230967207`*^9, 3.8692987318391743`*^9}, 
   3.8692996779039917`*^9, {3.869300234495809*^9, 3.869300238804558*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{
  3.869277655279928*^9, {3.869277716385961*^9, 3.8692777380640306`*^9}, {
   3.869277958266292*^9, 3.86927796811233*^9}, {3.869278386117118*^9, 
   3.869278386462037*^9}, {3.869278514787964*^9, 3.86927851825823*^9}, {
   3.8692787116732492`*^9, 3.869278752387225*^9}, {3.869279742103284*^9, 
   3.869279791698346*^9}, {3.869281009188909*^9, 3.869281010497501*^9}, {
   3.869281858882139*^9, 3.869281912459756*^9}, {3.8692848378347797`*^9, 
   3.869284838188376*^9}, {3.8692986858888702`*^9, 3.869298692159895*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],

Cell[BoxData["0.996`"], "Output",
 CellChangeTimes->{{3.869553146822407*^9, 3.86955317237323*^9}, 
   3.869554694294444*^9, 3.869555152594727*^9, 3.869555213770483*^9, 
   3.869561171284932*^9, 3.8695612206341457`*^9, 3.8695625235012817`*^9, 
   3.8695690931943617`*^9, 3.8695698133980637`*^9, 3.86963956776871*^9, 
   3.869639601848463*^9, {3.869639799168675*^9, 3.86963983093559*^9}, 
   3.869640061264633*^9, 3.869640369476589*^9, 3.869640555181766*^9, 
   3.8696406036543293`*^9, 3.869640704423348*^9, 3.869640745354807*^9, 
   3.869646337721451*^9, 3.869646420975051*^9, {3.869646518428033*^9, 
   3.86964654564825*^9}, 3.869653398521785*^9, 3.8696551641853657`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"e256f532-83f4-474d-97e5-5b07ba483b02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"Last", "[", "#", "]"}]}]}], "}"}], "]"}], "&"}], "/@", 
    "testData"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}, {3.8692787783714046`*^9, 
  3.869278787906781*^9}, {3.8692948373831453`*^9, 3.869294848226471*^9}, {
  3.869298696937389*^9, 3.8692987383197727`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],

Cell[BoxData["0.996`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.869278789622883*^9, 3.8692804206876087`*^9, 3.869280848042408*^9, {
   3.8692809962303677`*^9, 3.869281024988372*^9}, 3.869281073128274*^9, 
   3.869281189739897*^9, 3.869281431738426*^9, 3.86928155628786*^9, 
   3.869281841834961*^9, 3.869282052670763*^9, 3.8692847599449587`*^9, 
   3.869284810292136*^9, 3.8692936592620487`*^9, 3.869294848924099*^9, 
   3.869295075551647*^9, 3.869296799752571*^9, 3.869296864065097*^9, {
   3.8692986986071157`*^9, 3.869298738736906*^9}, 3.869299449532473*^9, 
   3.869299680960174*^9, 3.869300242854801*^9, 3.869300595945923*^9, 
   3.869301454574747*^9, 3.869302064899097*^9, 3.869302248427836*^9, 
   3.869302416939876*^9, 3.869302521702746*^9, 3.869302630550453*^9, 
   3.869305019568828*^9, 3.8693053909142237`*^9, 3.869310327258253*^9, 
   3.8693107709371634`*^9, 3.8693108470289307`*^9, 3.869311235483984*^9, 
   3.8695527726332607`*^9, 3.869552903637726*^9, 3.8695546955455236`*^9, 
   3.8695611726186743`*^9, 3.869562536932818*^9, 3.86956909440084*^9, 
   3.8695698167662477`*^9, 3.8696395710842047`*^9, 3.86963960282456*^9, 
   3.8696398008323383`*^9, 3.8696400629900923`*^9, 3.869640371269559*^9, 
   3.869640556415327*^9, 3.8696406049209833`*^9, 3.869640705455467*^9, 
   3.869640746383108*^9, 3.869646338732958*^9, 3.869646422071988*^9, {
   3.86964651947829*^9, 3.869646546659093*^9}, 3.869653401231103*^9, 
   3.869655166859345*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"0ae80ae0-f190-4633-9d1a-ce6a1584be06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],

Cell[BoxData[
 TemplateBox[{"0.15625`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869278792689138*^9, 
   3.8692804220574636`*^9, 3.8692808499930363`*^9, 3.869280998755859*^9, 
   3.869281074256464*^9, 3.869284760836566*^9, 3.869293660792145*^9, 
   3.8692968012889338`*^9, 3.869296866349676*^9, 3.869299451366023*^9, 
   3.869299682477159*^9, 3.869300597023597*^9, 3.8693026329139*^9, 
   3.8693050205921583`*^9, 3.869305391619213*^9, 3.8693103289215813`*^9, 
   3.869552773727091*^9, 3.8695546976668797`*^9, 3.869569095636631*^9, 
   3.869640065369503*^9, 3.869640747456979*^9, 3.869646340518196*^9, 
   3.869646547931837*^9, 3.869653403169335*^9, 3.869655169609782*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"a7cf0866-8e9d-407f-bafc-75cf825ed764"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardNetBooleanExpression", "[", 
  RowBox[{"hnf", ",", "inputSize"}], "]"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9, 3.869296803018434*^9, 
   3.869299459793828*^9, {3.869639841092606*^9, 3.869639849710751*^9}, 
   3.8696407506954603`*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b13", ",", "b14", ",", "b17", ",", 
       "b18", ",", "b19", ",", "b20", ",", "b6", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b14", ",", "b16", ",", "b17", ",", "b19", ",", "b2", ",", 
       "b3", ",", "b4", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b14", ",", "b15", ",", "b17", ",", "b2", ",", 
       "b5", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b12", ",", "b13", ",", "b15", ",", "b16", ",", 
       "b19", ",", "b20", ",", "b3", ",", "b4", ",", "b5", ",", "b8", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b12", ",", "b13", ",", "b14", ",", "b15", ",", "b18", ",", 
       "b3", ",", "b6", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b16", ",", "b17", ",", "b18", ",", "b19", ",", 
       "b3", ",", "b4", ",", "b5", ",", "b6", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b13", ",", "b14", ",", "b16", ",", "b17", ",", "b18", ",", 
       "b4", ",", "b5", ",", "b6", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b11", ",", "b12", ",", "b13", ",", "b15", ",", "b16", ",", 
       "b17", ",", "b4", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b12", ",", "b13", ",", "b15", ",", "b17", ",", 
       "b19", ",", "b8", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b12", ",", "b13", ",", "b16", ",", "b17", ",", 
       "b19", ",", "b2", ",", "b20", ",", "b3", ",", "b6", ",", "b7", ",", 
       "b8", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b11", ",", "b12", ",", "b15", ",", "b17", ",", "b18", ",", 
       "b2", ",", "b3", ",", "b5", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b13", ",", "b15", ",", "b16", ",", 
       "b20", ",", "b4", ",", "b5", ",", "b9", ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b12", ",", "b14", ",", "b15", ",", "b16", ",", "b18", ",", "b3", ",", 
       "b7", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b13", ",", "b14", ",", "b15", ",", "b16", ",", 
       "b20", ",", "b3", ",", "b4", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b12", ",", "b19", ",", "b2", ",", "b20", ",", "b6", ",", 
       "b7", ",", "b8", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b14", ",", "b15", ",", "b17", ",", "b18", ",", "b19", ",", 
       "b3", ",", "b4", ",", "b5", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b13", ",", "b16", ",", "b17", ",", "b18", ",", "b19", ",", 
       "b2", ",", "b20", ",", "b3", ",", "b4", ",", "b6", ",", "b7", ",", 
       "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b12", ",", "b13", ",", "b15", ",", "b17", ",", 
       "b18", ",", "b19", ",", "b20", ",", "b3", ",", "b6", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b12", ",", "b14", ",", "b15", ",", 
       "b16", ",", "b19", ",", "b2", ",", "b20", ",", "b4", ",", "b5", ",", 
       "b7", ",", "b8", ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b12", ",", "b14", ",", "b18", ",", "b2", ",", "b20", ",", 
       "b3", ",", "b4", ",", "b5", ",", "b6", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b12", ",", "b13", ",", "b15", ",", "b20", ",", "b4", ",", 
       "b5", ",", "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b11", ",", "b13", ",", "b14", ",", "b15", ",", "b18", ",", 
       "b2", ",", "b20", ",", "b6", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b12", ",", "b13", ",", "b15", ",", "b17", ",", 
       "b18", ",", "b20", ",", "b3", ",", "b4", ",", "b5", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b11", ",", "b12", ",", "b13", ",", "b14", ",", "b15", ",", 
       "b16", ",", "b17", ",", "b18", ",", "b19", ",", "b3", ",", "b4", ",", 
       "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b15", ",", "b16", ",", "b17", ",", "b5", ",", "b8", ",", 
       "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b13", ",", "b14", ",", "b15", ",", 
       "b18", ",", "b19", ",", "b3", ",", "b4", ",", "b6", ",", "b7", ",", 
       "b8", ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b14", ",", "b16", ",", "b18", ",", "b19", ",", "b2", ",", 
       "b3", ",", "b5", ",", "b6", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b11", ",", "b13", ",", "b16", ",", "b17", ",", "b18", ",", 
       "b19", ",", "b2", ",", "b3", ",", "b4", ",", "b5", ",", "b6", ",", 
       "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b20"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b14", ",", "b17", ",", "b18", ",", "b19", ",", "b20", ",", 
       "b4", ",", "b6", ",", "b7", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b12", ",", "b13", ",", "b15", ",", "b17", ",", "b19", ",", 
       "b2", ",", "b3", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b13", ",", "b17", ",", "b18", ",", 
       "b6", ",", "b7", ",", "b9", ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b12", ",", "b15", ",", "b16", ",", "b2", ",", 
       "b4", ",", "b7", ",", "b8", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b12", ",", "b13", ",", "b14", ",", 
       "b16", ",", "b19", ",", "b2", ",", "b3", ",", "b4", ",", "b6", ",", 
       "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b12", ",", "b13", ",", "b14", ",", 
       "b16", ",", "b17", ",", "b18", ",", "b19", ",", "b20", ",", "b3", ",", 
       "b5", ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b14", ",", "b15", ",", "b19", ",", "b20", ",", "b3", ",", 
       "b4", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b10", ",", "b13", ",", "b14", ",", "b17", ",", "b2", ",", "b20", ",", 
       "b4", ",", "b6", ",", "b7", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b5"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b15", ",", "b19", ",", "b20", ",", "b6", ",", "b7", ",", 
       "b8", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b12", ",", "b15", ",", "b17", ",", "b2", ",", "b4", ",", 
       "b5", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b20"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b15", ",", "b16", ",", "b20", ",", "b7", ",", "b8", ",", 
       "b9", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b12"}], ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b12", ",", "b13", ",", "b14", ",", "b15", ",", 
       "b16", ",", "b17", ",", "b20", ",", "b5", ",", "b7", ",", "b8", ",", 
       "b9", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b6"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b11", ",", "b12", ",", "b13", ",", "b15", ",", "b16", ",", "b18", ",", 
       "b20", ",", "b3", ",", "b8", ",", 
       RowBox[{"!", "b1"}], ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b5"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b12", ",", "b13", ",", "b14", ",", "b15", ",", 
       "b16", ",", "b18", ",", "b19", ",", "b2", ",", "b20", ",", "b3", ",", 
       "b4", ",", "b5", ",", "b9", ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b6"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b12", ",", "b13", ",", "b14", ",", "b17", ",", "b18", ",", 
       "b2", ",", "b20", ",", "b3", ",", "b5", ",", "b6", ",", 
       RowBox[{"!", "b10"}], ",", 
       RowBox[{"!", "b11"}], ",", 
       RowBox[{"!", "b15"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b4"}], ",", 
       RowBox[{"!", "b7"}], ",", 
       RowBox[{"!", "b8"}], ",", 
       RowBox[{"!", "b9"}]}], "]"}], ",", 
     RowBox[{"Majority", "[", 
      RowBox[{
      "b1", ",", "b10", ",", "b11", ",", "b12", ",", "b15", ",", "b20", ",", 
       "b4", ",", "b5", ",", "b6", ",", "b8", ",", "b9", ",", 
       RowBox[{"!", "b13"}], ",", 
       RowBox[{"!", "b14"}], ",", 
       RowBox[{"!", "b16"}], ",", 
       RowBox[{"!", "b17"}], ",", 
       RowBox[{"!", "b18"}], ",", 
       RowBox[{"!", "b19"}], ",", 
       RowBox[{"!", "b2"}], ",", 
       RowBox[{"!", "b3"}], ",", 
       RowBox[{"!", "b7"}]}], "]"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8696407510020227`*^9, 3.8696463421378736`*^9, 
  3.869646552219399*^9, 3.869653404972856*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"5fc00b8e-d759-4af7-9ce9-6085cc288c84"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"0a2ce80a-fe81-4612-966f-\
edb1d9a9f984"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainData", ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}, {3.869293711665983*^9, 
  3.8692937224093533`*^9}, {3.869653445491335*^9, 3.869653447567766*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "20", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "20", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "False", "True"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["8000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 8000, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Length" -> 20|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 8000, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 20|>|>,
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Standardize", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.49575, 0.508, 0.50625, 0.500375, 0.501, 
                    0.494375, 0.503, 0.499875, 0.507625, 0.50775, 
                    0.5005000000000001, 0.500375, 0.49362500000000004`, 
                    0.501625, 0.498625, 0.50225, 0.499, 0.4845, 0.508625, 
                    0.506}, 
                   "StandardDeviation" -> {0.4999819371737343, 
                    0.4999359959034756, 0.4999609359740019, 
                    0.49999985937498026`, 0.49999899999900005`, 
                    0.4999683583738075, 0.49999099991899854`, 
                    0.49999998437499976`, 0.4999418559942746, 
                    0.49993993389206265`, 0.4999997499999375, 
                    0.49999985937498026`, 0.4999593577232053, 
                    0.4999973593680271, 0.4999981093714255, 
                    0.49999493747437085`, 0.499998999999, 
                    0.49975969225218636`, 0.49992560384021145`, 
                    0.4999639987039067}, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1: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
xOZPJSXwufbLthrFdvwfvXiM9w==
                   "], 
                  "Precisions" -> {0.912522505762429, 0.925695579749354, 
                   0.9327274700961633, 0.9452073238257851, 0.9513407427668382,
                    0.9593710367046944, 0.9712234464796532, 
                   0.9791330156412462, 0.9951007459659389, 0.9957848274603597,
                    1.0066490474676713`, 1.0185179850036057`, 
                   1.0253232586841765`, 1.0410670249081222`, 
                   1.0450289201561889`, 1.0498019339121467`, 
                   1.0589050636780062`, 1.0639519548909757`, 
                   1.0825977353511032`, 1.0970441932518415`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {
                    0.00008086692650053751, -0.00006461889200455672, 
                    0.00007071756687608005, -0.00010745076349414706`, \
-0.000039970756293536307`, -0.00005076363567427511, 
                    0.000029833666025565808`, -0.000042946790086565655`, 
                    0.00007074884593564957, -0.0000376377510197341, 
                    0.00008065891197122576, -0.000015005541763963848`, 
                    0.0000165071521725364, 
                    0.00004496988473442776, -0.000021117416894342657`, 
                    0.000020281331131387858`, 
                    0.00010116681828444385`, -0.00011365678699650773`, 
                    7.952967041830129*^-6, 5.477107850754282*^-7}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1500577080697874803|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 20, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {
                    0.00008086692650055317, -0.00006461889200454297, 
                    0.00007071756687609, -0.00010745076349417681`, \
-0.00003997075629351099, -0.00005076363567430242, 
                    0.00002983366602556803, -0.000042946790086556995`, 
                    0.00007074884593563069, -0.000037637751019753195`, 
                    0.00008065891197121556, -0.00001500554176397806, 
                    0.00001650715217254817, 
                    0.00004496988473443642, -0.000021117416894342488`, 
                    0.000020281331131391524`, 
                    0.00010116681828446605`, -0.00011365678699650061`, 
                    7.952967041836346*^-6, 5.477107850815343*^-7}, 
                    "StandardDeviation" -> {0.9999071496567752, 
                    1.000030086736393, 0.999953966328873, 1.0000560079659961`,
                     1.000031682128225, 1.0001658425154611`, 
                    0.9999440310710015, 1.0000381683385886`, 1.00000158774234,
                     0.9998881243676897, 0.9999711031411552, 
                    1.000008456708509, 0.9999322254009197, 0.9999909385011021,
                     0.9999935195946187, 1.0000796605297217`, 
                    1.0000381900287525`, 1.0000139481485009`, 
                    0.9999523171496137, 0.9999376555662843}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 20, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    8927406333728948690|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.00008086692650055317, -0.00006461889200454297,
                     0.00007071756687609, -0.00010745076349417681`, \
-0.00003997075629351099, -0.00005076363567430242, 
                    0.00002983366602556803, -0.000042946790086556995`, 
                    0.00007074884593563069, -0.000037637751019753195`, 
                    0.00008065891197121556, -0.00001500554176397806, 
                    0.00001650715217254817, 
                    0.00004496988473443642, -0.000021117416894342488`, 
                    0.000020281331131391524`, 
                    0.00010116681828446605`, -0.00011365678699650061`, 
                    7.952967041836346*^-6, 5.477107850815343*^-7}, 
                   "StandardDeviation" -> {0.9999071496567752, 
                    1.000030086736393, 0.999953966328873, 1.0000560079659961`,
                     1.000031682128225, 1.0001658425154611`, 
                    0.9999440310710015, 1.0000381683385886`, 1.00000158774234,
                     0.9998881243676897, 0.9999711031411552, 
                    1.000008456708509, 0.9999322254009197, 0.9999909385011021,
                     0.9999935195946187, 1.0000796605297217`, 
                    1.0000381900287525`, 1.0000139481485009`, 
                    0.9999523171496137, 0.9999376555662843}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 20, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   8927406333728948690|>], "InputDimension" -> 0, 
                "OutputDimension" -> 20, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 
                    1., 0., 1., 1., 1., 0., 1., 1., 1.}}, "ID" -> 
                    4681419788165317741|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.301339, "MaxTrainingMemory" -> 16592768,
                   "DataMemory" -> 1281976, "FunctionMemory" -> 39152, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 16, 16, 44, 9.064175`7.709903268467915}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.8800223986704178, -0.861620731552651, \
-0.8436836784163364, -0.7444736888086051, -0.7020122073457989, \
-0.6498749540348044, -0.6227884297528816, -0.60788379364231, \
-0.600326103698873, -0.5611084924986396, -0.54055253059553}, 
                   "LeftBoundary" -> -0.861620731552651, "LeftScale" -> 
                   0.009200833558883403, "LeftTailNorm" -> 
                   0.13333333333333333`|>], "Entropy" -> 
                Around[13.763644427400651`, 0.5877803913014189], 
                "EntropySampleSize" -> 15|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 895810465636885430|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {0.49575, 0.508, 0.50625, 0.500375, 0.501, 0.494375, 
              0.503, 0.499875, 0.507625, 0.50775, 0.5005000000000001, 
              0.500375, 0.49362500000000004`, 0.501625, 0.498625, 0.50225, 
              0.499, 0.4845, 0.508625, 0.506}, 
             "StandardDeviation" -> {0.4999819371737343, 0.4999359959034756, 
              0.4999609359740019, 0.49999985937498026`, 0.49999899999900005`, 
              0.4999683583738075, 0.49999099991899854`, 0.49999998437499976`, 
              0.4999418559942746, 0.49993993389206265`, 0.4999997499999375, 
              0.49999985937498026`, 0.4999593577232053, 0.4999973593680271, 
              0.4999981093714255, 0.49999493747437085`, 0.499998999999, 
              0.49975969225218636`, 0.49992560384021145`, 0.4999639987039067},
              "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4084182839944723376|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 2115020368298782235, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7087324500734345495|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       False -> 0.5031242189452637, True -> 0.49687578105473634`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
rxJA4xvZmPfn57k8/yT5H027q8M=
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.015143902972340584`, -0.000434075016528368, 
                 0.005570317152887583, 
                 
                 0.0002759677590802312, -0.010923651978373528`, \
-0.0028475879225879908`, 0.009749718010425568, 0.005787644535303116, 
                 0.005191779229789972, 
                 0.01842227764427662, -0.010870772413909435`, \
-0.006291108205914497, -0.014385387301445007`, 0.004359656944870949, 
                 0.0018637216417118907`, -0.012499220669269562`, 
                 0.011986111290752888`, 0.006826132535934448, 
                 0.010952724143862724`, 
                 0.0032198382541537285`, -0.011100639589130878`, \
-0.00582398334518075, 0.015390126965939999`, 
                 0.01114022545516491, -0.0044692805968225, \
-0.016886577010154724`, -0.005172752775251865, 0.004094804637134075, 
                 0.0003349586040712893, -0.0001468169066356495, \
-0.016486085951328278`, -0.007228998001664877, -0.010990128852427006`, 
                 0.0016225301660597324`, -0.0025835027918219566`, \
-0.02117680013179779, -0.00407620333135128, -0.0034873802214860916`, \
-0.023923354223370552`, 
                 0.007642647717148066, -0.0024798009544610977`, \
-0.011255240999162197`, 
                 0.015567571856081486`, -0.00045913911890238523`, \
-0.0019100499339401722`, 0.012229083105921745`, -0.0024348655715584755`, 
                 0.00034441862953826785`, -0.0021234091836959124`, 
                 0.004287938121706247}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               20, "$InputDimensions" -> {20}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{0.004453006200492382, 0.000430052139563486, 
                 0.016886651515960693`, -0.026692887768149376`, 
                 0.0007129418663680553, -0.015140894800424576`, 
                 0.005872434936463833, 
                 0.0025306774768978357`, -0.010270390659570694`, \
-0.0020404334645718336`, -0.0069828033447265625`, 
                 0.0006754198111593723, -0.00164474465418607, \
-0.006718807853758335, -0.004294722806662321, 
                 0.002990157576277852, -0.004242059774696827, 
                 0.0008709169342182577, -0.007950804196298122, \
-0.004419086501002312, -0.0010798439616337419`, -0.007805962115526199, 
                 0.004989107139408588, 
                 0.004652070812880993, -0.00014659069711342454`, \
-0.0005804798565804958, 0.001327261794358492, 0.004631133750081062, 
                 0.003430783050134778, 
                 0.013945876620709896`, -0.0032401622738689184`, \
-0.005111378617584705, 0.006780213676393032, -0.003896219888702035, 
                 0.0014749873662367463`, -0.00648154690861702, 
                 0.0019855641294270754`, 0.007787244860082865, 
                 0.0004977858043275774, -0.0017261133762076497`, 
                 0.0012377994135022163`, -0.005300839431583881, 
                 0.0059104422107338905`, 0.014046672731637955`, 
                 0.0028680451214313507`, -0.006356383208185434, 
                 0.0014228008221834898`, 
                 0.005500604398548603, -0.003754500299692154, 
                 0.0038721722085028887`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACqLx29FBN9PhleXz2vZ5E9nNH2vHDY8T1dY/Q8P5QEPq/1Ir2K
88u9CiXnva1LrL4Dx6w9x2APvunvfDxEIJS+KDwJPV7mXDtGdhK+STmsvl9u
7b2yddI9pWyGvOa7aT6RQSS+hJX4veNlZj2YAkA+b06bPYP5wTzGII6+FmYf
vjhTqz6EHro97mNYPtGgpL5DUWE+3HBkPvdpR74LKgs+m22hPTCq+jxDkay+
fl6SvYh3HT3Z/NA9xS3qPc+myjsSejU9LFTVPafoW773mSq+MzPBvap5kj1R
0Ts+bCbUPVkr6b0f3sM9lH3vvQZBn73u0A0+N1R1vB8LgTwjq9s81H4GPgAH
+72xa8q9HofYPBA0bD7RqpS85mhJvjeXXD5csA89iTeQvVW8sb2W2wu8toZF
PcwnwT2+l0+8a1gyvvuPIrw5ItQ83csGvlDEBj7JixA98LqbPnLPPj4+qus8
CH0yPcRUHz7nvL09izDpPdpc6j2Uzk6+i+yGPnMIIT4HVRW+vzkaPYUf/boq
Dxa9bgXGdA==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.002537904307246208, -0.002537905238568783}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.704165, "MeanInputsPerSecond" -> 
        29174.98029581135|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {0.000028009174629634926`, -0.00004792303788282726, 
              0.00002583636393431821, -0.00010260888905000076`, \
-0.00004892586092664697, -0.00005065197960254531, -0.000015026097037473819`, 
              0.000013636476164046841`, 
              7.885911774011989*^-6, -5.548282622807932*^-6, 
              0.00008865046732509363, 
              
              0.00001164764937125451, -1.6760638689223839`*^-6, \
-0.00010846979974219462`, 0.00006866615688878497, -0.00011035615354171747`, 
              0.000018400230997695388`, 
              0.000010176501638530233`, -0.00010828831218908611`, 
              1.2376467495229805`*^-6}, 
             "StandardDeviation" -> {1.0001616619924825`, 0.9998547719540805, 
              0.9999819235552065, 1.0000207978612714`, 1.0000273456179112`, 
              1.0000393823770264`, 0.9999221985128627, 0.9999226711133036, 
              1.0001581434991054`, 0.9999894539144764, 0.9999862501517308, 
              0.9999350757938639, 1.000040287908586, 1.00003930531569, 
              0.9999215833061685, 1.0000011801070046`, 1.0000195653588924`, 
              0.9999223206775736, 1.0000768848812633`, 1.0001392755679785`}, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 5497619757523402540|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "FeatureNumber" -> 20, "Calibrator" -> None, "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 3, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|"Value" -> 0.15, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.519858`6.167429725134109, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.6943409991677923, 0.014965877395248057`], "Accuracy" -> 
         Around[0.561131946601414, 0.034750767918162444`], "EvaluationTime" -> 
         0.0008971641173621407, "TestSize" -> 200, "ModelMemory" -> 58320, 
         "ModelUtility" -> -1.275853572127836, "TrainingSize" -> 6400, 
         "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 5259824, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.6943409991677923, 0.014965877395248057`]}, 
         "AccuracyHistory" -> {
           Around[0.561131946601414, 0.034750767918162444`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 3, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 8000|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.571603001625767, 0.17030302625356955`], "Accuracy" -> 
              Around[0.4978682303462717, 0.02641514809506855], 
              "EvaluationTime" -> 0.00011826479942488851`, "TestSize" -> 700, 
              "ModelMemory" -> 164368, "ModelUtility" -> -4.06639836170794, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 749904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.571603001625767, 0.12042242472048965`]}, 
              "AccuracyHistory" -> {
                Around[0.4978682303462717, 0.018678330344069884`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.537309074434482, 0.15483575026994645`], "Accuracy" -> 
              Around[0.5088044894350425, 0.023441789506429958`], 
              "EvaluationTime" -> 0.0004987408828060393, "TestSize" -> 900, 
              "ModelMemory" -> 164368, "ModelUtility" -> -4.0374938578038435`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 611760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.537309074434482, 0.10948540898598594`]}, 
              "AccuracyHistory" -> {
                Around[0.5088044894350425, 0.016575848323144272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.816859346091686, 0.12051557112339842`], "Accuracy" -> 
              Around[0.4997429507419867, 0.02650789584068355], 
              "EvaluationTime" -> 0.0004249072808766287, "TestSize" -> 700, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.3716009180239013`,
               "TrainingSize" -> 300, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 679608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.816859346091686, 0.08521737757992469]}, 
              "AccuracyHistory" -> {
                Around[0.4997429507419867, 0.018743912903934016`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.049612012175865, 0.038421786905610995`], "Accuracy" -> 
              Around[0.5100363806559394, 0.01809489601253896], 
              "EvaluationTime" -> 0.0004683219674569379, "TestSize" -> 1500, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.2624540493084337`,
               "TrainingSize" -> 1500, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1487944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.049612012175865, 0.02716830606626203]}, 
              "AccuracyHistory" -> {
                Around[0.5100363806559394, 0.012795023675331715`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004683219674569379, "MeanCrossEntropy" -> 
             Around[1.049612012175865, 0.038421786905610995`], "ModelMemory" -> 
             164368, "TrainingMemory" -> 1487944, "TrainingTime" -> 
             13.712955400734597`|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.978078417106721, 0.05847417802310865], "Accuracy" -> 
              Around[0.5047875533705051, 0.03516250592848538], 
              "EvaluationTime" -> 0.0002561686363878996, "TestSize" -> 400, 
              "ModelMemory" -> 187408, "ModelUtility" -> -2.153710525489781, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 785176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.978078417106721, 0.04134748780444951]}, 
              "AccuracyHistory" -> {
                Around[0.5047875533705051, 0.024863646385544193`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9065826238032175`, 0.5634356703678818], "Accuracy" -> 
              Around[0.47834630246860477`, 0.014338140723693837`], 
              "EvaluationTime" -> 0.0006313731023926169, "TestSize" -> 1200, 
              "ModelMemory" -> 187408., "ModelUtility" -> -3.579741580303092, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 772384., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3459420856578141`, 0.06646759373975761], 
                Around[2.467223161948621, 0.1042998731606589]}, 
              "AccuracyHistory" -> {
                Around[0.4794770672758974, 0.022112135632341462`], 
                Around[0.4772155376613121, 0.018733485188002393`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8007824839768354, 0.024547289684928263`], "Accuracy" -> 
              Around[0.5227877806171078, 0.02655511439460677], 
              "EvaluationTime" -> 0.00039466903046693805`, "TestSize" -> 700, 
              "ModelMemory" -> 187408, "ModelUtility" -> -1.742161832299824, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 870904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8007824839768354, 0.017357554995963365`]}, 
              "AccuracyHistory" -> {
                Around[0.5227877806171078, 0.018777301463610944`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7796309680482931, 0.018874637860862457`], "Accuracy" -> 
              Around[0.5099100334203968, 0.02661659426297726], 
              "EvaluationTime" -> 0.0005235463321477932, "TestSize" -> 700, 
              "ModelMemory" -> 187408, "ModelUtility" -> -1.6860609281809458`,
               "TrainingSize" -> 1500, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1479056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7796309680482931, 0.013346384423856194`]}, 
              "AccuracyHistory" -> {
                Around[0.5099100334203968, 0.018820774295442176`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.716717359212796, 0.007189443611857207], "Accuracy" -> 
              Around[0.531132926726813, 0.017513074992415705`], 
              "EvaluationTime" -> 0.0004241533961092113, "TestSize" -> 1600, 
              "ModelMemory" -> 187408, "ModelUtility" -> -1.5121304718669215`,
               "TrainingSize" -> 6400, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 5500544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.716717359212796, 0.005083704330902535]}, 
              "AccuracyHistory" -> {
                Around[0.531132926726813, 0.01238361408656569]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004241533961092113, "MeanCrossEntropy" -> 
             Around[0.716717359212796, 0.007189443611857207], "ModelMemory" -> 
             187408, "TrainingMemory" -> 5500544, "TrainingTime" -> 
             5.292567397935555|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.481959921199492, 0.09852684679331478], "Accuracy" -> 
              Around[0.5214190755376206, 0.016107788790003894`], 
              "EvaluationTime" -> 0.0007781542651600784, "TestSize" -> 1300, 
              "ModelMemory" -> 58320., "ModelUtility" -> -2.8099838971138635`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2511886431509579, 
              "TrainingMemory" -> 273728., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.567993915109818, 0.09919498407119166], 
                Around[1.395925927289166, 0.054875544051037485`]}, 
              "AccuracyHistory" -> {
                Around[0.5298214599175762, 0.02478263811895469], 
                Around[0.5130166911576649, 0.016514346041815193`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.976800131201028, 0.03699597772838574], "Accuracy" -> 
              Around[0.506955144403967, 0.022260319855480798`], 
              "EvaluationTime" -> 0.0004890237313225717, "TestSize" -> 1000, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.9649805667508, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 317896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.976800131201028, 0.02616010672836804]}, 
              "AccuracyHistory" -> {
                Around[0.506955144403967, 0.015740423121192018`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8026346855839116, 0.03066903134569308], "Accuracy" -> 
              Around[0.5199368100901873, 0.03147628531890425], 
              "EvaluationTime" -> 0.0005269111424948067, "TestSize" -> 500, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.572349136471873, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 433912, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8026346855839116, 0.021686280036962362`]}, 
              "AccuracyHistory" -> {
                Around[0.5199368100901873, 0.022257094795559765`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7262196838214335, 0.01118262649909424], "Accuracy" -> 
              Around[0.5014685119518686, 0.02658301047236829], 
              "EvaluationTime" -> 0.0005102627204078809, "TestSize" -> 700, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.3631787248646123`, 
              "TrainingSize" -> 1500, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 1270768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7262196838214335, 0.007907311028985918]}, 
              "AccuracyHistory" -> {
                Around[0.5014685119518686, 0.018797026969364625`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7192349235510729, 0.007528596808562615], "Accuracy" -> 
              Around[0.5374934705650116, 0.017596625466446324`], 
              "EvaluationTime" -> 0.00015829345179092024`, "TestSize" -> 1600,
               "ModelMemory" -> 58320, "ModelUtility" -> -1.3418820552864452`,
               "TrainingSize" -> 6400, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 5199736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7192349235510729, 0.005323521856154025]}, 
              "AccuracyHistory" -> {
                Around[0.5374934705650116, 0.01244269319332409]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00015829345179092024`, "MeanCrossEntropy" -> 
             Around[0.7192349235510729, 0.007528596808562615], "ModelMemory" -> 
             58320, "TrainingMemory" -> 5199736, "TrainingTime" -> 
             6.516029063491863|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[2.592392938391246, 0.20117785665168894`], "Accuracy" -> 
              Around[0.49413242248129136`, 0.013684643154442535`], 
              "EvaluationTime" -> 0.0004474557902785133, "TestSize" -> 1700, 
              "ModelMemory" -> 93800., "ModelUtility" -> -3.9964939953169334`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 374237.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.4067716777622983`, 0.10773384280965125`], 
                Around[2.7780141990201934`, 0.11178237630215813`]}, 
              "AccuracyHistory" -> {
                Around[0.500647756567028, 0.017557284751405864`], 
                Around[0.48761708839555473`, 0.016527015566220066`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.0616757102493, 0.11758793942896689`], "Accuracy" -> 
              Around[0.5067910777720633, 0.014106315875536835`], 
              "EvaluationTime" -> 0.00021184998277845466`, "TestSize" -> 2500,
               "ModelMemory" -> 93800, "ModelUtility" -> -4.313756824450625, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 390808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.0616757102493, 0.08314722935597549]}, 
              "AccuracyHistory" -> {
                Around[0.5067910777720633, 0.009974671613151546]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7878725887161581, 0.02826930101475226], "Accuracy" -> 
              Around[0.5025246318651293, 0.03519214879191792], 
              "EvaluationTime" -> 0.0009142581455869162, "TestSize" -> 400, 
              "ModelMemory" -> 93800, "ModelUtility" -> -1.5979920860334682`, 
              "TrainingSize" -> 300, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 512944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7878725887161581, 0.01998941444693507]}, 
              "AccuracyHistory" -> {
                Around[0.5025246318651293, 0.024884607055291125`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2971687591537602`, 0.04394420157003634], "Accuracy" -> 
              Around[0.5129449656225508, 0.014667675472648392`], 
              "EvaluationTime" -> 0.000305025701401411, "TestSize" -> 2300, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.5944014207531345`, 
              "TrainingSize" -> 1500, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 1376360, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2971687591537602`, 0.031073242924001224`]}, 
              "AccuracyHistory" -> {
                Around[0.5129449656225508, 0.010371612790953276`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000305025701401411, "MeanCrossEntropy" -> 
             Around[1.2971687591537602`, 0.04394420157003634], "ModelMemory" -> 
             93800, "TrainingMemory" -> 1376360, "TrainingTime" -> 
             27.27442973069944|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 3|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8828295479015069, 0.019725871490607918`], "Accuracy" -> 
              Around[0.49525556666472703`, 0.02033109794027387], 
              "EvaluationTime" -> 0.000701861436511457, "TestSize" -> 1000, 
              "ModelMemory" -> 101776., "ModelUtility" -> -1.832390143092842, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.22028886851600907`, 
              "TrainingMemory" -> 449864., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8846593257868811, 0.032761845002010494`], 
                Around[0.8809997700161328, 0.024539600813666365`]}, 
              "AccuracyHistory" -> {
                Around[0.48228037290684383`, 0.024856358108170412`], 
                Around[0.5082307604226103, 0.020149164502804053`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.797524510121177, 0.01760591534145762], "Accuracy" -> 
              Around[0.5207662865565482, 0.01949772258636201], 
              "EvaluationTime" -> 0.0003484559042719773, "TestSize" -> 1300, 
              "ModelMemory" -> 101776, "ModelUtility" -> -1.6290438252809674`,
               "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 466608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.797524510121177, 0.012449262126940952`]}, 
              "AccuracyHistory" -> {
                Around[0.5207662865565482, 0.013786971858510686`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.782384752768915, 0.04123060888285808], "Accuracy" -> 
              Around[0.5199425586175918, 0.049747010861961406`], 
              "EvaluationTime" -> 0.0011294627058970838`, "TestSize" -> 200, 
              "ModelMemory" -> 101776, "ModelUtility" -> -1.6154417698894215`,
               "TrainingSize" -> 300, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 552696, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.782384752768915, 0.02915444313351925]}, 
              "AccuracyHistory" -> {
                Around[0.5199425586175918, 0.035176448724253746`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7271405486726805, 0.009739360169922854], "Accuracy" -> 
              Around[0.5048418674030359, 0.02484091136605918], 
              "EvaluationTime" -> 0.00022370627722832114`, "TestSize" -> 800, 
              "ModelMemory" -> 101776, "ModelUtility" -> -1.4407977494089694`,
               "TrainingSize" -> 1500, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 1417768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7271405486726805, 0.006886767620570615]}, 
              "AccuracyHistory" -> {
                Around[0.5048418674030359, 0.01756517687779443]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.712419954392007, 0.005636828064314706], "Accuracy" -> 
              Around[0.5235918257459351, 0.016505693836539628`], 
              "EvaluationTime" -> 0.00042525077606167587`, "TestSize" -> 900, 
              "ModelMemory" -> 101776, "ModelUtility" -> -1.3977054321876836`,
               "TrainingSize" -> 6400, "TrainingTime" -> 1., "TrainingMemory" -> 
              5289704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.712419954392007, 0.005636828064314706]}, 
              "AccuracyHistory" -> {
                Around[0.5235918257459351, 0.016505693836539628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00042525077606167587`, "MeanCrossEntropy" -> 
             Around[0.712419954392007, 0.005636828064314706], "ModelMemory" -> 
             101776, "TrainingMemory" -> 5289704, "TrainingTime" -> 
             1.4702888685160092`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 3|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8635214486922195, 0.09127706589923675], "Accuracy" -> 
              Around[0.5495050471376519, 0.07018711638589603], 
              "EvaluationTime" -> 0.0007943282347242814, "TestSize" -> 100, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7452020491637412`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 332920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8635214486922195, 0.06454263226416167]}, 
              "AccuracyHistory" -> {
                Around[0.5495050471376519, 0.04962978594839653]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0033843595575471`, 0.022312216190424332`], "Accuracy" -> 
              Around[0.5163885400737243, 0.022740638211290742`], 
              "EvaluationTime" -> 0.0005017040245804185, "TestSize" -> 1800, 
              "ModelMemory" -> 58320., "ModelUtility" -> -2.0124666021456132`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 273690.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9973973757917401, 0.044013212774479865`], 
                Around[1.009371343323354, 0.02463080034594061]}, 
              "AccuracyHistory" -> {
                Around[0.5358815521707194, 0.0222178402868625], 
                Around[0.49689552797672903`, 0.013781631917567141`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8082535270171115, 0.04600760086038243], "Accuracy" -> 
              Around[0.5430443847808393, 0.04054280700667373], 
              "EvaluationTime" -> 0.0010863084705980558`, "TestSize" -> 300, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.6023918518944114`, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 378088, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8082535270171115, 0.03253228655450045]}, 
              "AccuracyHistory" -> {
                Around[0.5430443847808393, 0.028668093762756464`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7650136930469386, 0.02768067361508613], "Accuracy" -> 
              Around[0.48019811644458243`, 0.04983572089998976], 
              "EvaluationTime" -> 0.001, "TestSize" -> 100, "ModelMemory" -> 
              58320, "ModelUtility" -> -1.475933405833133, "TrainingSize" -> 
              1500, "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
              1247976, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7650136930469386, 0.02768067361508613]}, 
              "AccuracyHistory" -> {
                Around[0.48019811644458243`, 0.04983572089998976]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6943409991677923, 0.014965877395248057`], "Accuracy" -> 
              Around[0.561131946601414, 0.034750767918162444`], 
              "EvaluationTime" -> 0.0008971641173621407, "TestSize" -> 200, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.275853572127836, 
              "TrainingSize" -> 6400, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 5259824, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6943409991677923, 0.014965877395248057`]}, 
              "AccuracyHistory" -> {
                Around[0.561131946601414, 0.034750767918162444`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0008971641173621407, "MeanCrossEntropy" -> 
             Around[0.6943409991677923, 0.014965877395248057`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 5259824, "TrainingTime" -> 
             1.0398853237511996`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[5.336647850728896, 0.36068712069811965`], "Accuracy" -> 
              Around[0.5024294349066933, 0.0248695052463899], 
              "EvaluationTime" -> 0.0006067160701578375, "TestSize" -> 800, 
              "ModelMemory" -> 101776, "ModelUtility" -> -5.448767728963984, 
              "TrainingSize" -> 60, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 466312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[5.336647850728896, 0.25504430893229113`]}, 
              "AccuracyHistory" -> {
                Around[0.5024294349066933, 0.017585395804476718`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.395254081510527, 0.2636823302345111], "Accuracy" -> 
              Around[0.5120123226523718, 0.0234277851101865], 
              "EvaluationTime" -> 0.0003657588822781302, "TestSize" -> 900, 
              "ModelMemory" -> 101776, "ModelUtility" -> -5.057623282997858, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 449864, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.395254081510527, 0.1864515637878934]}, 
              "AccuracyHistory" -> {
                Around[0.5120123226523718, 0.016565945719594098`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.7123544820761034`, 0.13403435224689797`], "Accuracy" -> 
              Around[0.5084268891408583, 0.012653320565552788`], 
              "EvaluationTime" -> 0.0003112992814000049, "TestSize" -> 3100, 
              "ModelMemory" -> 101776, "ModelUtility" -> -4.710441062822905, 
              "TrainingSize" -> 300, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 609408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.7123544820761034`, 0.09477659938572791]}, 
              "AccuracyHistory" -> {
                Around[0.5084268891408583, 0.008947248776429577]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003112992814000049, "MeanCrossEntropy" -> 
             Around[3.7123544820761034`, 0.13403435224689797`], "ModelMemory" -> 
             101776, "TrainingMemory" -> 609408, "TrainingTime" -> 
             426.61925636183213`|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9772157046775556`, 0.13581894617227097`], "Accuracy" -> 
              Around[0.5389145423524775, 0.032667788227125474`], 
              "EvaluationTime" -> 0.0011926944888579786`, "TestSize" -> 500, 
              "ModelMemory" -> 62416., "ModelUtility" -> -3.4138357231641834`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.7398712713095854, 
              "TrainingMemory" -> 495850.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9136618132284036`, 0.15910112168950888`], 
                Around[2.0407695961267076`, 0.1828723532202185]}, 
              "AccuracyHistory" -> {
                Around[0.5629044647415045, 0.028546074102659743`], 
                Around[0.5149246199634504, 0.03520786949066581]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5060030000016982`, 0.0762277367998304], "Accuracy" -> 
              Around[0.5108061573487391, 0.021242376364000302`], 
              "EvaluationTime" -> 0.0005033741400803688, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.8442108215676183`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 331888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5060030000016982`, 0.05390114960566341]}, 
              "AccuracyHistory" -> {
                Around[0.5108061573487391, 0.01502062837550145]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7977308963856519, 0.017958879984400503`], "Accuracy" -> 
              Around[0.5198102928930833, 0.018813825700028396`], 
              "EvaluationTime" -> 0.0002522007881460126, "TestSize" -> 1400, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.5621645973540725`, 
              "TrainingSize" -> 300, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 488784, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7977308963856519, 0.012698845819484954`]}, 
              "AccuracyHistory" -> {
                Around[0.5198102928930833, 0.013303383732551823`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.9005007280304554, 0.01928736459464073], "Accuracy" -> 
              Around[0.5116882414317593, 0.014054614630122458`], 
              "EvaluationTime" -> 0.00022342992002993283`, "TestSize" -> 2500,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.8040882066127115`,
               "TrainingSize" -> 1500, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 1247008, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9005007280304554, 0.013638226296087786`]}, 
              "AccuracyHistory" -> {
                Around[0.5116882414317593, 0.00993811331192325]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7378143308977289, 0.009837881481838047], "Accuracy" -> 
              Around[0.5159252601229434, 0.01758436348600896], 
              "EvaluationTime" -> 0.00026528550640207444`, "TestSize" -> 1600,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4023480501756207`,
               "TrainingSize" -> 6400, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 5132792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7378143308977289, 0.006956432708317243]}, 
              "AccuracyHistory" -> {
                Around[0.5159252601229434, 0.012434022663806055`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00026528550640207444`, "MeanCrossEntropy" -> 
             Around[0.7378143308977289, 0.009837881481838047], "ModelMemory" -> 
             62416, "TrainingMemory" -> 5132792, "TrainingTime" -> 
             20.551036177073513`|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 3|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8504246557068951, 0.03456369763589451], "Accuracy" -> 
              Around[0.5052444789378114, 0.020712022598502206`], 
              "EvaluationTime" -> 0.0019788154677706244`, "TestSize" -> 600, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.8213692724409116`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.31823455345103524`, 
              "TrainingMemory" -> 374258.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.824875474343529, 0.060281106384565075`], 
                Around[0.8759738370702611, 0.02523607671840339]}, 
              "AccuracyHistory" -> {
                Around[0.5099010867416123, 0.04986506998824596], 
                Around[0.5005878711340107, 0.022070153241840747`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8062319824862548, 0.020285885289562305`], "Accuracy" -> 
              Around[0.515964389042883, 0.022225370577872813`], 
              "EvaluationTime" -> 0.0005213800977277434, "TestSize" -> 1000, 
              "ModelMemory" -> 93800, "ModelUtility" -> -1.6398002924978214`, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 390792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8062319824862548, 0.014344287050621934`]}, 
              "AccuracyHistory" -> {
                Around[0.515964389042883, 0.015715710249997843`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7654719873182969, 0.053726477929544166`], "Accuracy" -> 
              Around[0.5495050471376519, 0.07018711638589603], 
              "EvaluationTime" -> 0.0012589254117941673`, "TestSize" -> 100, 
              "ModelMemory" -> 93800, "ModelUtility" -> -1.5773068801573673`, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 494896, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7654719873182969, 0.03799035687325006]}, 
              "AccuracyHistory" -> {
                Around[0.5495050471376519, 0.04962978594839653]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7195144931819312, 0.011214730425127868`], "Accuracy" -> 
              Around[0.5165493962850172, 0.028763129056291255`], 
              "EvaluationTime" -> 0.0006763548383445635, "TestSize" -> 300, 
              "ModelMemory" -> 93800, "ModelUtility" -> -1.4083963568714621`, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 1320136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7195144931819312, 0.011214730425127868`]}, 
              "AccuracyHistory" -> {
                Around[0.5165493962850172, 0.028763129056291255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7046672357847844, 0.005094293794240658], "Accuracy" -> 
              Around[0.5115961491854504, 0.0203070682427604], 
              "EvaluationTime" -> 0.0005772628953760101, "TestSize" -> 600, 
              "ModelMemory" -> 93800, "ModelUtility" -> -1.363359032925588, 
              "TrainingSize" -> 6400, "TrainingTime" -> 1., "TrainingMemory" -> 
              5246704, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7046672357847844, 0.005094293794240658]}, 
              "AccuracyHistory" -> {
                Around[0.5115961491854504, 0.0203070682427604]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005772628953760101, "MeanCrossEntropy" -> 
             Around[0.7046672357847844, 0.005094293794240658], "ModelMemory" -> 
             93800, "TrainingMemory" -> 5246704, "TrainingTime" -> 
             1.5682345534510351`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.396665212075611, 0.293356932485822], "Accuracy" -> 
              Around[0.4987867113666298, 0.03487871301060356], 
              "EvaluationTime" -> 0.0011116557830102064`, "TestSize" -> 400, 
              "ModelMemory" -> 187408, "ModelUtility" -> -4.665091745529747, 
              "TrainingSize" -> 10, "TrainingTime" -> 1., "TrainingMemory" -> 
              768352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.396665212075611, 0.20743467626880893`]}, 
              "AccuracyHistory" -> {
                Around[0.4987867113666298, 0.024662974488857237`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.0291560418099337`, 0.23894728246837124`], "Accuracy" -> 
              Around[0.4840381000395967, 0.03145165002891556], 
              "EvaluationTime" -> 0.0008628130329390658, "TestSize" -> 500, 
              "ModelMemory" -> 187408, "ModelUtility" -> -4.422144698787109, 
              "TrainingSize" -> 60, "TrainingTime" -> 1., "TrainingMemory" -> 
              784864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[3.0291560418099337`, 0.16896124377948274`]}, 
              "AccuracyHistory" -> {
                Around[0.4840381000395967, 0.022239675014952266`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.5402088610352953`, 0.15664315690548955`], "Accuracy" -> 
              Around[0.5010124876660427, 0.02343402627789678], 
              "EvaluationTime" -> 0.0004903749834341922, "TestSize" -> 900, 
              "ModelMemory" -> 187408, "ModelUtility" -> -4.063277491411416, 
              "TrainingSize" -> 300, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 876296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5402088610352953`, 0.11076343847434002`]}, 
              "AccuracyHistory" -> {
                Around[0.5010124876660427, 0.01657035889160456]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004903749834341922, "MeanCrossEntropy" -> 
             Around[2.5402088610352953`, 0.15664315690548955`], "ModelMemory" -> 
             187408, "TrainingMemory" -> 876296, "TrainingTime" -> 
             54.20699506583679|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.729325492032915, 0.2857501060861153], "Accuracy" -> 
              Around[0.4989761337238718, 0.023371298467730898`], 
              "EvaluationTime" -> 0.0006597343547122816, "TestSize" -> 900, 
              "ModelMemory" -> 164368, "ModelUtility" -> -5.28261280979838, 
              "TrainingSize" -> 60, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 604720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.729325492032915, 0.20205583773826744`]}, 
              "AccuracyHistory" -> {
                Around[0.4989761337238718, 0.016526003631667285`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006597343547122816, "MeanCrossEntropy" -> 
             Around[4.729325492032915, 0.2857501060861153], "ModelMemory" -> 
             164368, "TrainingMemory" -> 604720, "TrainingTime" -> 
             405.96165923809065`|>, "Index" -> 11|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], <||>], "MaxTrainingSize" -> 8000, 
      "PreprocessorEvaluationTime" -> 4.*^-6, "PreprocessorMemory" -> 53640, 
      "InputDimension" -> 20, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6931276589448779, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869657172776468`16.340247480130678*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 7.5280590945994925`, 
          "ElapsedTimes" -> 20.908300000000004`, "ExperimentCounts" -> 17|>, <|
         "TrainingSizes" -> 60, "TimeBudgets" -> 10.754370135142157`, 
          "ElapsedTimes" -> 21.385105, "ExperimentCounts" -> 11|>, <|
         "TrainingSizes" -> 300, "TimeBudgets" -> 15.363385907345911`, 
          "ElapsedTimes" -> 28.443854, "ExperimentCounts" -> 10|>, <|
         "TrainingSizes" -> 1500, "TimeBudgets" -> 21.947694153351314`, 
          "ElapsedTimes" -> 21.659476, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 6400, "TimeBudgets" -> 31.35384879050185, 
          "ElapsedTimes" -> 30.899594, "ExperimentCounts" -> 6|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 
            1., 1., 1., 0., 1., 1., 1.}}, "ID" -> 3500106187605339871|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 125.21173, 
      "MaxTrainingMemory" -> 26474960, "DataMemory" -> 4673536, 
      "FunctionMemory" -> 365944, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 16, 16, 46, 13.965212`7.897622518542796}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9, 
   3.869293712698818*^9, 3.869293771584032*^9, 3.869653423942144*^9, 
   3.869653574019149*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"66ae55cf-3d67-4875-a13a-6ee02e9504be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", "testData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}, {
   3.8692937803386793`*^9, 3.869293781129095*^9}, 3.869654997268072*^9},
 CellLabel->"In[36]:=",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "c5684b9e-8323-4b6f-9048-0bc5d7a61645"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "2000"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"47.8", "1.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[47.75`3., 1.1171807357801262217`3.]], ")"}], 
                 "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"51.9", "1.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    51.8999999999999985789`3., 1.1175058879956190072`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.4878405722085656371`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0021967615788992534`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.4834470490507671303`3.", "\", \"", 
                   "0.4922340953663641439`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.4834470490507671303`3., 
                   ", ", 0.4922340953663641439`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.7177666227997726578`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0045030165181999537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.7087605897633727503`3.", "\", \"", 
                   "0.7267726558361725653`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.7087605897633727503`3., 
                   ", ", 0.7267726558361725653`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.81`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"44.6`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 0.42, 0.}, {0.8893033012946338, 
                  0.6859153393502144, 0.2568775179734233}}, {{
                  0.9449707913084173, 0.4746645969208062, 
                  0.0027397503329993356`}, {0.8671063327516203, 
                  0.5520131422237154, 0.006616403865406552}}}, {{0, 0}, {2, 
                  2}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["553", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "553", "\" examples of \"", "False", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4968553459119497`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5327552986512524`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5141794514179451`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{553, " examples of ", False, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.4968553459119497}], 
                    Row[{"Recall = ", 0.5327552986512524}], 
                    Row[{"FScore = ", 0.5141794514179451}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["560", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "560", "\" examples of \"", "True", 
                    "\" misclassified as \"", "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.5031446540880503`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.5821205821205822`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{560, " examples of ", True, " misclassified as ", 
                    False}], 
                    Row[{"Column fraction = ", 0.5031446540880503}], 
                    Row[{"Row fraction = ", 0.5821205821205822}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["485", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "485", "\" examples of \"", "False", 
                    "\" misclassified as \"", "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.5467869222096956`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.46724470134874757`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{485, " examples of ", False, " misclassified as ", 
                    True}], 
                    Row[{"Column fraction = ", 0.5467869222096956}], 
                    Row[{"Row fraction = ", 0.46724470134874757`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["402", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "402", "\" examples of \"", "True", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4532130777903044`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4178794178794179`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.43482963764196864`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{402, " examples of ", True, 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.4532130777903044}], 
                    Row[{"Recall = ", 0.4178794178794179}], 
                    Row[{"FScore = ", 0.43482963764196864`}]}], 
                    "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1038", "\" example\"", "\"s\"", "\" of class \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5327552986512524`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1038, " example", "s", " of class ", False}], 
                    Row[{"Recall = ", 0.5327552986512524}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "962", "\" example\"", "\"s\"", "\" of class \"", "True"},
                     "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.4178794178794179`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{962, " example", "s", " of class ", True}], 
                    Row[{"Recall = ", 0.4178794178794179}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1113", "\" example\"", "\"s\"", "\" classified as \"", 
                    "False"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4968553459119497`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1113, " example", "s", " classified as ", False}], 
                    Row[{"Precision = ", 0.4968553459119497}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "887", "\" example\"", "\"s\"", "\" classified as \"", 
                    "True"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.4532130777903044`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{887, " example", "s", " classified as ", True}], 
                    Row[{"Precision = ", 0.4532130777903044}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["1038", TraditionalForm]}, {0.5, 
                    FormBox["962", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["1113", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["887", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["False", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["True", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->181.2,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 8000, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Length" -> 20|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 8000, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Length" -> 20|>|>,
                     "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.49575, 0.508, 0.50625, 0.500375, 0.501, 
                    0.494375, 0.503, 0.499875, 0.507625, 0.50775, 
                    0.5005000000000001, 0.500375, 0.49362500000000004`, 
                    0.501625, 0.498625, 0.50225, 0.499, 0.4845, 0.508625, 
                    0.506}, 
                    "StandardDeviation" -> {0.4999819371737343, 
                    0.4999359959034756, 0.4999609359740019, 
                    0.49999985937498026`, 0.49999899999900005`, 
                    0.4999683583738075, 0.49999099991899854`, 
                    0.49999998437499976`, 0.4999418559942746, 
                    0.49993993389206265`, 0.4999997499999375, 
                    0.49999985937498026`, 0.4999593577232053, 
                    0.4999973593680271, 0.4999981093714255, 
                    0.49999493747437085`, 0.499998999999, 
                    0.49975969225218636`, 0.49992560384021145`, 
                    0.4999639987039067}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 3802836066599686302|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, "Model" -> <|"RotationMatrix" -> CompressedData["
1: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
xOZPJSXwufbLthrFdvwfvXiM9w==
                    "], 
                    "Precisions" -> {0.912522505762429, 0.925695579749354, 
                    0.9327274700961633, 0.9452073238257851, 
                    0.9513407427668382, 0.9593710367046944, 
                    0.9712234464796532, 0.9791330156412462, 
                    0.9951007459659389, 0.9957848274603597, 
                    1.0066490474676713`, 1.0185179850036057`, 
                    1.0253232586841765`, 1.0410670249081222`, 
                    1.0450289201561889`, 1.0498019339121467`, 
                    1.0589050636780062`, 1.0639519548909757`, 
                    1.0825977353511032`, 1.0970441932518415`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {
                    0.00008086692650053751, -0.00006461889200455672, 
                    0.00007071756687608005, -0.00010745076349414706`, \
-0.000039970756293536307`, -0.00005076363567427511, 
                    0.000029833666025565808`, -0.000042946790086565655`, 
                    0.00007074884593564957, -0.0000376377510197341, 
                    0.00008065891197122576, -0.000015005541763963848`, 
                    0.0000165071521725364, 
                    0.00004496988473442776, -0.000021117416894342657`, 
                    0.000020281331131387858`, 
                    0.00010116681828444385`, -0.00011365678699650773`, 
                    7.952967041830129*^-6, 5.477107850754282*^-7}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 1500577080697874803|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 20, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {
                    0.00008086692650055317, -0.00006461889200454297, 
                    0.00007071756687609, -0.00010745076349417681`, \
-0.00003997075629351099, -0.00005076363567430242, 
                    0.00002983366602556803, -0.000042946790086556995`, 
                    0.00007074884593563069, -0.000037637751019753195`, 
                    0.00008065891197121556, -0.00001500554176397806, 
                    0.00001650715217254817, 
                    0.00004496988473443642, -0.000021117416894342488`, 
                    0.000020281331131391524`, 
                    0.00010116681828446605`, -0.00011365678699650061`, 
                    7.952967041836346*^-6, 5.477107850815343*^-7}, 
                    "StandardDeviation" -> {0.9999071496567752, 
                    1.000030086736393, 0.999953966328873, 1.0000560079659961`,
                     1.000031682128225, 1.0001658425154611`, 
                    0.9999440310710015, 1.0000381683385886`, 1.00000158774234,
                     0.9998881243676897, 0.9999711031411552, 
                    1.000008456708509, 0.9999322254009197, 0.9999909385011021,
                     0.9999935195946187, 1.0000796605297217`, 
                    1.0000381900287525`, 1.0000139481485009`, 
                    0.9999523171496137, 0.9999376555662843}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 20, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    8927406333728948690|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {
                    0.00008086692650055317, -0.00006461889200454297, 
                    0.00007071756687609, -0.00010745076349417681`, \
-0.00003997075629351099, -0.00005076363567430242, 
                    0.00002983366602556803, -0.000042946790086556995`, 
                    0.00007074884593563069, -0.000037637751019753195`, 
                    0.00008065891197121556, -0.00001500554176397806, 
                    0.00001650715217254817, 
                    0.00004496988473443642, -0.000021117416894342488`, 
                    0.000020281331131391524`, 
                    0.00010116681828446605`, -0.00011365678699650061`, 
                    7.952967041836346*^-6, 5.477107850815343*^-7}, 
                    "StandardDeviation" -> {0.9999071496567752, 
                    1.000030086736393, 0.999953966328873, 1.0000560079659961`,
                     1.000031682128225, 1.0001658425154611`, 
                    0.9999440310710015, 1.0000381683385886`, 1.00000158774234,
                     0.9998881243676897, 0.9999711031411552, 
                    1.000008456708509, 0.9999322254009197, 0.9999909385011021,
                     0.9999935195946187, 1.0000796605297217`, 
                    1.0000381900287525`, 1.0000139481485009`, 
                    0.9999523171496137, 0.9999376555662843}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 20, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    8927406333728948690|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 20, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1, 
                    "Values" -> {{1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 
                    1., 0., 1., 1., 1., 0., 1., 1., 1.}}, "ID" -> 
                    4681419788165317741|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.301339, "MaxTrainingMemory" -> 
                    16592768, "DataMemory" -> 1281976, "FunctionMemory" -> 
                    39152, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 16, 16, 44, 9.064175`7.709903268467915}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-0.8800223986704178, -0.861620731552651, \
-0.8436836784163364, -0.7444736888086051, -0.7020122073457989, \
-0.6498749540348044, -0.6227884297528816, -0.60788379364231, \
-0.600326103698873, -0.5611084924986396, -0.54055253059553}, 
                    "LeftBoundary" -> -0.861620731552651, "LeftScale" -> 
                    0.009200833558883403, "LeftTailNorm" -> 
                    0.13333333333333333`|>], "Entropy" -> 
                   Around[13.763644427400651`, 0.5877803913014189], 
                   "EntropySampleSize" -> 15|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 895810465636885430|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {0.49575, 0.508, 0.50625, 0.500375, 0.501, 0.494375,
                  0.503, 0.499875, 0.507625, 0.50775, 0.5005000000000001, 
                 0.500375, 0.49362500000000004`, 0.501625, 0.498625, 0.50225, 
                 0.499, 0.4845, 0.508625, 0.506}, 
                "StandardDeviation" -> {0.4999819371737343, 
                 0.4999359959034756, 0.4999609359740019, 0.49999985937498026`,
                  0.49999899999900005`, 0.4999683583738075, 
                 0.49999099991899854`, 0.49999998437499976`, 
                 0.4999418559942746, 0.49993993389206265`, 0.4999997499999375,
                  0.49999985937498026`, 0.4999593577232053, 
                 0.4999973593680271, 0.4999981093714255, 0.49999493747437085`,
                  0.499998999999, 0.49975969225218636`, 0.49992560384021145`, 
                 0.4999639987039067}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5833576423783485350|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4084182839944723376|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|False -> 1, True -> 2|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 2115020368298782235, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7087324500734345495|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          False -> 0.5031242189452637, True -> 0.49687578105473634`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
rxJA4xvZmPfn57k8/yT5H027q8M=
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.015143902972340584`, -0.000434075016528368, 
                    0.005570317152887583, 
                    0.0002759677590802312, -0.010923651978373528`, \
-0.0028475879225879908`, 0.009749718010425568, 0.005787644535303116, 
                    0.005191779229789972, 
                    0.01842227764427662, -0.010870772413909435`, \
-0.006291108205914497, -0.014385387301445007`, 0.004359656944870949, 
                    0.0018637216417118907`, -0.012499220669269562`, 
                    0.011986111290752888`, 0.006826132535934448, 
                    0.010952724143862724`, 
                    0.0032198382541537285`, -0.011100639589130878`, \
-0.00582398334518075, 0.015390126965939999`, 
                    0.01114022545516491, -0.0044692805968225, \
-0.016886577010154724`, -0.005172752775251865, 0.004094804637134075, 
                    0.0003349586040712893, -0.0001468169066356495, \
-0.016486085951328278`, -0.007228998001664877, -0.010990128852427006`, 
                    0.0016225301660597324`, -0.0025835027918219566`, \
-0.02117680013179779, -0.00407620333135128, -0.0034873802214860916`, \
-0.023923354223370552`, 
                    0.007642647717148066, -0.0024798009544610977`, \
-0.011255240999162197`, 
                    0.015567571856081486`, -0.00045913911890238523`, \
-0.0019100499339401722`, 0.012229083105921745`, -0.0024348655715584755`, 
                    0.00034441862953826785`, -0.0021234091836959124`, 
                    0.004287938121706247}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray["Real32",{0.004453006200492382, 
                    0.000430052139563486, 
                    0.016886651515960693`, -0.026692887768149376`, 
                    0.0007129418663680553, -0.015140894800424576`, 
                    0.005872434936463833, 
                    0.0025306774768978357`, -0.010270390659570694`, \
-0.0020404334645718336`, -0.0069828033447265625`, 
                    0.0006754198111593723, -0.00164474465418607, \
-0.006718807853758335, -0.004294722806662321, 
                    0.002990157576277852, -0.004242059774696827, 
                    0.0008709169342182577, -0.007950804196298122, \
-0.004419086501002312, -0.0010798439616337419`, -0.007805962115526199, 
                    0.004989107139408588, 
                    0.004652070812880993, -0.00014659069711342454`, \
-0.0005804798565804958, 0.001327261794358492, 0.004631133750081062, 
                    0.003430783050134778, 
                    0.013945876620709896`, -0.0032401622738689184`, \
-0.005111378617584705, 0.006780213676393032, -0.003896219888702035, 
                    0.0014749873662367463`, -0.00648154690861702, 
                    0.0019855641294270754`, 0.007787244860082865, 
                    0.0004977858043275774, -0.0017261133762076497`, 
                    0.0012377994135022163`, -0.005300839431583881, 
                    0.0059104422107338905`, 0.014046672731637955`, 
                    0.0028680451214313507`, -0.006356383208185434, 
                    0.0014228008221834898`, 
                    0.005500604398548603, -0.003754500299692154, 
                    0.0038721722085028887`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
AgAAADIAAACqLx29FBN9PhleXz2vZ5E9nNH2vHDY8T1dY/Q8P5QEPq/1Ir2K
88u9CiXnva1LrL4Dx6w9x2APvunvfDxEIJS+KDwJPV7mXDtGdhK+STmsvl9u
7b2yddI9pWyGvOa7aT6RQSS+hJX4veNlZj2YAkA+b06bPYP5wTzGII6+FmYf
vjhTqz6EHro97mNYPtGgpL5DUWE+3HBkPvdpR74LKgs+m22hPTCq+jxDkay+
fl6SvYh3HT3Z/NA9xS3qPc+myjsSejU9LFTVPafoW773mSq+MzPBvap5kj1R
0Ts+bCbUPVkr6b0f3sM9lH3vvQZBn73u0A0+N1R1vB8LgTwjq9s81H4GPgAH
+72xa8q9HofYPBA0bD7RqpS85mhJvjeXXD5csA89iTeQvVW8sb2W2wu8toZF
PcwnwT2+l0+8a1gyvvuPIrw5ItQ83csGvlDEBj7JixA98LqbPnLPPj4+qus8
CH0yPcRUHz7nvL09izDpPdpc6j2Uzk6+i+yGPnMIIT4HVRW+vzkaPYUf/boq
Dxa9bgXGdA==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.002537904307246208, -0.002537905238568783}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 0.704165, "MeanInputsPerSecond" -> 
           29174.98029581135|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {0.000028009174629634926`, -0.00004792303788282726, 
                 0.00002583636393431821, -0.00010260888905000076`, \
-0.00004892586092664697, -0.00005065197960254531, -0.000015026097037473819`, 
                 0.000013636476164046841`, 
                 7.885911774011989*^-6, -5.548282622807932*^-6, 
                 0.00008865046732509363, 
                 0.00001164764937125451, -1.6760638689223839`*^-6, \
-0.00010846979974219462`, 0.00006866615688878497, -0.00011035615354171747`, 
                 0.000018400230997695388`, 
                 0.000010176501638530233`, -0.00010828831218908611`, 
                 1.2376467495229805`*^-6}, 
                "StandardDeviation" -> {1.0001616619924825`, 
                 0.9998547719540805, 0.9999819235552065, 1.0000207978612714`, 
                 1.0000273456179112`, 1.0000393823770264`, 0.9999221985128627,
                  0.9999226711133036, 1.0001581434991054`, 0.9999894539144764,
                  0.9999862501517308, 0.9999350757938639, 1.000040287908586, 
                 1.00003930531569, 0.9999215833061685, 1.0000011801070046`, 
                 1.0000195653588924`, 0.9999223206775736, 1.0000768848812633`,
                  1.0001392755679785`}, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 5497619757523402540|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 20, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 3, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|"Value" -> 0.15, "Options" -> <||>|>|>|>,
        "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.519858`6.167429725134109, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.6943409991677923, 0.014965877395248057`], "Accuracy" -> 
            Around[0.561131946601414, 0.034750767918162444`], 
            "EvaluationTime" -> 0.0008971641173621407, "TestSize" -> 200, 
            "ModelMemory" -> 58320, "ModelUtility" -> -1.275853572127836, 
            "TrainingSize" -> 6400, "TrainingTime" -> 0.6309573444801932, 
            "TrainingMemory" -> 5259824, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.6943409991677923, 0.014965877395248057`]}, 
            "AccuracyHistory" -> {
              Around[0.561131946601414, 0.034750767918162444`]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 3, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 8000|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[2.571603001625767, 0.17030302625356955`], "Accuracy" -> 
                 Around[0.4978682303462717, 0.02641514809506855], 
                 "EvaluationTime" -> 0.00011826479942488851`, "TestSize" -> 
                 700, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -4.06639836170794, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 749904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.571603001625767, 0.12042242472048965`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4978682303462717, 0.018678330344069884`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.537309074434482, 0.15483575026994645`], "Accuracy" -> 
                 Around[0.5088044894350425, 0.023441789506429958`], 
                 "EvaluationTime" -> 0.0004987408828060393, "TestSize" -> 900,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -4.0374938578038435`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 611760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.537309074434482, 0.10948540898598594`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5088044894350425, 0.016575848323144272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.816859346091686, 0.12051557112339842`], "Accuracy" -> 
                 Around[0.4997429507419867, 0.02650789584068355], 
                 "EvaluationTime" -> 0.0004249072808766287, "TestSize" -> 700,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.3716009180239013`, "TrainingSize" -> 
                 300, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 679608, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.816859346091686, 0.08521737757992469]}, 
                 "AccuracyHistory" -> {
                   Around[0.4997429507419867, 0.018743912903934016`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.049612012175865, 0.038421786905610995`], "Accuracy" -> 
                 Around[0.5100363806559394, 0.01809489601253896], 
                 "EvaluationTime" -> 0.0004683219674569379, "TestSize" -> 
                 1500, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.2624540493084337`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 1487944, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.049612012175865, 0.02716830606626203]}, 
                 "AccuracyHistory" -> {
                   Around[0.5100363806559394, 0.012795023675331715`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004683219674569379, "MeanCrossEntropy" -> 
                Around[1.049612012175865, 0.038421786905610995`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1487944, 
                "TrainingTime" -> 13.712955400734597`|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.978078417106721, 0.05847417802310865], "Accuracy" -> 
                 Around[0.5047875533705051, 0.03516250592848538], 
                 "EvaluationTime" -> 0.0002561686363878996, "TestSize" -> 400,
                  "ModelMemory" -> 187408, 
                 "ModelUtility" -> -2.153710525489781, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 785176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.978078417106721, 0.04134748780444951]}, 
                 "AccuracyHistory" -> {
                   Around[0.5047875533705051, 0.024863646385544193`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9065826238032175`, 0.5634356703678818], "Accuracy" -> 
                 Around[0.47834630246860477`, 0.014338140723693837`], 
                 "EvaluationTime" -> 0.0006313731023926169, "TestSize" -> 
                 1200, "ModelMemory" -> 187408., 
                 "ModelUtility" -> -3.579741580303092, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 772384., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.3459420856578141`, 0.06646759373975761], 
                   Around[2.467223161948621, 0.1042998731606589]}, 
                 "AccuracyHistory" -> {
                   Around[0.4794770672758974, 0.022112135632341462`], 
                   Around[0.4772155376613121, 0.018733485188002393`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8007824839768354, 0.024547289684928263`], 
                 "Accuracy" -> 
                 Around[0.5227877806171078, 0.02655511439460677], 
                 "EvaluationTime" -> 0.00039466903046693805`, "TestSize" -> 
                 700, "ModelMemory" -> 187408, 
                 "ModelUtility" -> -1.742161832299824, "TrainingSize" -> 300, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 870904, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8007824839768354, 0.017357554995963365`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5227877806171078, 0.018777301463610944`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7796309680482931, 0.018874637860862457`], 
                 "Accuracy" -> 
                 Around[0.5099100334203968, 0.02661659426297726], 
                 "EvaluationTime" -> 0.0005235463321477932, "TestSize" -> 700,
                  "ModelMemory" -> 187408, 
                 "ModelUtility" -> -1.6860609281809458`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 1.2589254117941673`, 
                 "TrainingMemory" -> 1479056, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7796309680482931, 0.013346384423856194`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5099100334203968, 0.018820774295442176`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.716717359212796, 0.007189443611857207], "Accuracy" -> 
                 Around[0.531132926726813, 0.017513074992415705`], 
                 "EvaluationTime" -> 0.0004241533961092113, "TestSize" -> 
                 1600, "ModelMemory" -> 187408, 
                 "ModelUtility" -> -1.5121304718669215`, "TrainingSize" -> 
                 6400, "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 5500544, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.716717359212796, 0.005083704330902535]}, 
                 "AccuracyHistory" -> {
                   Around[0.531132926726813, 0.01238361408656569]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004241533961092113, "MeanCrossEntropy" -> 
                Around[0.716717359212796, 0.007189443611857207], 
                "ModelMemory" -> 187408, "TrainingMemory" -> 5500544, 
                "TrainingTime" -> 5.292567397935555|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.481959921199492, 0.09852684679331478], "Accuracy" -> 
                 Around[0.5214190755376206, 0.016107788790003894`], 
                 "EvaluationTime" -> 0.0007781542651600784, "TestSize" -> 
                 1300, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -2.8099838971138635`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 273728., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.567993915109818, 0.09919498407119166], 
                   Around[1.395925927289166, 0.054875544051037485`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5298214599175762, 0.02478263811895469], 
                   Around[0.5130166911576649, 0.016514346041815193`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.976800131201028, 0.03699597772838574], "Accuracy" -> 
                 Around[0.506955144403967, 0.022260319855480798`], 
                 "EvaluationTime" -> 0.0004890237313225717, "TestSize" -> 
                 1000, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.9649805667508, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 317896, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.976800131201028, 0.02616010672836804]}, 
                 "AccuracyHistory" -> {
                   Around[0.506955144403967, 0.015740423121192018`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8026346855839116, 0.03066903134569308], "Accuracy" -> 
                 Around[0.5199368100901873, 0.03147628531890425], 
                 "EvaluationTime" -> 0.0005269111424948067, "TestSize" -> 500,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.572349136471873, "TrainingSize" -> 300, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 433912, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8026346855839116, 0.021686280036962362`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5199368100901873, 0.022257094795559765`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7262196838214335, 0.01118262649909424], "Accuracy" -> 
                 Around[0.5014685119518686, 0.02658301047236829], 
                 "EvaluationTime" -> 0.0005102627204078809, "TestSize" -> 700,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.3631787248646123`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 1.5848931924611136`, 
                 "TrainingMemory" -> 1270768, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7262196838214335, 0.007907311028985918]}, 
                 "AccuracyHistory" -> {
                   Around[0.5014685119518686, 0.018797026969364625`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7192349235510729, 0.007528596808562615], "Accuracy" -> 
                 Around[0.5374934705650116, 0.017596625466446324`], 
                 "EvaluationTime" -> 0.00015829345179092024`, "TestSize" -> 
                 1600, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.3418820552864452`, "TrainingSize" -> 
                 6400, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 5199736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7192349235510729, 0.005323521856154025]}, 
                 "AccuracyHistory" -> {
                   Around[0.5374934705650116, 0.01244269319332409]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00015829345179092024`, 
                "MeanCrossEntropy" -> 
                Around[0.7192349235510729, 0.007528596808562615], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 5199736, 
                "TrainingTime" -> 6.516029063491863|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[2.592392938391246, 0.20117785665168894`], "Accuracy" -> 
                 Around[0.49413242248129136`, 0.013684643154442535`], 
                 "EvaluationTime" -> 0.0004474557902785133, "TestSize" -> 
                 1700, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.9964939953169334`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 374237.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.4067716777622983`, 0.10773384280965125`], 
                   Around[2.7780141990201934`, 0.11178237630215813`]}, 
                 "AccuracyHistory" -> {
                   Around[0.500647756567028, 0.017557284751405864`], 
                   Around[0.48761708839555473`, 0.016527015566220066`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.0616757102493, 0.11758793942896689`], "Accuracy" -> 
                 Around[0.5067910777720633, 0.014106315875536835`], 
                 "EvaluationTime" -> 0.00021184998277845466`, "TestSize" -> 
                 2500, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -4.313756824450625, "TrainingSize" -> 60, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 390808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.0616757102493, 0.08314722935597549]}, 
                 "AccuracyHistory" -> {
                   Around[0.5067910777720633, 0.009974671613151546]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7878725887161581, 0.02826930101475226], "Accuracy" -> 
                 Around[0.5025246318651293, 0.03519214879191792], 
                 "EvaluationTime" -> 0.0009142581455869162, "TestSize" -> 400,
                  "ModelMemory" -> 93800, 
                 "ModelUtility" -> -1.5979920860334682`, "TrainingSize" -> 
                 300, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 512944, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7878725887161581, 0.01998941444693507]}, 
                 "AccuracyHistory" -> {
                   Around[0.5025246318651293, 0.024884607055291125`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2971687591537602`, 0.04394420157003634], "Accuracy" -> 
                 Around[0.5129449656225508, 0.014667675472648392`], 
                 "EvaluationTime" -> 0.000305025701401411, "TestSize" -> 2300,
                  "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.5944014207531345`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 1376360, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2971687591537602`, 0.031073242924001224`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5129449656225508, 0.010371612790953276`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000305025701401411, "MeanCrossEntropy" -> 
                Around[1.2971687591537602`, 0.04394420157003634], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 1376360, 
                "TrainingTime" -> 27.27442973069944|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 3|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8828295479015069, 0.019725871490607918`], 
                 "Accuracy" -> 
                 Around[0.49525556666472703`, 0.02033109794027387], 
                 "EvaluationTime" -> 0.000701861436511457, "TestSize" -> 1000,
                  "ModelMemory" -> 101776., 
                 "ModelUtility" -> -1.832390143092842, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.22028886851600907`, "TrainingMemory" -> 
                 449864., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.8846593257868811, 0.032761845002010494`], 
                   Around[0.8809997700161328, 0.024539600813666365`]}, 
                 "AccuracyHistory" -> {
                   Around[0.48228037290684383`, 0.024856358108170412`], 
                   Around[0.5082307604226103, 0.020149164502804053`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.797524510121177, 0.01760591534145762], "Accuracy" -> 
                 Around[0.5207662865565482, 0.01949772258636201], 
                 "EvaluationTime" -> 0.0003484559042719773, "TestSize" -> 
                 1300, "ModelMemory" -> 101776, 
                 "ModelUtility" -> -1.6290438252809674`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 466608, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.797524510121177, 0.012449262126940952`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5207662865565482, 0.013786971858510686`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.782384752768915, 0.04123060888285808], "Accuracy" -> 
                 Around[0.5199425586175918, 0.049747010861961406`], 
                 "EvaluationTime" -> 0.0011294627058970838`, "TestSize" -> 
                 200, "ModelMemory" -> 101776, 
                 "ModelUtility" -> -1.6154417698894215`, "TrainingSize" -> 
                 300, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 552696, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.782384752768915, 0.02915444313351925]}, 
                 "AccuracyHistory" -> {
                   Around[0.5199425586175918, 0.035176448724253746`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7271405486726805, 0.009739360169922854], "Accuracy" -> 
                 Around[0.5048418674030359, 0.02484091136605918], 
                 "EvaluationTime" -> 0.00022370627722832114`, "TestSize" -> 
                 800, "ModelMemory" -> 101776, 
                 "ModelUtility" -> -1.4407977494089694`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 1417768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7271405486726805, 0.006886767620570615]}, 
                 "AccuracyHistory" -> {
                   Around[0.5048418674030359, 0.01756517687779443]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.712419954392007, 0.005636828064314706], "Accuracy" -> 
                 Around[0.5235918257459351, 0.016505693836539628`], 
                 "EvaluationTime" -> 0.00042525077606167587`, "TestSize" -> 
                 900, "ModelMemory" -> 101776, 
                 "ModelUtility" -> -1.3977054321876836`, "TrainingSize" -> 
                 6400, "TrainingTime" -> 1., "TrainingMemory" -> 5289704, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.712419954392007, 0.005636828064314706]}, 
                 "AccuracyHistory" -> {
                   Around[0.5235918257459351, 0.016505693836539628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00042525077606167587`, 
                "MeanCrossEntropy" -> 
                Around[0.712419954392007, 0.005636828064314706], 
                "ModelMemory" -> 101776, "TrainingMemory" -> 5289704, 
                "TrainingTime" -> 1.4702888685160092`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 3|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8635214486922195, 0.09127706589923675], "Accuracy" -> 
                 Around[0.5495050471376519, 0.07018711638589603], 
                 "EvaluationTime" -> 0.0007943282347242814, "TestSize" -> 100,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7452020491637412`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 332920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8635214486922195, 0.06454263226416167]}, 
                 "AccuracyHistory" -> {
                   Around[0.5495050471376519, 0.04962978594839653]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0033843595575471`, 0.022312216190424332`], 
                 "Accuracy" -> 
                 Around[0.5163885400737243, 0.022740638211290742`], 
                 "EvaluationTime" -> 0.0005017040245804185, "TestSize" -> 
                 1800, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -2.0124666021456132`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 273690.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.9973973757917401, 0.044013212774479865`], 
                   Around[1.009371343323354, 0.02463080034594061]}, 
                 "AccuracyHistory" -> {
                   Around[0.5358815521707194, 0.0222178402868625], 
                   Around[0.49689552797672903`, 0.013781631917567141`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8082535270171115, 0.04600760086038243], "Accuracy" -> 
                 Around[0.5430443847808393, 0.04054280700667373], 
                 "EvaluationTime" -> 0.0010863084705980558`, "TestSize" -> 
                 300, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.6023918518944114`, "TrainingSize" -> 
                 300, "TrainingTime" -> 0.25118864315095796`, 
                 "TrainingMemory" -> 378088, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8082535270171115, 0.03253228655450045]}, 
                 "AccuracyHistory" -> {
                   Around[0.5430443847808393, 0.028668093762756464`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7650136930469386, 0.02768067361508613], "Accuracy" -> 
                 Around[0.48019811644458243`, 0.04983572089998976], 
                 "EvaluationTime" -> 0.001, "TestSize" -> 100, "ModelMemory" -> 
                 58320, "ModelUtility" -> -1.475933405833133, "TrainingSize" -> 
                 1500, "TrainingTime" -> 0.31622776601683794`, 
                 "TrainingMemory" -> 1247976, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7650136930469386, 0.02768067361508613]}, 
                 "AccuracyHistory" -> {
                   Around[0.48019811644458243`, 0.04983572089998976]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6943409991677923, 0.014965877395248057`], 
                 "Accuracy" -> 
                 Around[0.561131946601414, 0.034750767918162444`], 
                 "EvaluationTime" -> 0.0008971641173621407, "TestSize" -> 200,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.275853572127836, "TrainingSize" -> 6400,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 5259824, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6943409991677923, 0.014965877395248057`]}, 
                 "AccuracyHistory" -> {
                   Around[0.561131946601414, 0.034750767918162444`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0008971641173621407, "MeanCrossEntropy" -> 
                Around[0.6943409991677923, 0.014965877395248057`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 5259824, 
                "TrainingTime" -> 1.0398853237511996`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[5.336647850728896, 0.36068712069811965`], "Accuracy" -> 
                 Around[0.5024294349066933, 0.0248695052463899], 
                 "EvaluationTime" -> 0.0006067160701578375, "TestSize" -> 800,
                  "ModelMemory" -> 101776, 
                 "ModelUtility" -> -5.448767728963984, "TrainingSize" -> 60, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 466312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[5.336647850728896, 0.25504430893229113`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5024294349066933, 0.017585395804476718`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.395254081510527, 0.2636823302345111], "Accuracy" -> 
                 Around[0.5120123226523718, 0.0234277851101865], 
                 "EvaluationTime" -> 0.0003657588822781302, "TestSize" -> 900,
                  "ModelMemory" -> 101776, 
                 "ModelUtility" -> -5.057623282997858, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 449864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.395254081510527, 0.1864515637878934]}, 
                 "AccuracyHistory" -> {
                   Around[0.5120123226523718, 0.016565945719594098`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.7123544820761034`, 0.13403435224689797`], 
                 "Accuracy" -> 
                 Around[0.5084268891408583, 0.012653320565552788`], 
                 "EvaluationTime" -> 0.0003112992814000049, "TestSize" -> 
                 3100, "ModelMemory" -> 101776, 
                 "ModelUtility" -> -4.710441062822905, "TrainingSize" -> 300, 
                 "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 609408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.7123544820761034`, 0.09477659938572791]}, 
                 "AccuracyHistory" -> {
                   Around[0.5084268891408583, 0.008947248776429577]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003112992814000049, "MeanCrossEntropy" -> 
                Around[3.7123544820761034`, 0.13403435224689797`], 
                "ModelMemory" -> 101776, "TrainingMemory" -> 609408, 
                "TrainingTime" -> 426.61925636183213`|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9772157046775556`, 0.13581894617227097`], 
                 "Accuracy" -> 
                 Around[0.5389145423524775, 0.032667788227125474`], 
                 "EvaluationTime" -> 0.0011926944888579786`, "TestSize" -> 
                 500, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.4138357231641834`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.7398712713095854, "TrainingMemory" -> 
                 495850.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.9136618132284036`, 0.15910112168950888`], 
                   Around[2.0407695961267076`, 0.1828723532202185]}, 
                 "AccuracyHistory" -> {
                   Around[0.5629044647415045, 0.028546074102659743`], 
                   Around[0.5149246199634504, 0.03520786949066581]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5060030000016982`, 0.0762277367998304], "Accuracy" -> 
                 Around[0.5108061573487391, 0.021242376364000302`], 
                 "EvaluationTime" -> 0.0005033741400803688, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.8442108215676183`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 331888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5060030000016982`, 0.05390114960566341]}, 
                 "AccuracyHistory" -> {
                   Around[0.5108061573487391, 0.01502062837550145]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7977308963856519, 0.017958879984400503`], 
                 "Accuracy" -> 
                 Around[0.5198102928930833, 0.018813825700028396`], 
                 "EvaluationTime" -> 0.0002522007881460126, "TestSize" -> 
                 1400, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.5621645973540725`, "TrainingSize" -> 
                 300, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 488784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7977308963856519, 0.012698845819484954`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5198102928930833, 0.013303383732551823`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.9005007280304554, 0.01928736459464073], "Accuracy" -> 
                 Around[0.5116882414317593, 0.014054614630122458`], 
                 "EvaluationTime" -> 0.00022342992002993283`, "TestSize" -> 
                 2500, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.8040882066127115`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 1247008, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9005007280304554, 0.013638226296087786`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5116882414317593, 0.00993811331192325]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7378143308977289, 0.009837881481838047], "Accuracy" -> 
                 Around[0.5159252601229434, 0.01758436348600896], 
                 "EvaluationTime" -> 0.00026528550640207444`, "TestSize" -> 
                 1600, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4023480501756207`, "TrainingSize" -> 
                 6400, "TrainingTime" -> 15.848931924611142`, 
                 "TrainingMemory" -> 5132792, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7378143308977289, 0.006956432708317243]}, 
                 "AccuracyHistory" -> {
                   Around[0.5159252601229434, 0.012434022663806055`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00026528550640207444`, 
                "MeanCrossEntropy" -> 
                Around[0.7378143308977289, 0.009837881481838047], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 5132792, 
                "TrainingTime" -> 20.551036177073513`|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 3|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8504246557068951, 0.03456369763589451], "Accuracy" -> 
                 Around[0.5052444789378114, 0.020712022598502206`], 
                 "EvaluationTime" -> 0.0019788154677706244`, "TestSize" -> 
                 600, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.8213692724409116`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.31823455345103524`, "TrainingMemory" -> 
                 374258.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.824875474343529, 0.060281106384565075`], 
                   Around[0.8759738370702611, 0.02523607671840339]}, 
                 "AccuracyHistory" -> {
                   Around[0.5099010867416123, 0.04986506998824596], 
                   Around[0.5005878711340107, 0.022070153241840747`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8062319824862548, 0.020285885289562305`], 
                 "Accuracy" -> 
                 Around[0.515964389042883, 0.022225370577872813`], 
                 "EvaluationTime" -> 0.0005213800977277434, "TestSize" -> 
                 1000, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -1.6398002924978214`, "TrainingSize" -> 60,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 390792, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8062319824862548, 0.014344287050621934`]}, 
                 "AccuracyHistory" -> {
                   Around[0.515964389042883, 0.015715710249997843`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7654719873182969, 0.053726477929544166`], 
                 "Accuracy" -> 
                 Around[0.5495050471376519, 0.07018711638589603], 
                 "EvaluationTime" -> 0.0012589254117941673`, "TestSize" -> 
                 100, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -1.5773068801573673`, "TrainingSize" -> 
                 300, "TrainingTime" -> 0.31622776601683794`, 
                 "TrainingMemory" -> 494896, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7654719873182969, 0.03799035687325006]}, 
                 "AccuracyHistory" -> {
                   Around[0.5495050471376519, 0.04962978594839653]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7195144931819312, 0.011214730425127868`], 
                 "Accuracy" -> 
                 Around[0.5165493962850172, 0.028763129056291255`], 
                 "EvaluationTime" -> 0.0006763548383445635, "TestSize" -> 300,
                  "ModelMemory" -> 93800, 
                 "ModelUtility" -> -1.4083963568714621`, "TrainingSize" -> 
                 1500, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 1320136, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7195144931819312, 0.011214730425127868`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5165493962850172, 0.028763129056291255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7046672357847844, 0.005094293794240658], "Accuracy" -> 
                 Around[0.5115961491854504, 0.0203070682427604], 
                 "EvaluationTime" -> 0.0005772628953760101, "TestSize" -> 600,
                  "ModelMemory" -> 93800, 
                 "ModelUtility" -> -1.363359032925588, "TrainingSize" -> 6400,
                  "TrainingTime" -> 1., "TrainingMemory" -> 5246704, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7046672357847844, 0.005094293794240658]}, 
                 "AccuracyHistory" -> {
                   Around[0.5115961491854504, 0.0203070682427604]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005772628953760101, "MeanCrossEntropy" -> 
                Around[0.7046672357847844, 0.005094293794240658], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 5246704, 
                "TrainingTime" -> 1.5682345534510351`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.396665212075611, 0.293356932485822], "Accuracy" -> 
                 Around[0.4987867113666298, 0.03487871301060356], 
                 "EvaluationTime" -> 0.0011116557830102064`, "TestSize" -> 
                 400, "ModelMemory" -> 187408, 
                 "ModelUtility" -> -4.665091745529747, "TrainingSize" -> 10, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 768352, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.396665212075611, 0.20743467626880893`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4987867113666298, 0.024662974488857237`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.0291560418099337`, 0.23894728246837124`], 
                 "Accuracy" -> 
                 Around[0.4840381000395967, 0.03145165002891556], 
                 "EvaluationTime" -> 0.0008628130329390658, "TestSize" -> 500,
                  "ModelMemory" -> 187408, 
                 "ModelUtility" -> -4.422144698787109, "TrainingSize" -> 60, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 784864, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.0291560418099337`, 0.16896124377948274`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4840381000395967, 0.022239675014952266`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.5402088610352953`, 0.15664315690548955`], 
                 "Accuracy" -> 
                 Around[0.5010124876660427, 0.02343402627789678], 
                 "EvaluationTime" -> 0.0004903749834341922, "TestSize" -> 900,
                  "ModelMemory" -> 187408, 
                 "ModelUtility" -> -4.063277491411416, "TrainingSize" -> 300, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 876296, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.5402088610352953`, 0.11076343847434002`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5010124876660427, 0.01657035889160456]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004903749834341922, "MeanCrossEntropy" -> 
                Around[2.5402088610352953`, 0.15664315690548955`], 
                "ModelMemory" -> 187408, "TrainingMemory" -> 876296, 
                "TrainingTime" -> 54.20699506583679|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.729325492032915, 0.2857501060861153], "Accuracy" -> 
                 Around[0.4989761337238718, 0.023371298467730898`], 
                 "EvaluationTime" -> 0.0006597343547122816, "TestSize" -> 900,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -5.28261280979838, "TrainingSize" -> 60, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 604720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.729325492032915, 0.20205583773826744`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4989761337238718, 0.016526003631667285`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006597343547122816, "MeanCrossEntropy" -> 
                Around[4.729325492032915, 0.2857501060861153], "ModelMemory" -> 
                164368, "TrainingMemory" -> 604720, "TrainingTime" -> 
                405.96165923809065`|>, "Index" -> 11|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], <||>], "MaxTrainingSize" -> 
         8000, "PreprocessorEvaluationTime" -> 4.*^-6, "PreprocessorMemory" -> 
         53640, "InputDimension" -> 20, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6931276589448779, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869657172776468`16.340247480130678*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 7.5280590945994925`, 
             "ElapsedTimes" -> 20.908300000000004`, "ExperimentCounts" -> 
             17|>, <|"TrainingSizes" -> 60, "TimeBudgets" -> 
             10.754370135142157`, "ElapsedTimes" -> 21.385105, 
             "ExperimentCounts" -> 11|>, <|
            "TrainingSizes" -> 300, "TimeBudgets" -> 15.363385907345911`, 
             "ElapsedTimes" -> 28.443854, "ExperimentCounts" -> 10|>, <|
            "TrainingSizes" -> 1500, "TimeBudgets" -> 21.947694153351314`, 
             "ElapsedTimes" -> 21.659476, "ExperimentCounts" -> 8|>, <|
            "TrainingSizes" -> 6400, "TimeBudgets" -> 31.35384879050185, 
             "ElapsedTimes" -> 30.899594, "ExperimentCounts" -> 6|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 
               0., 1., 1., 1., 0., 1., 1., 1.}}, "ID" -> 
              3500106187605339871|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 125.21173, 
         "MaxTrainingMemory" -> 26474960, "DataMemory" -> 4673536, 
         "FunctionMemory" -> 365944, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 16, 16, 46, 13.965212`7.897622518542796}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> CompressedData["
1:eJzVVs0NbTFPfGJDAzRAJfRACZ/EmlYphRJYIo40ml/nPry5Ook9niT2+P7r
P/7z3//jn/78+fNf//znz7/8Yfbf//Z/f1V/df+Lj+LRPvtmOC6eex/MXL4q
jnovLj77ZfnT93bfmfmp50nrtc3D8NJ8btw1rhrH1lF8i3f1/ghftTaufc+V
tXVxPZdYfjVv2lervlzncXG//ize9XfrcsVXxUvPvbqPlY6q++r7rOaNe270
rVqqD6u5tu5vZqu50N4b81/d+5Uup/xVa997pR/Xepy+v5qXxTH81VxkPNK+
UXGRverja31e13vqd3UPKH+6//VrdQbhMT/1241r+1S19r4Yn3buvK5zllfd
ZzxUv+t5h+LS/x3X9ZHyQ9bmUW3V92q865/yQ3lU3FV8qhtqfreeGI/WX+2b
dp6v5qGKv5qHal6Uh/mreMjv6v7cPCx/2w8qHuOj4rPvtI7T/kHW9t3Ve7X5
EN7fpqtt3a3iU31rz9PqJ7N0vqT379Yf82N51/MTxbm4KL7Vw/bcbp23Oof8
Vfu1viL/Nc+V3rt1nt7j35Yn1WsW7+Ko+2lcq69q/lYfUru65/Vcc/8nrHgw
nNS/1XeWn/FJ373FYX6unqzzf/db3VRxVWv7NdXd9RxU8Vd9gvi0c4zlcX/d
eDd/yhvtf9cRXhrP4tR8CMft6/Q9mbVzvZ0XK91134dZe46ruHTOrHQA5Un7
XV1ned18r+/B1fv0vdC3ut6+s3tuN6+7z/i5ONd10OpEOifb+cjw2rq+xlVt
PUdSPVjtI2vn6Wreu3lbnHX9u34tLvJ3/Va6+7rervSE5WOW5mHxyE/lubpX
1Vo9eh2HcNg647FeZ3nVbzU/y6PiuHqr+q10ub0/tJ7qz/W5rurK1WHV0nmd
vuOqL9S49T2zdZUXW0/91rq+queVrfoP4SK8to5YvhVumk+919X8ZTzb+eHy
WPFq+6p97+s6bvkgXixfey6Wv82b3ssqbjV/27m85nfVT+k8b99dtdU9rvOo
edN5o+Zf1YX7nqs56fJf/Z9w+TIebf2v+vZ1/Cu9XZ0jrWvmz/Kr8e3++vyr
/Kr/Ov5KV9r/By7Od3/9/yDNl+KyPCpumnf1nu57pPXg5lXx1fwsL8JJ57G7
3uZz5xPDRebWFcNZzVOVz9VcbPuxvQ9mbR2479Lqbfr/SLUrnWjn90qPVvW/
ng8t/jdezeP6uXOL4bbzrf1/4uKv7s19xyvdTu9/VWcur/ReU71sv1c8V3lZ
fNuH7nna91b91vrU6m+aJ+Wv7qe41/WFcNI6WO8jnswPxanvx3AYPvJv70nl
w/yu6qp9V7fPWV733Vf9vdKB9t1ZnNtn6T1e1UE6n67mS1pfbb+hb4aT6myr
7ykPhp/iuHatD+l9Mj5pnbn82PrKVv3A8Fd60upeqneqP+O1et/0Htu5uO7P
tD5cfogn46Xa9fxx8du6a+er+16qXztHWf52Lq+/kb1631d64FraJ6v50+pI
+j9A5efyWfFKebi6qdp6Drn47Nv1c+9btfS8aZ+595HqW6u3a74sr1unrp/L
k9lVn6R6lfJXcdV3QziMR1pnbX24+rzqb4aP/Npzszwonq0z3LYeXH7ud9t3
bv8xXDXvdx/FqfnWetr2B8NL/dd1topjfi7vlNfaj/FsdTvFfcWr1Y1UX67n
o5u/zevqHNp353Ebj/yu6md13vb9kKl4zB/hpvqo2qo+1/2X1ms6T1f1nfJy
+a30g+VnvBh+er8qL3Uf8WP7rn6ovFq9Qt8oP1tvz4fW1/MwvZ/2nlZzLZ1z
V/2O/K/7KfVP61T1c98hnTfuPsN1rdU5t/6v4tP5stbxdq6o+Vx85n+VX827
5qHmZ99uP7b5UFw671Qe7TxD1vZdOt9bvXHPsdJ1l4+bp+2fVt/a+lX3kX+r
h8iv1Qn3vdH6SlfaOYvysHXGk+2n78bs9f2o/q2+qvuID+PJrNWH9r3benD5
tfWj5lvNS9Uf8Uv1fvWuDK/lldZV2o+tnqv+yFZ1p9qqT9z+dnHU+lLzsO+0
D1Vebt2m9b7WQTWfyjuNW8+dle4iP7SPvlW/tt/Qeqv363tK/do6+K67trpH
tu/Wm5ov/W7rOa2Htf6ktq5rlkfNq8av7Fr33Tzt/EvrbTUn1DxXc+lXeq7y
XOsV4+XOi5R3us6s1U+3DtN+aevmqo9UHMaP4VzzdfFd3UT77T0yS+vQ9UP7
rr6gvIzPFY/U2j5dvxvjydav5tBazxh+qkupredjq1fteyFb6dM6T3ru1bxg
fszcd1nNr5aP+57pu691xs2v8knn3/Ucdecni0/1bnX/zFbzxp3TKa+VPqbv
7dbh9fun/dyeR8VX86d5VB7X973uR7be+qX76bt8/a51WI1b/V9Y3fOV7qfn
dfO4eVW8dd2leoXw1Dh3va0/V98Zj5Ufs7YuV32w4qnmR/7Mz91v64fxc9+F
4bn+7vu6+2l+ZFdz1Y1n6+n9rOaH259qvnafxbW8V3ML4ar+6jrLd90naX+r
8SovFn/1nulcYnalr24e1Z/lX81h99wuH/cdUz2/7s8WH/mt9AzhXedDfut5
19ZnmpflV/m4turztO/WcyfVHWQpL2ZtPV2/P9u/vk83z1p3GU7bx27+lc6y
vO17t/Xs8lufk/FJv1V+6vqrPOm7rPiqfm7fuLbWe7bv3qvKaz2f1Xjmp5qL
t643lPdKL9d15/JczTmEr+KlfNz1dj6s+gN9q/lX94D8VvdzNX/c3zTvd/9r
rf/1HFTv5euv8mjrRf1mPJifiqvmcd8jfXeXlxrH8FreV33I4lP89LxrnU5x
03Oy/Gn/tH2Z6nnLm/Fk+6murc6xrjfGT8VZn2/9vqu5ufK/wvnGIbuKW/dv
G8e+V3rr4ro6uz53mmc9Z9K8Lk5ah25/qnEIR/Vb4a7fcYXfvueqv9K5qFpb
P+u+XZ3vuh9S/WN+Kx1qebl91d5v2lfrc6k4bL29RxU/xUOWxrF4975bXWl1
+FpvV3goPq1H5I9wGb7br20frOssnctpPbb6z/wYP5UHspWO/S34bh+19b7S
t9U8cnm0989spZ/XermeR2q+775qri65+18/t/5YvnZOMXyXx/qc7dz+7re2
muur/xev5r7Kh+EhXLau8kzzrf8XrHRxVSeptfOSrbN8K337lV6t9WhVr259
qu961SfIH+G5/NI+bd+R4az6pe3H9h7SvmU4aR2otp4Pq7m30qN03jJ/1289
d9l+Wwcqnru/1hmVB8qzrks1r5vvat4xfun/iHbOuPW4mutufSC/tP9Uftc6
p+Iyv9U8us7n+q/qzcVH/ipvtr7qT5VH2ueutfju3F7rGbL1HFBxXP6trrr3
kc63FCfFc3HVvKv86TumfNu57c659H8Bwkl1O9U1xoPxY7zc9VRXkKV6tta1
tj9W+ZA/W//uq98qLvJL58Kv587XVn2zmnvpPGP5rvBZPNpf51nXJ1tnuC6O
y0Pt9/aeWdyqHt17VvOxPOn8dN9B5aPmZX6que/F9lc67L5TG4dwkJ9qq/tN
+zbFYfGunrH1tI8Qbvv/Q83T5lfx3LxunbdzD1l63rUeMEvPz/Bcv1a33DzM
T91vz4n81W+V32qupPncuDTP36I/q7pk+dH++lwpjxTXrVfV2vpEeGqe9hyu
rqf+bb219afm/a63c2PNB62v5m47z9j6WpfUOGbu/a380r5o51X7f2E1P1JT
z5Ge2+WR7iO/VpdWdeLuM1vNq/Ze2/9V63mfzpv1O7Q63vJP8zIeq/tf6831
vE/rEdnV/affKj9XF936XcWr5uZX41P8lc66++450/wqfvsebD3VIebn5m3n
D7O0jtl+ep/om/mnfFoeanxbv65+qPlV/oxPip/yTPmq+Vb17vJN3x/ZSn9Y
HItX9aC9T7Te9g1bR/Zqbqb9w/Dd+PU8VPFfzS81bjWfkV3pyFW9pt/p3FP5
pHNgpVOM7/pcaVyrP1f6zXi466v7QrxcPJe/u56eW82DrO1Hhqfma+Ov6iR9
n5RH+s7IWr1GOIzPqu7cODef+t3iuTirueDiMV7tt3uv6v5ax1UclweLc3m7
+rXOm+rZVb2m99HiI0vf37W2TlW/dP61eqpayqN9X/a9wme47fndvKq588aN
V/2v9RDhobjWT41P9dbNi+zq/VNdde97NQ9RfpZvFef2r3tuFsd4sf10TqQ8
V3XrWvr/Y+WX1knaLwgvtbXeqLhu/lR31G93veXrfrfz8+p+0nnE9t2+Ui2t
H4a3mmdsfTU/XP1DOC4P1T+t31avXZ1h5tbFqt7X9bjW8zRPi6eup/EtfvqL
8FleZKt3Xuufmp9ZW3cMd1Vfar42jvm588L1S+eWW4frfv7us++07lp+Kl/3
nCxevX+Xp5qX8US4ahzzZzhuv6j77Zxdx6XryG/d1y7+qt5dvqmteaTz8upc
K15pXSMcZm39rvKr8dc6qMYxnLbO0jnB8BC+q2eMJ8vv+rX1sPJr53Y6d6/0
re2PtK5Q/lXfsO9V/bP1FQ8XJ+W3OvfqHVK+zJ/xVW2l/6murNbT91jPjbQ/
XR6pzl/pYdt/7nx18Vb9m55TtVU/Mly2/t1ff7fvkdaNays9T9+z7dfvOvpW
ebA8Ll7Ks63n1fxt49rzuf2r5nd5Mn81j8sP4az7a6XDX3y2vv5/4NaJ6rea
Lyouik/vS7WrfGn9pXxSHLTP1r/m3kMaz3DTerh+Zzcfw2+t1Q0Vf6Vnaj6V
z9UcYHbVR2mdrfcZb5Wfqzvpe17r6wof8Wb7bf9d9en1/GrnHfNDdnUOxufq
Xtx3Xvef6v/dT/0ZT4a7rrNU/37F050DqzpL64fhq/lZfHo/KH6Fx9bbuefa
63mQ6k37vmqfp3ql4l7NAZYP7bNvt6+v5oR7P+l9pvNA5eHmS8+t4iE/dX2l
O209tfnRvsqjvYcWr53H63pI9T2dK8hfxWntVV+l89XlwfKh+JS/ipeeQ+XH
/No86/OouOu5sdLt1bxd5VfXr+ZPeq8In+VN60z9Tv3aOdbWibqf4rvvkPq7
8StdTu9LjU/nIMvT4jEclQdbZ3lW822ll8zaPMhvpTvt+7D9q356PYeZtXxW
/df+P1DztTrC8qT+rU60++28Teul1S93jjI+zB/5rfsg9Wc4Lq+0Lxgftp/q
BcNP7zvNp1pan63f6n+Kaldznfm3eoTw035mPNy8q33GE327fFe6ouZ3+bj3
o/K4/v+ymifuu631vcVx+9091+oef6UbCFeNT/V0rf/pvSGctG5W79D23Ypv
+z5rPUj7tp2TrbX1iNbTekjnVrqv+rvvmPYL49XOh1/Nuat3Ws2ltp/a+bKq
m3QOt7rZ8mN47XxY8XPn3qo/Ea5rbX20ffwaB/m775fifONUXi6Plh+ydO4w
Pmpe1Vxd+X63/erqxEr32z74rqv8WJyaL53Hq75V8dO6Xc2tdn9VbyiPmv/r
x3BX/cm+V3MBfTNb83bvCe1f3zPLj77VOJQ/tV/hM79Uh1netp7S+/rbeKq2
mpcu/nqOsnxon+Gv5pfLN+3LtV6l98FwUZ7VHEfraT1e1W07Z1yc9RxL78/l
hfBcHi6OGp/ifC3tH5bXzee+20r/Wl6r+l/pgauz6Xnad0jzqTirvkV5mP/r
d0vjfvXeKr7rh/K1cyI9f9sPr+vTjVPxkKl13M6pb1w759p7de9bjU/ztXWw
0l+Vz1pHGP53383L4pm1+Ot7YPnQN8t/VU9uXsT/Ki71X9cjw1H9rupnpQuM
T9tfyF/ltdLJK1vrhhrf1ourt4xf+u4s75WeqTip/+t5w9bd+HR+uThr/W51
v51XDF/dT+eri8us7V+U19Xl1Tu1c83FTf1YPLLV/FzxUXmxOHfeofj1HGnf
Q+Whrqs8GD81LtWjNm41B9Y6oNp6nl7VlRqX4q/zuXqU6nb7TiqfNN93X11n
vNr4tk/Wc7btq/U8eKVTqY69ru9vPFtvz5HyvarzFR+Wj+VB+yp/1VZziMWt
64PxaOuk7TeXTzt3EG91Pd13/VjcSp9XPFz81T26eK/1XdVLZKs5sp6jqT6w
PCqO+15unPuOqt9KV9s6Xutoeg8r/W7x0jypHqa6w3itcVb37N4L80OWvjPL
095v+96upe+zqgfkj+Je6wKLT+8jzcvw3ftZ3x/6Zvir+0r7Mr239Vxj8QyP
WTp/Ur+vv8rP9Vud3zX3XVlcip/qKsvn4qTnT+Nd3Db/ej6u5tRKr1sda+c8
Mjdvqg+pveLT9j3yS+v5+n9AyzPFYd+r+l/dr/v/YH0uhqvybS19j1RPr/K4
OpK+N/u+zn81N1L9bftTza/mdb9X99G+F7KVXiFcdz/VvfRdV3xcHmp+5r/S
Bbf+VD7M311f9S/Ddc/L8rh527m10ovVO67nAopn627cSh9X/dPO6XSeruYh
+v6aq6Mr/9X9r+YCy4vyqXlXuro+H8qnrl/rYYvn9i3bv9atNS6KU83VMRe3
rQtXX1a6xfi4+Ku+VM2t++/6qg6v9PrVXFB/vzjqdxq3rq/rPnPN1X8Up+Zx
cVe6vJ5v6XxJ37+dN4yXiuPyW/dbWq+Mb6ozDP+q7pildbfSd/ad6t3r91fj
VEvfo9136zvtO4aL8rB1xg/lUfm5+RmfNS+Wn8WnutrWIbK0ntp+b/mq/mpc
e/9tftWu9KjNr8at+TA8l4e7vroH1Z/hXM8DZu08fD3XVzireZT6o+8U18Vj
fFx8dz/tE1eH0vtl/ipfxoPxad8L5WF5VfxVPTB/936u5mSr/+s6WOnHqm/T
PkQ47flavPWcY+uunqz1uD2nm6d9f/TNeKTfbT7m1865dv6j9VW9q3nTukt1
DeVv37nVVTefipvqqsrH1a32f8dKt9fv2J7f5efipHOk1ef0/0lal6nup/8L
Ur7MVnM07df1HFnjtDyv6sLl6cat9Q7lZesMP9Wj1Ry7uicW59aHG9/qG7JU
b1QcFr/Sufa+Wzw335UuqHXc3oNq6dxx38HFdXmqeRke48lwXZxX9cksrU8U
3+pmWlcqT5bPfVeVTxvv8k31lVl63y4/dR35XeMzu8qT1h2yq/pZ6x6ydg67
95bOTZTvV++p4qzqU8VV49b3o+ZJ52pal6mOMpz2/wXKl+L/Sm9YvOrn9sV1
PV/prGttHvVe03dXeaj8Wn1EuC4Pxq/db+fy1w99IzwWn+KsdFjFTXHS+ani
pTjIPz2vipP6rdbXOprWSzp301/Ep+37dd+l98Lw1HwMF9mq3xlP19r6RHxY
vnV9qvbKv53XKH/bv4w3ilf9W7+2j9J+Zv4uD/St4jA+La9XPFocZKv51+ZD
+dm6m6fVk3SuqfjM1nNuNe9cHiv81f2nOOzbrSdmK51g+Ks6YZbq76ov2/dx
+al+bj2kdZvut+/Wnpvhpn3C8qC8Kn5bl9fnS/vO/b7WlzVfhN/mY/Fov8VB
tpoXjM9Kr5lfyrPVg/Z86rebn8WxPMjSemQ4bR2uddKNX+vaFzetF9W/nXMs
76v/CWp82g9tv6T6lM7R9p1VXHe97eP0ndo+WP1PWJ3frYOrulnzb+crM1dX
27pwdZWtr77bd0X+zNp3XPWpioviW/2+5qviMLyUd1v3qt96nq/6ta2D1f21
8wPFtfpwrRereZeeczVHV3GruZr2P/Nb6YrblypOe9/IUl5pHyPcNL6tI/bt
9oWa92/V25VuofW1zjA+Ll/VP33f63nkrjP8VmdZPpUP+17NIcYvnRsqDsuP
vllcm4/xaOdp+pvisrjvuurX6hSyVb25/m1fqfmQrXUh1b1UH9x4hOfGqbxc
Pzcvi0P51Xxtv7Y8WPz1vGnrWd1n5r4H+251xeW30iW0v+K30q92DjLc67mg
5mN4aXz7jXi4/Nq6YjzavIwHszSfirM+n5s/9Ut5pfNS9X+ls26fXt2rO4/a
umnnOftO32/F62ur87hxKQ8U53638xPtp+db6b7LI9Xtlf4gU/OnvF089Rvx
UPdb/U/zoDgVj8Wv69bN4/Jc6YNa/9d6m9a5+t7I2v5T+azx0T76VnmoeGkc
W2c8mR+zdD6097/W9ZR36s94tfqJ7EoX0jpw+aZ5V+da6zLKh76Rted1+aR1
uNJBhp+e91c80jmo+qV6pr7vWv9XPK90qz0H2k/jmb/7fqq5OqjmbeutrWc3
L+Lh4rr3keZh663OtPfc8lL9WTzj1epzytfFT/8PuHXZzsuruJZ/OgfSd27f
28VTebnxbr2357jyQ9/MVvN3PReu/te49c5w0D6LV9dVHmv+q7nh9pXKF/mp
tp6LKq+2flyc63dY3/v6HVC8y8+tF5eH++6t31qP2nWVnxqH8qXvl75/O8fS
OdX6r3UkzYvirt4xfa/Vd9uf7fu4c3b1Hmq+FHelh6k/slXdX+Vx99V8ri4z
P7cO0r52cVHcWkfdOamuu/lS/XLzun2m4qv51Hjmh/ZT/ULr7bxjfFWeaL3V
NXUd7af11N4Xw0Nxaj+sdLadkwg/zYfiEL6aV+WTxqv4bV70rVpbz6s+UHml
utzWYVtnqqXzUt1vdbftfxVXtdW7tfnWfZDqpBt/pafreHWfxa31nvFq9Xyl
z1f6jfK08zytD5Wn+52+b9t3jMd1fah+6/8R6T2yPCxfy7PNn+o9w2V5Vv4u
P3c/xWl1SI1j+dt5sMq/uh9mKm7af24+ln9V36keruLaemHryC+t5xZfjXP9
Vnq56oNX+AjH5aXyvqqf9J7cvKtzsXVkq/pW49T86/dueaI4dT/Vk7ZPVdy1
fql+6/pO61XFcfkwv9f6u1pP64b5recui3d5MT8VX82X9g/yV/kznPT8qq3q
Fvm152b+1/tp/6TnuKrnNa+27hhOOt/cPMx/pU+tTq7yue+60jWEr+Kt5pfb
b+m50npT87/SCcYnnUurd0nrAuGq3wxnpRvtt1vf7dxX+bQ6mc67tF6ZufW4
Wmd83P2VPq7WkaX9k/4iHLbOeKt8kV+6ruZtdf9ap1W/lkdbTwinxXOtrZOW
V6vD6flX79/q7/X8S/Gv5hDK0/JL91c65tq6b9P+YX7pXGW83PxsvdVtFXc9
r9v6///2viudSvUhPadq7nnS/wMpn9Sv7QP2veLH/N3+TuOZP/pmpvJk8Sqe
msetY8Zv1R9X8+h1ntaPWTs/2z5w8RgOsiv+r3T2V3rqrrt1mepi+06r91jj
IVv3Qapzq3tO35ntt++2fg/1HtI52+ot47GeR1d15/q/7usVHxSPbN2v6/1X
uod4uPla3Vrdv7qe5k31KM2H/Fxr+4/hIH/Eg/mv3vtvw3X7ZD0X3e9X82d1
DoR7pYspD/f+1bwrHLS/0qW0r1bzcq2vLJ+aZ8XD7RPGo+331ZxwdeLVfHH5
IUvr3L1flE9dZ3gMB+2nvyku47/iy/JcnRPlY+vM1nM5rV/Gr9UBhveqHhhv
lS/Kp/Jo9ZFZq8upjq3qA8UzPxan4q30C/m7eFc8GY7adyjO3V/VX9onLa+r
vOm3mq/tL/X8af2yfOl9qnnUdTcPW0d2NT/cOl/X40pn2ryrub6ahyvdXtdH
qhMsn6sn7b0zvDTvSgfauZPqi7u+6iMVX91neIwfWk95tPPy6r5aXWr7ipnL
t72/dD2da62+Mzy2vuLh1g/Dc/OpPJm5vFleNd9aZ1ZxLt+279u6SecM+nb5
rev06v0QPotnccwv1SfVP72fdJ5d65ya3/392us6RNbeK+Pjmjvn1LxX9cD2
fzUXXXzVP60X5nfNj+Gv52+qX9f17tYhw1fzrXi67+TmQ/6vvl1bzxs1Ls2L
8rU47vuluoT80/mt5lHzr3SmfZ9r/BYH+af96vZ1Wmeq33oeq7zcc63wEP71
O7j9tq5PxsPFSfms9dnlxfilfND6WidSPm09qrxW7+jWoXsvDMfN1873VG9b
HUz7YNXXjI/ql/aHm3+tC6v/De47pDqPeK10w8Vv9eS6X9J7b+u6fQ/Vz+1T
tM/wV/qZ6sOV3rS8XJzV3FrvM75XPL5+jF/b1yyfyrutY9Xa+XCVp9VDNe/1
vET7LD/yd/O1OO59q/mYf/p/IO3f1f1fvWc751Eel4e7n/qjuNV5Ux4p3nUd
tLae8+u5jPzV/df/M9r3ces6rcf0fVxr/++84qfyUfHa+07zqnEuPxTn4qV9
1OpC2/8ursqznWvp/wWX30o/1vNhNbdSW88Ptu72T3vetA9XOp/yUXHc+FXd
r/1dfq2OI0vrQMVN50arl1ffK51s34n5Xdc149Xqq5qH5WPxa91t60HNs9pP
87v31upMytutB4Sf1nnKa63nbn266yoPl69qrZ6v6mmteyierbvx7nert+o6
ysv4rO5pldfNs5pD7np7DrSv8ki/VVvrXnru9j1QvlSfVP/2vCyO8VHzufxc
XqvzuXXF8FO9cfO6+VX/K/1M5zrzS3V8pcOpjrj9up5Tbt6UJ8Jxean5134r
XV3PlbQO1HtQ/Zkfy9Pe01p/Ga5bJ258+j6r+2r16lXfIT9k67nW1g/zZzjM
VnOi7aeUr7ue9g/DQ34qj6v7YH4pjorbxiGc9B5TfU3vB5l7/rXutzzUdReH
+ad9c62P6Rx091FehKNaqmsqXrrP/FXdcf3W8yzVjVbPkB9bZ9bWr6rj6/O3
fFG8a62OqDxW84r5t7rhvn96D6u+bus3rRtk7Ry/muvpPbm81nWn5lm9Y3pv
bjzLy9bTfKt5v8631g1kK/1jltZr2p9qfhfPrXeVh8pr/X8B4TDeKv5K91fv
p/JI3xfhqeuMD4pf8Wr323pL7z/VzTbPGl/FQzjpPFPzM790faWjK31ezZnW
P333tO9UHmrdrd55dZ52Pqt47f+WdP6zdZQnxVv9/1DxkL9qrR5d1c/V/xmU
R11Xv9k6y5fiMPy2LlP9YXxcvmleFp+ut/Mx7du0Tq/n8vW9MWvPnf5/WP0v
YHlYXPoeLJ/KJ+1DZK5+sbwp77YP0vpv+wvhMHzX37X0HC4e8lvVE8JV193v
9H9DWpdt/vSeGV7q39Zvq6epjjM+KX5r6/pu863n6+r/Q8p7XacsL/Nz5wfL
1+J+/VPebB3ZWvfVdfeX5V/3jeq3Ogfjqa4jv1VdqLzU+FYnXFPrgn2v/xe4
+KtzuHzUfKq1/ytW95HyWvV7Gu/2mbq/OnfKh+VR8VSclJ+63s4R1dr6bOca
4tPWGfte9+n1u/1K913/q/e91sl2Xq308JrXCj/VGxSfzsX2fhCf1N/t71U+
NR7huedRcV1Lz4P23Tmbvl+7z0yNT8+t5m3nqYrv+rvf6T2kful9qPEu/tWc
d/t+fQ8tn2+cO5/buZ/isHWEg6z9f7LST9e/nWvt+7m6wmxdLwiX4TFL753l
TedxitfWSVpXCEddRzgpvnseNT/zW8/z1T2rlr5z+45XcyTNdzWH1PhX/dnO
IRXXPb8bp97nWj9dPXHrdzVvWD5kK31J66J9V5WHyjN9Z8YX+aFv5tf+pnwQ
D3Ud+a3q56ouWn8Ut67XVrfa+cPw1bwqLltPca/6+HqOrnVJzdfWZ1vHKk+2
ruL8LX3S1mdblymvlB/Daesqfd/0vGlehufmU9ddXDcu/Wb503ty/d13W+lT
is/yrfOn75zqVsoL8VHX2/dn/szcPmvx03tn+6l+qTyYH+On+qv8Uj7Iv9XV
dE6kc/Rr7Vxc9an7vda99BfZql7bvljpdltP7n7KS83T8lbjr+og5X2lP+7+
19L7RubqgWopzvo+Vjri8k/tWvdW8e69sLi1Xq/fbz1PWf5WD690Z/UO7RxB
fN06UuNQ/Fq3V/23qk+3fhiP9r4QLltX86W6xqydh2h9rYPu/bX3ttIhhqfm
b3Vnrdtpfa/uB+Gr+Vxe6bfLr52P7jna/nD30znN8qx00X0PNW41f9t3anWA
4av53XztPvK/ngto362fFNfN5+6reVs9SPfbe37t186ha1wXj/kjP7ae8mrn
jYrX6nfLt9WF1A/Fpbq27if33Rg/lIfxTPkxnul6my/tp/R9VnWl8m31C+Gs
dNzlkdqVPqK4Nq9qbV0hPMZrXcdrHPe7rW/Vb/U+61+WR11H3+76ei61cYgn
45Xei3vP6X0xv6s5yL7bvnDxr86BeKZxqznG/FL/Vt9QvjS/i6euq3yv8rb1
iuxqrrW8WJ6031zc67mk8lL5IPz2PRk+80vvT/1GeK0+reZtev/reel+t/3Q
6qcav66f9nvNe8Wf2Vr/GH7KB+Vv9THFXd1Dqx8Mr9XN9F1dPWnfx72v9F6Q
uTq9mstunKsX6Zxo5yfjk/bFOp/q3/ahyhN9s3zruFW/rPTItbbO03m/ynd1
/2z/SgfU+2WWvhPyX+ltO8/YOrPVHF3Xa6szzK/tRzWPus94tflS/ut5v5p3
bR+8rtO0fpn/a35X9Z/q4PWcXet2q2tuHaRzfqVXbT+69894rOZnWs8svtXp
tY6r+tz2kZpvNb+QvdIdNW/6HiyPy0PdX+dr817r4kpPWF43LtVHF899N5SP
5UXW6gyztB/aPmrv9bpfrurbrQu3jt18zNp57L4Tyruq/1ZHUvzWrnQIxbf9
sdarVT25etT6rfCRfxrX1kU6J1j+dt+9T+TX6kdbly3+q3dEcSofNV7lx+JS
a/Om/bGuJ9fv6+/aSp/TeLfuVvnRPltv63TNB+G5882tg3Qf5U3f07V03qX5
U91N+8Tl0c6RFY8UP9XndX41nuVz95mt/1e094n2kaV8VBzVH/Fd6fT1+VI8
d73Fd/dXuqjmSedGWjdX75R+Mx4u37b/1fyrOaLiofgrHm19fi2d0+28RHnU
vOl8Y7auF5WX+w4q3ys9QtbmW+lgOyfb+lnVO4tj6y6+i8e+2zwMb60nK1vr
wiofyqvipHWxmu/ML51XCD/Nm+JcxyFbzaH0Xa/yIUvjWP60j9P7X+tE+k5q
3lZvW76t7rX1m9aLyzutx/U9snhkK51p+y59n3WftHPS3Xff261/FVfl6+Kl
7+3OqZbX+l7Y/rqu2jnNcNf5VnO4jUf+jDfCT201L9fzNuWJ4tK8Kp+Vnn/9
1XwsjuVp77W1tl7ae2B+qY59v1f1ms5jFbftz9XcY3lY/FrvUZyLx3DSeb3u
49V8dOvQ5beeL6v/Falep/2zfhcVn9n6/0F6foSz6pure1qtqzxTfU33ka31
1T1vez8qD7Sf4qj+Kz1C+a7yI391f6Vvbf2hfRav8k7rXM2PLNWP6/5S+bT4
Kp6Ku+pXlWeqry4u8l/fhxp3NcdUfixfOzcYD/f+1HwMD32zvGmdunldnHZ+
rOaJmxftX8UzXHd99R7su9WD1TlSvWp5oG/XUj250v2r+avuI3+Vb6qPrh/j
m+ofs7Y+r+dLiuvaSocY3tU9uDxb3XN1kOGhuFW/uedc9YGbB/mrOK0+rPWI
5V3PO4Sb1vd6va0btN7OW7cOW91n/uq+mtfF+/qredx6Vut2je++J4tH+22f
tLqfWsoDxat50L6bZzXHVve/2k/xEA7zR5byVXGu7nOli8xWdc3wV/vrOm95
rHkxU+NXfdXeG8J3+bl4LS5bv+qbVB9SHUjr6Luv4qfv61rbH60uqesrezUX
03pX/dv+c/sjrXvmv5pDa9z23pGl82bl5/JY3yPDZXirb8QH8WP+KC7V/Sv9
cHm6fbXqJ2TpvbRzJ31PdT/VUYbf6ruLr9qVjl3Ns9X8bOuixWHW6nw6l1N8
xp+to3iGu5oLK71c62KLm/JQ49w6v343htf2h9svLp+0LxCeamlfuHm+OOgb
5WM4KC7VYRVPjXf317rt8kzv76p/WB7V342/4u/Gq/2QzvOVvq11es13pd9s
/bu/6uO0T1N9d3W4rYO2n1U89zzIr53/6/yqX/uuzFZ6ubrntr4Yr1bv0vyI
D7OVXqjfKp91/7jxyNI6Unmt+kT1X8eneKu5sNaZtI5W8y+d+wxf9Vv9r2B+
7ru6PK/qZ6XP7T2751/1AeOJ8JAfW3fzvopz+4Xhr/pdjUvfz7WVTql94M5b
1+/q/85qDqT34/JFfuhbjUN5133B8qznWnqOK91u64vZWjfbe1vpcYvP4lf3
m8at9VS19f+H9h5SHDWu5dPe/9WcSfddnq2fywPFq/lbfU/X1f5u30H9dnlc
98HX0r5N37/lkd7LVR8wvHQOo/X23dv/FQy3vSd3/rZ6kupDmo/xYHFr/U7j
VnWY6rK6nvp9/VN9Zzhq3qv/Ay2Pq/e7mpNtH650Kv1/0Z4nPV9b720/fONc
Xu49ML/U/+u30v203tr3bPVvpScpzlq/Vv3Q6k3K19Uj9r2aEyv9VPO098ns
V3qr4iO+rr3SFZeHys/N4+Zn+O47rvKt9913W5275bvW+7bv2vOqdq0P6/5e
4bt1tsZh1upkWocpP7au7qv4yG917jbuNf6rfl3VH+LXzgvmz/zW9bLS1bZ/
V/ePcNl3W08Iz+WD/Ff361paX6qfW39pf3/3VX/XrnTT3U/r+pV+sfU0Lq0T
dZ19X51TzYtwXbvSMebf1m37Lu38Y/urOZfOxbYvVByWX91f9wvLm87Vlb5e
6XB7r2h/raPM1n2P8F1TebF4hov8U/1Jdf5V3TM+qq3yrev3b/FH8eu+auet
W4+qn6tfq7xqPvad9puLg+IRDsNX8Zgfy5/6uXFpHaXxqbnv4/ohf3fd5fNd
R9/Mr+0flsfFRZbWr5sv1Y+1rXXErSuGq+Zl+dp6d+Ou5x3imeops5Sfi8O+
W9129RPtt/3b1kWKw8x9v6u51eZzeaws1U+Gt5r7jGf7/iku82//D6RzDu2v
+mrVb+n9MEvneVqvaz7relzXM8vDcFRr9aPFc83VIzXe1edWd1Rb6/z1nG31
Jp1bKl46pxAu+171D9pf9QP7bu8prUe3ntL+Sr9VPPec6T0xXuv6Zt/X99G+
x4o3+mbrzK+9L+aP8rd63+K49XxVbynP9p5/XUcqXmtX8+yqzhhOq5PXfdvq
LsqL7Ore1HwtL3Wf5Un12rX1PPr6v9LJ9p7bdYaf1mt6LpUHi1fzre4rXV/1
mbvPcNV1NS/Lt9Y95N/W0dW5VJzV+Vf/C9S8DHf1v0JdZ7b6n5Guq3xUnLaP
2/OrPNb6oZ5HxXF5tOdE1uZp64nxup4jK79X+qbyceNZ3CudZniprryuIzee
+a/1hNlKT1Q/t3/ce1npmGrpnFidy41H36q5uOv56e637/PqOzX3/lH8GmfV
522/unXn8nLzMn8V50oPVX6/qndmV++7utdWD9f/F9w49t32m8oj1ZW1Dqb1
0+Iha/vO1YO2/tbz2b13lR+z9lyrc179svwuv+86+mb4aX+yfGkfpveq8kr3
V++5rueUd2tuHbr11sYhHsjaOmW8Wr1M9S3to6v1VV+t+bR9psaptu4XF5fx
UtfV/C4PlLftvxb3qr5XeuPaSs/SuknPtZqj63dneRi/VmdbvPU8SfmpPNF6
+r6pLrU81v2M+LA4t/7Vb9XWOuLec6sLKl83X8vj6l7UPMiv5bvWFfW7jWO8
2j5s6yP1Y3FsfcWr1dUrHIbv9qO6rvJhfsxSvVr1eaqTDE/N5/J61eeMh+p/
lQfhXs3Blieylh/CSfOncVdzPOWT+q1w3Hzse32fK527+lV5rvsznSer+bHi
o/JT8zG7ev8vPsvb8mttNQ++3+08d/vXzXOlL258qw+/0q91nHt/yFY4ap72
XlO9faVXaH+t0yu9S++Z4SC8tB9UvNX7M2vPwfzbvmzvQ8277oP2nCnelT63
77t6j/YdrnXC3V/Va6vvri4znJVOtXOsret2/iFb4bfzh/FJre1Dt27Wcxj5
obg0j3uetv6RtXXs7rf6kOplW3cqj/TcyNZ90N7v1VxlPNw4t05SnPW7u/fn
4qTnWr8Hysv4pH4ujov3as6occyu6lHNy/BTvWbxLp/2ftV8Lv7KP9UPhr+e
T2m9tu+76pP03tP5s9IFFt++F+Oh5nfxvuutfqt4zK/VA5eHyyfN1/Zvqv/t
HPnGMb7IWp29qlMW39YfWk/zXb/rCpdZitPq6ZUutPN0PYddXur69Zxf65rL
y83D4lLdc+9hdU8s/rvv4qrxzC/FYzgofqUfV/NOzY/2maV1rOK29YpwVT5p
P6n51XyrOkn7vNVrFMf4/q/9DxduZYg=
       "], 
      "Output" -> {
       True, True, True, True, True, False, False, False, True, True, True, 
        True, True, True, False, False, True, False, False, False, False, 
        True, False, False, True, False, False, True, False, False, True, 
        True, True, False, True, True, False, True, False, False, False, True,
         False, False, True, False, False, True, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, False, False, False, False, True, False, False, False, 
        False, True, False, True, False, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, True, True, True, 
        False, False, False, False, True, True, False, False, True, False, 
        True, False, False, True, False, True, False, False, True, True, 
        False, False, True, False, True, True, False, True, True, False, True,
         False, True, True, True, True, True, False, True, True, True, True, 
        True, True, False, True, False, False, False, True, False, False, 
        False, True, False, True, False, False, True, False, False, False, 
        True, False, False, False, False, False, True, False, False, False, 
        False, True, True, True, True, False, True, False, False, False, True,
         True, False, False, False, True, True, True, False, True, True, 
        False, True, False, False, False, False, False, False, False, True, 
        False, True, True, False, False, True, False, True, False, False, 
        False, True, True, True, False, False, True, True, True, True, True, 
        True, True, True, True, False, True, False, False, False, True, True, 
        True, True, False, True, True, True, False, True, False, True, True, 
        False, False, True, False, True, True, False, False, False, False, 
        False, True, False, False, True, True, True, False, False, False, 
        False, False, False, True, False, False, True, False, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, False, False, False, False, True, True, True, True, False, True,
         True, False, False, True, False, False, False, True, True, True, 
        False, True, True, False, True, False, True, True, False, False, True,
         True, False, False, False, False, True, True, False, True, False, 
        False, True, True, True, True, True, False, True, False, True, False, 
        False, False, False, False, False, True, True, True, True, False, 
        False, True, True, False, True, False, True, True, True, True, False, 
        False, True, False, True, False, False, True, False, False, True, 
        False, True, True, False, True, True, True, False, True, False, True, 
        True, True, False, False, False, False, False, False, False, False, 
        True, False, True, True, True, False, True, True, True, True, False, 
        True, False, True, True, False, False, False, False, False, True, 
        True, True, True, False, True, False, True, False, True, False, True, 
        False, True, True, True, True, False, True, False, True, True, False, 
        False, True, True, False, True, False, True, True, True, False, False,
         True, False, False, True, True, True, True, True, True, False, False,
         False, False, True, True, False, True, True, True, True, True, True, 
        False, True, True, False, False, False, False, True, True, False, 
        False, False, True, True, True, True, False, False, True, True, True, 
        True, True, True, False, False, False, False, True, True, True, False,
         True, True, True, False, False, True, True, False, True, True, False,
         False, False, True, True, True, True, False, True, False, False, 
        True, False, False, False, False, False, False, True, False, True, 
        False, False, True, False, False, True, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, True, False, True, True, False, False, True, False, True,
         False, False, True, True, False, False, False, True, False, False, 
        False, False, True, True, True, False, False, False, True, True, 
        False, False, True, False, True, False, True, False, True, True, True,
         False, False, True, False, False, True, False, False, True, True, 
        True, False, False, True, False, True, True, True, True, True, True, 
        True, True, False, True, False, False, False, False, False, False, 
        True, False, False, True, False, False, True, True, False, False, 
        False, True, True, True, True, True, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, False, False, 
        True, False, True, True, True, False, False, True, True, True, True, 
        False, True, True, False, False, False, False, False, True, True, 
        False, False, True, False, False, False, False, False, False, False, 
        False, False, True, True, False, True, False, False, False, True, 
        False, True, False, False, False, False, False, False, True, False, 
        False, True, True, False, False, True, False, True, True, False, 
        False, False, True, True, True, True, True, False, True, False, False,
         True, False, True, True, True, False, True, False, True, False, True,
         True, True, True, True, True, False, False, False, True, True, False,
         False, True, False, False, True, False, True, False, True, True, 
        False, False, False, True, True, True, True, True, False, False, True,
         True, False, True, False, True, True, True, True, True, False, False,
         False, True, False, False, True, False, True, False, True, False, 
        False, False, True, True, True, True, True, False, True, False, True, 
        True, True, True, True, False, True, True, False, True, False, True, 
        False, True, False, True, True, False, False, False, False, False, 
        False, True, True, True, False, True, True, False, False, True, False,
         True, False, False, False, True, False, True, True, False, False, 
        True, True, True, False, True, False, False, True, True, True, False, 
        True, True, True, True, False, True, False, True, True, True, False, 
        True, False, True, False, True, True, True, True, True, False, False, 
        False, False, False, False, True, True, False, False, True, True, 
        False, False, False, False, False, False, False, True, True, False, 
        False, True, False, False, True, False, True, True, True, True, True, 
        True, False, False, True, True, True, False, True, True, False, True, 
        False, False, True, False, False, False, True, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, 
        False, False, True, False, False, True, True, True, True, False, True,
         False, False, True, False, True, False, False, False, False, False, 
        False, False, False, True, False, True, False, False, False, False, 
        True, False, True, False, False, False, True, True, True, False, 
        False, True, False, True, True, False, True, True, True, True, True, 
        False, False, False, False, True, False, False, False, True, True, 
        True, False, True, False, True, False, True, False, False, True, 
        False, True, False, True, True, False, False, True, False, True, 
        False, False, True, True, False, False, True, False, True, False, 
        False, True, True, False, True, True, False, True, False, True, False,
         False, False, True, False, False, False, False, True, False, True, 
        False, False, False, True, True, False, True, False, True, True, 
        False, False, False, False, True, False, True, True, False, True, 
        True, False, False, True, True, False, False, True, False, False, 
        True, True, False, True, True, True, False, True, True, False, True, 
        False, True, True, True, True, True, False, True, True, False, True, 
        True, False, False, True, False, False, True, True, False, True, 
        False, False, False, False, False, False, True, False, True, True, 
        True, True, True, True, False, False, False, False, False, False, 
        True, True, True, True, True, False, True, False, False, False, False,
         True, False, False, True, True, False, True, False, False, True, 
        True, False, True, True, False, False, False, True, True, False, True,
         False, False, False, True, False, True, True, False, False, False, 
        True, True, False, False, False, False, False, False, True, False, 
        False, False, True, False, True, True, False, True, True, False, 
        False, False, True, False, True, True, False, False, True, True, True,
         True, True, True, False, True, False, False, True, True, True, False,
         False, True, False, False, True, False, False, False, True, False, 
        True, False, True, True, False, False, False, True, True, True, True, 
        False, False, False, True, False, False, False, False, True, True, 
        False, True, False, False, False, True, False, False, False, False, 
        True, True, True, True, True, True, False, False, True, True, True, 
        True, True, True, True, False, False, False, False, False, True, 
        False, True, True, False, False, True, False, True, False, False, 
        False, False, False, False, True, True, False, False, True, False, 
        True, True, False, False, False, True, False, True, False, False, 
        True, False, True, False, False, True, True, False, False, False, 
        True, True, False, False, True, True, False, True, False, True, True, 
        True, True, True, False, False, True, True, False, True, False, False,
         True, False, True, False, False, True, True, False, True, False, 
        True, False, False, True, False, True, False, False, True, True, 
        False, False, False, False, True, False, False, True, True, True, 
        True, False, True, True, False, True, False, False, False, True, 
        False, True, False, False, True, True, False, True, True, False, True,
         False, True, True, True, False, True, False, False, False, True, 
        False, True, True, False, False, False, False, False, False, False, 
        False, True, False, False, True, False, False, False, True, True, 
        True, True, False, True, False, True, True, False, True, True, True, 
        True, False, True, False, False, False, True, False, False, True, 
        False, False, True, False, False, False, False, True, False, True, 
        True, False, False, True, True, False, False, True, False, True, True,
         True, True, True, True, True, True, False, False, False, False, 
        False, False, True, False, True, True, False, True, True, False, True,
         False, True, False, True, False, False, True, True, False, False, 
        True, True, True, False, True, False, False, False, True, True, False,
         True, True, False, True, True, True, False, False, False, False, 
        False, True, True, False, False, True, True, False, True, True, True, 
        False, False, True, False, False, False, False, True, False, True, 
        False, False, True, False, True, True, True, True, True, False, False,
         False, False, False, False, False, True, False, True, True, True, 
        False, False, False, False, False, True, False, True, True, False, 
        True, False, False, True, False, True, False, True, True, False, 
        False, False, True, True, False, False, False, False, True, False, 
        False, True, True, False, True, False, True, True, False, False, 
        False, True, False, True, False, False, True, False, True, False, 
        False, False, False, True, True, False, False, True, True, False, 
        False, False, True, False, False, True, True, True, True, False, 
        False, False, True, True, False, True, True, True, True, True, True, 
        False, False, False, True, True, False, False, True, False, True, 
        True, False, False, True, False, True, False, True, True, True, False,
         True, False, False, True, True, True, False, True, False, True, 
        False, False, True, False, True, False, False, False, True, False, 
        False, False, False, True, True, True, False, True, True, False, True,
         True, False, False, False, True, False, True, True, True, False, 
        True, False, False, True, True, True, True, False, False, False, 
        False, False, False, False, False, False, False, True, True, True, 
        True, False, False, True, False, True, True, True, False, False, True,
         False, True, False, True, False, True, False, True, True, False, 
        True, False, True, True, False, False, True, True, False, False, 
        False, False, True, False, True, False, False, False, False, False, 
        True, False, True, True, False, True, False, False, False, False, 
        True, False, True, True, False, False, True, True, False, True, False,
         True, False, False, True, False, False, False, False, False, True, 
        False, True, False, True, True, False, False, True, True, False, 
        False, False, False, True, False, True, True, True, False, False, 
        True, False, False, False, True, True, True, False, False, False, 
        False, False, False, True, False, True, False, False, False, True, 
        False, True, False, False, True, False, False, True, False, False, 
        False, True, False, True, False, True, False, False, False, True, 
        True, False, False, False, False, False, False, True, False, False, 
        False, True, True, True, True, True, False, True, True, True, False, 
        False, False, True, False, False, True, False, True, False, False, 
        True, True, True, True, True, True, False, False, False, True, False, 
        False, False, False, False, True, True, False, True, True, False, 
        False, True, True, False, True, False, True, True, True, False, False,
         True, True, False, False, True, False, False, False, False, False, 
        False, True, True, True, True, False, False, True, True, True, True, 
        True, False, True, False, False, True, True, True, False, True, True, 
        True, True, False, True, False, True, True, False, True, True, False, 
        True, True, True, False, True, True, False, False, True, True, True, 
        False, True, True, False, False, True, False, False, False, False, 
        False, False, False, False, False, False, True, True, False, False, 
        True, False, False, False, True, False, True, True, True, False, True,
         True, False, True, True, True}|>, 
    "Predictions" -> {
     False, False, True, True, True, True, False, True, True, False, True, 
      False, False, False, True, False, False, True, True, True, False, True, 
      False, False, True, False, True, False, True, False, True, False, False,
       True, False, False, False, True, False, True, False, True, True, True, 
      False, True, False, False, False, False, True, False, False, False, 
      False, True, True, False, False, True, True, True, False, True, False, 
      False, True, False, False, False, False, False, True, False, True, True,
       True, True, True, True, False, True, False, True, False, True, True, 
      False, True, True, False, True, True, False, False, True, False, False, 
      True, True, True, False, True, False, True, True, False, True, True, 
      True, False, False, True, False, False, False, True, False, True, True, 
      True, True, False, True, True, True, True, False, True, False, True, 
      False, False, True, False, False, False, False, False, True, True, True,
       True, True, True, False, True, False, False, False, False, False, 
      False, False, True, False, False, True, True, False, False, False, True,
       False, True, True, False, False, False, True, False, False, False, 
      True, True, True, False, True, False, False, True, True, False, True, 
      True, False, True, True, False, False, False, True, False, False, True, 
      False, False, False, True, False, False, True, False, True, False, 
      False, True, True, True, False, True, False, False, False, True, False, 
      True, False, True, True, False, True, True, False, False, False, False, 
      False, True, True, False, False, False, False, False, False, True, 
      False, True, False, True, True, True, False, False, False, False, False,
       True, False, False, False, False, False, False, False, True, False, 
      False, True, False, False, False, True, True, True, True, True, True, 
      False, False, True, False, False, True, False, True, False, True, False,
       True, True, False, False, True, False, False, True, False, False, 
      False, False, True, True, False, True, True, True, False, True, True, 
      False, True, False, False, True, True, True, False, True, True, True, 
      True, False, True, False, False, False, True, False, True, False, False,
       True, False, True, True, False, True, False, False, False, True, True, 
      False, False, False, False, False, True, True, False, False, False, 
      True, True, False, False, False, True, True, False, False, True, False, 
      False, True, False, True, False, True, True, True, True, True, False, 
      True, False, False, False, True, True, False, True, True, True, True, 
      False, True, False, False, False, False, True, True, False, True, False,
       False, False, True, True, False, True, False, False, False, True, 
      False, False, False, False, False, True, False, True, False, False, 
      False, True, False, False, False, True, True, False, False, True, True, 
      True, True, False, False, True, True, True, False, True, False, True, 
      False, False, False, False, False, True, False, False, False, False, 
      False, True, True, True, True, True, True, False, False, True, True, 
      True, True, False, True, False, False, False, False, False, True, True, 
      False, False, False, False, False, False, False, True, False, False, 
      False, True, False, True, True, False, True, True, True, True, False, 
      True, False, True, True, False, False, False, False, False, False, True,
       False, False, False, True, True, False, False, True, False, True, 
      False, False, False, False, True, False, True, False, True, True, False,
       True, False, False, False, True, True, True, False, False, False, 
      False, False, False, True, False, False, False, True, False, True, True,
       False, True, False, True, True, True, False, True, False, False, False,
       True, True, False, False, True, True, False, True, True, False, False, 
      True, True, False, False, True, True, True, False, False, False, False, 
      False, False, True, False, False, True, False, True, False, True, False,
       False, True, True, True, False, False, True, True, False, False, False,
       True, True, False, True, False, False, True, True, False, True, False, 
      False, True, False, False, False, False, True, False, True, False, True,
       False, False, True, False, True, True, False, False, True, True, True, 
      True, False, True, False, True, True, True, False, False, False, True, 
      False, True, True, True, False, False, False, True, False, False, True, 
      False, True, False, False, False, False, False, False, False, True, 
      False, True, False, True, True, True, True, False, True, True, False, 
      False, True, True, False, False, True, True, False, False, False, False,
       True, False, False, False, False, False, True, False, True, False, 
      True, True, False, False, True, True, True, True, True, False, True, 
      True, False, False, False, True, False, False, True, True, False, True, 
      False, False, False, False, False, True, False, False, False, True, 
      True, False, True, False, True, False, False, False, False, True, False,
       False, False, False, True, False, True, True, True, False, True, False,
       True, True, False, True, True, False, False, False, True, True, False, 
      False, False, True, False, False, True, True, False, False, True, False,
       True, True, True, True, True, False, False, True, False, False, False, 
      False, False, False, True, True, False, False, False, False, True, 
      False, False, False, False, False, False, False, False, True, False, 
      False, True, False, True, True, False, False, False, False, False, 
      False, True, False, False, True, False, False, False, False, False, 
      False, False, False, False, False, True, True, True, True, True, True, 
      True, False, True, False, False, True, False, True, False, True, False, 
      False, True, False, True, False, True, False, False, True, True, False, 
      True, False, True, False, False, False, True, False, False, True, False,
       False, False, False, True, False, False, True, False, True, True, 
      False, True, False, False, False, True, True, False, True, True, False, 
      False, False, True, True, False, True, True, False, False, False, False,
       True, True, True, False, False, False, False, True, True, False, True, 
      True, True, True, False, False, False, False, False, True, False, False,
       True, False, False, False, True, False, False, True, False, False, 
      True, False, False, False, False, True, False, True, True, False, False,
       False, False, False, False, False, False, False, True, False, False, 
      False, False, False, False, False, False, True, True, False, False, 
      False, False, True, True, False, False, False, False, False, False, 
      False, False, True, False, False, True, True, False, True, True, True, 
      False, False, True, False, True, False, True, True, False, False, True, 
      False, False, True, False, False, True, False, False, False, True, 
      False, False, False, False, False, True, False, False, True, True, 
      False, True, True, True, False, True, True, True, True, False, True, 
      True, False, False, False, True, False, False, False, True, False, 
      False, False, False, True, False, True, True, True, False, True, True, 
      False, True, True, False, True, False, False, False, True, False, True, 
      False, True, True, True, True, True, True, False, True, True, False, 
      True, True, False, False, True, True, False, False, True, True, False, 
      False, False, False, False, False, False, False, False, True, False, 
      False, False, False, False, True, True, False, False, False, True, True,
       False, True, True, False, True, False, False, True, True, False, False,
       True, False, True, False, True, True, True, False, True, False, True, 
      True, False, True, False, False, False, False, True, False, True, False,
       False, True, False, False, True, True, False, False, False, True, 
      False, True, True, True, False, False, False, False, True, False, False,
       False, True, False, False, True, False, True, True, True, True, True, 
      True, True, True, False, True, False, True, True, True, False, True, 
      False, False, False, False, False, False, True, True, True, False, True,
       False, False, False, False, False, False, True, True, False, True, 
      True, False, False, False, False, True, False, False, False, True, 
      False, False, False, False, True, True, False, True, False, False, 
      False, False, False, True, False, False, False, True, True, False, True,
       True, False, True, False, True, False, True, False, False, True, False,
       False, False, False, True, True, True, True, False, True, True, False, 
      True, True, True, False, True, True, False, False, False, False, False, 
      True, False, True, False, False, True, True, False, True, True, True, 
      False, False, False, True, True, False, True, True, True, False, True, 
      False, False, False, True, False, False, True, False, False, False, 
      True, True, False, True, False, True, False, False, False, True, False, 
      False, True, True, False, False, False, False, False, True, True, False,
       True, True, True, False, True, True, False, False, False, True, False, 
      False, False, False, True, False, False, True, False, True, True, True, 
      False, True, True, True, False, True, False, True, True, False, True, 
      False, True, True, False, True, False, True, False, True, False, False, 
      False, False, True, True, True, False, False, False, True, True, True, 
      True, False, True, True, False, True, True, False, False, True, True, 
      False, True, False, False, False, False, False, False, True, True, 
      False, False, False, False, True, False, True, True, False, True, True, 
      False, False, False, False, False, False, False, False, False, False, 
      False, True, False, False, True, False, False, False, False, False, 
      True, True, False, False, True, False, True, True, False, True, True, 
      False, True, False, True, False, True, True, True, True, True, True, 
      True, False, False, True, False, True, False, False, True, True, True, 
      True, False, False, False, True, False, True, False, False, False, True,
       True, False, True, False, False, True, True, True, False, True, True, 
      True, False, True, True, True, True, False, True, True, False, False, 
      False, False, False, True, False, True, False, False, False, True, 
      False, True, False, True, False, False, True, False, False, True, True, 
      False, True, True, False, True, True, False, True, False, False, True, 
      False, False, True, False, True, True, False, False, False, True, False,
       False, True, True, False, True, False, True, True, True, True, False, 
      True, True, False, True, False, True, True, True, True, False, False, 
      False, True, False, True, True, True, False, True, False, True, True, 
      True, True, True, False, False, False, False, False, False, False, True,
       True, False, True, False, False, True, True, True, False, True, False, 
      False, False, False, False, False, True, True, False, False, True, True,
       True, True, True, False, False, True, True, False, False, False, False,
       False, False, False, False, False, True, False, True, True, True, 
      False, True, False, False, False, True, True, False, False, True, True, 
      False, False, False, False, True, True, False, False, True, True, False,
       False, True, True, False, True, False, False, False, True, True, True, 
      True, False, True, True, True, True, False, False, False, True, False, 
      False, True, True, False, False, False, False, True, False, False, 
      False, True, False, False, False, False, False, True, False, False, 
      True, False, True, True, False, False, True, True, False, False, False, 
      True, True, True, True, False, False, False, False, False, True, False, 
      False, False, False, False, False, True, True, False, True, True, True, 
      False, True, False, True, False, True, False, True, False, False, True, 
      False, True, False, False, False, True, False, False, True, False, True,
       False, False, True, False, True, False, False, True, True, False, 
      False, True, False, True, True, True, True, False, True, True, True, 
      False, False, True, True, False, False, True, False, False, False, True,
       True, False, False, True, True, False, False, True, False, False, True,
       False, False, False, False, True, False, False, True, False, True, 
      False, False, True, False, True, True, True, True, False, False, False, 
      True, False, True, False, True, True, False, True, False, True, False, 
      True, False, False, False, False, True, True, False, False, False, True,
       True, False, True, False, False, True, False, False, True, True, True, 
      False, True, True, False, True, False, False, True, True, False, True, 
      True, False, True, False, False, False, True, True, False, False, True, 
      False, True, True, False, False, False, False, True, True, True, True, 
      False, False, True, False, False, False, True, False, True, True, False,
       False, True, True, False, False, True, False, False, False, False, 
      False, False, False, False, False, True, False, True, False, False, 
      True, True, False, True, False, False, True, False, False, True, False, 
      False, True, True, False, True, True, False, False, False, True, False, 
      False, False, False, True, False, True, True, False, False, True, True, 
      False, True, False, False, False, True, True, True, False, True, False, 
      True, True, False, True, False, False, True, False, False, False, True, 
      False, True, False, False, True, False, True, True, False, False, False,
       True, True, True, False, False, True, False, False, False, True, True, 
      True, True, False, False, False, True, True, False, True, False, False, 
      False, True, True, False, True, False, False, True, True, True, False, 
      True, True, True, True, False, True, True, False, False, False, False}, 
    "LogProbabilities" -> CompressedData["
1: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
H1Ziai8=
     "], "CountMatrix" -> {{553, 485, 0}, {560, 402, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV1XtwDwQcAPCfx9DKjBbLxK3Ia8zWNcdMXtM62aRjyiHDTBLGXDbz6GTH
uRyNyvttK3Mrr2PebteoiVHmuJXHeaSSdnksuj7++Nz3n+8/3+99H5Fpkwd/
WCsQCLSvHQjUF0N5jmaE05yWtKHtkzyiiSGWV+lKPL3pQz/68zpJDGMkoxjN
ZDKZRg6LWEY+K/icL1nJGtazgc18TRE72cVBDnGYoxyjlDJO8D3lnOIcv3KZ
K9zgNn9xj/s8oIZHPKa25tQhiHqE0IgwImjBi3Qmhu70IIFe9KEvA0hhEG8x
mFSGMZwRjCGDKWQzi1xmM4fFLGUZn7Gc1axnG0UU8y172Ms+jnKGCs5yjvNU
coEqbnKLP7jLPzyk5kntZqPek/ngaRoSQijPEkZTImhFJG3pQCdiiCWOrsST
QC8SSSaFwaQxlnTGM4EPyGQ62cxlHvPJYxGfsoQvWMU6NrGZLWylgEK2s4Ni
dnGYY5TyHeX8SAU/U8l1bvE7f3KXv6nmITUE1dEn6vMUwYQQShPCeYk2tCeK
TnQmmi7E0JPX6E0ibzKIIQxnBOlkMIH3mcRUMskimxzmspil5LOclaxiLRvZ
wlYKKKSYb9jJbvawj/2UcIAjHOUYxymljBOc5iwXuMglqviF69zkNneo5gH/
8ohA3UCgFnV5hkY0IYymhBNJOzoSRTRdiOUV4uhOAokkMYBkUkjlHcYwjnQm
MYXpZJFNDrNZyBKWks9yVrCaNaxjG4Vsp4g9lHCAQxzmOCf5gTNUcJ4qLnOF
q1zjHjU85j8CQe4QdQkimIaE0pgwmtKMCFrRmnbEEU8/+pPEGwwkmRRSeZeR
vEcaY5jARKaRxUfMJJscZpHLHD5mPp+wgLWsYwOb2EwhX1FEMSWUcZJyTnOG
nzhPJde4zg1+o5r7NKhnzwimCc1pwQtE0poOdCSKzkQTSzcS6Ekv+tCXfiQy
kGSGksowxjKeDCaRyQxymcM85rOAPBaxmHxWsYGNFLCdHRSzm4Mcp5QyTnGW
Si5yiSquco2b3OYO1dznATXU8siDaEAwITSiMc8TQQta8jLtiSKWOLrRgwR6
kkQybzOEoYxgFKNJYxwZTGQqWcxgJtnkMpd5LCCPfAoopIid7GIv+9hPCUc4
STn/A4OZFKU=
       "], CompressedData["
1:eJwN1GlMEAQYBmAgFRyxAmUYRgGJIpmzBYGBGdlWTDBghpVdQ4hCgzwym6kh
m7IUxWYB4nDQwNmB5RJQSRFMt0o7LJd0mBm6ebRJns2j58fzfb+/99veuMLy
/LLAgICAfmOIHcJtRDCM4YwkhngSuZdxjCeNiWQwiYeZQhZTyWEaT5LLdAp4
lpcoopgSXqWUOZTxBotYQiWrqWYNNayjgUY28SEttNLGVrbRyS666eU7DvMH
5zjPv1wlUA6DCGEooYQRSTQxJDCaRMaSxAM8SCrpZJHDNAoppoRSZvMaC1jI
Yt6hgkpWsob1bKCRZrbwCTvpoZd9HOAQxzjJKQa4wk0CgwICghhECEMJJ5Io
RhDDXYwikXFMIJkUMshkCo8zlWzyKGAGz1DMK8ymjHLms5glLGMFVaynlno2
0EgTzWxmK9vYTjsddLKDXXTRzX6+p4/j/MUJTnGa69zk1lvcTTSxjCGFNCaS
ziQeI4upzOBFiimhjPksYCFvsoSlrKSKtbzHB2ykiTY66GQ3BzjIIfr4k785
zTkGuMhlbhA8yN8IJYzbCSeKkcQQSzz3kMBksslnOk9RwNPMpJAiSihnLvNY
RAXLqWQFVbzLamqopY56GmimhVa+oIO99PAVB/iGw/zMEX7hV37nGGc4ywUu
cpkrBA3WTQQTSgR3cCexxJFAEhO4n2RSmUgGk8lkCtnkkc9zPM/LlDOXeSyl
glVUU8P71FJHPQ1spJlW2tjBTrr4kt1008t+vuUov3GME/Rzhn8Y4CKXuMJ/
XOM6NxmspIcQTChhhDOM4UQSxd0kMJqxJJNKGuk8QRbZ5JLHTAqZRSllvM4i
3mI5VayimnXUUkc9m9jMFj7iYz5lK+100sUe9vI1B/mBH/mJIxylj+P0c5Kz
nOcCl7jKNW4QFCwTgolgGFGMIJpY4ohnFGNI4j7GM4FkUniIdB4hk0fJJodc
8niBWRQxh3LeZinLqGYtNdTTQCNNtPAZn7OddjrpYg899LKP/fwPmt7wrQ==

       "], {}}, {CompressedData["
1:eJwt0n1wDwQYwPEf8nLdvGYijma7WSfympfkLcLknA1hwyZJilTLS3StsZh5
GQtLG/NSZEobhXV56TQvk+lFRETj1ta8NnUd0Wd3/fG556/nn+/zhEx4JWpa
lUAg0K5qIFA5jcD9BFGbOtSnGQ8TQihhtKncoxOP051e9CeSYUQzghgmMInJ
vMR0EphBIknMJ5kFLCSFVFaSQSYb2MwWPmYbuewin4MU8D0n+YnTnOEcxVzi
d0opo5yrVHCL29zlHpVhalKfBjSiMc1pQQihhNGK1rSjMz3pz0AieYZoRhJL
HPFMZBKVx3iV13iDJOaTzLukkMoSlpHGajJ4nw/IYj0fkcN2ctnB5+xmPwUc
5ghHKeQYRZzgJGcp5jJl/EE517hOBX9zmzvc/f+JqhFEXRrQhJaEEk5butKN
7vSkL/0YRCRDGM4IRjGGGMYyjvHEMZVZzGYuSSSTQiqLWcJy0skkm63ksIN8
vmIvBzjMEY5SyHF+5BQ/c5ZfOMd5LnCJK9ziL+5QtZoW1KI2dXmAhgTTiAdp
QlOa0ZwQWhJGOBG0pgMd6UQPnuJpBhLJEKIYzkhGMZpYxhFHPM8xnVnM5m3e
IYlkFpHKEpaSRjqrySCLdWSzma3ksI1P2E4eO9nHQQo4xnec5DQX+Y1iLlNC
KeX8y73KfvcFAtWpQS2CeYgwWtGeTnSmC914gh70pg99iWQY0cQyjvHEEc9k
XuRlpjGDmczmLRJJZQXprGEt2axnE1vYyqd8Ri557GA3e8hnPwUc5luKOMEZ
LlNCKWVc4QY3+ZM7VKmuBUHUIZjGtCSUcFrxCK15lLZ0oCtP0pu+DGA4McQz
keeZzBSmMp0EZjCTROaRwiIWs4wVvMcqcthOLjv5gl3s4yCHOEIhRfzAGc5y
nouUUs41rnODCv7hLlVq+A+CqEdjmtCU5oQSQRs60p1e9GEAgxlKFNGMJpax
xBHPJF4ngZm8yRzmksg8kklhGWmks5I1ZJLFWrLZyCY+JI+d7GIP+XzJXvbz
NYco5Bin+JULlFDGFa5ynZvc4h6BmtoQRD0aEkwjWhBKBI/Rno50oRf96M8A
BjGYoUTxLKMYzRhiiOUFpjCVaSQwiznMZyGLWcpy0lnFajJYQyZZrGMDG9lE
DtvIYy8H+IbjFHGC/wCq6CAs
       "], CompressedData["
1:eJwV1GlMFwQUAPC/ijXB1I3NhhOhNm1iSEYqOeftn6Q0ErBgKqUdQ1BEpqRj
OMPbhQWTrTanG17D+6DlFFuGGUpeIc6EiSwdzgl4zDJm+ePD772v7+0dr8zL
nbmoWyAQKBV6yCH0pBdh9CeCKIYQQzwTeI+ZfEg6s5nDfBaSRwHLWUEhRaxk
FWvZTBmVHKKKHzjOSc5yjjoucZlrXOcGjdzkNndo5yGh+ulNP8J5mQiieZ1Y
4niTt0jgbcYzkSkESSSVNNLJYC6ZZJFDLvkU8CXLWc9GytlGBTvYyR4qOcAx
TnCSak7xE2f4nQb+pJEmmrlFC3/RxiOe8IzQ7oHAAAYSzWCGMow44hlPkHdI
JoXZfMJ8FrCYPJayjAKKKOYbStlCOVvZz2F+oYY6LvMHV7nJbVq5RzsdPOZv
/qGT/+haxG6EEEYkUcQwitGMYQKTSGQG7/MBKWQwj0/JJodcCilmNWvZwHdU
sINqznGei1yhngau0UQbHTzgMU94yr90d0Ch9CGcCAYyiCiGMJQYYhlOAuOY
zBSCJDKN6SSTwRwWkE0+haxkNWtYx9eUUMFeDlJFNTXUcoF6rtNIM3dopY12
OnhKJ//Ty1PoSzgDiGQQscQRz0jGMI6pJPEuyaSQxiw+Ip1MviCHRaxjPSV8
Sxnfs5Xt7GQ3e9jHEY5SxY/8zGnOcIEr1NNAE8200Mp9Orse3QtmRgh96Et/
onmV13iDEYxkFGMJkkQqaWQwl0w+I4tscsglj6UUUUIp5eziMEep4Vdqucgl
rtJEC3fp5FlXvS+aCWG8RCSDGUYCkwmSRCof8zlZLGYJ+RTwFcWsYQMb2UQp
W9jOLnZTyQEOUs1ZfqOW89TxHGMrz2U=
       "], {}}}, "ExtendedClasses" -> {False, True}, "Weights" -> 
    SparseArray[Automatic, {2000}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.000022416499999999998`, "SingleEvaluationTime" -> 
    0.0038165, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.86896617348654*^9, 3.868966311492532*^9, 3.8689668453138514`*^9, 
   3.869211547634626*^9, {3.869293774351564*^9, 3.8692937815692053`*^9}, {
   3.86965499242017*^9, 3.869654997917274*^9}},
 CellLabel->"Out[36]=",ExpressionUUID->"83dd9429-98d5-4373-8ddc-0e1b63d4548b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"First", "@", "classifier"}], ")"}], "[", "\"\<Model\>\"", "]"}], 
  "[", "\"\<Network\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8692938293476267`*^9, 3.869293870353177*^9}, {
  3.8692939195305443`*^9, 3.869293944513091*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ScaledExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.869293832969639*^9, 3.869293870749839*^9}, {
   3.869293926735614*^9, 3.869293945170747*^9}, 3.869655004591058*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"07f0f096-3d80-44be-be66-64e0b1942867"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}, {3.869293792603034*^9, 3.869293814925658*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],

Cell[BoxData[
 TemplateBox[{"369.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.869293808448848*^9, 3.8692938154579077`*^9}, 
   3.869655009337634*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"76562004-b2fc-49d7-b7f6-f0fb35827e80"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c299b150-0a55-4bbe-bf20-ef4cd4ee4428"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 4, 98, "Title",ExpressionUUID->"e80ffaf1-ce7d-4821-a091-e123c51e05cc"],
Cell[834, 28, 774, 15, 29, "Input",ExpressionUUID->"e7550ce8-9c02-454b-9ce5-651d0f8e87b4"],
Cell[CellGroupData[{
Cell[1633, 47, 204, 4, 69, "Chapter",ExpressionUUID->"ff3102a6-3c5a-457a-910a-4abcf0a85217"],
Cell[1840, 53, 5584, 100, 116, "Input",ExpressionUUID->"a1d35da7-df69-4f5a-aded-2375da917235"],
Cell[CellGroupData[{
Cell[7449, 157, 234, 4, 29, "Input",ExpressionUUID->"b5a69e04-bf85-4754-84c2-66a1ec08c68d"],
Cell[7686, 163, 1521, 30, 55, "Output",ExpressionUUID->"7e5221e9-e7fe-40b5-923d-3d5cea6b73e4"]
}, Open  ]],
Cell[9222, 196, 8456, 201, 37, "Input",ExpressionUUID->"6656dcd5-3f96-4076-89bb-d35e7d524003"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17715, 402, 317, 5, 69, "Chapter",ExpressionUUID->"a83aa6fb-db66-4018-aace-2706a2be80da"],
Cell[18035, 409, 382, 9, 29, "Input",ExpressionUUID->"58a7a509-6e27-4603-86a4-437a1775943b"],
Cell[18420, 420, 623, 13, 29, "Input",ExpressionUUID->"2b9a254b-8e88-46ea-9c93-3e1f258901d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19080, 438, 355, 6, 69, "Chapter",ExpressionUUID->"b6f53683-da40-4a5d-9d7a-130f6c5ca4dc"],
Cell[19438, 446, 1904, 36, 133, "Input",ExpressionUUID->"0b6fe1aa-0068-42c6-a004-d876d189b254"],
Cell[21345, 484, 1163, 26, 133, "Input",ExpressionUUID->"d1ef7b56-3413-4a9e-b2bd-d56f8df851c1"],
Cell[22511, 512, 13902, 195, 32, "Input",ExpressionUUID->"e3c08978-37d7-4772-8ade-495439d8bdfc"],
Cell[CellGroupData[{
Cell[36438, 711, 347, 5, 29, "Input",ExpressionUUID->"88447c34-9b93-40ce-9b93-a538133472b4"],
Cell[36788, 718, 277469, 5608, 68, "Output",ExpressionUUID->"e18a8e19-a2e0-4cb5-9878-94a7bdbdb4ad"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[314306, 6332, 355, 6, 69, "Chapter",ExpressionUUID->"790cc1ff-a1fd-4751-9fa0-78e337587528"],
Cell[314664, 6340, 16316, 229, 133, "Input",ExpressionUUID->"f71442fd-e126-41fb-b56d-1c2abd8c9f07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331017, 6574, 456, 7, 69, "Chapter",ExpressionUUID->"306b98cf-6a16-4b58-bf92-e841969834f5"],
Cell[331476, 6583, 1696, 34, 92, "Input",ExpressionUUID->"9dfbfa0c-b8e2-42c4-ae5a-99e0b63edb66"],
Cell[CellGroupData[{
Cell[333197, 6621, 423, 10, 29, "Input",ExpressionUUID->"52bba437-b4a0-4114-ac5a-ca57f21e8e71"],
Cell[333623, 6633, 263502, 4532, 465, "Output",ExpressionUUID->"a887498a-4217-4abe-9530-b1351f9bdad0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[597174, 11171, 507, 8, 69, "Chapter",ExpressionUUID->"2690b326-fb91-4c09-a746-cb42f085f60a"],
Cell[597684, 11181, 1093, 17, 29, "Input",ExpressionUUID->"b1cb4866-8078-4a67-9f71-658ee449d7d1"],
Cell[598780, 11200, 966, 18, 29, "Input",ExpressionUUID->"01ed0e0c-636b-4c6e-b44d-fbd0e4dc3837"],
Cell[CellGroupData[{
Cell[599771, 11222, 819, 14, 51, "Input",ExpressionUUID->"448651c1-6ecd-4092-b372-99eea421b7e0"],
Cell[600593, 11238, 750, 10, 33, "Output",ExpressionUUID->"e256f532-83f4-474d-97e5-5b07ba483b02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[601380, 11253, 1289, 27, 71, "Input",ExpressionUUID->"6dd644cf-0da7-47a9-a77b-1b4465ebc2d4"],
Cell[602672, 11282, 2521, 36, 33, "Output",ExpressionUUID->"0ae80ae0-f190-4633-9d1a-ce6a1584be06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[605230, 11323, 570, 14, 32, "Input",ExpressionUUID->"46bd4ab9-a162-44ba-ae1f-a8ab77e98e9d"],
Cell[605803, 11339, 1180, 17, 67, "Output",ExpressionUUID->"a7cf0866-8e9d-407f-bafc-75cf825ed764"]
}, Open  ]],
Cell[CellGroupData[{
Cell[607020, 11361, 573, 9, 29, "Input",ExpressionUUID->"7fff87c5-1eb0-47f3-bdd7-2ed2265a28b8"],
Cell[607596, 11372, 23033, 603, 921, "Output",ExpressionUUID->"5fc00b8e-d759-4af7-9ce9-6085cc288c84"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[630678, 11981, 412, 6, 69, "Chapter",ExpressionUUID->"0a2ce80a-fe81-4612-966f-edb1d9a9f984"],
Cell[CellGroupData[{
Cell[631115, 11991, 749, 14, 29, "Input",ExpressionUUID->"3911ed4c-aaed-4c43-b0af-f520c100bb40"],
Cell[631867, 12007, 115606, 1988, 68, "Output",ExpressionUUID->"66ae55cf-3d67-4875-a13a-6ee02e9504be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[747510, 14000, 370, 6, 29, "Input",ExpressionUUID->"457e49e2-b67d-4087-9007-af29a3ee8d68"],
Cell[747883, 14008, 220651, 3720, 465, "Output",ExpressionUUID->"83dd9429-98d5-4373-8ddc-0e1b63d4548b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[968571, 17733, 371, 8, 29, "Input",ExpressionUUID->"540517e6-021e-412f-a51e-bcd8ccbd5821"],
Cell[968945, 17743, 25074, 499, 146, "Output",ExpressionUUID->"07f0f096-3d80-44be-be66-64e0b1942867"]
}, Open  ]],
Cell[CellGroupData[{
Cell[994056, 18247, 410, 6, 29, "Input",ExpressionUUID->"9ee23cf1-3366-459e-a97b-32b8ba1df410"],
Cell[994469, 18255, 276, 5, 44, "Output",ExpressionUUID->"76562004-b2fc-49d7-b7f6-f0fb35827e80"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

