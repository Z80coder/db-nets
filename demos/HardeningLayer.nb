(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    256088,       4903]
NotebookOptionsPosition[    253104,       4843]
NotebookOutlinePosition[    253542,       4860]
CellTagsIndexPosition[    253499,       4857]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hardening layer", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.867471884432931*^9, 3.867471884953972*^9}, {3.867473220069077*^9, 
  3.8674732224859324`*^9}, {3.867473369958376*^9, 3.867473373851125*^9}, {
  3.867899209650152*^9, 3.8678992098021107`*^9}, {3.867994232062913*^9, 
  3.8679942373026867`*^9}, {3.868412173657778*^9, 3.8684121749912033`*^9}, {
  3.868582132285242*^9, 3.868582136228798*^9}, {3.868587288554328*^9, 
  3.868587289619108*^9}, {3.869539131078537*^9, 
  3.869539132718083*^9}},ExpressionUUID->"03acce4e-9d75-404e-a4e4-\
9867762ca33c"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"4cda9ff6-5a6b-41ee-a8b6-b6984dcffaf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HardeningLayer"}]], "Input",
 CellChangeTimes->{{3.8695392555359297`*^9, 3.869539261682852*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"ead22a00-c06c-4c88-bd04-a06016cf040c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening layer.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"HardeningLayer", "[", "]"}], ":=", 
                    RowBox[{"CompiledLayer", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "neurallogic`Private`HardeningForward", "[", "]"}], ",", 
                    
                    RowBox[{
                    "neurallogic`Private`HardeningBackward", "[", "]"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"neurallogic`HardeningLayer\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening layer.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Hardening layer.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, neurallogic`HardeningLayer, {
      neurallogic`HardeningLayer[] :> CompiledLayer[
         neurallogic`Private`HardeningForward[], 
         neurallogic`Private`HardeningBackward[]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "neurallogic`HardeningLayer"|>, False]]], "Output",
 CellChangeTimes->{3.869539264752574*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"ea26b7d7-dbf9-4cee-88a9-228c863b152b"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3ceSK0t+2OGWtNFSr6C30LK11JYKPQAZohjaUBGkIhRanZ4Zeu+9G3rv
vcMdeu+9HXrvvYWgU9EZ2ZlZfyRwkChU4fsWN85FF4BCAl35q0IB/R/f63+9
x//4tw8PD+//7w//eY/3/D//+f3e7z3/73/9D4f/+W/v+/7/833e973/+395
3//93u/z3u/3n97r3x0u/OJ/8/DwGYd//P9/7wEAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICV2L229FoA
AMCZHh8fH1579erV0uvS67C2h9Veei0AALgJh46danZdh2o1LQAAyXSQdum1
OJmmBQAgeXxt6bU4maYFAGCy2+2mOHz1Wn754X+ny4sTEqYfTf9ICxQn4h69
JL/9YpXSPU7LpHsvrhKkeH4Lzbsobq1eIF2xfhRzVwEAYCkPL00XTmfYTtFY
f3YsnX+blpnCOE/f6VrFJelGppvNb79eMi2T32lxrbmmLVavvot4BYqfptWu
b/OkoQYAYJzigOcUqHXEpupLeVmEaLqRdOw3P8RaxGHxo3wFmt/AUNxjysvm
I4pXr1iB4qep2Js3Wxxqbt47AADXVzTtFHXFMkerL7+R6ShrcUlwVLNYgfoQ
aPMejx6nLe6iqNz6p9O/62POPfcIAMCy6qSsyy2vvuKwbX5h+vd0IDRd0jz3
dTo3tX4fv16Bx9Y3M5zUtM1STStQ3H46UNx8jE6mBQC4QRdp2jwam/+oT2ZI
5+LWSTmoaZtnxtYrsM/OryjKNp3oO3d+AgAAiyiatnlM9WjT7p8jsz48Wxwj
rU8kuELT5ndar8DcqRGpbIvLp+9MCE5mAADgyuqmrWutPshZ59x0O9ORzOKS
PAvrgDzatM17PKNp51YgON03Pr3WoVoAgBtRNG39RQTFgc25ps2/6ja/pDgB
tWjm+lhoHatzqxQ0bb3Cc+tfrECxtkUMz40JAADLqk82SJnXPHc0btqH1hfV
Fl+Bld948yNadawWq5Q+29V8RPmap2s1V6A+kpzf0WP2/bTFtYKiBpb17ne/
+13vetfSawHAte1eqy9PX1/QzNfOmzp64/UNzl0lvlYuP3W2/vqCnpt69azz
cuB2HJr2He94h6wFYO2cFQD3bGpaWQvA2mlauGepaWUtAKumaeGe5U0rawFY
L+e7wj0rmlbWAgCwOnXTyloAANal2bQHb7311tKrBgAAXeaa9u1vf7usBQBg
FYKmlbUAAKxC3LSy9s7964x/6fPPoX/q8499/qHP34f+rsPfhv6mz1/3+as+
fxn6iz5/3uHPuv1pnz/p8Md9/ij0h33+oM/v9/m9eb/b4XeO+e0+v9XnN/v8
RujdfX79RL8W+tU+v9Lhl/v8UugX+/xCn58P/VyHn+3wM8f8dJ+f6vOTfX4i
9OMn+rE+Pxr6kT4/3OGHOvzgMT/Q5/tD39fnezt8T4fvPua7+ryr5Z3vfGfc
tLL2ns0VbGegxuXZmZSd3dgZhHHy9VRcHGadrdVZU52ZFOdQZ+T01Et/nHSG
R09UdDZDHAOdE33nVN45RwezcM9MenSu7JwBOye4ziksnqE65523KrvQd1a+
I/PtlW9r+dbKt1S+ufJNLd9Y+YbM11e+ruVrK1/T8tWVr8p8ZeUrKl9e+bLK
l7Z8SeaLK1/U8oWVL2j5/MrntXxu5Z2Zz6l8duizKp/Z8hmVT898WuVTWz6l
8smVT6p8YuUTWj4+83GVj235mMpHZz6q8pEtH1H58MqHVT608iEtH5z5oMoH
tnxApVmzddPK2rulaTWtptW0mlbTalpNu6WmlbX3SdNqWk2raTWtptW0mnZj
TStr75Cm1bSaVtNqWk2raTXt9ppW1t4bTatpNa2m1bSaVtNq2k02ray9K5pW
02paTatpNa2m1bRbbdq3ve1tsvZOaFpNq2k1rabVtJpW0264aWXtndC0mlbT
alpNq2k1rabddtPK2nugaTWtptW0mlbTalpNu/mmlbWbp2k1rabVtJpW02pa
TXsPTStrt03TalpNq2k1rabVtJr2TppW1m6YptW0mlbTalpNq2k17f007cFh
Flu6v7g8TatpNa2m1bSaVtNq2vtp2sOra+n4YghNq2k1rabVtJpW02raO2la
QbthmlbTalpNq2k1rabVtPfQtIJ22zStptW0mlbTalpNq2k337SCdvM0rabV
tJpW02paTatpt920gvYeaFpNq2k1rabVtJpW0264aQXtndC0mlbTalpNq2k1
rabdatMK2vuhaTWtptW0mlbTalpNu8mmFbR3RdNqWk2raTWtptW0mnZ7TSto
742m1bSaVtNqWk2raTXtxppW0N4hTatpNa2m1bSaVtNq2i01raC9T/86o67c
pjp9j2ZwTxg3/UOfOqSPRvXRxj7a2z0F3tTM8p5Qn4v2QN3zPYU/py7/pj/p
UO8mNDX3HYKdiKbmnkXPvkZTcwdkbjck3jFpqvdWmpq7MD07NU31nk6819M0
tyvUv4t0dHepZweqZ5eqqd7POrrP1bMX1vTzoXpnrXP37ejeXM/OXc/uXlNz
H7Bnr7C5h9ip3pFsqvcuj+5pxvuec+p90s691HiPtam5GxvszzY1d3KP7vPG
e8FN9a5xU3N/+eBo0wpaAABu2WGXOW5aQQsAwI2Lm1bQAgBw+4KmFbQAAKzC
XNMKWgAA1qLZtIIWAIAVqZtW0AIAsC5F0wpaAABWJ29aQQsAwBqlphW0AACs
1NS0ghYAgPU6NK2gBQBg1Q5Nu/QqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADcqFevXj0wzG63W/oZvlFeeABXYBqaYxoaapEX3uPj49KP
e8sOvzLXf05XwcYE4Ao07Rz9M9Qi/TM9p17zF/f09LTUc7oKU9MeRmnpFQHY
JvN7zPgMsmD/eE4H0bQxTQswlPk9ZnwG0bTbo2ljmhZgKPN7zPgMomm3R9PG
NC3AUOb3mPEZRNNuj6aNaVqAoczvMeMziKbdHk0b07QAQ5nfY8ZnEE27PZo2
pmkBhjK/x4zPIJp2ezRtTNMCDGV+jxmfQTTt9mjamKYFGMr8HjM+g2ja7dG0
MU0LMJT5PWZ8BtG026NpY5oWYCjze8z4DKJpt0fTxjQtwFDm95jxGUTTbo+m
jWlagKHM7zHjM4im3R5NG9O0AEOZ32PGZxBNuz2aNqZpAYYyv8eMzyCadns0
bUzTAgxlfo8Zn0E07fZo2pimBRjK/B4zPoNo2u3RtDFNCzCU+T1mfAbRtNuj
aWOaFmAo83vM+AyiabdH08Y0LcBQ5veY8RlE026Ppo1pWoChzO8x4zOIpt0e
TRvTtABDmd9jxmcQTbs9mjamaQGGMr/HjM8gmnZ7NG1M0wIMZX6PGZ9BNO32
aNqYpgUYyvweMz6DaNrt0bQxTQswlPk9ZnwG0bTbo2ljmpZ+u9eWXgtYGfN7
zPgMomm3R9PGNC09Dq+QwzbqsIF6fG3ZlTmsgFcsK2J+jxmfQTTt9mjamKbl
qOmXaPr3tKUafY+HLeHDa0+v5RvG9KPR69DjsDLTGk6rZANOk/k9ZnwG0bTb
o2ljmpajrv8KmcJ17k6njLzm+hw1bWdswGkyv8eMzyD307T3swXWtDFNS2z6
Dbqppl1cceh4f09bVM6g2WLGZ5D7adrp7q48ZdQTwXXudKtNexjMV6+9yY1o
WmL5iQdXc8tN2xwQTUtgw8326tmb3Mjtj8+IbdF05tLFbzZ3P027fz2eV7uv
/fMkpWkv6+HZ4fVz3oZF0zJn+paDdKbo9Ms7/aN5oLI46zW/ZPpwWfNllm4w
P6Og2bS7Z9On1frvq1jntECwTPNxTVecft0cp6Xf7Tfb2dImIk1DZzzMGx+f
Qfv10wdvL36zxV3cT9NemaYdYSrSwkkbFk1LU/7pp7wAp+1w8ZrJz0+Yrji9
FKdLpq9KSG2c30v6OoXpf9MCc02bbrm+JLiv1KLpE2f1p7o6H1dq2qJ+NS2B
bc/v6Tfu7GnoxsdnUNNe4Ttk7qdpix2ENGGlF2e9xZ4uCRYonp38kjTRTP+4
ZkFtu2nzfeSmoxsWTUugeTJt/dUHeWcWy6QNRX2tYqbIO3bu3IPm5T33VW9g
0xbppMc1166alsCNN9sbOjoNHX0PcfT45OlSb0CKt2z2ffUy7Yyn/dzmdql4
ROmSfH2mmx302O+qafNt9WMmHcSot/YPz2+6FUdL9vOTSLq7ueMbo227afcz
+8j9GxZNS6CZasXGod5cpGXyX/Zii9Gs5fzIavNl2bzW0ftqXlKvdufjemgd
sdG0BLbdtPvsLLjzpqGh47PLTqBK7z3l25D6eGmzXtKRvfwhpyKqb7a5parf
9Clu9rLuuWnrZ7leoDiHLb8kbtr9ctv8NDG92qj+pm1uWF5pWubNHVyde4M+
vyS/sG7UaYG5+51r2rn1ie+reWvFavc8rrm12mtaQtPrdsl5YrAz5qDH7DMg
Q/unqJ367uKmbd7CvpWsxbXqBR6OtfTF3XnT1gsEybp/eVjjxpuWOfXuDCQP
1YHK4he5Tsp9Rx82D7fm5upxuq96fU6690nxyj/vcc0NC+TOO/JwJ9LgDPr1
eWi9H5RfeKmmLQ701Qs8aNph7q1pHacttiG71/aO0zIvPnk1LVP/7k8vs6Pv
+5zatM2kPHpfzUv2VR73PK7m1Jb/SNPSlE69W3q6GOUNp6Fx/RPsHT++PGO2
fr7S/57UtOnC5sZK0w5yb027yHN6Hf0bkMfWieivNC0z5hoy/dZPP3qYOZk2
uOTo5u6kpj313ps3dd7jKm5Q09J05fn9+vqnoVetzyxr2kE0bbHA0abNj94/
aNqr6/neg7Qv3KRpmVNvyfMUfHqWLpleZnUu7l5+ocF+ZnOXv1CbM9H0ks6X
7LmveJn+xxWcTLvXtIS23bSvwvNp5w6n5EY3bZGOg849KDYCmnZdTVvMFHPv
P6b/LU41uZptN21zY3K0Y+tb0LTUil/hffZbP9lnG4r0Epor4d3Lv3pQTDTp
BidzTfv4/Cnj/vsqtlTxEeCjj6tYz/p+g/Hkbt1h0540DQ0dn1PrJR0pKpYv
Vq9O5eJa9SZO045zXtM+Pn9hTn06XJopppdxemEXC5z0Or+IbTdtvgE5ui/c
pGmZU78w0q92kYiPL/9uQrExqZfZZx/Cemx9v1+zPOvNTs99pWs9vf7ynOav
Sc/jeno+M7/5W6ZpCWy4afPpfu7UgqOGjk/6XZ6rl1SbqV6alZsWmC5MW4y5
m02XTD+dzC0w4oHvNW21QD0v5K/e5m3m4dq8zXoaGmrDTTudmf+G+wialqb6
qMKcnpff3DJzr965N/rPuK+0sTr116SZvnMLa1oC227a8w6n5EaPzy77Uv3m
hqWol7k3gPJ6SUGb75sXd1r0Ur3M48zfa7iU+2naU+XRG6/k0Ydw5ce44aa9
CE1LU71Vv6a5pj1Vf5lf5I5udgPOsm58fl/c1cbngvXy8PJtnTdbr1E07Zzm
Z8RWQdPGNC1Ny74qdq1PdpxB03ILbnx+X9wax2cV86amnaNpt0rTUpv7JNTV
7J7/3GQ6Xe282xl9plOxnuPuiFW78fl9cWscn1XMm5p2jqbdKk1LbRuvh/xD
YTe7aeUe3Pj8vrg1js8q5k1Nuz2aNqZpAYYyv8eMzyCadns0bUzTAgxlfo8Z
n0E07fZo2pimBRjK/B4zPoNo2u3RtDFNCzCU+T1mfAbRtNujaWOaFmAo83vM
+AyiabdH08Y0LcBQ5veY8RlE026Ppo1pWoChzO8x4zOIpt0eTRvTtABDmd9j
xmcQTbs9mjamaQGGMr/HjM8gmnZ7NG1M0wIMZX6PGZ9BNO32aNqYpgUYyvwe
Mz6DaNrt0bQxTQswlPk9ZnwG0bTbo2ljmhZgKPN7zPgMomm3R9PGNC3AUOb3
mPEZRNNuj6aNaVqAoczvMeMziKbdHk0b07QAQ5nfY8ZnEE27PZo2pmkBhjK/
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
1MoXyzdQT9n5CfUy06A11/np+esU9tVJDs2mTatU1Gnno5vua3o4xQf208AW
MZavdj1K+xPVj7H5FMRjmz8pabHdy0OmRffmI7DPXpzBHTWnoWKZ5nO617Qh
83vM+AyiabdH08Y0baz4xUwVkf+qpmWmy/Pw2FVv1Na/6T3LzJXww8v0zWMj
X9VU4PWN1Jc076sumeCSND71Mk8v30Av7mvuOG2RhZ2Pbvd8wDm/sOi6+lpz
D/+835F6zetLesa2Hpk6L+uvhkiPLt9hOWlNimU07XnM7zHjM4im3R5NG9O0
gTpvguBpjmG9cB0nPQFZ328dY3OrWkTv0Yczl0/xFfN8OrpKxY0Hd310QE59
dEXT9lyreTs9mlcsLuyP6ubn+Oor1v3cPBO4J917XnXBGpKY32PGZxBNuz2a
NqZpA/3B0xzDp5cHTifF1N+TFvuOQ3n5O9rpkuaq9qzh0aKuH3I9DsW1esqw
2bTNjup/dMVGtWja5i5Gzyj1qG9q3zEsc2PbHIGeo6xzCdr5LPffoKadY36P
GZ9BNO32aNqYpg00j4UePVwWXN6TeT0Hx9Iy06kOzY8O1WlUr3wdLc2ALKIu
5Wu82kVSnt20c9l/NMDmHl1+4UNrF+PoKPWYe7zFpn5ubOPTFeZu5+goBQv3
PF9B3mvagPk9ZnwG0bTbo2ljmjb29PyBplSPxQIXz4a66+rF8k8DNTcaPWEc
5GszjYpljgZkXY9HN3HNpu0ZkPMeXfOE5J7b6TH3eJvDUqzh0bFNCz89f2FF
vZLxua/15fGKpQvnwlXTBszvMeMziKbdHk0b07Sx9MmvuXrsz4Y6V+rsCQ6B
1jcebC7mjprGl+xbhwTr8Dvvc1VzA5VrNm0dS2c/umZA5rsYnbfTo/l4j0Z1
5+f48hXu36/J7zQe0p5l6seraeeY32PGZxBNuz2aNqZpY/FMHczyc2k63dpu
5msB8tNE09YgLfb08vsEis1F3jZzt5wvVl+yP3ZQ9OlZsZJxCsbr3FzJ4HZO
fXTFTeX3mC8z3UW6JA11c5TSyge/OM2mDUapZ2zr3Z9gBebmlLpX055U0LRp
mblJStMGzO8x4zOIpt0eTRvTtIH07u3cENWZlBR1mh+CmzSXSaGSlkl1kRdU
OvcgX5O5o3+TIqfTJUWY1VdMj7FY7X0YmU/Px5bzg5B10RX3FYToU/ZXLfof
XX07zWvlOwvFmDRHKX/UcyFXb9Lr7x/oGdu0TLHyKTLnXpzNqN5nr+rUzOmF
t3v5xWjFMnnwN+9O084xv8eMzyCadns0bUzTBvLpvhkPc9mwb/VwuqSIzzyN
gmWa+TddsfiMWPMIXhFgzZtt5mK6o7qo84BsXqu5YtMKP7X+XlXdtEVcnfHo
djMnQufXKuK8iPw4GoPt9tSBT8/fDTv3eOOxrfdf0uXBi7M5SsVP6xdnfr/1
Ms3nNB8NTTvH/B4zPoNsu2lv8AVTH7i4OE0b07RziqOIT8fee20qDq81r9u5
zNwV+9enfuu8eeiv59577vSMdW6eT9v5AOt47hmfow8tvoVd9pdng2XiWzjj
kofW0ezmcxev2NH7PbpMvkqado5mixmfSf3W1Zvf4Fabdtc6539xV1ilSz2n
J8XDimjaprm62/ZYXXyLeqpm0y54O0ftwlNqB2k+TdMWfsFt1A3OL7fjIvP7
VuegvaZ9NveO0tm23bSLT1i1G2/aw6AdrpjeH7z0qt0ETdv09PKviCbbG6vd
y3NHt9G01+mrRYJ2P/P21tS011+Z/N417Zw3md93zyfPbPgNx1tr2qV+mzTt
2t1g0077wqljk61uTDRt027m2023N1Bpf+0WHt3TS2ffyHVe0kttrps7XFc4
j2tuZZJ7m7/6nTq/39s0dGv9M/c+3Wia9iRzZ0YFh3Cn36yn7Ps582vlV6+v
MreBzX96O02b7ws3DV3JBWnaOdMLdUqFuc80bcD06JYqoovbPX86bDOPqCm9
Jidzn9viRvTM73Mdew/T0Ij+yeul+aO5S6ZrPbROyB9dRJr2JA/Vh6mL36Bi
MJ+yDynXyxRXzx/F3A3Wd3fxZ7AWPKe7l6cWBDb8npqmBRgqmN+PHk5JtnqQ
dj+gf56yb+2oZ/A6PPKznuZm/2YR5dea0nS6cJd9u3WueIz1Apq230PVtPmh
jLRjkv/v3E/3z4dYi+MDj9VXwRRXqe/iyk3bsy9c2/DGRNMCDFXM7+dNQxs+
FH/Z/mnWS14acdPuZ849qAuqzpvH6tsLg+B5zL6fvLnAm7u3pi1Kph7e4qf5
aE/P4NF7LPZx6nu8TtOmY8InbUPuh6YFGOTx+RNepqHApfpnurX8kuII2xlN
Wx+jK26kvtNafpVmETn34CQPHU1bDPjc1ev/zaUTSPIbLF4z9T0Oklaj8zSD
+6RpAQZ5fP5zFdP7YjRdpH+abbN/GRtnNG19YLZu2rmYyYso3WzzULCmPcnD
KU1bLFDvUzRfNun9lMfnT9bcSNPmz+mr167/u3abnHtwklt4JdQfcACviltW
z++modwF+2do0wYF1YyZuogeXn74qFhe057kpKbdZ7uWxVkf9a1N6u69zabN
dW5YRq/kgjRtj3ove/J43Q/XPz1/wv0WnrJpc73heXYt8nlz6XWhLZjfp48q
3/k0dJ2mTRee0bT7jiIqbrNZRJr2gk5t2ofnz/E1jwDUV6+fo7ppi9tZvGmT
oxuWrc7dmrZf8XLdPX9t1HXuPd/MXu0pyw8yNH/fvXJuQfPcvE16erauxuuc
349+Fc9VVnYBl+2fo3l5XtMeLaLmnc7dS32CbnPF3pCmLc496Ly1SfGq2L38
yzK76g/NXGe7dMZz2tywrGj7eRJN26mZDXXpjVP8/l7nTpsHE9I6OE57I5rz
47ata5t8xvw+HWMppqGtPsWX7Z/4AGl9d/V7cPUvVH0+baF+QTaLKF1ynSLS
tEWCPmTfGFBM3/XV01Wens+kLXY60ivn8aVRDzi707Of03zDctH1uhWattOV
D4U1d/mvP6Pd+Ct/8aq5kV+cYkZexNChqJ/ozTdtLr2HuKKHfJKL909xnkCx
6W7mTbM/8+w5WkTFs1MU0bRAXc75ejpOe5Kn7KvSdq2/r1Fc8ljJn7X66vvn
w1bp6E19iL5YoHkjl7Xgc7oKmrbTNbPhsTpNd6m2vOWmrUfpyp5af6P2+m7h
/OqhQ9F8otcVeFeY31dtxPik2HhsvZ1Ut0rzPbg8MlPKvkkRzd3LdPnFP+m5
7aY9SfNN1Vue4OZo2thKm3b3/PcE6zWfNgtpC9PcfctvYd/a1KRl0tbmoTqZ
du5aweoVK9NcIO3a7zIPz9/mHeyW1tvDdPX6IXeu89yvfPPhF6vUXCC/sLk+
c7e8q94HTKPUfDhHxS+heGx32ceygpfW3IvzMXs7LHgBTz+ae4z5vbzhr/DF
h+IKT7Sm3ZLbH5+n1l7b7ReRpk2aW4zbfwZrmja2xqbNd72fns9Byus0HVN9
yt7cSVffZaW6nzmpoFimePcqhUT965BfMf+lLlZsl/0VoaJw0n1N8/hT9r5V
fuG0WL7FeMrOT6iXSQcW6nV+evnWSX6zzV/5tEpFtHQ+uum+HrMvt8mPdTy1
TirLV7sepf2J6sfYfArisc2flLTY7uUh0yL28hHYZy/O4I6a80KxTPM5XXAo
rvNE19e9Zbc2v9+a2x+f/FcjeWp9lOymaNokTfS7Z7e2hp00bWx1TVu8DlNF
5K/MtMx0eR4eu+qN2vqF3bPMXAk/vEzfh+ocrRSlzTva931L3r51LkRwSRqf
epni+ENxX3O7sUULdT66XfUnudMq1U/o0Yd/3ou2XvP6kp6xrUemzsui/PNH
l++wnLQmxTJv0rSjh2LoE61pt+T2x2euiG586tS0ubRz/fB86vJNrV4nTRtb
V9PWs14wD85NhcXl9YzcE5D1/dZz9NyqFtF79OHMNUN8xTyfjq5ScePBXR8d
kFMfXZE6Pddq3k6P5hWLC/tbq2iqufWso/GxdYJoT9H1vOo6XXko9pd+ojXt
lqxifNZYRJp2ezRtbHtN+5S9X9m8enFhMTn2pMW+4/hV/V5VvV9fr8/cGs4F
ZLFMPA7FtXrKsNm0zY7qf3TFVq5IneYuRs8o9ahvat8xLHNj2xyBnqOsc5HW
+Sx33mBs6FBc4Yl+0LQbYnwG0bTbo2lj62ra5rHQnmNEc5f3ZF7PwbG0zPSe
VHMXvu6BeuXrab0ZkMVcn/I1Xu2iNM5u2rnsPxpgc48uv/ChtYtxdJR6zD3e
Yts7N7bxe/Rzt3N0lIKFe56v8/J+9FBc4YmuF75l5veY8RlE026Ppo2tq2n3
2QeaUj0WC1w8G+quqxdLH4GZVqy52g/HwjjI12YaFcscDcg6Ko5uc5pN2zMg
5z265gnJPbfTY+7xNoelWMOjY5sWfno+465eyeDc1+bl8YqlC89Iu6FDcZ0n
+rwHvhTze8z4DKJpt0fTxlbXtLvnT37N1WN/NtRzdD3XB4dA6xsPfn/njprG
l+xbx8HqHjjv4zZzA5VrNm2dE2c/umY15bsYnbfTo/l4j7ZWs6zmViBv2uZP
m1fcVX9RaG7FOt+SOGroUFznida0W2J8BtG026NpY6tr2nguC+bBuTSdbm03
87UA+Wmi6dczLfb08vsEit/fvG3mbjlfrL5kf+yg6NOzYiXjQojXubmSwe2c
+uiKm8rvMV9muot0SRrq5iillQ9eyc2QC0apZ2zr3Z9gBeY28nWvPlXHLYNl
mrPGgkNxhSd6r2m3xfgMomm3R9PG1tW06d3buXWuZ8+kqNP8uNOkuUyatdMy
qS7ybEjnHuRrUgRJscIPL3M6XVLUSH3F9BiL1d6Hkfn0fGw53Vqze4v7Cvrk
KfurFv2Prr6d5rWesp2FYkyao5Q/6rnUqbexj9X3D/SMbVqmWPkUmXMvzmZJ
7rNXdQrF9MLbvfxitGKZvANvZyiu8ETX93LjzO8x4zOIpt0eTRtbV9Pm030z
HuayYd/q4XRJEZ95DwTLNPPvofU1L3U97qvqaN5sMxfTHdVFnQdk81rNFZtW
+Kn196rqpi3i6oxHt5s5ETq/VhHnReTPvWLTcze3IX16/jOUeZPXjzce23r/
JV0evDibo1T8tH5x5vdbL9N8Tpcdius80XtNuy3GZxBNuz2aNraipk3Hi9L/
xrN2U3FMae59255l5q7Yvz7FknOH/nruvedOz1jnumk776tYLD+gF1/96EOL
b2GX/eXZYJn4Fs645KF1NLv53MUrdvR+jy6T/+j6Q3G1J1rTbonxGUTTbo+m
ja2laefqbhUrf7Yi46+v2bQL3s5Ru/A80kGaT9Pu9RHLBTfpiwzF1Z5oTbsl
xmcQTbs9mja2oqadexPz9lf+JLuXpxRuo2mvUyCLVNy+dTLq/rlpr78y6d4X
GYqrPdGadkuMzyCadns0bWwtTbub+dLL21/zU6X3rG/h0T29dPaNXOc1ttT2
s7nD1Qzdq1lkKK7wROevxhVNl+b3mPEZRNNuj6aNraVp98+HnqZUmPtM0wZM
j27ZIrqg3fOHhjbziJrSa3LS/NzWtt3JE30e83vM+AyiabdH08ZW1LQAa2R+
jxmfQTTt9mjamKYFGMr8HjM+g2ja7dG0MU0LMJT5PWZ8BtG026NpY5oWYCjz
e8z4DKJpt0fTxjQtwFDm95jxGUTTbo+mjWlagKHM7zHjM4im3R5NG9O0AEOZ
32PGZxBNuz2aNqZpAYYyv8eMzyCadns0bUzTAgxlfo8Zn0E07fZo2pimBRjK
/B4zPoNo2u3RtDFNCzCU+T1mfAbRtNujaWOaFmAo83vM+AyiabdH08Y0LcBQ
5veY8RlE026Ppo1pWoChzO8x4zPI4k37xKVNA6tp50xNexilpZ8ogG16eE2z
zdE/gyzYP9NdM4imnTM1LQBDado5+meopfrnFWPYksSWfn4ANs40FFv6+dks
LzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgDnvete73v3u
dy+9FgAAcKZD0L7jHe/QtAAArNQUtJoWAICVSkGraQEAWKM8aDUtAACrUwSt
pgUAYF3qoNW0AACsyFtvvVUHraYFAGAtDkH79re/XdMCALBSU9BqWgAAVioF
raYFAGCN8qCda9rpz+N2+o1L+M3L+a1L+O1L+J3L+d1L+L2L+v2L+oNL+MPL
+aNL+ONL+JPL+dNL+LMx/vwS/uKi/vIS/uqN/fVF/c0l/O3l/N1F/f0l/MNF
/eMl/NMb++eL+pdL+NfLWbqqWEwRtHNNO/mAyge2fFDlgzMf0vKhlQ+rfHjl
Iyof2fJRlY/OfEzlY1s+rvLxmU9o+cTKJ1U+ufIplU9t+bTKp2c+o/KZLZ9V
+ezQ51Temfncyue1fH7lC1q+sPJFLV9c+ZLMl7Z8WeXLK19R+crKV2W+uvI1
LV9b+bqWr698Q+YbK9/U8s2Vb6l8a+XbWr698h2Z76zsQm9V3tXyXZXvznxP
5Xtbvq/y/S0/UPnBlh+q/HDmR1p+tPJjlR9/9hOVn2z5qcpPt/xM5Wdbfq7y
85lfqPxiyy9VfrnyK5Vfbfm1yq/P6Dmc0nmIIz7+0Hk0oHPHvHN/Od6Z7dm1
jHfxOve2OneCOvdN4v2FznTvKWple5/qoNW0mlbTalpNq2k1rabVtKxIM2g1
rabVtJpW02paTatpNS1rMRe0mlbTalpNq2k1rabVtJqWVQiCVtNqWk2raTWt
ptW0mlbTcvsOM8jb3vY2TatpNa2m1bSaVtNqWk3LSk1Bq2k1rabVtJpW02pa
TatpWakUtJpW02paTatpNa2m1bSaljXKg1bTalpNq2k1rabVtJpW07I6RdBq
Wk2raTWtptW0mlbTalrWpQ5aTatpNa2m1bSaVtNqWk3LijSDVtNqWk2raTWt
ptW0mlbTsiKHX3xNq2k1rabVtJpW02paTcvaNbNW02paTatpNa2m1bSaVtOy
LnXWalpNq2k1rabVtJpW02paVqfIWk2raTWtptW0mlbTalpNyxrlWatpNa2m
1bSaVtNqWk2raVmplLWaVtNqWk2raTWtptW0mpb1mrJW02paTatpNa2m1bSa
VtOyaoetgabVtJpW02paTatpNa2mZe0Ov/6aVtNqWk2raTWtptW0mpa1m8ta
TatpNa2m1bSaVtNqWk3LijSzVtNqWk2raTWtptW0mlbTsi511jZrdoqWnj45
qm6VuVw56ksqzYaJ9fTMUV/VUndOj87siX1DpQ6hM/Rk0lE9ydTv1KBq6gmq
WGdideqJrqPiADtJT5j16yy3WE/C9Yu7rlNn7AU6q69TTwQe1dmEPX6nUrfi
STobskdPUh7V05n9/qJSV2isM0djPV3ar7NaY3MFm1s6rFhSkbXNpj0ss/Rq
AgBAJM9aTQsAwEqlrNW0AACs15S1mhYAgFU7tKumBQBg7ZpZq2kBAFiXOms1
LQAAq1NkraYFAGCN8qzVtLCU6Q9DjLvxQbd8hqGPFIB7lrJW08JSXr169fDw
MOKWDwF5uOXbycjH15ZeCwC2acpaTQtL0bQAcBHTH/5eei3gTmlaAADWTtMC
ALB2qWkP/5iq7/CPYplDlz4+q386t0DdtId/H346fVZr+kfxo+I280uCdUi3
Of003Wy65NVrQdOm+zp7EIr76rwWAAAXMTVt3mPT/9YLNH/aXGC6vGja6UdT
19W5+/BacUm+cFrDuSXTOsytVb3m/YOQ1qFziOauJWsBAEaoW6u4pPgKrOmn
zVJNy6d/pCWnf+eL5VmYV2t93X31nWBFUk69WuRiXbDBcdqjg1CsQ7F6c7E6
7rwOAAByze4KDmkWdTr1ZLDkFH519R1uP11xesd/+m+wVs3rNteheVD0aNMW
F/YPwtwtOzYLAHAdzZwronGfnRdaHBQNmi017XSt4lhrXrzTW/P5JXUlFitQ
NG19SLb5oE5q2v5BmNZ8uqR4mNPCxUm2AABc1tGcy08Knc5DKM50jZt2uqlm
o+ZHcet/1GcCPL7+/FeK5PTTKzRtfnbE3JHndNZufXnK4Nv5FggAgC05+rZ7
89NS+XHa+A36KeSa9ZsSMa1Afklwyu51mrYYhGKB+Bza+kfNj9cBAHARdc4V
VVZ/VKo4lXTu8GOxZPHhsv1zZOan0U7HYItVqtfwaNPW36uwP7Fp40FoXnL0
jnxkDABgkBRv+RcUzBVjet+/OJX08flLtKYF8psqvnSrPuQb3FqxhvkKxE27
f/llCOlacdOePQh1ur96/rbb4PAyAACXkr5z4OHZY/ZnC/bZaaLpR82TXeur
103b/EavunubZymk259C8WjTpi5N1zp6nPakQXisvgs3XyAeGQAAxplOfD31
R/kC45rtvNvvvFYeyWcPwtx9jR4ZAADYO9MVAID107QAAKydpgUAYAOc7woA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAABwtv8HzeZnLA==
    "], {{0, 159.00115938345385`}, {346.502526580923, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{191.9986, 191.9986},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{523.127526580923, Automatic},
  ImageSizeRaw->{346.502526580923, 159.00115938345385`},
  PlotRange->{{0, 346.502526580923}, {0, 159.00115938345385`}}]], "Input",Expr\
essionUUID->"232c4878-c2c8-4bb6-9184-42f251d5b242"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HardeningForward"}]], "Input",
 CellChangeTimes->{{3.869539278569579*^9, 3.869539282739047*^9}, {
  3.869539369640472*^9, 3.869539370186928*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"756716bb-510a-420e-89f7-a1058728fee0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening forward.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"HardeningForward", "[", "]"}], ":=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Typed", "[", 
                    RowBox[{"neurallogic`Private`input", ",", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", "2"}], "]"}]}], "]"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#1", ">", "0.5`"}], ",", "1.`", ",", "0.`"}], 
                    "]"}], "&"}], ")"}], "/@", "#1"}], "&"}], ")"}], "/@", 
                    "neurallogic`Private`input"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"neurallogic`HardeningForward\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening forward.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Hardening forward.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, neurallogic`HardeningForward, {
      neurallogic`HardeningForward[] :> Function[{
          Typed[neurallogic`Private`input, 
           TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
         Map[Map[If[# > 0.5, 1., 0.]& , #]& , neurallogic`Private`input]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "neurallogic`HardeningForward"|>, False]]], "Output",
 CellChangeTimes->{3.869539370678505*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"184276d0-c8f5-4c2d-aadb-b25f6d3963d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HardeningBackward"}]], "Input",
 CellChangeTimes->{{3.869539384685996*^9, 3.869539387323783*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"db4e65b8-6ef5-4b80-a885-e698c3e3ee51"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening backward.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"HardeningBackward", "[", "]"}], ":=", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Typed", "[", 
                    RowBox[{"neurallogic`Private`input", ",", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", "2"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"Typed", "[", 
                    RowBox[{"neurallogic`Private`outgrad", ",", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", "2"}], "]"}]}], "]"}]}], 
                    "}"}], ",", "neurallogic`Private`outgrad"}], "]"}]}]}, {
                   " "}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"neurallogic`HardeningBackward\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Hardening backward.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Hardening backward.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, neurallogic`HardeningBackward, {
      neurallogic`HardeningBackward[] :> Function[{
          Typed[neurallogic`Private`input, 
           TypeSpecifier["PackedArray"]["MachineReal", 2]], 
          Typed[neurallogic`Private`outgrad, 
           TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
         neurallogic`Private`outgrad]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "neurallogic`HardeningBackward"|>, 
   False]]], "Output",
 CellChangeTimes->{3.869539391840817*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"f9f7a6a8-cc39-4ffa-a590-9bcc3e4aa428"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hl", "=", 
  RowBox[{"HardeningLayer", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.8695392171607656`*^9, 3.869539219554823*^9}, {
  3.869539405449853*^9, 3.869539406086122*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"9a0caead-68c6-416d-b886-d83a3e5aae1e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["CompiledLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LayerFunction\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"LayerFunction\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LayerFunction"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LayerFunction\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LayerFunction"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    
                    RowBox[{
                    "CompiledCodeFunction", "[", "\"\[Ellipsis]\"", "]"}], 
                    RowBox[{"Function", " ", "@", " ", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Greater", "[", 
                    RowBox[{"#", ",", " ", "0.5"}], "]"}], ",", " ", "1.", 
                    ",", " ", "0."}], "]"}]}]], Annotation[#, 
                    GeneralUtilities`PrettyForm[If[# > 0.5, 1., 0.]& ], 
                    "Tooltip"]& ], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GradientFunction\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"GradientFunction\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GradientFunction"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GradientFunction\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GradientFunction"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    
                    RowBox[{
                    "CompiledCodeFunction", "[", "\"\[Ellipsis]\"", "]"}], 
                    RowBox[{"Function", "[", 
                    RowBox[{"\n", "\t", 
                    RowBox[{"{", 
                    RowBox[{"\n", "\t\t", 
                    RowBox[{"Typed", "[", 
                    RowBox[{
                    TemplateBox[{"NeuralNetworks`Private`Compilation`input", 
                    StyleBox["input", 
                    RGBColor[0.75, 0.4, 0.4]]}, "DefinitionSymbol", Editable -> 
                    False, DisplayFunction -> (TagBox[
                    TagBox[
                    TooltipBox[#2, 
                    
                    StyleBox[#, FontColor -> RGBColor[0, 0, 0], FontFamily -> 
                    "Courier", FontWeight -> Bold], TooltipDelay -> 0.4], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    RawBoxes[#]]}]], 
                    MouseAppearanceTag["LinkHand"]]& ), 
                    InterpretationFunction -> (#& )], ",", " ", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", " ", "2"}], "]"}]}], 
                    "]"}], ",", "\n", "\t\t", 
                    RowBox[{"Typed", "[", 
                    RowBox[{
                    TemplateBox[{"NeuralNetworks`Private`Compilation`outgrad", 
                    StyleBox["outgrad", 
                    RGBColor[0.75, 0.4, 0.4]]}, "DefinitionSymbol", Editable -> 
                    False, DisplayFunction -> (TagBox[
                    TagBox[
                    TooltipBox[#2, 
                    
                    StyleBox[#, FontColor -> RGBColor[0, 0, 0], FontFamily -> 
                    "Courier", FontWeight -> Bold], TooltipDelay -> 0.4], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    RawBoxes[#]]}]], 
                    MouseAppearanceTag["LinkHand"]]& ), 
                    InterpretationFunction -> (#& )], ",", " ", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", " ", "2"}], "]"}]}], 
                    "]"}], ",", "\n", "\t\t", 
                    RowBox[{"Typed", "[", 
                    RowBox[{
                    TemplateBox[{"NeuralNetworks`Private`Misc`output", 
                    StyleBox["output", 
                    RGBColor[0.75, 0.4, 0.4]]}, "DefinitionSymbol", Editable -> 
                    False, DisplayFunction -> (TagBox[
                    TagBox[
                    TooltipBox[#2, 
                    
                    StyleBox[#, FontColor -> RGBColor[0, 0, 0], FontFamily -> 
                    "Courier", FontWeight -> Bold], TooltipDelay -> 0.4], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    RawBoxes[#]]}]], 
                    MouseAppearanceTag["LinkHand"]]& ), 
                    InterpretationFunction -> (#& )], ",", " ", 
                    RowBox[{
                    RowBox[{"TypeSpecifier", "[", "\"PackedArray\"", "]"}], 
                    "[", 
                    RowBox[{"\"MachineReal\"", ",", " ", "2"}], "]"}]}], 
                    "]"}], "\n", "\t"}], "}"}], ",", "\n", "\t", 
                    TemplateBox[{"NeuralNetworks`Private`Compilation`outgrad", 
                    StyleBox["outgrad", 
                    RGBColor[0.75, 0.4, 0.4]]}, "DefinitionSymbol", Editable -> 
                    False, DisplayFunction -> (TagBox[
                    TagBox[
                    TooltipBox[#2, 
                    
                    StyleBox[#, FontColor -> RGBColor[0, 0, 0], FontFamily -> 
                    "Courier", FontWeight -> Bold], TooltipDelay -> 0.4], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    RawBoxes[#]]}]], 
                    MouseAppearanceTag["LinkHand"]]& ), 
                    InterpretationFunction -> (#& )], "\n", ""}], "]"}]], 
                    Annotation[#, 
                    GeneralUtilities`PrettyForm[
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    NeuralNetworks`Private`Compilation`outgrad]], 
                    "Tooltip"]& ], Short], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Input Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Output Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("CompiledLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.869539241112834*^9, 3.869539406634612*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"89c4749e-fd41-48c1-98e5-46badb53789c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"softBits", "=", 
   RowBox[{"{", 
    RowBox[{"0.5", ",", "0.2", ",", "0.55", ",", "0.9"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.869539478151676*^9, 3.869539483930584*^9}, {
  3.8695398774879923`*^9, 3.869539878845853*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"bc8a1be9-e122-4191-9668-745afdc011a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hl", "[", "softBits", "]"}]], "Input",
 CellChangeTimes->{{3.869539425232098*^9, 3.869539436166411*^9}, {
  3.869539487073018*^9, 3.8695394875023127`*^9}, {3.869539881543714*^9, 
  3.869539882886404*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"8f6164b0-caa1-40de-92d0-13202cf813b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "1.`", ",", "1.`"}], "}"}]], "Output",
 CellChangeTimes->{{3.869539429654729*^9, 3.869539436549562*^9}, 
   3.869539487857136*^9, 3.869539883145211*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"1e86a30d-641d-4192-b07d-65a261273ecd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weights", "=", 
  RowBox[{"NetArrayLayer", "[", 
   RowBox[{"\"\<Array\>\"", "->", "softBits"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8695395491449957`*^9, 3.8695396142784033`*^9}, {
  3.869539885568016*^9, 3.869539886550171*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"2bf4077c-0a42-415d-a495-e7e4e9979335"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetArrayLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Dimensions\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Dimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Dimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Dimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Dimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Array\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Array\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Array"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Array\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Array"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Output Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetArrayLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.869539582794217*^9, 3.869539614661045*^9}, 
   3.8695398867942457`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"a7fa4438-3679-45f6-a68e-ee111b062e13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{"weights", ",", "hl"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.869539699643866*^9, 3.8695397089182653`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"b89dd748-3180-47f1-9be1-7d5609b1e4d9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["0", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {4}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f5af60ee_b1b0_433d_a89e_32c2e5356491", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
6kT4jf8DRbvZ4A==
                    "]]|>, "orcInstance" -> 80782880, "orcModuleId" -> 
                    81180096, "targetMachineId" -> 80240000|>, 
                    140455202473792, 140455202473648, 140455202473728, 
                    140455202467840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f6c8634c_e665_45d6_b0a6_870c2a1f4947", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
/qeoUVj4d6VZv7I=
                    "]]|>, "orcInstance" -> 80845952, "orcModuleId" -> 
                    62309552, "targetMachineId" -> 81149920|>, 
                    140455202460192, 140455202459792, 140455202459872, 
                    140455202459648, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "323de6e276a6e826", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NetArrayLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["CompiledLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.869539709439547*^9, 3.869539888309537*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"51570b97-c0ac-4f26-9d17-803d1a71486c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8695397206881943`*^9, 3.869539778893979*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"b997031a-a67c-4da0-9166-527e624553ef"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["0", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {4}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f5af60ee_b1b0_433d_a89e_32c2e5356491", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
6kT4jf8DRbvZ4A==
                    "]]|>, "orcInstance" -> 80782880, "orcModuleId" -> 
                    81180096, "targetMachineId" -> 80240000|>, 
                    140455202473792, 140455202473648, 140455202473728, 
                    140455202467840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f6c8634c_e665_45d6_b0a6_870c2a1f4947", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
/qeoUVj4d6VZv7I=
                    "]]|>, "orcInstance" -> 80845952, "orcModuleId" -> 
                    62309552, "targetMachineId" -> 81149920|>, 
                    140455202460192, 140455202459792, 140455202459872, 
                    140455202459648, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "323de6e276a6e826", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["NetArrayLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["CompiledLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8695397215761557`*^9, 3.869539784080496*^9}, 
   3.869539892102765*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"6711a25c-579d-4ed2-9cbb-374bec7f5164"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedSoftBits", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"NetExtract", "[", 
     RowBox[{
      RowBox[{"NetExtract", "[", 
       RowBox[{"trainedNet", ",", "1"}], "]"}], ",", "\"\<Arrays\>\""}], 
     "]"}], "[", "\"\<Array\>\"", "]"}], "//", "Normal"}]}]], "Input",
 CellChangeTimes->{{3.869539797416052*^9, 3.869539838925765*^9}, {
  3.869539903623768*^9, 3.869539905918219*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"729c22dd-b81d-40aa-a71a-ed6f609b1cc1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5059986710548401`", ",", "0.5101422667503357`", ",", 
   "0.4892035722732544`", ",", "0.49813035130500793`"}], "}"}]], "Output",
 CellChangeTimes->{{3.869539806214394*^9, 3.869539839328739*^9}, {
  3.869539897624827*^9, 3.869539906524953*^9}},
 CellLabel->"Out[41]=",ExpressionUUID->"b7f909ce-07cd-4a6d-9626-a438c0ce04f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Harden", "[", "trainedSoftBits", "]"}]], "Input",
 CellChangeTimes->{{3.869539907680393*^9, 3.869539910626845*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"ac90573d-5ae5-42d9-8db6-3b87a3492f87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]], "Output",\

 CellChangeTimes->{3.869539911491687*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"e2c195e4-aeec-4121-a336-e2ef52401565"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"970aaf11-0663-4b59-a0b5-2cc843b5a409"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 598, 9, 98, "Title",ExpressionUUID->"03acce4e-9d75-404e-a4e4-9867762ca33c"],
Cell[1181, 33, 388, 9, 29, "Input",ExpressionUUID->"4cda9ff6-5a6b-41ee-a8b6-b6984dcffaf4"],
Cell[CellGroupData[{
Cell[1594, 46, 203, 3, 29, "Input",ExpressionUUID->"ead22a00-c06c-4c88-bd04-a06016cf040c"],
Cell[1800, 51, 10027, 250, 193, "Output",ExpressionUUID->"ea26b7d7-dbf9-4cee-88a9-228c863b152b"]
}, Open  ]],
Cell[11842, 304, 17764, 295, 253, "Input",ExpressionUUID->"232c4878-c2c8-4bb6-9184-42f251d5b242"],
Cell[CellGroupData[{
Cell[29631, 603, 252, 4, 29, "Input",ExpressionUUID->"756716bb-510a-420e-89f7-a1058728fee0"],
Cell[29886, 609, 10692, 264, 193, "Output",ExpressionUUID->"184276d0-c8f5-4c2d-aadb-b25f6d3963d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40615, 878, 204, 3, 29, "Input",ExpressionUUID->"db4e65b8-6ef5-4b80-a885-e698c3e3ee51"],
Cell[40822, 883, 10723, 264, 217, "Output",ExpressionUUID->"f9f7a6a8-cc39-4ffa-a590-9bcc3e4aa428"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51582, 1152, 281, 5, 29, "Input",ExpressionUUID->"9a0caead-68c6-416d-b886-d83a3e5aae1e"],
Cell[51866, 1159, 57944, 1070, 144, "Output",ExpressionUUID->"89c4749e-fd41-48c1-98e5-46badb53789c"]
}, Open  ]],
Cell[109825, 2232, 351, 8, 29, "Input",ExpressionUUID->"bc8a1be9-e122-4191-9668-745afdc011a2"],
Cell[CellGroupData[{
Cell[110201, 2244, 307, 5, 29, "Input",ExpressionUUID->"8f6164b0-caa1-40de-92d0-13202cf813b9"],
Cell[110511, 2251, 294, 5, 33, "Output",ExpressionUUID->"1e86a30d-641d-4192-b07d-65a261273ecd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110842, 2261, 337, 6, 29, "Input",ExpressionUUID->"2bf4077c-0a42-415d-a495-e7e4e9979335"],
Cell[111182, 2269, 32011, 598, 64, "Output",ExpressionUUID->"a7fa4438-3679-45f6-a68e-ee111b062e13"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143230, 2872, 289, 6, 29, "Input",ExpressionUUID->"b89dd748-3180-47f1-9be1-7d5609b1e4d9"],
Cell[143522, 2880, 53866, 951, 68, "Output",ExpressionUUID->"51570b97-c0ac-4f26-9d17-803d1a71486c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197425, 3836, 368, 9, 29, "Input",ExpressionUUID->"b997031a-a67c-4da0-9166-527e624553ef"],
Cell[197796, 3847, 53896, 952, 68, "Output",ExpressionUUID->"6711a25c-579d-4ed2-9cbb-374bec7f5164"]
}, Open  ]],
Cell[CellGroupData[{
Cell[251729, 4804, 489, 11, 29, "Input",ExpressionUUID->"729c22dd-b81d-40aa-a71a-ed6f609b1cc1"],
Cell[252221, 4817, 367, 7, 56, "Output",ExpressionUUID->"b7f909ce-07cd-4a6d-9626-a438c0ce04f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252625, 4829, 218, 3, 29, "Input",ExpressionUUID->"ac90573d-5ae5-42d9-8db6-3b87a3492f87"],
Cell[252846, 4834, 230, 5, 33, "Output",ExpressionUUID->"e2c195e4-aeec-4121-a336-e2ef52401565"]
}, Open  ]]
}, Open  ]]
}
]
*)

