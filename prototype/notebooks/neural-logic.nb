(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    486981,       9615]
NotebookOptionsPosition[    478572,       9460]
NotebookOutlinePosition[    479010,       9477]
CellTagsIndexPosition[    478967,       9474]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Logic", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 
  3.864793591864854*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{"ParentDirectory", "[", 
      RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{3.868007248648005*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBiasToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "InitializeBiasToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardWeightSize", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardWeightSize", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftWeightSize", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "SoftWeightSize", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralPortLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "HardNeuralPortLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBiasToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "InitializeBiasToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SpaceSaving", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8d3f7022-35eb-49dc-99ab-6d5d90e5eba2", {
                   "SpaceSaving", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.1357142857142857]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->CompressedData["
1:eJwVz1tM0mEABXAkJWqVxpqVy5xGqGlOrVkPtYZ2gZZpasxRDw6tLbPMAkNM
FCxbF9dgztJ0I63ITFFxRhecq3QzRaBMI1eWl6b0b6sE1CDtfA9nv5fzcE6w
KDflhBeNRhMgnhTFMkUfxZVGPPUlftFU8Yj2Y3vyiKHGWgnxV1KlijhW4jIR
r8zH0pWwot4WR5zeeTeZyGwuaiVGsebEpfDbDXOfCvKuXhombvnE2KiGXazj
ARXQo6yJfwx7TgXGLMJov48Xid1B8Q7ivOZ9Ja2f4nq/K1R7Qcb+rZeXQPGh
NeVEV1gkyxuKOvlaJqxSWqYekZ6zpKABrmjVxrZCQfiqcWJDXcosMUes62qD
6qCHo8Syyf4pPbxuzNvcDhNqupcbYOdoI8sKo6UfdG7o2SBfyzRRXJ1bXh0G
nX1O/wxobjnSlAmzONbnxZD5JKZQAR3CqJ8D8PDZ0nVW2BH+YPswfJMv/cce
wK6ZbTWJMF+uNwthe8tIkQz2jDy72QtvDQZ2EGUrd9z+DLOb7Aon5ESu5s1C
+bmD4jnYdoHuMw8dht3uvzBTdE0UYaa4m0wBkmSY1KwqIA5L49JTYefQ7+k0
GCJ93XsUnhwZ3SeAJeP+Y0TNnawZCUxzBxT6WChunXmpLQ2y6en6ezAkxx4z
CCMNVO0CXD+RuCvQin9lZzo4kPpx3jcUfrW9GEqAymDaDHHvwmQED54+MFGe
CjWLjRYB5Ee9zK6H94sz4rTwu5EtfAVdDH4u8Y/M7y3xP4TViyI=
  "],
 CellLabel->"Out[2]=",ExpressionUUID->"5806ad0f-fee1-4ca0-859a-130401d52e30"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utilities", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.8666054582437687`*^9, 
  3.866605459643314*^9}},ExpressionUUID->"c980f6be-656d-464c-97de-\
7bbd91e03ade"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"HardPrediction", "[", "m_", "]"}], ":=", 
  RowBox[{"Ordering", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"t", "=", 
           RowBox[{"#", "[", "True", "]"}]}], "}"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MissingQ", "[", "t", "]"}], ",", "0", ",", "t"}], "]"}]}],
         "]"}], "&"}], ")"}], "/@", 
     RowBox[{"Counts", "/@", "m"}]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HardTarget", "[", "t_", "]"}], ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Position", "[", 
    RowBox[{"t", ",", "True"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HardResults", "[", "hardPredictionTargetPairs_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"results", ",", "accuracy"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"results", "=", 
      RowBox[{"Reverse", "[", 
       RowBox[{"Sort", "[", 
        RowBox[{"Counts", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"HardPrediction", "[", 
               RowBox[{"First", "[", "#", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"HardTarget", "[", 
               RowBox[{"Last", "[", "#", "]"}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "&"}], "/@", 
          "hardPredictionTargetPairs"}], "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"accuracy", "=", 
      RowBox[{"KeySelect", "[", 
       RowBox[{"results", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "#", "]"}], "==", 
          RowBox[{"Last", "[", "#", "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Accuracy = \>\"", "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          FractionBox[
           RowBox[{"Total", "[", "accuracy", "]"}], 
           RowBox[{"Length", "[", "hardPredictionTargetPairs", "]"}]], "*", 
          "100.0"}], "]"}], "<>", "\"\<%\>\""}], ",", "results"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.866544665069222*^9, 3.866544678336033*^9}, {
  3.866544717412966*^9, 3.866544787984428*^9}, {3.866544845678438*^9, 
  3.866544933668165*^9}, {3.866545008326929*^9, 3.866545292029965*^9}, {
  3.866545452822143*^9, 3.86654557558593*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"a640c9f1-9738-4c46-b19d-979750434b3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardPrediction", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.867227950964772*^9, 3.867227975562758*^9}, {
  3.867480105517453*^9, 3.867480107005077*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"f98077b4-8d7e-401d-8481-6508057768cf"],

Cell[BoxData[
 RowBox[{"{", "3", "}"}]], "Output",
 CellChangeTimes->{3.867227976087944*^9, 3.867480107441572*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"e4ae1fb4-c0bc-4bf3-89db-46ae92637e0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardPrediction", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "False"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8672279902982407`*^9, 3.8672280084975967`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"d9b20918-29d1-46bd-b70f-acfd27b2c0a3"],

Cell[BoxData[
 RowBox[{"{", "2", "}"}]], "Output",
 CellChangeTimes->{{3.867227992235056*^9, 3.867228008956266*^9}, 
   3.867480108955101*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"37311f9f-d207-4160-970d-ddd98433cd87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardPrediction", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.867228025234231*^9, 3.867228036921878*^9}},
 CellLabel->
  "In[742]:=",ExpressionUUID->"cf906399-5828-4b87-80e7-ddc37d71aa2a"],

Cell["Null", "Output",ExpressionUUID->"a059d7eb-fb26-44d7-914e-ed15b2f67445"]
}, Open  ]]
}, Closed]],

Cell["Learn XOR", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 
  3.864793644095471*^9}},ExpressionUUID->"e172cf77-104a-417b-9e8b-\
0895cfdd6efc"],

Cell[CellGroupData[{

Cell["Learn MNIST", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.865071137544158*^9, 
  3.865071139735918*^9}},ExpressionUUID->"ab35440a-cabc-4736-a5ac-\
e07454ebd2a0"],

Cell[CellGroupData[{

Cell["Generate training data", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 
  3.864793759486944*^9}},ExpressionUUID->"7a765571-11e0-47e7-bd2b-\
e5df28d2018f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ConvertBinaryStringToList", "[", "s_String", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{"\"\<{\>\"", "<>", 
    RowBox[{"StringInsert", "[", 
     RowBox[{"s", ",", "\"\<,\>\"", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"StringLength", "[", "s", "]"}], "]"}], ",", "1"}], "]"}]}], 
     "]"}], "<>", "\"\<}\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ConvertBinaryStringToImageData", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"{", 
     RowBox[{"width_", ",", "height_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"ArrayReshape", "[", 
   RowBox[{
    RowBox[{"ConvertBinaryStringToList", "[", "s", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"width", ",", "height"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MNISTExample", "[", "example_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Soften", "/@", 
     RowBox[{"ConvertBinaryStringToList", "[", 
      RowBox[{"First", "[", "example", "]"}], "]"}]}], ")"}], "->", 
   RowBox[{"Last", "[", "example", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MNISTImageExample", "[", 
   RowBox[{"example_", ",", "w_", ",", "h_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{
     RowBox[{"ConvertBinaryStringToImageData", "[", 
      RowBox[{
       RowBox[{"First", "[", "example", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"w", ",", "h"}], "}"}]}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}], "->", 
   RowBox[{"Last", "[", "example", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TargetClass", "[", 
   RowBox[{"class_", ",", "numClasses_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"i", "==", 
       RowBox[{
        RowBox[{"ToExpression", "[", "class", "]"}], "+", "1"}]}], ",", "1", 
      ",", "0"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "numClasses"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.777544428958893*^9, 3.777544449223729*^9}, {
  3.785053289286406*^9, 3.7850533015825367`*^9}, {3.865071356234124*^9, 
  3.865071368364665*^9}, {3.865072537508193*^9, 3.865072583145698*^9}, {
  3.8650727653223124`*^9, 3.865072769389474*^9}, {3.865072855048724*^9, 
  3.865072873389448*^9}, {3.865074216205205*^9, 3.865074217943268*^9}, {
  3.8650742607422447`*^9, 3.865074263919525*^9}, {3.865074303282633*^9, 
  3.865074304334848*^9}, {3.8655763816838627`*^9, 3.86557638296766*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"32fda3b9-b853-499b-9d93-f6cc5b2d03d6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"first2Digits", "=", "12665"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"first4Digits", "=", "24754"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"StringSplit", "/@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NotebookDirectory", "[", "]"}], ",", 
            "\"\<../data/mnist_data.csv\>\""}], "}"}], "]"}], "]"}], ",", 
        "first4Digits"}], "]"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numClasses", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Last", "/@", "data"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"First", "[", "#", "]"}], "->", 
       RowBox[{"TargetClass", "[", 
        RowBox[{
         RowBox[{"Last", "[", "#", "]"}], ",", "numClasses"}], "]"}]}], "&"}],
      ",", "data"}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7775425649316273`*^9, 3.7775427188349257`*^9}, 
   3.777542765885343*^9, {3.777542891883361*^9, 3.777542895266905*^9}, {
   3.777548901853368*^9, 3.777548904429871*^9}, 3.777948863055695*^9, {
   3.785053289286778*^9, 3.785053301583352*^9}, {3.8004618114961*^9, 
   3.8004618132862787`*^9}, {3.865071380522399*^9, 3.865071389330105*^9}, {
   3.865071506398736*^9, 3.86507150965482*^9}, {3.865072153294796*^9, 
   3.865072153439651*^9}, {3.8650725203995028`*^9, 3.8650725250999613`*^9}, {
   3.865072598133906*^9, 3.8650726430451927`*^9}, {3.8650730651631327`*^9, 
   3.865073065309772*^9}, {3.8650737788630743`*^9, 3.8650737799185247`*^9}, {
   3.8650741657549047`*^9, 3.865074192750668*^9}, {3.865084557601783*^9, 
   3.865084557727841*^9}, {3.865096614528236*^9, 3.865096614722213*^9}, {
   3.865096960213298*^9, 3.865096961035049*^9}, {3.8654249749431143`*^9, 
   3.865424975283492*^9}, {3.865425652554762*^9, 3.865425654875148*^9}, {
   3.8655942181851254`*^9, 3.865594218683255*^9}, {3.865603687795599*^9, 
   3.8656036911095867`*^9}, {3.865654143595076*^9, 3.865654143741383*^9}, {
   3.8656591261724367`*^9, 3.865659126260923*^9}, {3.86586673745885*^9, 
   3.865866737630937*^9}, {3.865868704726523*^9, 3.865868705092907*^9}, {
   3.865935589729813*^9, 3.8659355902888536`*^9}, {3.8659425359146223`*^9, 
   3.865942536047833*^9}, {3.8660004673198977`*^9, 3.866000467920465*^9}, {
   3.866008550651922*^9, 3.866008550802231*^9}, {3.8662143357376127`*^9, 
   3.8662143358729973`*^9}, {3.866214933669497*^9, 3.866214933766831*^9}, {
   3.866550101779276*^9, 3.866550102242258*^9}, {3.8665523509986134`*^9, 
   3.866552351965906*^9}, {3.866552870119151*^9, 3.866552872331809*^9}, {
   3.866553040839672*^9, 3.8665530794623127`*^9}, {3.866553478936655*^9, 
   3.866553479983959*^9}, {3.8665536320416937`*^9, 3.866553632487995*^9}, {
   3.8666350940570993`*^9, 3.866635094215591*^9}, {3.866635327817191*^9, 
   3.8666353279906816`*^9}, {3.8680106779565372`*^9, 3.868010678330977*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e694fd5c-31a2-4c80-9a3a-3cbb8af0f0d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MNISTImageExample", "[", 
    RowBox[{"#", ",", "8", ",", "8"}], "]"}], "&"}], "/@", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "8"}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQnWD1ZJK46hvHbUtqp4LoH1f1F4Hof3Hvl4DoyTt8
V4JoVaH3q0B02xyFLSA6rMZuB4i2EN17D0RLbHjyAERzZFSzSABp2YmPWEH0
uuvdqiA618JMDUQHzAsLkgLSFTlrQkG0QohD310gvbS0qx9Eb9DV7M0yfuP4
efWmPhAd1feCl+vMG8cZG96D6RMzM11A9MyPFWD6HnsVPzeQPiOZIQCi94lL
92wD0gIHdMC0z/W++yC6/dA0MH2pcxbr3XNvHN8cecoJogU27I8G0RJnd8WD
aK2EixNBtEL+fzB9nlVEfOnFN452v9TBNACEfpdc
  "],
 CellLabel->"In[16]:=",ExpressionUUID->"ec0b1266-533d-40d4-a949-ccce78250c06"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}, {1., 1., 1., 0., 0., 0., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 1., 0., 1., 1.}, {1., 1., 0., 1., 
        0., 0., 1., 1.}, {1., 1., 0., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 0., 1.}, {1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 1., 0., 0., 1., 1., 1.}, {1., 1., 0., 1., 
        0., 1., 1., 1.}, {1., 0., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 1., 0., 1., 1.}, {1., 1., 0., 1., 
        1., 1., 1., 1.}, {1., 1., 0., 1., 1., 0., 1., 1.}, {1., 1., 0., 1., 
        1., 0., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 1., 0., 0., 0., 1., 1.}, {1., 1., 0., 0., 
        1., 1., 0., 1.}, {1., 1., 0., 1., 1., 0., 1., 1.}, {1., 0., 1., 1., 
        0., 0., 1., 1.}, {1., 1., 0., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 0., 
        1., 1., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 0., 
        1., 1., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 0., 0., 1.}, {1., 1., 1., 0., 1., 1., 0., 1.}, {1., 1., 0., 0., 
        1., 1., 0., 1.}, {1., 1., 0., 1., 1., 0., 1., 1.}, {1., 0., 0., 1., 
        0., 0., 1., 1.}, {1., 1., 0., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 1., 0., 1., 0., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 0., 1., 
        0., 1., 1., 1.}, {1., 1., 0., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}]}], "}"}]], "Output",\

 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{
  3.865071516233152*^9, 3.865071727764624*^9, {3.865072157992421*^9, 
   3.865072164263248*^9}, 3.8650726482204933`*^9, {3.8650728081429157`*^9, 
   3.865072815412401*^9}, {3.8650728584132767`*^9, 3.8650728763860283`*^9}, 
   3.865073067508193*^9, {3.865073789904008*^9, 3.865073795522964*^9}, {
   3.865074175245178*^9, 3.8650742213114853`*^9}, 3.8650742663256474`*^9, 
   3.8650743064252872`*^9, 3.865075757486204*^9, 3.865080599940412*^9, 
   3.865083621171164*^9, {3.865084563801412*^9, 3.865084592428769*^9}, 
   3.8650856590126333`*^9, 3.8650875182866573`*^9, 3.865091000291559*^9, 
   3.865093056070513*^9, 3.865094694162876*^9, 3.865096615969627*^9, 
   3.86509696259997*^9, 3.865139954249607*^9, 3.865141786671627*^9, 
   3.8651521367013702`*^9, 3.865423552909775*^9, {3.865424979404682*^9, 
   3.8654249938473787`*^9}, {3.865425656479721*^9, 3.8654256609377003`*^9}, 
   3.8654809208707523`*^9, 3.865482033395006*^9, 3.8655011685646477`*^9, {
   3.865576369155878*^9, 3.8655763849362507`*^9}, 3.8655934591865187`*^9, 
   3.865594225086277*^9, 3.865603693195478*^9, 3.865654145596838*^9, 
   3.8656591284289303`*^9, 3.865663486762136*^9, {3.865675843854004*^9, 
   3.8656758480254383`*^9}, 3.865680692292922*^9, 3.865785373725032*^9, 
   3.865838237420817*^9, 3.8658644284650097`*^9, 3.865866739205634*^9, 
   3.865868706936183*^9, 3.86593559197605*^9, 3.8659425376483192`*^9, 
   3.866000471570891*^9, 3.8660023671723824`*^9, 3.866008552558271*^9, 
   3.866083736145451*^9, 3.866209093677637*^9, 3.866209596724132*^9, 
   3.866214336990232*^9, 3.866214934859021*^9, 3.866257446329878*^9, 
   3.866258666676694*^9, 3.866285701938628*^9, 3.866300727645417*^9, 
   3.866350581558517*^9, 3.8663715089115543`*^9, 3.8664377020714197`*^9, 
   3.866512491986065*^9, 3.866527204842803*^9, 3.866550105097583*^9, {
   3.866552357229663*^9, 3.866552399674362*^9}, 3.8665527340777407`*^9, 
   3.866552874933894*^9, {3.866553049548827*^9, 3.866553086238255*^9}, {
   3.8665534827091827`*^9, 3.866553488434558*^9}, 3.866553534951789*^9, 
   3.866553633744459*^9, 3.866600459846939*^9, 3.866602523014666*^9, 
   3.866614026941433*^9, 3.8666262010362787`*^9, 3.866635097265691*^9, 
   3.8666353295523643`*^9, 3.86671287784385*^9, 3.8668648189771833`*^9, 
   3.86686557723407*^9, 3.867159524610252*^9, 3.867322063035668*^9, 
   3.8673789484877462`*^9, 3.867470655008312*^9, 3.867479462918984*^9, 
   3.867565378519354*^9, 3.867591080109098*^9, 3.8676400269193563`*^9, 
   3.867653432365038*^9, 3.867669760039253*^9, 3.86773415064207*^9, 
   3.867811745519134*^9, 3.867820389693028*^9, 3.867838001660368*^9, 
   3.867841895496252*^9, 3.8678469507400503`*^9, 3.867847677521079*^9, 
   3.8678503868424177`*^9, 3.8678904849913807`*^9, 3.867890555843211*^9, 
   3.867893435896879*^9, 3.8678959723069487`*^9, 3.867896205315556*^9, 
   3.868010681695039*^9, 3.8680160218209887`*^9, 3.8680216786740513`*^9, 
   3.8680706362081203`*^9, 3.868070790887082*^9, 3.8680715165081863`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"b2af5ca3-6a7a-4273-aa18-788518782ee7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{"MNISTExample", "/@", "data"}], ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.8", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8650715619235697`*^9, 3.865071567650784*^9}, {
  3.8650716393413363`*^9, 3.865071641123829*^9}, {3.865075763152564*^9, 
  3.865075763445953*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"5f23d7f5-27d3-4f48-9a93-1389f19dc351"]
}, Closed]],

Cell[CellGroupData[{

Cell["Standard neural net", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 3.86626045361831*^9}, {
  3.866260536034795*^9, 3.8662605363067417`*^9}, {3.866602720354347*^9, 
  3.866602722250537*^9}, {3.866867763326234*^9, 
  3.866867766054191*^9}},ExpressionUUID->"fc68a4bd-9bf9-485f-9eed-\
cf7b8ff25567"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConvertDataToClasses", "[", "data_", "]"}], ":=", 
  RowBox[{"MapAt", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Position", "[", 
         RowBox[{"#", ",", "1"}], "]"}], "]"}], "]"}], "-", "1"}], "&"}], ",",
     "data", ",", 
    RowBox[{"{", 
     RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8668693365321074`*^9, 3.8668693867886343`*^9}, {
  3.8668694253582287`*^9, 3.8668694957654448`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"afc9d31b-db6d-45ca-8b6b-e25b97a5ac3c"],

Cell[CellGroupData[{

Cell["Create net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 3.86626045361831*^9}, {
  3.866260536034795*^9, 3.8662605363067417`*^9}, {3.866602724930586*^9, 
  3.866602725762454*^9}},ExpressionUUID->"9502650c-75ff-4479-bca2-\
f7b8b0c4641d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", "numClasses"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"NetChain", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
        "300", ",", "LogisticSigmoid", ",", "\[IndentingNewLine]", 
         "classificationLayerSize", ",", "LogisticSigmoid", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Class\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
            "\"\<0\>\"", ",", "\"\<1\>\"", ",", "\"\<2\>\"", ",", 
             "\"\<3\>\""}], "}"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8668677843113413`*^9, 3.866867810879756*^9}, {
  3.866867866054343*^9, 3.866867918755149*^9}, {3.866867993454722*^9, 
  3.86686799965574*^9}, {3.8668681258788567`*^9, 3.86686812619947*^9}, {
  3.8668689240969467`*^9, 3.866868981929222*^9}, {3.866869073179029*^9, 
  3.8668690742445583`*^9}, {3.866869111667173*^9, 3.8668691123403177`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"5fefb9b9-6e54-460e-b544-a43d033404b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.866180932479144*^9, 3.866180933335601*^9}, {
  3.866260506971014*^9, 3.8662605102109118`*^9}, {3.866262223194878*^9, 
  3.866262223474766*^9}, {3.8666027494425793`*^9, 
  3.866602750730301*^9}},ExpressionUUID->"d41cd2db-8088-4737-b918-\
a082c6448deb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", 
     RowBox[{"ConvertDataToClasses", "[", "trainData", "]"}], ",", "All", ",",
      "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ConvertDataToClasses", "[", 
         RowBox[{"RandomSample", "[", 
          RowBox[{"testData", ",", 
           RowBox[{"UpTo", "[", "1000", "]"}]}], "]"}], "]"}], ",", 
        RowBox[{"\"\<Interval\>\"", "->", "10"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "2000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}, {3.866272907421722*^9, 3.866272908705574*^9}, {
   3.866274679974001*^9, 3.866274683777981*^9}, {3.866275126894273*^9, 
   3.866275130882132*^9}, {3.866275621030303*^9, 3.86627562449095*^9}, {
   3.866275800963348*^9, 3.866275804851942*^9}, {3.866278286918571*^9, 
   3.866278290408846*^9}, {3.866279939718389*^9, 3.8662799438283052`*^9}, {
   3.8662825835076027`*^9, 3.866282587086446*^9}, {3.8662848978232517`*^9, 
   3.8662849013340178`*^9}, {3.866301199025255*^9, 3.866301208705173*^9}, {
   3.866302091405136*^9, 3.866302093072084*^9}, {3.8663022330606956`*^9, 
   3.8663022743807373`*^9}, {3.866303190918262*^9, 3.8663031961042967`*^9}, {
   3.8663508996403513`*^9, 3.866350903983953*^9}, {3.8663558607588453`*^9, 
   3.866355860917651*^9}, {3.86637013313169*^9, 3.866370138430928*^9}, {
   3.866370237003203*^9, 3.866370239455555*^9}, {3.8663703291644793`*^9, 
   3.866370333111907*^9}, {3.866370363265703*^9, 3.866370363711856*^9}, {
   3.8663720431119947`*^9, 3.866372048852154*^9}, {3.866372163198892*^9, 
   3.8663721862104397`*^9}, 3.8663723957836103`*^9, {3.866372460806899*^9, 
   3.866372466981298*^9}, {3.8663728465397882`*^9, 3.866372846690668*^9}, {
   3.866439863015705*^9, 3.866439889076521*^9}, {3.866444399919945*^9, 
   3.866444403398275*^9}, 3.866445596437694*^9, 3.866445994629862*^9, {
   3.866446077093233*^9, 3.8664460772227592`*^9}, {3.866514058957122*^9, 
   3.866514061965129*^9}, {3.866514093672724*^9, 3.8665140946276417`*^9}, 
   3.866514530731886*^9, {3.866514784096607*^9, 3.866514784235477*^9}, {
   3.8665148543229303`*^9, 3.86651485485518*^9}, {3.866517197949828*^9, 
   3.866517203967832*^9}, 3.866517357579501*^9, 3.8665174374755917`*^9, 
   3.8665175119230967`*^9, {3.866517590284361*^9, 3.866517620168564*^9}, 
   3.8665176619240017`*^9, {3.8665179325026484`*^9, 3.8665179399815683`*^9}, {
   3.866518111910069*^9, 3.866518112233807*^9}, {3.866518521945266*^9, 
   3.866518522115803*^9}, {3.866518571201038*^9, 3.866518588328702*^9}, {
   3.866518646862028*^9, 3.866518650143523*^9}, 3.866518704027602*^9, {
   3.866519202548511*^9, 3.8665192068871107`*^9}, {3.866552934111923*^9, 
   3.866552991359269*^9}, {3.866553502473754*^9, 3.8665535030716467`*^9}, {
   3.866554417382031*^9, 3.866554420050095*^9}, {3.866554652086327*^9, 
   3.8665546522545357`*^9}, {3.86686620714637*^9, 3.866866208536282*^9}, {
   3.8668680582887163`*^9, 3.866868068787518*^9}, {3.8668684157382507`*^9, 
   3.8668684211762457`*^9}, {3.8668695026973*^9, 3.866869525750093*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"5e8aefb1-dfc7-4620-8212-9b7f8316e5ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 3.8647943165808363`*^9}, {
  3.865509544459216*^9, 3.865509545362651*^9}, {3.8668654702612267`*^9, 
  3.866865471244494*^9}, {3.866868302798292*^9, 
  3.866868303806368*^9}},ExpressionUUID->"7822fb59-1347-4e85-b721-\
29a9f368ef8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
   RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
   RowBox[{"ConvertDataToClasses", "[", "testData", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866868805817885*^9, 3.866868848976694*^9}, {
  3.866869633679126*^9, 3.8668696380935183`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"e96a481e-3ba1-4201-9c24-39f96d06cf2b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Classifier method"], 
                  TextCell["Classifier method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Net",ExpressionUUID->"6409438e-2773-4385-84d6-0940b1dcfe37"],
               TextCell["Net"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of test examples"], 
                  TextCell["Number of test examples"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], "19803"},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"94.11", "0.17"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   94.1120032318335688615`3., 0.1672829822354427176`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                   "\"Accuracy if predicting the commonest class\"", 
                   LabelStyle -> "TextStyling"], 
                  Annotation[#, "Accuracy if predicting the commonest class", 
                   "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"27.14", "0.32"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   27.1423521688633044846`3., 0.3160143365167839558`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Geometric mean of probabilities"], 
                  TextCell["Geometric mean of probabilities"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.448480991700299314`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0006461679909793849`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.4471886557183405442`3.",
                   "\", \"", "0.4497733276822580839`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.4471886557183405442`3., 
                  ", ", 0.4497733276822580839`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Mean cross entropy"], 
                  TextCell["Mean cross entropy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.801888980320557998`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0014407918716204948`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.7990073965773170084`3.",
                   "\", \"", "0.8047705640637989877`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.7990073965773170084`3., 
                  ", ", 0.8047705640637989877`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.59`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"144.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"ms\""}], "examples per millisecond", 
                FractionBox["\"Examples\"", "\"Milliseconds\""]},
               "Quantity"]},
             {
              ItemBox[
               GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ+4Cawt240Hf2i9Z9TNOpe2t/+6DVZZ7tL+3/v70e
Plvprf2uJdMOlr98YW8g6m92SPyOveqc6/J979/Yc+vvyzHjemE/c7rxq1Ur
b9hf5vq5pXHBW/v1D6rTzWfct1f85S1xyS7PXlTNsite/539pJOPIqa/e2PP
vqSmb4rjC/uF5QlhbmVA9ae23lIzfmV/9PAZPXe1h/Zsd1Sd9mq+s7+WXX9z
Yvs9+wr+AqEdmen2y9ZrRzH7vLX32qi6sWTyS/v+mG9+p3jv2zOAwQec9MMq
kXXuD29B+QwMkYLTK7O43tkzsjRnfUh6Y/9sWp1v6LVn9j4V7itd57y1P7D+
yIvdh17Zz37YVbx/9iN7NqnJCqs2ANVf0rnaWH3X/t23vbPZNiXYTzwzd6JE
zTt7tQmJ+xoF3tkfD/zPsNb4tb1OV6CW6LO39h0t+zWW3nxt/+fYZ0eLwqf2
Dm7WN18deGvvGnSNwdT3tb1CwPmZb5mf2AMAQMS0/w==
                 "], {{0, 0}, {4, 4}}, {0, 1}],
                Epilog->{{
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4540", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4540", "\" examples of \"", "0", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.975504941985389`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9608465608465608`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9681202686853609`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4540, " examples of ", 0, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.975504941985389}], 
                    Row[{"Recall = ", 0.9608465608465608}], 
                    Row[{"FScore = ", 0.9681202686853609}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "1", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", 1, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["66", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "66", "\" examples of \"", "2", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014181349376880103`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.013690105787181083`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{66, " examples of ", 2, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.014181349376880103`}], 
                    Row[{"Row fraction = ", 0.013690105787181083`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["48", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "48", "\" examples of \"", "3", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.010313708637730984`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.009832036050798854`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{48, " examples of ", 3, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.010313708637730984`}], 
                    Row[{"Row fraction = ", 0.009832036050798854}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["23", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "23", "\" examples of \"", "0", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004163649529326575`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004867724867724868`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{23, " examples of ", 0, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.004163649529326575}], 
                    Row[{"Row fraction = ", 0.004867724867724868}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5210", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5210", "\" examples of \"", "1", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.943157132512672`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9693023255813954`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9560510138544822`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{5210, " examples of ", 1, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.943157132512672}], 
                    Row[{"Recall = ", 0.9693023255813954}], 
                    Row[{"FScore = ", 0.9560510138544822}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["109", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "109", "\" examples of \"", "2", "\" misclassified as \"",
                     "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.019732078204199855`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.022609417133374818`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{109, " examples of ", 2, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.019732078204199855`}], 
                    Row[{"Row fraction = ", 0.022609417133374818`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["182", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "182", "\" examples of \"", "3", "\" misclassified as \"",
                     "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.03294713975380159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.03727980335927898`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{182, " examples of ", 3, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.03294713975380159}], 
                    Row[{"Row fraction = ", 0.03727980335927898}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["76", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "76", "\" examples of \"", "0", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.01560254567850544`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.016084656084656083`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{76, " examples of ", 0, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.01560254567850544}], 
                    Row[{"Row fraction = ", 0.016084656084656083`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["74", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "74", "\" examples of \"", "1", "\" misclassified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.01519195237117635`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.013767441860465116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{74, " examples of ", 1, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.01519195237117635}], 
                    Row[{"Row fraction = ", 0.013767441860465116`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4478", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4478", "\" examples of \"", "2", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9193184151098337`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9288529350757104`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9240610813041684`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4478, " examples of ", 2, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.9193184151098337}], 
                    Row[{"Recall = ", 0.9288529350757104}], 
                    Row[{"FScore = ", 0.9240610813041684}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["243", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "243", "\" examples of \"", "3", "\" misclassified as \"",
                     "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0498870868404845`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.049774682507169196`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{243, " examples of ", 3, " misclassified as ", 2}], 
                    Row[{"Column fraction = ", 0.0498870868404845}], 
                    Row[{"Row fraction = ", 0.049774682507169196`}]}], 
                    "Tooltip"]& ]}, {
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["86", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "86", "\" examples of \"", "0", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.01809002944888515`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0182010582010582`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{86, " examples of ", 0, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.01809002944888515}], 
                    Row[{"Row fraction = ", 0.0182010582010582}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["91", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "91", "\" examples of \"", "1", "\" misclassified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.019141775347076145`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.016930232558139535`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{91, " examples of ", 1, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.019141775347076145`}], 
                    Row[{"Row fraction = ", 0.016930232558139535`}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["168", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "168", "\" examples of \"", "2", "\" misclassified as \"",
                     "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0353386621792175`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.03484754200373367`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{168, " examples of ", 2, " misclassified as ", 3}], 
                    Row[{"Column fraction = ", 0.0353386621792175}], 
                    Row[{"Row fraction = ", 0.03484754200373367}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4409", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4409", "\" examples of \"", "3", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9274295330248212`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.903113478082753`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9151100041511001`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4409, " examples of ", 3, " correctly classified"}], 
                    
                    Row[{"Precision = ", 0.9274295330248212}], 
                    Row[{"Recall = ", 0.903113478082753}], 
                    Row[{"FScore = ", 0.9151100041511001}]}], "Tooltip"]& ]}, 
                  
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4725", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9608465608465608`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4725, " example", "s", " of class ", 0}], 
                    Row[{"Recall = ", 0.9608465608465608}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5375", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9693023255813954`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{5375, " example", "s", " of class ", 1}], 
                    Row[{"Recall = ", 0.9693023255813954}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4821", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9288529350757104`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4821, " example", "s", " of class ", 2}], 
                    Row[{"Recall = ", 0.9288529350757104}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4882", "\" example\"", "\"s\"", "\" of class \"", "3"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.903113478082753`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4882, " example", "s", " of class ", 3}], 
                    Row[{"Recall = ", 0.903113478082753}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4654", "\" example\"", "\"s\"", "\" classified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.975504941985389`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4654, " example", "s", " classified as ", 0}], 
                    Row[{"Precision = ", 0.975504941985389}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5524", "\" example\"", "\"s\"", "\" classified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.943157132512672`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{5524, " example", "s", " classified as ", 1}], 
                    Row[{"Precision = ", 0.943157132512672}]}], "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4871", "\" example\"", "\"s\"", "\" classified as \"", 
                    "2"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9193184151098337`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4871, " example", "s", " classified as ", 2}], 
                    Row[{"Precision = ", 0.9193184151098337}]}], 
                    "Tooltip"]& ], 
                  TagBox[
                   TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4754", "\" example\"", "\"s\"", "\" classified as \"", 
                    "3"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9274295330248212`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{4754, " example", "s", " classified as ", 3}], 
                    Row[{"Precision = ", 0.9274295330248212}]}], 
                    "Tooltip"]& ]},
                Frame->True,
                FrameLabel->{
                  FormBox["\"predicted class\"", TraditionalForm], 
                  FormBox["\"actual class\"", TraditionalForm]},
                FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {
                    2.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {
                    1.5, 
                    FormBox[
                    RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {
                    0.5, 
                    FormBox[
                    RotationBox["3", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["4725", TraditionalForm]}, {2.5, 
                    FormBox["5375", TraditionalForm]}, {1.5, 
                    FormBox["4821", TraditionalForm]}, {0.5, 
                    FormBox["4882", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["4654", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["5524", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["4871", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["4754", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["2", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["3", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                FrameTicksStyle->13,
                GridLinesStyle->Directive[
                  GrayLevel[0.5, 0.4]],
                ImageSize->212.4,
                
                Method->{
                 "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                  Automatic, 
                  "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                  Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                PlotRangePadding->None],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
          NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{{3.866868827326494*^9, 3.866868851119316*^9}, {
   3.866869626721004*^9, 3.8668696415126762`*^9}, 3.8675912169533*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"4a27835d-ece8-46cb-bb4e-df3922dc4fd0"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Hard neural logic", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 3.86626045361831*^9}, {
  3.866260536034795*^9, 3.8662605363067417`*^9}, {3.866602720354347*^9, 
  3.866602722250537*^9}},ExpressionUUID->"5330bb32-e656-4b8b-bb36-\
16ab02f0840f"],

Cell[CellGroupData[{

Cell["Create net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 3.86626045361831*^9}, {
  3.866260536034795*^9, 3.8662605363067417`*^9}, {3.866602724930586*^9, 
  3.866602725762454*^9}},ExpressionUUID->"9ccf4bd6-05a1-49f1-915f-\
95679eedaa4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.866870343416011*^9, 3.8668703445197*^9}, {
  3.8676599016367483`*^9, 3.867659904995343*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"ce6f0f7f-95ec-4012-ad4e-67899225afe1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"net", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"16", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"inputSize", ",", "128", ",", 
          RowBox[{
           RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"HardNeuralAND", "[", 
         RowBox[{"128", ",", "classificationLayerSize", ",", 
          RowBox[{
           RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"HardNeuralPortLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866512854091155*^9, 3.8665128815568047`*^9}, {
   3.866513103300004*^9, 3.866513116326098*^9}, {3.8665133340990458`*^9, 
   3.8665133419773703`*^9}, {3.86651391128594*^9, 3.866513915466413*^9}, {
   3.866514318655335*^9, 3.866514323501399*^9}, {3.866514602855854*^9, 
   3.866514605749691*^9}, {3.86651468027989*^9, 3.8665147385101433`*^9}, {
   3.8665168378259563`*^9, 3.866516840683816*^9}, {3.866516968713831*^9, 
   3.866516971903157*^9}, {3.8665173610656767`*^9, 3.866517372695388*^9}, 
   3.866517444884035*^9, {3.86651878744969*^9, 3.8665188117507257`*^9}, {
   3.866518954624714*^9, 3.866518969573318*^9}, {3.866520101802957*^9, 
   3.866520108575643*^9}, {3.866520188881999*^9, 3.8665202157280684`*^9}, {
   3.866520364293333*^9, 3.866520392296053*^9}, {3.86652044871375*^9, 
   3.8665204631835423`*^9}, {3.8665219880508347`*^9, 3.866522005928316*^9}, {
   3.8665272161026173`*^9, 3.8665272312695007`*^9}, {3.866527801201952*^9, 
   3.866527883631137*^9}, {3.866528045329198*^9, 3.8665280486071043`*^9}, {
   3.866528154113455*^9, 3.8665281741152687`*^9}, {3.866528447153947*^9, 
   3.866528447260316*^9}, {3.866528670002123*^9, 3.86652867583491*^9}, {
   3.86652876246611*^9, 3.86652876256351*^9}, {3.866528813858374*^9, 
   3.866528848079921*^9}, {3.866530033731058*^9, 3.866530050034823*^9}, {
   3.866532603007605*^9, 3.8665326199562283`*^9}, {3.8665328331522837`*^9, 
   3.866532845529175*^9}, {3.866532894976413*^9, 3.866532895812646*^9}, {
   3.8665329705120907`*^9, 3.866532996865466*^9}, {3.866533798129952*^9, 
   3.866533798585582*^9}, {3.866542948856092*^9, 3.866542956003662*^9}, {
   3.866543312214932*^9, 3.8665433126315613`*^9}, {3.866545711295557*^9, 
   3.866545711720436*^9}, {3.866546071686404*^9, 3.866546081040039*^9}, {
   3.866547900239717*^9, 3.8665479093644657`*^9}, {3.866549693552167*^9, 
   3.866549704088811*^9}, {3.866550126984569*^9, 3.8665501393456163`*^9}, {
   3.866551310563048*^9, 3.866551316716016*^9}, {3.866552552251585*^9, 
   3.866552552469812*^9}, {3.866552612077286*^9, 3.866552621902178*^9}, {
   3.86655297295109*^9, 3.8665530085584908`*^9}, {3.866553815227034*^9, 
   3.866553831744128*^9}, {3.866554274483659*^9, 3.8665542884172983`*^9}, {
   3.866554409228067*^9, 3.866554412577661*^9}, {3.866554466780363*^9, 
   3.866554467185257*^9}, {3.866554546724543*^9, 3.866554547081894*^9}, {
   3.866554637927086*^9, 3.866554643213908*^9}, {3.8665551202789803`*^9, 
   3.866555125450521*^9}, {3.866555219318622*^9, 3.8665552411393957`*^9}, {
   3.866555370545534*^9, 3.866555374243248*^9}, {3.866600476190877*^9, 
   3.866600520811289*^9}, {3.866600851629229*^9, 3.8666008545843487`*^9}, {
   3.866601173213505*^9, 3.866601184697352*^9}, {3.866602823213896*^9, 
   3.866602823651602*^9}, {3.866624063636963*^9, 3.866624070070056*^9}, {
   3.866864848820673*^9, 3.8668649018442097`*^9}, 3.8668649498986273`*^9, {
   3.866870158165018*^9, 3.8668701585199003`*^9}, {3.866870313913095*^9, 
   3.866870347432589*^9}, {3.86687070668148*^9, 3.866870709305764*^9}, {
   3.866874324915924*^9, 3.866874327763575*^9}, {3.866874459504965*^9, 
   3.866874459651349*^9}, {3.86688629545262*^9, 3.8668862958798847`*^9}, {
   3.866886781155374*^9, 3.8668867817674427`*^9}, {3.866887024065243*^9, 
   3.866887024335256*^9}, {3.866887176651325*^9, 3.866887183367484*^9}, {
   3.8668872857079782`*^9, 3.866887288446698*^9}, {3.8672933502433777`*^9, 
   3.867293351194455*^9}, {3.8672943201526012`*^9, 3.867294320574452*^9}, {
   3.8673072679566917`*^9, 3.86730727548538*^9}, {3.8673117146946087`*^9, 
   3.86731171694258*^9}, {3.867312640857286*^9, 3.8673126485630198`*^9}, {
   3.867483132216476*^9, 3.867483137068089*^9}, {3.867484558937159*^9, 
   3.867484565125327*^9}, {3.867484885034177*^9, 3.8674848960292263`*^9}, {
   3.8674857810280046`*^9, 3.867485785790262*^9}, {3.867485972308717*^9, 
   3.8674859777590923`*^9}, {3.867575634248128*^9, 3.867575669182214*^9}, 
   3.867592743700955*^9, {3.867593550197529*^9, 3.8675935538692703`*^9}, {
   3.867593719866111*^9, 3.8675937252614183`*^9}, {3.867593837857523*^9, 
   3.867593838180921*^9}, {3.867593997313245*^9, 3.867594007445169*^9}, {
   3.867594183313306*^9, 3.867594191053112*^9}, {3.867594279329269*^9, 
   3.867594279525052*^9}, {3.867594436544726*^9, 3.867594441717057*^9}, {
   3.867594539418096*^9, 3.8675945421729393`*^9}, {3.8675946505292997`*^9, 
   3.8675946515410852`*^9}, {3.867594823818615*^9, 3.867594825101057*^9}, {
   3.867595056465706*^9, 3.867595057069421*^9}, {3.8675951255616198`*^9, 
   3.86759515143506*^9}, {3.867595560572082*^9, 3.867595574085411*^9}, {
   3.867595795195505*^9, 3.867595804189353*^9}, {3.867820900250691*^9, 
   3.8678209054083347`*^9}, {3.8678213948752117`*^9, 
   3.8678213953528347`*^9}, {3.8678241310875*^9, 3.867824155627552*^9}, {
   3.8678359011608477`*^9, 3.867835906741913*^9}, {3.867835991351974*^9, 
   3.867835993033587*^9}, {3.867836130935794*^9, 3.8678361328821583`*^9}, {
   3.8678362401794147`*^9, 3.867836242602487*^9}, {3.867836307448196*^9, 
   3.867836313353601*^9}, {3.86783647125273*^9, 3.867836473650206*^9}, {
   3.867836534947302*^9, 3.86783654330317*^9}, {3.867836648129442*^9, 
   3.8678366544118233`*^9}, {3.867836897818256*^9, 3.8678369025722857`*^9}, {
   3.867837022233658*^9, 3.867837033901739*^9}, {3.867837623887574*^9, 
   3.867837627813425*^9}, {3.86783787807589*^9, 3.867837896261313*^9}, {
   3.8678382960747147`*^9, 3.8678383098582077`*^9}, {3.867838463835903*^9, 
   3.867838469455121*^9}, {3.868011185484955*^9, 3.868011190180541*^9}, 
   3.8680115251975403`*^9, {3.868011599662116*^9, 3.868011610099432*^9}, {
   3.868012021342428*^9, 3.868012021777741*^9}, {3.8680123171105328`*^9, 
   3.868012319851869*^9}, {3.8680133115507507`*^9, 3.86801331266679*^9}, {
   3.868013582390593*^9, 3.868013590170991*^9}, {3.868013764086578*^9, 
   3.8680137687149076`*^9}, {3.868013879870481*^9, 3.868013880403047*^9}, {
   3.868014050630856*^9, 3.8680140534113092`*^9}, {3.868015313257505*^9, 
   3.8680153133813334`*^9}, {3.8680156735935507`*^9, 3.868015674173932*^9}, {
   3.868025979305698*^9, 3.868025989889565*^9}, {3.868026149720632*^9, 
   3.868026153818652*^9}, {3.8680275880620193`*^9, 3.868027599458037*^9}, 
   3.8680728381858788`*^9, {3.868073101365309*^9, 3.868073120896317*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"feba2f53-f4f5-43e6-a86d-fb7cc5e96658"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"net", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"32", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"HardNeuralChain", "[", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"HardNeuralNAND", "[", 
         RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
          RowBox[{
           RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"HardNeuralPortLayer", "[", 
         RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
       "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.867841916987248*^9, 3.8678421071281843`*^9}, {
   3.867842389163254*^9, 3.8678424104725847`*^9}, {3.867842604635694*^9, 
   3.867842606084375*^9}, {3.8678427700989523`*^9, 3.8678427715606728`*^9}, {
   3.867843707138914*^9, 3.867843754464377*^9}, 3.867843942708643*^9, {
   3.867843987859889*^9, 3.867843994528171*^9}, {3.867847590981337*^9, 
   3.8678476427453136`*^9}, {3.867847796754768*^9, 3.867847806505651*^9}, {
   3.867848727229472*^9, 3.867848753066246*^9}, {3.8678489087021*^9, 
   3.867848922743598*^9}, {3.867848985918405*^9, 3.867848988579921*^9}, {
   3.867850397128324*^9, 3.867850399228125*^9}, {3.867850871210086*^9, 
   3.867851125253394*^9}, {3.867852647604347*^9, 3.867852661157853*^9}, {
   3.8678904974623013`*^9, 3.867890507541542*^9}, {3.867892066351469*^9, 
   3.867892091410841*^9}, {3.867892395303556*^9, 3.867892412925453*^9}, {
   3.8678925469176607`*^9, 3.8678926534696503`*^9}, {3.867893447753015*^9, 
   3.8678934523329153`*^9}, {3.867893759343811*^9, 3.867893768350878*^9}, {
   3.867894321410741*^9, 3.867894327640942*^9}, {3.867894966595901*^9, 
   3.8678949667723093`*^9}, {3.8678959832744093`*^9, 3.867895984764944*^9}, {
   3.867896217305914*^9, 3.867896217634267*^9}, {3.868015828583332*^9, 
   3.868015830982279*^9}, {3.8680160348880863`*^9, 3.8680160463265867`*^9}, {
   3.8680175823000097`*^9, 3.868017583226742*^9}, {3.8680176903116293`*^9, 
   3.868017690442505*^9}, {3.868017762870285*^9, 3.868017763178317*^9}, {
   3.868017852333824*^9, 3.86801785278174*^9}, {3.868018721655579*^9, 
   3.868018721748577*^9}, {3.868018828735849*^9, 3.868018829084876*^9}, {
   3.8680188647679863`*^9, 3.868018866052195*^9}, {3.868019475857217*^9, 
   3.868019476611607*^9}, {3.8680251836667643`*^9, 3.86802518553231*^9}, 
   3.868025801952386*^9, {3.868025880131111*^9, 3.8680258811405087`*^9}, {
   3.868025969336673*^9, 3.868025970272675*^9}, {3.868075478091976*^9, 
   3.868075488415468*^9}, {3.868075647439807*^9, 3.8680756819954863`*^9}, {
   3.8680758606502132`*^9, 3.868075861124577*^9}, {3.868076303337597*^9, 
   3.868076308238093*^9}, 3.86807639381747*^9, {3.8680765578827057`*^9, 
   3.868076559462569*^9}, {3.868077108394541*^9, 3.868077111307229*^9}, {
   3.868077198532556*^9, 3.868077212922988*^9}, {3.868078074364006*^9, 
   3.868078086727457*^9}},ExpressionUUID->"a805bd2a-cef0-4df4-b838-\
7efd7718ed29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softNet", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<NeuralLogicNet\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<NeuralLogicNet\>\"", "->", "\"\<Loss\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.86626215222803*^9, 
   3.8662621832516203`*^9}, {3.866263109109415*^9, 3.86626311329671*^9}, {
   3.8662634113702927`*^9, 3.866263445027198*^9}, {3.8662637295611134`*^9, 
   3.8662637341766987`*^9}, {3.8662638454628477`*^9, 3.86626384912811*^9}, {
   3.866264629557499*^9, 3.866264632526574*^9}, {3.866264756302319*^9, 
   3.866264756571878*^9}, {3.86626485570925*^9, 3.8662648604861727`*^9}, {
   3.866264906589533*^9, 3.866264909654014*^9}, {3.8662650173821917`*^9, 
   3.866265024103039*^9}, {3.866267932128647*^9, 3.866267936947571*^9}, {
   3.866272289890004*^9, 3.866272326071719*^9}, 3.866272498086396*^9, {
   3.866272605318948*^9, 3.8662726100556726`*^9}, {3.866272697696899*^9, 
   3.8662727061238422`*^9}, {3.866272804197109*^9, 3.866272807076984*^9}, {
   3.866272890576043*^9, 3.8662729018249826`*^9}, {3.866273061136441*^9, 
   3.866273079881092*^9}, {3.8662739928242073`*^9, 3.866274026656089*^9}, {
   3.866274121640194*^9, 3.86627415310497*^9}, {3.8662742538084593`*^9, 
   3.866274260924819*^9}, {3.86627447707015*^9, 3.866274491178595*^9}, {
   3.866274954835182*^9, 3.866274972215249*^9}, {3.8662751949711027`*^9, 
   3.866275214973873*^9}, {3.866275317133552*^9, 3.866275326157571*^9}, {
   3.866276341927771*^9, 3.866276342361364*^9}, {3.866276444445874*^9, 
   3.866276444758065*^9}, 3.866276574032675*^9, {3.8662774805759163`*^9, 
   3.866277486441833*^9}, {3.866277730486899*^9, 3.866277745606361*^9}, {
   3.866277812901185*^9, 3.8662778241863747`*^9}, {3.866277923447342*^9, 
   3.866277942127078*^9}, {3.866278044847097*^9, 3.866278070211129*^9}, {
   3.866278491367318*^9, 3.866278493966505*^9}, {3.866278580024693*^9, 
   3.8662785830122213`*^9}, {3.866278895153315*^9, 3.866278898232675*^9}, {
   3.866280230366321*^9, 3.86628024016776*^9}, 3.866280351079256*^9, {
   3.866280499461529*^9, 3.8662805080447283`*^9}, {3.866280639515723*^9, 
   3.8662806449211483`*^9}, {3.866280754797947*^9, 3.86628075810079*^9}, {
   3.866280876373425*^9, 3.866280889329287*^9}, 3.866281009490582*^9, {
   3.8662811039106913`*^9, 3.866281107962268*^9}, {3.866281186723476*^9, 
   3.866281191533492*^9}, {3.8662812575988626`*^9, 3.866281268830084*^9}, {
   3.8662813166116953`*^9, 3.866281325765922*^9}, {3.866282044987713*^9, 
   3.866282048676916*^9}, {3.866282148870701*^9, 3.866282152685348*^9}, {
   3.86628313823394*^9, 3.8662831431981792`*^9}, {3.866283203895447*^9, 
   3.8662832148382063`*^9}, {3.8662832951824627`*^9, 
   3.8662833056304398`*^9}, {3.866283478244402*^9, 3.866283487341878*^9}, {
   3.8662841436542883`*^9, 3.86628415025281*^9}, {3.866284940968055*^9, 
   3.866284945101494*^9}, {3.866285029031362*^9, 3.866285034053158*^9}, {
   3.866285238231142*^9, 3.8662852400450497`*^9}, {3.8662854784494677`*^9, 
   3.866285480030343*^9}, {3.8662855684494333`*^9, 3.866285589220209*^9}, {
   3.866285661897065*^9, 3.866285665049341*^9}, {3.866286012525502*^9, 
   3.866286023701212*^9}, {3.866286183975936*^9, 3.866286197019022*^9}, {
   3.866286343624745*^9, 3.8662863761838703`*^9}, {3.86628647476213*^9, 
   3.866286478513227*^9}, {3.866286583730136*^9, 3.866286589629998*^9}, {
   3.8662866316154537`*^9, 3.866286632298744*^9}, {3.866286684611227*^9, 
   3.866286694033737*^9}, {3.866286815683847*^9, 3.866286826001635*^9}, {
   3.8662869515842*^9, 3.866286957090143*^9}, {3.866287432190014*^9, 
   3.866287433732437*^9}, {3.8662875714309177`*^9, 3.866287575508819*^9}, {
   3.866287972431319*^9, 3.866287979390542*^9}, {3.8662881211610413`*^9, 
   3.866288128734665*^9}, {3.866301184432645*^9, 3.866301189032214*^9}, {
   3.866301252666163*^9, 3.866301255952261*^9}, {3.866301376402754*^9, 
   3.866301391652487*^9}, {3.866301466042976*^9, 3.866301469288639*^9}, {
   3.866301630395039*^9, 3.866301653060717*^9}, {3.866301748836125*^9, 
   3.866301755312545*^9}, {3.86630188485115*^9, 3.866301888560711*^9}, {
   3.866302280747377*^9, 3.8663022952887983`*^9}, {3.866302405795878*^9, 
   3.866302419001148*^9}, {3.866302495340143*^9, 3.866302504605687*^9}, {
   3.866350591374894*^9, 3.8663505951022243`*^9}, {3.866351142159863*^9, 
   3.866351179558625*^9}, {3.8663515938249702`*^9, 3.866351597311022*^9}, {
   3.8663516429930353`*^9, 3.866351646919097*^9}, {3.8663540899964314`*^9, 
   3.866354091250739*^9}, 3.866354227060774*^9, {3.866354342347616*^9, 
   3.866354366019519*^9}, {3.866354536533381*^9, 3.866354542835105*^9}, {
   3.866354615988611*^9, 3.866354616498942*^9}, {3.866354747316181*^9, 
   3.866354747986311*^9}, {3.866354820971937*^9, 3.866354830674176*^9}, {
   3.866354985259542*^9, 3.866355003354249*^9}, {3.866355243555305*^9, 
   3.866355280233426*^9}, {3.866355363275181*^9, 3.8663553649290257`*^9}, {
   3.866355508482728*^9, 3.8663555086333237`*^9}, {3.866355904531114*^9, 
   3.8663559105053043`*^9}, {3.866355992402801*^9, 3.866356013229351*^9}, {
   3.866356256538742*^9, 3.866356257041319*^9}, {3.866356472449071*^9, 
   3.866356473280033*^9}, {3.8663565818412313`*^9, 3.866356588441074*^9}, {
   3.866356990748909*^9, 3.866356994266841*^9}, {3.8663571204214773`*^9, 
   3.866357120574224*^9}, {3.8663572027579412`*^9, 3.8663572078996153`*^9}, {
   3.866357620436617*^9, 3.866357634688436*^9}, {3.866357667446629*^9, 
   3.866357681140574*^9}, {3.8663583040873337`*^9, 3.866358308549032*^9}, {
   3.866358702488315*^9, 3.866358710660177*^9}, {3.866358792502235*^9, 
   3.866358792643732*^9}, {3.8663588650968037`*^9, 3.866358870370079*^9}, {
   3.8663590601050797`*^9, 3.866359061311141*^9}, {3.866359100825281*^9, 
   3.8663591032317047`*^9}, {3.866360392667655*^9, 3.866360402393593*^9}, {
   3.866360446451545*^9, 3.866360454122822*^9}, {3.866360518763679*^9, 
   3.866360523813664*^9}, {3.8663605658118258`*^9, 3.866360586933572*^9}, {
   3.866360874844895*^9, 3.866360875286996*^9}, {3.8663609358459*^9, 
   3.866360946523975*^9}, {3.8663629695673723`*^9, 3.8663629719826107`*^9}, {
   3.8663639844553833`*^9, 3.8663639851026163`*^9}, {3.866364664263899*^9, 
   3.866364667805708*^9}, {3.8663647416864157`*^9, 3.866364751498241*^9}, {
   3.8663648173209887`*^9, 3.8663648239090853`*^9}, {3.866364861552744*^9, 
   3.866364866359233*^9}, {3.866364911593669*^9, 3.866364912091476*^9}, {
   3.8663650443606586`*^9, 3.8663650452161922`*^9}, {3.866365512692107*^9, 
   3.866365515810193*^9}, 3.866365740980801*^9, {3.866366124781304*^9, 
   3.866366128103511*^9}, {3.86636615827591*^9, 3.866366161795991*^9}, 
   3.8663675572465467`*^9, {3.8663679823247623`*^9, 3.8663679840072737`*^9}, {
   3.8663685724947968`*^9, 3.866368575523563*^9}, {3.866368617885765*^9, 
   3.866368630439355*^9}, {3.8663688420628223`*^9, 3.866368846739706*^9}, {
   3.866368921365861*^9, 3.866368935403892*^9}, {3.866368992805874*^9, 
   3.8663689939334173`*^9}, {3.8663690430938*^9, 3.8663690474648046`*^9}, {
   3.866369083709838*^9, 3.8663691118719187`*^9}, {3.866369202398569*^9, 
   3.866369214195849*^9}, {3.866369334334588*^9, 3.866369336388123*^9}, {
   3.866369454951181*^9, 3.8663694569323397`*^9}, {3.866369515406219*^9, 
   3.866369518628167*^9}, {3.8663703695855513`*^9, 3.8663703750077*^9}, {
   3.8663705385538683`*^9, 3.866370541048525*^9}, {3.866370586394085*^9, 
   3.866370607876096*^9}, {3.8663707547717*^9, 3.866370757696903*^9}, {
   3.866370926163419*^9, 3.866370929489147*^9}, {3.866371042659484*^9, 
   3.8663710475373373`*^9}, {3.866371595734161*^9, 3.866371595814637*^9}, {
   3.866371630486404*^9, 3.866371630623527*^9}, {3.866371683122916*^9, 
   3.866371701147089*^9}, {3.866371789324903*^9, 3.866371822547234*^9}, {
   3.8663718525974607`*^9, 3.8663718606429367`*^9}, {3.866371974165319*^9, 
   3.866371979075355*^9}, {3.866372122293806*^9, 3.8663721296757917`*^9}, {
   3.866372551518608*^9, 3.866372561132722*^9}, {3.866372627211433*^9, 
   3.866372636080841*^9}, {3.8663728112322397`*^9, 3.866372812994047*^9}, {
   3.866372895895451*^9, 3.866372901477323*^9}, {3.8664377149946833`*^9, 
   3.8664377176580143`*^9}, {3.86643884019552*^9, 3.86643884333634*^9}, {
   3.866438919186672*^9, 3.866438921864346*^9}, {3.8664391767222757`*^9, 
   3.866439182016387*^9}, {3.866439413057221*^9, 3.8664394237656918`*^9}, {
   3.866440165425671*^9, 3.8664401663535337`*^9}, {3.8664414544278717`*^9, 
   3.866441455406114*^9}, {3.8664415241527863`*^9, 3.866441526297073*^9}, {
   3.866441636299324*^9, 3.866441637325185*^9}, {3.8664421743093033`*^9, 
   3.866442174534107*^9}, {3.866444116919817*^9, 3.866444119674713*^9}, {
   3.86644604617083*^9, 3.866446049128669*^9}, {3.866512861360115*^9, 
   3.866512866295472*^9}, {3.866512916479863*^9, 3.866512918447736*^9}, {
   3.866623312753614*^9, 3.866623319710231*^9}, 3.866624582319717*^9, {
   3.8668662017322693`*^9, 3.866866202166645*^9}, {3.866885151993841*^9, 
   3.866885152627983*^9}, {3.866886303360961*^9, 3.866886303494787*^9}, {
   3.866886784793562*^9, 3.866886785078327*^9}, {3.866887027953611*^9, 
   3.8668870285346737`*^9}, {3.866887196544759*^9, 3.8668871969509068`*^9}, {
   3.866887908638279*^9, 3.866887908768166*^9}, {3.866888202133163*^9, 
   3.8668882026401367`*^9}, {3.8668885411386957`*^9, 3.86688854148912*^9}, {
   3.866890470117792*^9, 3.866890470852077*^9}, {3.866890765878002*^9, 
   3.866890766260087*^9}, {3.86689132463979*^9, 3.8668913249890223`*^9}, {
   3.86689308168353*^9, 3.866893082217802*^9}, {3.866897888912188*^9, 
   3.8668978892625017`*^9}, {3.866898733832912*^9, 3.866898734749516*^9}, 
   3.8668994402579*^9, {3.866899773765663*^9, 3.866899774274312*^9}, {
   3.866952833901763*^9, 3.8669528351406612`*^9}, {3.866964109943631*^9, 
   3.866964110413616*^9}, {3.866966147880842*^9, 3.8669661483346167`*^9}, {
   3.866988245985949*^9, 3.866988246358993*^9}, {3.867074156194147*^9, 
   3.867074156647444*^9}, {3.867075460518784*^9, 3.867075460872748*^9}, {
   3.867130579976453*^9, 3.867130581878731*^9}, {3.867132238858082*^9, 
   3.86713226222477*^9}, {3.867132321058169*^9, 3.8671324110815372`*^9}, 
   3.86714816879574*^9, {3.867151174390662*^9, 3.867151175718362*^9}, {
   3.8671601859854937`*^9, 3.867160187248486*^9}, {3.867160271865155*^9, 
   3.867160273391037*^9}, {3.867206142108213*^9, 3.867206144010398*^9}, {
   3.867207661638524*^9, 3.8672076639716473`*^9}, {3.867225680992249*^9, 
   3.8672257375848494`*^9}, {3.867226575060524*^9, 3.8672265762181053`*^9}, {
   3.8672269605171947`*^9, 3.867226962147046*^9}, {3.8672272705896187`*^9, 
   3.867227297795145*^9}, {3.867227343085717*^9, 3.86722734351553*^9}, {
   3.86722737998987*^9, 3.867227380393511*^9}, {3.867227510606731*^9, 
   3.867227510759487*^9}, 3.8672275413257437`*^9, 3.867227636478323*^9, {
   3.867228148534873*^9, 3.86722815017175*^9}, {3.867235212746784*^9, 
   3.867235218959901*^9}, {3.867243061589653*^9, 3.867243089467525*^9}, {
   3.867243408789299*^9, 3.867243408892873*^9}, {3.8672443465611343`*^9, 
   3.867244347575115*^9}, {3.8672923794879313`*^9, 3.867292407247943*^9}, {
   3.867292793997984*^9, 3.867292794523506*^9}, {3.86729313056518*^9, 
   3.867293140483102*^9}, {3.8672932303810797`*^9, 3.867293230776718*^9}, {
   3.867294324594297*^9, 3.867294325174638*^9}, {3.867305927312809*^9, 
   3.867305927710868*^9}, {3.86730636106628*^9, 3.8673063615676527`*^9}, {
   3.86730727912813*^9, 3.867307279760503*^9}, {3.867307456280364*^9, 
   3.867307456624774*^9}, {3.867310934782545*^9, 3.867310935612999*^9}, {
   3.8673111612986937`*^9, 3.867311161302167*^9}, {3.8673117249217653`*^9, 
   3.867311725398467*^9}, {3.867312239359359*^9, 3.867312239717518*^9}, {
   3.867323044875226*^9, 3.867323050610677*^9}, {3.867331098943338*^9, 
   3.867331099090743*^9}, {3.86733389853468*^9, 3.867333898684703*^9}, {
   3.867399559935915*^9, 3.867399625423558*^9}, {3.867400091162709*^9, 
   3.867400112677143*^9}, {3.8674004611694317`*^9, 3.867400470751096*^9}, {
   3.8674039612129593`*^9, 3.867403961339106*^9}, {3.867404343391862*^9, 
   3.867404343493106*^9}, {3.867405223938087*^9, 3.8674052257279587`*^9}, {
   3.867406890830207*^9, 3.867406890979588*^9}, {3.867406928334382*^9, 
   3.867406928732006*^9}, 3.8674069690859013`*^9, 3.867407132280343*^9, 
   3.867407699751111*^9, {3.86740910335982*^9, 3.867409103533945*^9}, {
   3.86741451546389*^9, 3.867414544246604*^9}, {3.86741480776128*^9, 
   3.867414823759447*^9}, {3.8674150640103292`*^9, 3.867415067532441*^9}, {
   3.8674192410881844`*^9, 3.8674192414142323`*^9}, {3.867419337601428*^9, 
   3.867419338006322*^9}, {3.8674197151133127`*^9, 3.867419716366417*^9}, {
   3.86741980437457*^9, 3.8674198055585403`*^9}, {3.867420964777163*^9, 
   3.867420970276672*^9}, {3.867565400727728*^9, 3.867565402598975*^9}, 
   3.86757574945562*^9, {3.867583108618186*^9, 3.867583119673476*^9}, {
   3.867592825935584*^9, 3.8675928280210953`*^9}, {3.867593509898299*^9, 
   3.867593511045754*^9}, 3.867593572982695*^9, 3.8678363212387533`*^9, 
   3.867892665101438*^9},
 CellLabel->
  "In[121]:=",ExpressionUUID->"ff705697-08c0-41db-8a85-131ecdba22d6"],

Cell[CellGroupData[{

Cell[BoxData["softNet"], "Input",
 CellChangeTimes->{{3.867852667460257*^9, 3.8678526698877697`*^9}, {
  3.867892670381201*^9, 3.8678926712427197`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"1b570bfa-2a4d-48ef-b659-d88693679ac4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -15.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]4\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999999999993`, 
                    6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]4\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.0149], {
                    GrayLevel[0.5], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.192120463394616`, 
                    30.51535353195944}, {39.192120463394616`, 
                    30.51535353195944}, {38.69442248591872, 
                    35.17935629818005}, {28.246036107633145`, 
                    35.21413676830481}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{39.335627149246974`, 
                    22.022653388846493`}, {39.335627149246974`, 
                    22.022653388846493`}, {39.028664759644585`, 
                    18.313538367818456`}, {28.898905902765012`, 
                    18.118321787764348`}}}, CurveClosed -> {0}]}, 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}}]}], {{{{1.6209767772132715`, 0.}, {
                    0., 1.302327038770047}}, {-8.296516058106576, \
-14.790162389666165`}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}}]}], {{{{1.6446663930506598`, 0.}, {
                    0., 1.2828873028183188`}}, {-8.702521921403617, \
-2.012105908138385}}}], 
                    GeometricTransformationBox[
                    GraphicsGroupBox[{
                    Thickness[0.0149], 
                    GraphicsGroupBox[{{
                    FaceForm[
                    RGBColor[0.732, 0.732, 0.732]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.33]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}}]}], {{{{1.5182866155506958`, 0.}, {
                    0., 1.2065857650683098`}}, {-11.402865979580374`, \
-6.527851836053724}}}]}, PlotRange -> All, AspectRatio -> 1, PlotRangePadding -> 
                    0, ImagePadding -> 0, ImageSize -> 15, ImageMargins -> 
                    0.], {-0.9999999732051026, 1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 25, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {223.0000014737193, 103.49999999999997`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25},
                     {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {12.75, 
                    17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Mu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sigma", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Distribution", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Outputs", "Output"]}|>, 
                    "Not" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> 
                    NeuralNetworks`ListT[NeuralNetworks`NaturalT, 
                    NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Mu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sigma", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Distribution", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Outputs", "Output"]}|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 64}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Min" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {64}|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Min", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Min", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"AND" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    4096}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Reshape" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 64}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "Min" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {64}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Min", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Min", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "NOT" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {64}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "AND", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NOT", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT", "Outputs", "Output"]}|>, 
                    "4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"AND" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4096}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    4096}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Reshape" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{64, 64}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "Min" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {64}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Min", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Min", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "NOT" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    64}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {64}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "AND", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NOT", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT", "Outputs", "Output"]}|>, 
                    "5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"AND" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{1024}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    1024}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Reshape" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{16, 64}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{16, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16, 
                    64}, NeuralNetworks`AtomT]|>|>, 
                    "Min" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {16}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Min", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Min", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "NOT" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|"Type" -> "RandomArray", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "Sigma" -> NeuralNetworks`TensorT[{
                    16}, NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {16}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath["Nodes", "Mu", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath["Nodes", "Sigma", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath["Nodes", "Distribution", "Outputs",
                     "Output"], NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Variates", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "ClipVariates", "Outputs",
                     "Output"]}|>, "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], "$Dimensions" -> {16}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "AND", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NOT", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT", "Outputs", "Output"]}|>, 
                    "6" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> NeuralNetworks`ValidatedParameter[{4, 
                    4}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 4}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "Harden" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 0.9, 0.1]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_a5f7d9d5_d202_431e_a85c_4af44fcd8d0e", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRAyKLKCaAggUR12JdWAQVZV/dAgmg
xFYFW2vRuqC1avu6YMEFFFlVqoAoVlB2QdEiBAsCGiD/M/cmEfq93/P9vuf5
PX+f6p2Ze2bm7OfMZObWLCB8RQAJw7D3wRjm7FLYOFcfwzSgHsDkT/pq7d3N
InmO79jlYk8EY8bEsEwOho0lm2FkqI+Hv3QJ77CwjLqExrJ2+J6UwpyswTCc
SP0uQGy8iOz8/VjnNpa1vj2D46FpHSV1jyg147nqph5gCb8nB5YxrulzXRZL
uX+SrKNSONMtpqdb7claf5j7oAzG3c/FsEB4WpuXjeEGLMbMZkzKMDabDP8Y
TmXuPZfuFxW4njtpS1Lm+H3YG4ZAQo6m+vHdxCzS7OBvLfz/+fWd3bJvzcxd
q84yCleQWVRasjCTxaWYvGGQv+K0RGRq/CP8rDDhk2aQmO/12ViPYhrXojRz
EVs8NINkOW+4LlGToWm1dTnVT/EV9t0hRay5dqpAPGGxvf1bSVj6cCLds/Ar
jOK4iFo4+C/IjwW6hWdb99tjZNK3HBL3zH5D3f3U1SH8zEcMMdua/pTjz+ce
mma915krnOhiTCORJFsFGtFMGF5gY/49m8azPhbgzTigmWLtsplvPm7jU/3l
xW3R2j3cseydy9tcC2wmwwDPjUkpR2wWHeEPlX50LWi20XviuUKTbLFkpeuY
H5atX9brAYWV02mzyC2L+N8eOzPuhyflzMtF4m2Ly5hvN3/rGsISeFdCgzRu
sdTk4pYkypDn4Wks8hhNbSrHbM6ks4bWErLhaq7AXdeTZHyGz8XmjhHONrHw
PrLGRmM5yN8f5GIkbVbAHzqXactyxiYZSc2wo1raH1AbxU9TbIolYu6YRm8R
7ZcB1EbiayDIxZiPUUYr3jFTC1uJDWLpYqdaMZeUjo0V0I3SXTFdP9LvWinO
2J6sIh8aKtP0sLHeofwJJB/xtuQW/ULyKqMDD7DxmS+bBWichdh5bICE0QtN
Md0qGMECjXBRa58+DBjKnUL2sWXpA3rp04mR903GxmSFpF9BXU1xBMSUZh1s
DIOSqYPNq+X6/3tMb5I/BlRMleNUbKUU6mMLsUk4sN9WUhYWkyV5MQyvErFX
WDc+1NtkLWY/zocqGsEHgWkINw9rTtZKmYo9or0ihkq3ZfmxsC1ZEkYyyR5e
cRiFhiHc+5lYpR9FSKNF0IwyrBnYCqySy0jnamVq7TWkCsUhFpUCBjmQIqFR
I2jYEpCFEchCL0WQwaWWpIgzWPp6KYUZAmP3s56sb4Ocl/MP9niyMrcWc2dW
p3CP8b1/nGt2awq1NsWs+siYIlv/5nnhzt1LWU78DJa4iCrRTB5D5UiLOOlF
KSTmfTFzCjWIb5Y5hbE5gqZHtslgScEJ6E3cU0hxHNBwzEy2FadGbqXEudPj
L9L31Pppvq6idWbS4d9uLj0eo+/i06My6dFceiimExVBj8TLqJEAgLIfPSaT
Hiegh6Zrw7+oWkV7I6ZHZNIjufQdVbQuMX0Xix5HdMTfZrPoUWL6VzoMtq7z
vgNHMJKNc8aJrqLrDntutgTHrdX+tmK9lQEzMOGRsDzn9iF6S6Qt6+Hi7fur
e/UZv166/Sgz46DG90WBfxzpqGw0Iz0wSykC7rHgL5We5TLvnGs3DcPEUOXa
i81WL7aEdqiQwRNxsEIS87e8LULxJGhhwN9CLqbt536PJuvmCswxAhLkSeef
e7l/bQaLy0Y94S+fIaZwVuSmriSR+Jjqj3Fh+rcLL45lqBuwZmzfKr5usADH
how3wVCaP3xLIWcqccQwwOrHk4ETWRhN1Q1htXERhQLIQA35aAxN9+t3i2gC
jDtyqM8/OfApGKaLwFhKsD+1UmAkCyWNOJjuSXctjLtW2ROnca5jtTHMhOgW
K5F/uOfsPIwsHonYX0Ou8RhVQMHwaTEsAnOZrr/rH5xXmEBNo92qTpieSrCZ
wL/W4m8K0UeN/8cnZ0kkgZLT+IyaP55diJELSSNmXD1r+RmMWkhR8QJm/D3O
nLICMCer2hCYp/95QIw6EiznD08SQ6xmfzM2yZah31eKYWVkhMMYFHcmZnAM
2Z7pB8ZMcbtPdZmgT568GNsm1ryRQZl3AEsPQONdA/s7Cc85DLFxaYvxZn3S
AqmLfUrJAWcxfecOenRGJPMNptPJ0u4Va89hOk8sLjKpPGO8ma+BgyUblVMW
lLksOEBZUL7jQEwEfTeDvtM9NSKCviuCErcjNYKbaljO1n6frt3C1wnj67R2
a3d7a89hlZo0mhnXmpkU+0/czN/veCfZscrFIYcy/07y/BSKY3m3fpwfffdW
ut3W1Cj4V5wakZ4a4UePs6DHDWjAsPHiVF9GaiQnNSojdWeGxLKrW7urWftj
ofZ7PiWg7Ixx2xnjcvzfen/jh2bGpRKTh/605+kuDmUuDhn4v7dK7I+42Esp
jkdKZsOkg0mOzyiOWSXMB8GpET6pURHJMVvpO/xSYzipMZmphpUrdbownX+8
tdvStVsFOi1c7fdABdfCpL5oYrFw4lMz43rJxPpm47YWk79JEzdzltuDKZ5I
diz3nqQkxC81fgd9R8Zyz950HcSBidsmPvQ3fmtm0lhkkkCaiBA2M+n2p63a
m2xfXuKY5bIAGDJYPL/NxVEK1ZID9zSB0tR4wIdB32VBj8qQrG9lab8v1H7t
rd3D5xU9FU5sazGobTFpBATcDR2zkhfkJBullNgfcHEoL5l/q8ihrARonF/u
nhPJoANWkcBAn1TDuvva7/10OpvBn+m85uu85ur0eWuHsbRb+dpQ7WmmvWvW
bvPWHuDzXr33Ny6WmNS2GLw3M3ljZlJqZgISfGtmupl70vGOy4JbFIcjyQ7l
PndA+kDsLsDTPTU+AriXqv2apd2NYyvja/eka/d6I1PHdoLJeMAzaqI710XK
NBwTZe3O5UkOHD78xDWTZRE438ra+VC62S9buWGklUZ+39wAxf46PGRzlH8o
1yU8NCI4JCiKaz3Las4sq1l87ubwKK5ncFjsDu4Oe1uuha3NzIDgGEiJvooN
C+Ja2VpyrfnW1tMWRwVzrR24X8WG4HUu32GeDX8e3z4kJC50Vkh4eMSsuKBN
MeFRwbuCZgWF+QeEBP23N/HBgTFbv7wIDI6OiQoOiI1R9cEwHmO/XRI/Yg61
iCnhu/DLuawHTGdJOZeTeoA6xWKcre1t259s/rC2y1tOnnT6tp3tnNwsW4Pb
1rm5OXY3lydN+lXVdC3PxvaP2Xk5N/5YTkY57W9gr2bwHKsZZQF2QN/lE5EB
vC8BjXOoKkl6Y3z/jNZbITLTN0g4SL/G27T6abd7g9rqtCHl1Wn31u7NEkvo
Oy1wq9qRGknolE/EiRL7HJLjueQFR0rI28FAjetbjOu5xm3+6N+3konF/sZV
Z4zLCEUgPQE/htw4vXz+uWTHE2BMlAWZyfPBsNJLkA/yB/nq6EC8pXJ1x1IJ
T6hvIZnAIVlInS0yydPIE/RdxxzA9Jeyjwj/1F80Bjp9gAizBODM3crSl2um
hCE9AQeE+a7cGR0TFOrru9Q/wnexr6+Lr6+3/6btQYHCqCj/nb4rgvxDbG18
rf7Hjdb/vfH/yizzuJPj/KOsbPk2GDYj5e1aK3d2TlJGxv21Qm/P1kvc6ecj
17DGV9vPkH4XfGIc9b5Npab5pglbNM5YHcxOqkVgEZ6tIYxJ2Bx2RSHtHF/P
ihki0JzDvodX2ETlIj+LNK3clUkxSi/2dLXCK1SokD8USQ5w9DFGEmlaupAT
uKKWTaFgQj5fwzoryVPTMcAP4zJo571pPulL/N2YTIxaVKhfLhhrPe29VEIS
czkZxYYhwil7Taz4GItKWSlItiw7l8Wj0bAkPz/N4EKNY/pxpYWYgMX0FGrd
4f5QfIjDgckk0y4VGcS0VYlJnPRpxu5zmEFcmpEG2VkoTp9u7G7HlBiKSRqk
KOGEwiySFZXKr+deInEOcDi6jCThj5oS43JrqjM/wNsTcJswnbOKWmYp4Xuz
GSTy+m4aP0TAJZGUwH9pgm/LZlLYQKQezHtf86El6YlWcg8tWCAUr+fSAZpJ
IjHtGDEYjUDb+0/nLOhyj+0Z7c2VcgbO3Cu28Yjove9NiymkldBcxXRqlVGy
4TOJEdOIJXTF8q1OSEyyirJI7HoSqfe+mBaPgwnYhTb0vUmMs/Nz02nnqGUa
u7ESGlWPVRiRXEX34xOM/WsW9Rz/UaF9keDe4Tk9fDszq3B+ljNWrmtJmUs3
Nd7TfKci9I6WV3fR7G6SnXf0QFELvfJW/f1bzSmmg0mmEQBkYZzZXF4SWk7x
Ki+ZLSYDkLTYTLNyWf39Zc2lywaTLBDQNONzze/vh76neb2/PzsdAWUU+2t6
OdYvftScMm0waRoCmm58sbm+MjSH6ZVZPDsTAV0sPqPp1Vm/uLM5Zfpg0nQE
NMP4UvOzJ6GXmF5ZxbOzENCt4hZNr/kN9x82p8wYTJqBgCyNA5qlRaFSkpe0
aLYUIV5WbDbWy6h+sVGzq9FgkiUCmmmc03ypKPQSyetS0exLJDs14ePonEkn
rL0jT3xVPI0y7sFMvHLAFa/44pVSD1Rxu4NX7uCVB7dHVFJN8YrrmAvMVcbL
UMslMX3MhZiS5vfOM71ZXIMBMojORYCVaJHtxUWEIq8aZp0osSzR06g21meY
ayVsHeqmZ1MrbejiJOk5S3MJDW9nJWwdFlToujbwu4X278mgoyQHtY5mUJCO
gnoLF+kKHcutPVcL4mG2TArMtpOFJJ+prZL8uK+oH/iP/PyLbOgaSYy9pi+X
HCm2FP6lRbmg3YY0s0pbrZkytWZed/XTyWa+GI9r5vqBM9dSZpTr+pVo/Yel
sxXUKBYfTLrP9BsPaZFl0XMtF05h8jxEcDlFRbDzAjXBc9jdQLABDXphSVKO
xXrPcyVZJP+xfwiwCr5PX7e2PsPdTfu1WOezwFkM/Z0FWPWkcQzziQli0tIc
lwVvydecAVEdQPSWMxq7eKF67AXsjFLLEs4RIb9CKOGSaQNnPlCNq/S42VR/
ZKh+haEGUiqMuQIXwhJ1vwD2pVLLZMNMYSHO7kCx6Tc+Byh/OYvLdY8UCRZx
0yVtGyJ0YcZmfEbnr9Q9t7ALSy1dJlwiZoyCGY/tnViumym0Y8an6/KEwNNC
XTVPZ5FUPL22yFsvmxnBpRPMm9CcemN8J98ji9bA954l0dWnMmjWJFIJrZTF
wl7ck8SUsMqoHoinz6gqnhYvRViYSQCLWPZAqSXFKEeo8k4bcO8kNGKuopKN
uNsjirxAXSSgLgF+7vB+9UbpXp9y61tFRlQe7R41yS+zZa+1RzetVBu83zIA
bdHG8V2oxvfjIr/x2cxobwJfd+Pm1PsGl/keXHoD/07xsjYqqKTER62S6Roq
lZw8oeibcuta0kQqztkY4OzWA9S/XICzzxBnqyS9NIMTGkDTAK6q6ePVTiqY
GmH1KJ2+m4XrXT0pYev5w2OzqTuqtCizzt3zQczI0lAxI2mdWiSX2M/uWVIg
uOMiOUsfOHN5sUe57nuSRCj2YxmwQBpSoQBbZUR/quXCMtiOZCQwUMsoDtG8
D3ji/WRxlUE2c08VvUgqtAI2b83292aDLomQLu0Rvy/S2AUSouqyCpViuMWe
cMbqUTM9kaX0+3FGDy2LTKu+Aj+8B0BdPXDuDKi5c89IGFxufYA8neDOGbHp
y7CcEkuJhbcJdMlE8jfBu0hpqi4aE4Xbyq2PFE8jupyDLuEpGhWuwNDMYlyX
pjWn0iZ+4HtEaDbwC0u29mog2QSrZZOpHipoYtH2cutzxdOplHGSPjpzGnIY
7AnU9B1n6v0p5Nk+ydg+LSk2m9Gc8pfYn5I0lUzmhHG+oTAX4xE585s0se1m
Q5+icUnB2ppU9upCnaULev2P+o3L8y9LfW6vpUluI9dCxwAGw++WMF2Lz8HD
dbKmU1J9RtCOvT6M8w4WLNdvSAtz+qXfrSV/zV3BYDG3Ucj7tBgrGQzxQ3PB
rCwtji230pwrbqGR7Ar9iKA+Xc5I2HRUOH6rWcabTAFLojFY9XfypM1jAiQb
zQSzqlCXADPURfKlyxDj/qajZ8aHEV2OQZd/Ns3ePGarZL2ZgD+gxYA+fmZc
bNd3WC42369WLP1OjO0zon7AkonU5KJgknvaWtr6qr1+x5PJwtLx3S5ynYyM
ybf2Akuc5+9ITsJyM1FHDuISq1LNpemHCxdsNtxRZIBz6fD6Qp2Drp6bjgoM
8vzt9/cwdDTJ1OSPYiWbJtwnCwMNupOZi6kTVyUtqHWxi9p0y4yjw88IwmC1
ifNrF/BLP3f/WrJvZiQjfWw9BYQUhbNYrKNi8cNFSfKMIIvUaOiCsVyrhC0+
bfPLFmufM9oncKrFcXVS49qF4zoGcP39cOHCzYbFQuMkdnIAWciv2lqaaS7Y
PKbUP9OcVUwipY7tg9kYk7hiNsUF3l+McnV1DTzqb1xmxrGymAKpmJbbkbXk
KO5zQOwzAq3BERtQI/a7G1nvWJB7aixBSzlpoc3E4O/WJkVza6GLMxW6vMC7
cNiqLtM9yeOOBfnR4xk7EOddTbpdKHofMib7pMbovK7UvVOCeyTH5tTxU1qt
PJq1XfVA3/eDvvvr4QZtQVY5sWNLus2zmbDGBM8jcOnw1s228o4srJwXgp5l
lfPEf4ZA6M7J1v4P3wjieeelkm/K7wvuSRw7IiZmC2+xuSlGJOt6LhWiHl+n
l/BLpZSErWHmE7Kp/1RplWwsLfsW+aUqhtovHVT7pRjd3jJLlwX1LuCXznCT
dP6MnjrV+S2ba9CGoP9mI/eXxVO5v9WnqAHWj9J15MQ0tTDNjhUwTb9gO3Tp
RV1C8S7dX7qcpm62flSoM8yKKfEbcj+EMJGOUeccx9SYnNW99KdlycIUV8JD
6gyc2ftQCh6S8sJV7IdNQR6y2VWANfBjNpOn6IMnCibjkQghOEU92+/UKOtH
XN1JRMbaCwheLDbKpg6Dfw69tOQYmv3Wl9lPqGe/olv/p6XLkhPE7GTdgTPX
HxqW66aUoqSH8dWk7y5txV0bT2J6/D+ZRZakJTElheaRf+CYxKgx8ZuqTmou
U0XAKt0ZBCYZ1ISt2f8AJlMh4w6vHXMCYdKmxqT4lBqTXF3pQ0uKxy1XQNn4
/ZKTeJL2BeWLasC7uiceWpZ4lCoZBih/fHioXPeSqx3zKjZ9Fywg1vOnqyPI
r2qFO+hROD2baS3UI6KmR3PqlFmdoKO6Dfwst98Gx6BE7ne1Z76oqfLMe2cJ
L5VbPytdSjh5vsT0Ze5gkaXQ84RFlibTjrolgJbNtD9MDFvm2Zx6dNZtvodA
r80AVP8/MCBpAo5JlhqTXI+IGdnMeUVEF+nS5tTns/qtPCL0qBOhyyXoYjYR
75Kj7vKnRxZ0WfBBD8/UGD4WxncyvrJj/sd7xlVEsHiGmuA8dZ8WD9asbKa/
1XgCM6/m1LjZzcJLKGrOt4Ko6Vj0pFQjH8lwO07yoJrkv2ZLcsutM/d+Q5Ds
JDGdUFBYZlm0rFy3jb4MyVWqkbB1cAVkAJuE19hcjnQsyoSy2SzsWDnKj6Rj
ryL5HRmrFnSuOj+arHfrkSVl7ZFFqvzoTyI/Wovyo7XcTZFFeaPzo4dl390p
t864t1aVH505YO0RMb6BP1icd2QsCqi31WIrHKui4bV1UX659aVF6wgagiWm
3zyqfWAp+QbsUbv77CykwD1qBfaerU51yqmD1o+ax0cQCpwFhFr/oJ1NDRX6
AUX1iKIAIjv60qWCyp3ziGUQTXS5A11se6BLxBMtyq62R3cQK7rVrEgqUKvy
fL0j5ZaUjW8X4apsbjBwppO5oFy3XKPIDbIja2T7ZW6QHdni2ZG1HIlaYK0W
9RSKKjs6vLTKOpsZs9xAlR1t2oRnR7FIzjGS8nsa0ymjsqOtenOs5jzyM4hX
rYrjbCE72hBTUqUz3cUa8WYmRcWbbmu1m6mj2s55lGWQSRDaBoSGtJpmU3c9
0SoJv+P5EBFaxlTbbIWa0Ci99+WWLr6DBKHFQOi9iiXluuL7uAH4Qriwa7Py
6DZwpYE0K1C4oOEU2lNUyvxiafecbOYZqwmwyhZa811gJZ1SdotMgsnmmllT
Bb/A1G/R1L/iOBfOUeH8YyN105xHggnnCZyltIStO3l62dRfnmi5eHYfqEA4
D6pxdq5V45yol1lhWRJ8bjGO84oJA2c+VSwt182gVbiL/QS2SDjP3AVYmyak
6S+QmY/FUd6iRvlHr2bbbObvRROIBd625tTF8+YLPSA5PHcfsu1M2twJBhe1
YGYvnFt16pl/1yuvsHTZfoeY+Q+Y+ddDPuW6WbRPMHM3PrN4iQCz0QGPVQ8z
L9fBZ45Sz1zklW6XzcwyMyIczPbm1L55W4C/EyYBsqQG6CLUJPJrdZcnXlXQ
Jcef6OIe0pxq67jdyoNr1MDPSGko1NIgJUkaBUo704qWcK2NBoS0P3qmTrtm
t3ulbeCcelaZFqfc+k5JKGFw18FpdJXes5SExpR0j9+90g4pVYJaqbB5agHJ
qBfmPBIb5YGAMK70/b7iD5UNhH6BrO6uNMim5gmvgZQOaCMfQ5iruvdfA9RL
cx4VGt1ld+OIh4Nbd9oNbt0oZiopqugdYHx4Kk7rb2paTy7DHLOZBeyJhGB2
NKdudrrqvFsXDKYFGUyzZOC+xiVANeU07lRuaavXCE7CznJrKX0nQWMrxILP
VQ8tSTvB5024kjwP0XhNTSPfUW04g9S8OY+8J7YroyI9YWv3Jkgg2oW/6sIy
EhF2QRd1ifjSZYh6F9gy8W+iyzno0ls9I5v6N9ja43qv90hv32qrbU2m1p7P
egceW5bsynEjbG3iwJnXOi/KdXPof7mJ1zc7gvLUu+FdBr7se+ideGyZvLuQ
6PIPdPmoU+adAF6ZtAe8cvFubmdk0QCwssgUZ+VrNSsPehc6ZTM/WJkSmrYH
uO88eY4H3zRmBnD/E+L+DLzLuy/c98YWZjN7/Yku7iLgvrPM2sPP9DdH9R5i
5umeMSviv+w9Lnynd65LvY1YlPB8qnvDl+3Hoaxl6Xkr1duWg8tPc2MvqHcg
P1U7Cf/2Uu9c9raLkp6dVG9CvtcZpEIiB9lJV+njz3i+qKP21EM4h1KAQzb6
vcChhPdufOUmVdsDgcYMxsCZLQvBjww0pw2iru/VXZ0V6q6O+ulVlpTEXjeI
d95mDNpx7WOPLYsSYkr41kPRC0FjIly6F+JSh5d/6WhY2DxqNlUgv7wKEHzj
8vccjyrTaJrEWtld52S5ZVHi+z9TKCSsm4Fhb5ZErBLEdIjCMqluGq43G2VT
TVjsCrH+rsc9t4Zr7Lp4Uydyl9KfcO81tDs2KeZekZcZchJaWT/5nSZ7abju
TKtxWtGTl+aTI1hBYlfW5aRlNEAhTHZrmVw6V3PSONbrWF+5tIiOSjGJ8rLJ
i6qFNu6HZTe9ahYekkuXEi8a5dIxY6HUMl8E3bTtx7HexT6WuzfInAIyKc8E
DHYRq6LXzdXMZmWCXJpP96aYuVJdbKpN2XurPGNlvK8NEIYaV+ryGhTyTt7z
2emrBEc6hrp4R51QqT22i0dbKNBKYbGZTzwTXfWd53TmpJ2IE7jaUFbU59+V
Dfq25qTVa6LqW8fLss/hMO8l0hINV4elNU5RXqwnTPczspzGuoWV8jLRakTA
tabdvtXxl6sTAXMHTW933hd8+rp4+4yyVgnO1czv4jlFBehD76J2+6vVik7e
3AK5dJE2Ivn2UrnUUAeV5m+QS4NpUPor30suHYfzbG6iXGqC2loG8mFKujua
M7L/U2V74sFWpwAJFXDLDatzChiioJJXu1PU7yQ2TBTZ//lQR+JSwP8f8ki+
6Z2SS5dojuKbrYw3xXmVYFVdbfb8wubZh3pYBtafysbRXNFcko4bCbKFaUCc
tt/ITjfSni2Q8Z47IrbKBrt4Bmtwzp9u2tOogHeDnbw380cx+t2NtBMGBJ+v
1Ayc7nEK2OWh4XprQ6tTJ6/fENe0T4c6HIZqcjp5BhNwTdt7pf/OBsXcg/Ky
ewThkg7bZf2JJzucAsoQuQ6+1U4B31JA+3ZVdDit6L+ZxjknWElaXlF9p8n+
hzTOGlDAhJ4baZyzSCfvVuelnQgWzDVxTdaPP90fNwT8q76e5jOEzWU5u/Jd
5wyxlzMqcmqcAj6gwXeeqnaK+pH0JIaltaI573LrpybgrSlebZOflMl9+52i
zpH+QvW3u5pqPoWDlgJilxA6O+FlQE1Omk8UQserNVfhmpLGaQIkNrbeAHvI
dwCBflwqz1EYO0U9xuUl6ei/W50oqnOKekB6SkyS3/HJt+52ms8uhP2V9utp
tTvwUtOtNJ8YvFRzO42TCKXlGzugdBmVKury09Z/Y4OI3BEmix3uuJVWvxKv
3grriBluzU/zuYbgwlrvpNUXt20gf/CUVl8qdV1UcVou3TtaMeJkvM2zRwmx
JS/N+Hs3S12J/sfQDtGhutiTrfLG/rmVioFOXt/ckZB/OQVcwFmxrB3YDEiI
sHtOY61DxSmMuleMh6GtBaGL4PX1uz25s5dL0jjvsL02X6RwBGTzkKz/9Ive
VoP6L6cJXOeAdTfJKxQLunjjZ4BxpdTN7QLT7FIxraL6k287MMhMCJy/0pSP
OF+r9Ek30nyCUelUx420jCC81Jqb5tOF+HGoBjjTg5fab6bVHl8JvqvpzjL5
4xYe3ZhFKzVnuy9vutHYfmtDjcPGup2i1tgExXUw2Ou46X46CH4LLw1clkvv
aY9i484u3oPxSs+Zt0GR18V7bjmKqw130moDcBR78tOMt2L3RzBK1J64tMkp
yvLpCEWTpvkMj1ZacABPKSPZ9QO4x0gaH3zJvPCeuZ28zdOawVB7cjt5H+/K
pceQ/sUr9a+eYF296G7PR99W4FEv4gLy4LVtqHQX+FbbjkoJPdfT1icKXHAj
PlTdW2AUiLA+1A5uH8f/UBMw8Wdg3caOPJx1NHvkH5oGunipnIhrj5M8jbhm
xTfsk6KaBh6DsWRQq0a4ph+W64zi27wuXt8s6L+qB/rf/5ci3k7LeI3jBApe
K8PxBObVj1N5mN7ToEJS3D0eAv1oUTnFyo7Eg6CRSaTqkTMDg+ybkad27OLF
LpOXmcxHinaqyWGjApSBK4Thr9TBRKf/AA+5kP6Kd3RaxEh0Prnng8XvQA7t
ZDU4tPs5QHZ/DLj9gBck3ApkTivARtdvFrji1iOqyR3qv5OW8Q/O6xrg+jnc
R9XlpmUovdWdNJ896K1Xf15abRauHuDBONm49coATjFaB5qcAm6MDpFXwNWP
HcXSeBnvzTykCf07OnlxofKyFmRR9xo6di5T9IPf5Y504gPSobE2oNJ2d+XL
XAek11EYem0D3vgJ4Y0Py+x8mxJPgif/iELkrbvgjTvw0inA5TVeSgAp7yMj
dwoeOuATKsVeBX3+E5fHYdnAlY7E0B6nqPVPCB28UtN/GmKWZBQhepVyqf9o
3djVxfvaSICCxp5DPfOGYL4aEJQC8eZKNfjCgEKbEbyJkZf9KSQIzbuscOzk
LTZCeln9EeQ+eZQcpffwYOsAqcpJvJQLuYk/0QaGcwYZTt8h3HACHuMx6BRo
UyleSgBO1OClu2CPr1EptgBKSdSRxFTDgO9GO4hPkFtxWMrM5XaD4g4g+Avo
fcfNDfKyg6uVke9q+8Iu3tzH8rJQpRfceVdxvYv3k54yVM5LVECSRjdVhtKe
nOEa8DxTFuKJz6dO3gUNIpuTXR8Cg+WsAFZdRmlaWOEK0uGNkLoNlH2kKcNs
3ylZ4gYQy1Rpk33p5GcfD3NRpuddbZA8cNBlvbPo5ze4xbVeT6vXemWnHTkm
NuwMovdTBUgiAy9dBnmvhsJAPsjze6QM9qdgxEa1IdYlHgTgJBz4IARTITGX
/AkxV+sWY5ySz149doqaG128C8Tcl08HCpTxTNY/DDHfmI1jMDdxMTHA0OUv
yUJN4kkQwIFRxq4HOeBRCBytNpB4YEquO1QqwAk/A6IagaiBsmlmeGpbXZOC
Jk3aYKqPT3JDtBKfpPbmatzbD0IEEBH5aphcehilbC2OKJvFS7fzIW1Cb1/3
ge4sx+HunJRLN+BtcWnysiBimvYL+/BpGup+KUQxHOy8Ns9Ed5SS7O7ivXEc
5QNf30lbb4Cj1ZewmUBrcC0xYGuqKWvnT4L5eq9sZlgtX97TdCEJZ17oui1i
JPf+GBmPNh1pRh2kW5uPADtqIDemGymVRwZ5WGwn74EqL5PdGqoBdtXgaBYv
Xdc/KlqfA1HvHRV+9BrlZS9wVCLqaO1o9Lmy6uHoAelyIucFJrB1USkPWPQb
zsrcBrl0Mt4275C87B3Ruem5O57B7+rk2XHE+OSXT/tjONH9Ya9GeYkf7srL
SDRceSLaayJw4NDfkeLtaALn/CvKRhxOgzpUg87ca0FDfNqLTGnR3dZPlQpb
sJBIvFPY4VH6shKCFxmxIf5q+50hcNDrNxEIxCcapCKuv6Xj/cgJXLzaa5CK
D7PhZzzhq4EkouwjQU4r3RAnguzVFEiMsSM0CoLGADjRTt6N+YjWHpDDBWMi
/22Uzd+ouA6MCSJyC9CsvXhph6+8bC1Bq7jupnLQBF8NFP2aP59s7/eFRHI5
C88rb3p1JHqBH8HT+TPt+VeaCkLl0pmjtet2F88OdyT3Kto/NyrsOnn0CHc9
1tLE0NOkr4BvG2qcio3+LhwZcNp4tiflZflKLHriCEdzu5NnOzrxfw05zU7V
Cqu/17f1dlq9oSpMD14FRP8g4drbPBSJ47i8OuZkeyLke/uVY7f/NIGg8Mo6
wmtBuPRCherctBMBBCPtwr/yIOT7iudmolqoyhMUHwHJ18RA6dU0Y9zv23bx
1txEueOdLohZJ3AXdAicUR8RxyA+fSZV4gFpT0LPUNrPO4m8Oz+tdjVaUsjy
0zi7iaQ8L60+XEBwPb990BeSyFoRnpADapwW3ElW56edeICWATXgWJCV/0Vz
H7lMdApoH63HsLY0oxMIt7crZXto3XU0WAPk78YUZXbfbj/c4RQ17QmRGV6V
fQoHO2wnLQU2NNQM67GdAn4aneWAIn/hzF3FxwZ5mRW+Cj/Tkd9YsxDsZ4xy
3qZ4qlLjFyjAH/pE44lIO6yNowh254Y5Aquub4Qky8uDyG9e8eJNIvDRE2r6
NjbtPtmfKJI5RXUqlzd2y+oSTwKPs0ijcpSl8rLVxKSZ1W+MxCMV5wWkTBDU
tyJON6LE9Hc8MYK2jBA8ee+BPP8Gng5BirR+sTIqtOcO1+Sm1euYDE4psmf3
KeawHWZneZcqhv51F+X6svVlq2QQCbcRa4LbacZC4/9BnzbeZuQ5U2S3QIum
ofy0H3xz6jilxe7eoICwG09H/IP0x25IdivNeBMRsj4ldOwYgjQ1428xKEQj
rBBre7t4N+ZxV0NGFitbyG7h2VbIpbmalig/r5RfTzPeQfD7s+iS0khuCwkP
UCl3j9TlB+V8p6Xzw7pXdg6JLwiAtx8/KLW9Zg2+Okdxzm4irkZJh36+iPML
FmTrdxEj5yW8V3aUOyilLzMwwcGdK01fjly0ieoKYFkh0oGk8C9RgvwgpEux
9H/vCoADSFVvFO0uUMSC7/mkxKhui5G3MuDeOaWAfHouJCjz8CXCnS7eUQe8
tEvG+9qU8PVedXKE7ilYq57YSaC7K0GmRPfO5X+lhDKenT4++qm6eQUKOxmP
vob9nSv33iHZnqV1cxsV8zp5XxsThB0yegUSgKznVtozUSdv/AT+qD0hp6h/
lJMMVdBcIUTsvVs9uFQRK5JLtfBc8NZS8MSToWAPTRr/2oaCgLoA9+SQjtni
+06tQ+DdCf8Is938iNY0OV08PCaMORE/pnSOmVe2rt64uYldqu0XM5/32dxq
mrs0a+ahzHpbRatTVIMSpz4N9TbQlZrEUHCg/1Eu4fZU1n3yhYVDRgRur3Xg
nfYovVNFTa9vOyxAQsS4JuY19sQpaq5Domk6ylm/yEnzOQYLuISmW/gCbg3a
QUvp2d3Jo1mgUkc+LG5m4m39kJD8CIWmBTLeFl2lwB18FeBctxA7h/FXZY7D
NTdBw2fhPRy6eAaGGHqzI6FnrqIfVuHBo/L0Urm0YiZwtf+gHFyNq9qgh8B1
+uBL8o4bOFqbjUdh/ResUN/jzlZ2Pa32Mu4meqBN6TBgrdSHr+xlsGo0wxdz
4MszzPESuPD1a22ITaGOj8MdkNKKlRP37BpuBbd23wRfMcXKeB83ystiacrF
z81D/YlLa5wC7L8itjHSavENT4ShdBy+jTf/oFzagCc89hBx36GmeWDeH/Cd
vRugObH4S0dYpz0hciBwwS/ol0oeBzx15SvCyY8VQwv7/3X5rubfV+pOk5Oc
md/ok2rxu3UFQxfEmazk8YuwvqvUrLcD4fLSvZ6pJILpHQ7DNbfSTuxSR+NB
33ZY0i9Xkt8+NNwKLikWd04QwJ7BKusnA+XyYneDApKEG6Mt5aNTQBkeM72A
EU34Rmk+RNQ3aJ33aQN4+w94SVTtFFVB6GhzXn7HkG8TyPO3UcvXGOj2aHRo
AAbtxTPlz5D3HMRZtfsUaAjaKW7JgzXhSSLfbpRLQ3WNx7EablWc/s5mxPbe
K9641Gst/n98N5RQ8mjApmFuanZ173ijrq/Whf0rk7kO2XsLfdTubVwn7/xM
PEMWyXg3ORjhz2V2wz3gjMpGucXqAlgG5ONO+0YYOO2MKNz8WkEllIurfFhM
H8TFbgsJ77vRDuMG+GdjlcHkDdX0wdKcMDs5mN0EVOoHY1uDcpeU9vwuXh/e
1r4bHCWmdHgOXrBgr/f4/4pfN/D49Zwwx1wwYMKU42W8SXutLYqNZiT/4rE7
+ofpv/znh2j575H+u3cnzyjx+CX6WPImj1+2+ydHL3EsF2+dJ6VN+3vd1egh
Wbxp7nOxdCvt3K2dJ29+LDi/29ThFRaM3sfkt8uGrnbWux2wa/5N7H51d2Oi
ebHbntIV9BOa0n9ONYpKz8eaXrv7K9n8zt3g032He5KlmwXf3q75aKTob3R7
78P9TWxxM/ql2wE+lBgPOuvcwmy45sdJ03pPvgmVX31X73bJzo8Y2G1P20PK
uXfcCecKY3fLZAX3d5pa9UjOkc/OvxpsarWatI2bIvWTbv7MO8s6/u6KqDST
clHCMk8yO/4uTeq89fyE/sN1OlvR7D/XyE4NRz8a5z6dWxw/sf9wq07E+eSt
6a+6em7LEhvK6N9rSqPu1IjaGBTuWcN0co1s6HzicB+7VT99OvehPK//tLT7
8PGbolJbDUTj3fOic2+2m1otTgJU1j8GpGTYBfLZOw+2m/7WX+f2PhgolG1/
CdhHENjfku95LCu4Eml6rQFhb3xzu6nD/u9E4wNfYmPYN+6xj9R1KY73sY20
Ab+Hwbf72T0I04ehjv3skvGZNGcpY9/W8wvNNc8ci3jpVr5QPIFhZs45e2xY
apGy+Y9w02v3xefI5idk202vvUPjn7i52zT3ASHN7vo3HUPwxkqO860G5Gg9
b2BpUqT5e8UW86iNfmekCrlCn6UfgK4MD/+IjTdRbD99K/23NzDG7/gQXU41
74Yfh5vmFmJIIQp7dt/8cPqqqG2XBfAq6XHkxguKOre/TfoPRzPFiNl7HsTW
D+9+6eaFS3XAuD32c4Go1O1AGIi7YPvLC6LSbsTwf07UiErPUaAU0XBeVPpG
A7XJb4hKi1Fb1C5g9zYobFsAnWuB7RG374teJmqbXvsGUXK8INT0mnfSL+Sz
uy8El4wbxaSwOrfylZjRSCaBwKJNr0WinuubQD2HEcfWt8ebWq2BNvM9NTtN
HU5tQ9QODL7pGb4pOtcYbJqrEO9DFrDb5OqnAjuZ5Ffy2bzH203/lGfvV2rP
CZmiro8t1/KZzn0a+nMf29ShgmD7P0ONHz7LdptaxaApB69Em+Z2YgdGSFze
qJhwVVR6fKTCTjH9cPiXJGChZn57/HFFdJ1bSGQhsoRPjW5/T+xnP9JBWrG9
oY99e8l07u+xUIiOBo3eXt8XrHDY02Z5FjeV6HWgbHdFpRk4Hyc0iUrzNEZN
c6ePnWyChorf0M/W00JGIQelc0TqV9xzCpQOfxs5r//wL1oXEalJj8OdZImA
T14/+xftzPTFX5j9d72bFwMJOmKocvdgQbypgyHSkrL4+e0fm7pEpd9onAch
bmiP9P3WuPCB6KUbU4Q8wOPtdW6eVrgHiKxzO2ANpYvP++HtRlR6A/6BmY7g
asCOZr0yI8b/MCwTle4aRcx5eR+bojNK/Nsa3DyjRtnIQ/AWv410Fn+CqKy6
cFspACE1o9IeGWiUB9KodQ96PJhSRDe5pnPobmICsH6S/XRuXuyegskEcesv
dJo+FrVtQ+7i1ZvYkxcUt/sO1yFPpym6EP/zcH+DW9d8LsGWxt2DVz80ul2Z
TDi5ru1DyByYfyMv0aF0nlQNi3PsLxIy6mdvMgbf87TjFO578h6LSgdxAzkJ
pjIelbrzweGdPYrcEXDZ7dIMxMDIBjfteYLj2meFmvlNO+crOuR9h0tu124R
ntdKZ/mvMxbmyuRN0aZWkaNc5xgwNcZoFQHPU42T/PHE3afYt0BzVXze1Y+K
PvbPgEA3QiAiARxmo2WHYHxS9HHSMdaF36I/gxlZxSODOvEY2DqEu5x2MK0G
IpTsFj3+UAC24HBX5VgAHehyCphuJPtUJyH4FztRIat3u0IxH79f8O2pqx+G
ru40vfY3crEnHoea/hZb79bFxwjePg8fbgd66sQQbvIbI8GAorXSkeTMm2Qm
MkUeIDuP8Nld4AIiTa38cOwugEMMRNjVV4abWs29QDavr4RYdbrELeRrXP/C
690sw0E5b4Y3gr96iVtSHthr0mjlAznxRivf3w1u7/+lfOCWBWiuO42hplYb
cHcDjueagnBBu02viXC3JAM63ou3j9RSt21goLuNIwjvcjhPJmqLU8bD6J8L
IKLEmuY+Ipzyx3UPPhaAQ+Xj1J6qBAcGjO2XnAcJPNip2M8wdXhGxO8up6YP
g1eDG9ws5yDzewymFoJIvRrbAKT2IVL/+eaBqHQzEvK2xuei0gRUiqp7I2ob
VnqY3TdlpwGYjHvvO29EpSsox0El78qGpprvKa0crUuDfWwP/VFMCgELLUfR
ILrxwlB7N9toMlK1/ju2D4hABnJ6gZsk6FNubtm89L21J0j/6fncBKx8hUdQ
CLXXhDhTIRDnzlXGpasffcFQdOlXRjnV33aDg4lHzuRBaL2b58pCZHjvGty2
nepj87S2gs+LbugDK2NvmgiVhx8GUeVw9A6kjPMLoucrIEr04apcALP+iVA0
rgEF8oGAYF5/d2dBH1sP98zvFvQf7lFlFtF3GhMbQ/AABmL5HmehvFHU9tYc
LKb4dvpvlf2JYHdvibBXKSo9MFq1wAIdkXMP3diPnHvps9G5zXHQPJxr8Q22
UURYg4A9iD26TX0Ftrh2//5vjyv6KFsKLx1pvih+2/hx8Bwuuyq56EL/QtDk
p/jEt0GozWeJHGX9zR5f8K+H6KNc0ck+dp32iDToGwDJoajSoOdg3HaEbW+4
2ekLscZpzNmReL6k4bHeEUj9hp41Ui6QKOX1Hb6tlZncNIkztXg4cYp5u8b4
bwcKFMtIQjPazG+x975j/J58KOjbP/bY+3kQePRRfOqHMLt7PJ4egfx24zHr
I7z9YZwPCoUb+kFGFaPc27SbojYvyttmuzH392cpTu8v2ynZaz4sU6wUeEuF
35lj8q/JPjGDN0WvnKf8fEPUlkExB6fuLNs58abiM/iP7+mjtDm/j73JYHRO
Vu+mbYH7XODg8HB4g1vlBWV15wJFJOSE9W5h8yBXvtjV89Jt8L7ZrJavUNxw
rgne8CAR4hcvGTCXnUByhmiqPQV1/nZPQbSTIrTRDX0fwIq437pun1bLDWZD
Uajh/JQ66z2Mm0EMChQOkIpDDfsweCUSR6zbt1Bwa6aLBbf+qNlUVtijZj0A
s9ACsBM0APtMATCFBMBshbdmlvwMYCQvAGNNBzDOOACr0gSwEA0A254csY52
A8Ao7wFMGAdgAqfvc4LSzYJfWjezACyGAWDhKTCagzOAmS55dvRMGoB1u6HR
pv720rrqh8BQw7/HAFg/Ajv5/ZWZlLVm9UfPXAIwvzUAdmvGmDrr5nEwWq8m
gP1nctA62nMYLXk7gBXdnBT6yHvj0xtBtbMBt14DAHNlAtiUfTDaBBcg4SCA
tVTCaOlbGHTiuwboDvEvFHSHOIGF7hCziTvEbPEECyl5Okt5gVhoeMRz+RGX
MWx/qhjbROUyktB/UkUJR7i90gH916XgL87MfnMC/de1kLhnbP3lnrEPmut3
wdj/ds9YeW1X+fif3wf+XxuJuC88h2/F/y/3hdFFYPT9BnZRJn79V2ubQDOF
TrcO8EaH6c5htKB0F/VxuEKxZpSF6iSdM8eb1FkksSnJ9NfFr+L2lolDnmWR
2DuoVTyX4rULrC02/MUrebXaQT+uFCsSsJjOEi3yfsdkf4ozn+F3PNlZOIlz
fuHWfUbkJcfC0s/63TIzo9hkBAm+92v089uLZUzm0uZpa7/VmNOcLjlUQiku
ZM4PVL+Zfmgd64B/5qta6ibORT+Nxfx9YZyUuXwKurpkq766tIOivr4yjuyY
EWRxiLgDlEU5OO7Q2qRfjGhU7efiJCyXq62+VPMWU10A+n6vn85mw6NTMt5g
AlYkTXv8cwDiUg5h55dMZ7nqO2LJX/skO3KTwziFzdptaBhMRz1Mn3qYh3sF
+psNT1ng95f83wtKNLYdzXy37wxzoFnbAl23QZe18FtPJH31rSdfhpf/UeFZ
8in8ntR7QYfGXO5kwWbwqN8KxJNek5cDjWfHIBotNFQ0bjMmr8kIungFpzHw
D8pS40a/o+KzMwWz+BocW24euheVskp9L6rSTLx37b6Qsfh9HkvHqnJ/7c1j
roRxLFZbaKC7TWuUd5syDff9Z5yzGaV9RdWkEpprM40qiGZxbeiqGzXinUWW
JDv8fsULSZ/2Nr5HVoVufZHg3hl6mFinVrCInyv5xq/aWF/T/DT/SbJFue4O
yrjUheszq9gcapnGTXQ6m4OfnX1LVt+j0BHal1uLJRxqiRZthkW11qUszaLJ
d7ESLdK0jCLLZMMTxL1NXVpcZidlermulLSaFCW0L8wiRWpQVcd9F2ZS5pVb
HxAaEidwA/3oxxdmFVkKDWNKCqUus9EpzAPqm65JDuojrpPYOSWWlAkXYQ6o
/0GjTNXNq9Jy2avdiq7apn+5avtefdX2N1e+TjYzpJlGHFSdUCs5qltjKZlQ
hUjsBBJdDYk7B+o7v691ixaUW98RGlPnI0qeAiXXU+w8mmkxNFJS0Xx0fPow
jUTyNrRZQmeQOOjy+GIsZSzJ+RaLW6LlLKZlM9cb4Md9CyUmW23MNNtoJGsP
Fp0yToLRj05Yn44u2pYK8dO7Xy7azmMfKLVMNq4i2GdNj8t8XTqtXLdKeOWL
mXslmSatT1Wfes2kLqRmU2OrtErmDSY7IaaJv1xldVcfXfVnXyy1pExsE6pO
vYIKaMxgxPkZrLNj/uOna4aua0Z8uVI7Hb+iygLenVnE0stm7spC1zWFe7mc
rVsidbKpO4HjMy+lLPFG5Ao91POEsJ/BPKa9QuUR2ZffvC+xLJpYbkh9qOy+
Hd02FWXlsrSpFDKG0XWVB15Ed9G+9eYJ6Ahsf3x4wMjfzao7eV+7jDy8VPc5
vIlGbKs3tH5GBwFp+9DOvM+TFaQnG3py0wbKjuG/ZPr33GqQFTTIy1rs8RMJ
7banOhaGBS7RcP0cWuMUEPeVhqtdRX9+GmeLYCXp8KGe6+i0ms8Rm1F7k284
o/e6r6dlrFpBOhzWcyOt/uHIfciDHQqRXFpEMx7Haum9/PP3MGRYHXGEDd9F
PNd6p4t3noOX7GU8Awqxpdl/e6jpdlptcOFy0pOG1hstq8exGmwSau7qO4jT
5DFL5WULlL8ci9L6E0PlZZMF6DCcf3t+Q91CGe+BioNDjej4yZuf0Og5nbzx
aJ6YGpsu3g2iFNfFsyXmju3k1RDHEZaedgs0KXPeYWD9In+47kbaiUNziJ33
1rzhjnhd9OvN3or2uNPo9+jzhmiYaiBh81EYpel2J/7zw7mmnV28qWzlr0oL
NirmdvHoxEmRDetCgCa2V+vtBgugKWdDnVPUAi3ix8jKpsRw98f/YMkF9pUu
aE8UnYCNqVuNGAsCWU9RirdpEJ0x3Y0khs4g/4R+DI/fgI6CvRgppRS59OMk
mCNmg1z6ZBpiYCJAi0mpMl6cjDeVTBxU6ndQoPNdS0FLlrbfTOMsR4WmvDSf
jajQfz3NZ5MAEDhVfT1tfermEYxRI2kE+plS7RC6a7mGa97JuoTO2UmTSE4B
+9HO+7xD7U4Bh/HSFaDUAae03e6ULDHs+9Eb66FyaQvaL59/0lc8SoFqCjp5
UwtHHRwZfmWvE2n2Q1rtFoTaoZ6baSeWjjw1mtjExH+Xuy7SqCJOYDY09Z+W
l80UEGdw4hJliTLeUUJ4g528/siRltQ6EN7kFLANsVcE2KPflPPQj8Z0Hfx0
2I7E1gJQG1zec2EUvCDv4vXVII3aA69kvJvVLFyNWz8Py1J1lXqQf1cR38l7
gB8CSRLpEwch4tPqEk+qDkIclsVfbSrIl0vXLh25F389zbgUPxrSv9QYP3tw
mjgpknt5FFhu2voyvF1+GAcrPH0fr+axaZ4j4UCTHuIv8v0nj2O9swPOW82E
QlyYPCfNZx1wNKE1J41D2HNOWu0GZLPtN3xrrqdxAgldyEurxeF68tI4QbgM
Om6nZSxvkUvTnune35f656w+udbs1uqYGuNKr+p1IbdmiLBUG9KT3pqv2Srn
loAOij1gr6X/wfp5jl9cmiKuk3eD8HWDYZdJbqDTj/vXXMDtq1IuNZmMNPiK
XDoX4XqjAnDlfI1wAKX1wXE4VZObxtmGPMbBppwziLT+Q3LpjzTBSOLXIPOs
G+ri9avEMrRRcbOL95PaWk8pQKrPkctoEsl45yT/j58gjv/XnyAOVBBr/ezd
gze3K/ZLkzGa+T/saC200JU33rgSPHoPL5s5eiuyzo3p5Tzhy9bLP+zWn0eu
1GJMHcYRuyW3az4pbohK98DaNCzvrqj0xJHXJJrCgWWaq0ts8N2p+dAEa+NA
YsMj9nZTj+KNqHQi2vDoPXFX1KZ/Cgo/PxCVhhu/0mVajdrx+T3Y9FoJ2iYw
eRBuem3SBbJ5Q2UosbuE9jndH8TWu4VMh8LNT/Vul+bgTZ9eupXPGT0KrByf
YecPxF1r8Y/yGJzSLrv/zyzJjimlwWsCzp59UzBUaMj/eSUwJrgB8FnPxTfj
P5y6oHDsZ8/YPp37VIbvahy+jTblNZ0eyI0VHQ1uB+ZyR03yuCXgtMYxW4Fz
Smgk9fV9WcEVUSkVUdl1vFHUxspE5GdFN3Z9SuxnP/oKZtv+c//h1khiczT0
xM3ExmLEktvPRaW1qCBvFJVqov4xgzCSLSqFHZeJSu+il47toratG1u2WAWb
ZyjsJO2K4dNyBf6TA74E/9e6f3j0Av0qLNDP8zLueHBPjYk8/mPGxYufwk1z
GUhcVbF5j9+hLe+cI4RUztk+Ff9CPnu7IB5Trp8novUzjXrmBvOhMNRwfMpL
axvG9aB01rZHfLNnR/21oZA5FlqaNeDVINk51LCYBMCvxN7r9okEF2e6LOQC
2BQA89YDsNoxS15ad1MBbA8ZwBZKvNfRrgFYiQ+AnbE8F/woYjyA+YxNIX9Z
kyah70hSv7ZEn/JDS1V9DslCAmtS60yh8IgL+4iQdBA7Iliujz7tp0+nPzWi
9HL1qe7hzBVH8HzIBaV/ziz8EhyT2k7zCGeuue4dwW3gT/rJFeVZRapLroGq
20LjJlL9+Y+8OaTHRsxLLKyBP99kMfpwjBpyjwryR1PqFv6jCK4qHRMJKnQ5
DXx+QNVyFpdzgKTM/ir484Myg/jfaGqeY6dkMq1Z76VFhwFeLLHYEcxijeMa
XEQ3LtfgGaiROn/7D6uqyNLlLJVH0xiX5Jf5mzMnXZ+bTS0TLOIaBwiIDzKt
wjPESEyVIRY5p9OzmWP1lPec+jQ3CzaIy3UtINdNd7+vEYM+lUQsIWrx7z4J
IL9ePVZiWm5t46VMEyfMvESKhAS5EN1RMzczaEO4+eI57EQ1bnmsA8WWJRQN
JW6vycbluvYNfO+EdDr6sEsiRnzYRTCH+bVFFUmD9JTpYnTA2dTbm1vBD/m1
m66vX9ZAmlamsc8myZuamlF8kMP9BvB1097LKiV3SaaLIal/QieR0vVQTjtD
PW8Hq6rY0mWSat7fXGCRJIimFRkrCT6vHSRYDgS7A8Ess0qNq4jgcegOIGus
Wr7zqbn8R/zlKqnJMmnZVP0/0Q33scDSKnwl4DxTPWcvqxfmDFLNWYEWZj4d
tBbBS9C5NdHoyJMozArCxs7TPQZZnuDNF11uLcCPMu4StQ/rsW/ErBIEVs8N
j3bDW9bEo7P1/Ql6j5UpQvWn8OrxAHOu2iHcFnrFNvUktHpOzWJBxrfocrtC
NF4bPyW8y7e6QORbjGeFuxp7ditqerW8Rx6MiVe09nd7EmdP9pxWXA/zhBlt
Q6vXxCEE+sJcoDrvcvV5vBoXHofwOVi9GJ/6s4heSRxJqOiRPzY6NTKhW1W9
pYpFnD6+PSyLw/HPDd2Jup9stY1F3XeH7cKrsjV4VZ4wVkldRf9H3zq3Uedv
26e2EFlKf85QzZCDPTrAfbp1fpoiNmw7QvhgzdFoNIhNWAhebd2MY5gTtgbh
X1H9dbMncQpj8JQirxNyt9eicFNnF+JkT89g07rHy0nLG/tvfcJfFRjVQIz2
6r8BywkHEwjOMSeNni2Hlprb16H6IqZyXc1yHECEv00zqsWrt09CvH/Ru6Em
TmS6Fw3e5thY/Tm8ZjxOoG3oV5Ce2S7tiBWxCOnMa+pIzF9XDX03Vt/+MCr2
v8EZ/jksHLFoaf+FZkR+nlfP/KGa6xtQVtF7UL7MNeMZwlOGrkf5m+CNPz9H
mDTlheLVBt9S5YKgP2ao5s7BRSMPaHyeOx8lckXtdo+bEg/WsVNGnEiOGfeY
uE/QWD0UXjdFf9QCqm9U9UVcNELVRsTUxnNO+6a6RNHPX49UhiNGq0fdJli3
ZlTub7RhZPWZUT1iSF3OrwsQM0/W7DhZsyt/HdHYT7J4SnVdebkpMXQhcMbu
VPuUOMRb+3BzN2QFNba4ceVrYV/iwRkMxQMPPB5oqOMBBAN9oaF+FUPgAG2l
NPpTXslZDsSBNKZW9H+JAz/RlqQx2UeIOPDUBX2wTu3dvdW3Ro2p9ZYu/tT5
+DI9pqTbbxz6mgVNdRE5U6LyEDtZ0iLLEonKU7eQ5nr4xZQUxkxA97vpaleo
w/EztP8paco7zKzQAmM9K8PQx2BmcbGvyG1J1mgPCd+nssf34sToGzf6SXYZ
Qe5H/EozM51ZzJwVjOS15MBKbsZipuZ0apFgxt6Qo4K1PGMGhn0DdB9FZtK+
J9QJqdmVVsIX3VtaXRCK/MCuyo4+ZFbtn8M88GqTnWDU6mMwbR0bLdlb5aHW
KAk+WEMYGuTMC04r8t7hh4oOrasC2Z1qv/EEqu92eqnsrqG/t0npmkA/h4Zq
cl4ggE8VpmLzpQKbFyJFzb+cAOFSYB14Z1g2hWp28IsSri1HaDTlN9lXj7FE
y+vI6o+J65aN8kink1TzDvjWnB+tw1Oi0ILoZugsRIWoKS4GVXeGuqPqySZa
NP42zG7UbSu0BHzn4NUkUZGwR9GDe6H2gVBLxK6wnvt4NU9LrYvmuC66WKq+
w2wDuoi+x+lK289/xGIUCe75MahZEGaQktQLFx3gsCDeFpkKICZNAF0LEZyQ
6GLZVKE9C/8m81SxfqE5OzHfV2xuz2y1SXD1pEfwsaeDsWGTdZ9y9ciW7jRY
aMZ4uWQs4SkB7vaMsA19HB8hjg+JwAdzmP8TmXqmWQAaw6UW+QmTuVql2kYs
iQDbjq46E98V9UOz5PyqLwgczLlsQeYuVaQscP1C57gR45KJ3wUQ6Vg+l+lM
e/wrJrSwT2cnkxlCvk8V960Gycp6xywNhnWIgEolbbXHP+GsnOM6PsfcETh/
h4+9dHR+Z35R4pwpRD84uLL1Fxl6bye+yNyL+MoHvnoYMZ1d9tw34oenhyiN
NZZFG2Ptgb5KhlhskiJ86ufSu75zLvWQs1DMtKOyOeXW+q4qYD/ad3M8WOWu
pcXpkAlvTGIHcddpBgROecV5KtbfFWNhbZncDlwqEmA8WhktyS+dHiJwfwGp
Hke5PfisyMi9xlJY9YvL09hA4zLPUqtzpGm9bwvFkp+KolO1pH5c8THpXDTa
P2e6skhsBpI2Yycaj0ZP8suix3SblGhJaOCU3HWrIrngObAkvyp6HCumhJsp
5KDNwxMk9Y7rBHGRZfIf1Aa+fYg3DX0OYTum8kLNND/+o0IqSmbQJ0oSMst1
LUtorsaTqHyPdGCHPrruTn9qKWRpIy7OQnoWgfRMIaK5kSx1P8guRHiyFw3G
ipgP9JeX+jYZZDK0S+wPmrJ/0GDfddV4fm4++wO+8TeZq5HlXupbPWXcqLuH
NwmtDTU6kGJTloKN/Z4EJn6ymjW+WjWObL6dH5piYBxnpSu7IAGjUbgV4U0S
q0X6H3pS8Vf5DsKRAXP8ddWkIiqOZLvq+9uRXOU3t7VZ5inkVg17wcIk6rEZ
PlXvkrQKZ78VDCfpfJ7NYI9Rfeo7iIlh6MvtupQjAyheoPYCUOLZ8PRU2omP
EhY9jeHvgHL90QVPHXgOwdNRqZ/YiPeYEh79McSI77qrnui7/dgkDLOnEL+l
mWDEWHi7PYYtgfZIqFvC3/AR7XnQvhrqP8PflSPau6CMfITqidoZ0HkQI+xe
9cTbYV4WiZhX9VS1m5EIe1Y9Ve22JAJ31VM1/jKoT8C+PFXwwSTi/+mheqra
E6E+B/vyVPHhD+Xn2FVPVbsOMEsP6sUj8ET0VpOIdtVTBf9GCffmX3T1K+v9
/2pnKGWoeqraDcgE/aqnqt2STPRXPVXtC6A+FvvyVLW7K+Hc/wW/lkzIQ/VU
8TMU6uiHRNVT1X6YjP7PAV+eqvbfyAR/VU9VOzZCH+kq/rCIsi725alqR382
gC0wSbgtBKA54vyjbOdaWweHBccE+4cE7/KPCQ4Pcw0PC1rqHxyG/voujg3b
hBonWfl6wdu4IF/flTFRQf6hbkExXkE7Ylz9Y/zRb67evr6ouCLIP5B4/1+/
5/xfv9L8//Kj7v/CdFajfwfGPyMetCMiaFPMrGArX98tO3b4RgRFRYeHAe0x
O33j+IujgoKWesWGBkUFb8JHitkaFR6v/BL6oh2bgiIQL/BxQoNCN0XsnBXB
D7Yn/gm2tVkRGxYTHBrk6wIYxQSNHGfUoL7RQTHe/lEx0UtG8d3Xf+5mu0CH
wLm+gdZ8a1+bOVZBvv72czf52vhvtrHZvCnQPpCPC8bXZUlYXPgmvBNe/zrK
PwII8XXxDwnBGxbtiIj6AuMVFO+r+or7oqio8CiYX03MypidIUGrgqJjgMO+
S1cFhUWHR0G3TVvVEO7+YYHQkyBKCYEmwJlFVLfAgDFBUcBHZYOKRTCTmjtq
9kcBj8Ji/ENmhYUD8f7Rs6I3hUcEzQoM2hRCfOk9eHMQ4uOs6BjgEt5/dHtQ
WCDeajVnFn+WFTcw0H+OfcAc/zkOtvZBc+dsCgqwC7SxtufPdbDz3zR3k33g
Jlv+ZttA/x32tr62NjMjNs0MQV+v/3qp+tP2/78+bD8rPmSW57+MY5bn/2Xz
+N+Z8F8GoiRrpDoRfuP/APUt42g=
                    "]]|>, "orcInstance" -> 87467632, "orcModuleId" -> 
                    81093696, "targetMachineId" -> 71542656|>, 
                    139699853055824, 139699853055680, 139699853055760, 
                    139699853049856, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_00bcfbfa_4c77_4a56_ad94_1d1b414b2303", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
U9QoLPw7Y8LALQ==
                    "]]|>, "orcInstance" -> 87087808, "orcModuleId" -> 
                    64125488, "targetMachineId" -> 87001808|>, 
                    139699853042208, 139699853041808, 139699853041888, 
                    139699853041664, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 4}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "547eacbfbea5c025", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 4}, NeuralNetworks`RealT]|>|>, 
                    "SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Error" -> <|"Type" -> "CrossEntropyLoss", 
                    "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 4, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 4]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT], 
                    "Target" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Loss" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Error", "Outputs", "Loss"]}|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Target" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.86785267138628*^9, 3.867890517081892*^9, 
  3.867892360169606*^9, 3.867892431703993*^9, 3.867892671650535*^9, 
  3.8678934753848133`*^9, 3.868011551189589*^9, 3.8680218420623913`*^9, 
  3.8680706759167852`*^9, 3.868072809759371*^9, 3.868072844239791*^9, 
  3.868073127363912*^9, 3.868074955589456*^9, 3.8680750040938377`*^9, 
  3.868075064876955*^9, 3.8680750989954367`*^9, 3.868075490920204*^9, 
  3.868075686984458*^9, 3.868077114431445*^9, 3.868077271897544*^9, 
  3.8680774122341547`*^9, 3.8680774552745*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"35d269a6-4b69-4595-a41e-404d77927ed4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.866180932479144*^9, 3.866180933335601*^9}, {
  3.866260506971014*^9, 3.8662605102109118`*^9}, {3.866262223194878*^9, 
  3.866262223474766*^9}, {3.8666027494425793`*^9, 3.866602750730301*^9}, {
  3.867466626541892*^9, 
  3.8674666272946873`*^9}},ExpressionUUID->"22d0189b-d6a7-44ad-b35a-\
70f7e8d0dd81"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "softNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"testData", ",", 
          RowBox[{"UpTo", "[", "1000", "]"}]}], "]"}], ",", 
        RowBox[{"\"\<Interval\>\"", "->", "10"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "4000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}, {3.866272907421722*^9, 3.866272908705574*^9}, {
   3.866274679974001*^9, 3.866274683777981*^9}, {3.866275126894273*^9, 
   3.866275130882132*^9}, {3.866275621030303*^9, 3.86627562449095*^9}, {
   3.866275800963348*^9, 3.866275804851942*^9}, {3.866278286918571*^9, 
   3.866278290408846*^9}, {3.866279939718389*^9, 3.8662799438283052`*^9}, {
   3.8662825835076027`*^9, 3.866282587086446*^9}, {3.8662848978232517`*^9, 
   3.8662849013340178`*^9}, {3.866301199025255*^9, 3.866301208705173*^9}, {
   3.866302091405136*^9, 3.866302093072084*^9}, {3.8663022330606956`*^9, 
   3.8663022743807373`*^9}, {3.866303190918262*^9, 3.8663031961042967`*^9}, {
   3.8663508996403513`*^9, 3.866350903983953*^9}, {3.8663558607588453`*^9, 
   3.866355860917651*^9}, {3.86637013313169*^9, 3.866370138430928*^9}, {
   3.866370237003203*^9, 3.866370239455555*^9}, {3.8663703291644793`*^9, 
   3.866370333111907*^9}, {3.866370363265703*^9, 3.866370363711856*^9}, {
   3.8663720431119947`*^9, 3.866372048852154*^9}, {3.866372163198892*^9, 
   3.8663721862104397`*^9}, 3.8663723957836103`*^9, {3.866372460806899*^9, 
   3.866372466981298*^9}, {3.8663728465397882`*^9, 3.866372846690668*^9}, {
   3.866439863015705*^9, 3.866439889076521*^9}, {3.866444399919945*^9, 
   3.866444403398275*^9}, 3.866445596437694*^9, 3.866445994629862*^9, {
   3.866446077093233*^9, 3.8664460772227592`*^9}, {3.866514058957122*^9, 
   3.866514061965129*^9}, {3.866514093672724*^9, 3.8665140946276417`*^9}, 
   3.866514530731886*^9, {3.866514784096607*^9, 3.866514784235477*^9}, {
   3.8665148543229303`*^9, 3.86651485485518*^9}, {3.866517197949828*^9, 
   3.866517203967832*^9}, 3.866517357579501*^9, 3.8665174374755917`*^9, 
   3.8665175119230967`*^9, {3.866517590284361*^9, 3.866517620168564*^9}, 
   3.8665176619240017`*^9, {3.8665179325026484`*^9, 3.8665179399815683`*^9}, {
   3.866518111910069*^9, 3.866518112233807*^9}, {3.866518521945266*^9, 
   3.866518522115803*^9}, {3.866518571201038*^9, 3.866518588328702*^9}, {
   3.866518646862028*^9, 3.866518650143523*^9}, 3.866518704027602*^9, {
   3.866519202548511*^9, 3.8665192068871107`*^9}, {3.866552934111923*^9, 
   3.866552991359269*^9}, {3.866553502473754*^9, 3.8665535030716467`*^9}, {
   3.866554417382031*^9, 3.866554420050095*^9}, {3.866554652086327*^9, 
   3.8665546522545357`*^9}, {3.86686620714637*^9, 3.866866208536282*^9}, {
   3.867131586949819*^9, 3.867131591208543*^9}, 3.867131663043725*^9, {
   3.867131881962668*^9, 3.8671318821029243`*^9}, {3.8671435395321627`*^9, 
   3.867143571356976*^9}, {3.867225758112248*^9, 3.867225764016302*^9}, {
   3.867225848543758*^9, 3.8672258697127447`*^9}, {3.8672259658939657`*^9, 
   3.8672259915292263`*^9}, {3.867226086215555*^9, 3.867226089976021*^9}, {
   3.8672261350253763`*^9, 3.867226203033741*^9}, {3.86722632250366*^9, 
   3.867226427456987*^9}, 3.867235234814995*^9, {3.86724310526048*^9, 
   3.867243107700055*^9}, 3.867292442863179*^9, {3.867379673640683*^9, 
   3.867379676973427*^9}, {3.867380356810781*^9, 3.867380356962483*^9}, {
   3.867399722631425*^9, 3.8673997262314672`*^9}, {3.867400074607986*^9, 
   3.867400084799662*^9}, {3.867400479559969*^9, 3.867400481738756*^9}, {
   3.867421063533587*^9, 3.867421064997341*^9}, {3.86759144532999*^9, 
   3.867591460699141*^9}, {3.867591774794105*^9, 3.8675917749695683`*^9}, {
   3.867593041039818*^9, 3.867593056406097*^9}, {3.867593515276932*^9, 
   3.86759352350137*^9}, {3.867593591941313*^9, 3.8675936595732317`*^9}, {
   3.867593831714517*^9, 3.867593831997171*^9}, {3.867595065092896*^9, 
   3.867595065243403*^9}, {3.867835916244355*^9, 3.867835918646139*^9}, 
   3.8678360557124443`*^9, 3.8678367200528717`*^9, {3.867837646912689*^9, 
   3.867837647063219*^9}, {3.867837717652178*^9, 3.8678377654535313`*^9}, {
   3.867837872184032*^9, 3.867837872308552*^9}, {3.8678379432341213`*^9, 
   3.867837967053742*^9}, {3.867838016209628*^9, 3.867838016385528*^9}, {
   3.867850413687476*^9, 3.867850413839301*^9}, {3.867852822453457*^9, 
   3.867852822881569*^9}, {3.868024162601286*^9, 3.868024163649033*^9}, {
   3.8680242837912416`*^9, 3.868024285053027*^9}, {3.86802453267244*^9, 
   3.868024533653101*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"fbdac8c7-4549-4743-864d-e467d909f319"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedSoftNet", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
    "\"\<NeuralLogicNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866262883598037*^9, 3.866262913813736*^9}, {
  3.866865528144919*^9, 3.866865528678174*^9}, {3.8675914730807447`*^9, 
  3.8675914876778097`*^9}, {3.867594997374662*^9, 3.8675949984056892`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"c3a89cf2-7844-4806-bca2-4513232e25d6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]26\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "AND" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{6656}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {6656}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{6656}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {6656}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|"Distribution" -> 
                    NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {6656}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6656}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Mu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sigma", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Distribution", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Outputs", "Output"]}|>, 
                    "Reshape" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> NeuralNetworks`ValidatedParameter[{104, 
                    64}]|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{6656}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "Weights" -> NeuralNetworks`TensorT[{104, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Min" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{104, 64}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], 
                    "$Dimensions" -> {104}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>|>,
                     "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Min", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Min", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "NOT" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "Graph", "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Mu" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{104}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {104}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>, 
                    "Sigma" -> <|"Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{104}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {104}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>, 
                    "Distribution" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|"Distribution" -> 
                    NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]|>|>, 
                    "Variates" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|"Mu" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT], 
                    "Random" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>|>,
                     "Inputs" -> <|"Mu" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT], 
                    "Sigma" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT], "Random" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>, 
                    "ClipVariates" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {104}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>|>,
                     "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Mu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Sigma", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Distribution", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Variates", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ClipVariates", "Outputs", "Output"]}|>, 
                    "Not" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT], 
                    "Weights" -> NeuralNetworks`TensorT[{104}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], 
                    "$Dimensions" -> {104}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]|>|>|>,
                     "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "AND", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NOT", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT", "Outputs", "Output"]}|>, 
                    "2" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 26}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{104}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 26}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 26}, NeuralNetworks`RealT]|>|>,
                    NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 104\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReshapeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]26\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]26\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8662628854701767`*^9, 3.86626291478244*^9}, 
   3.866263333811677*^9, 3.866263626951891*^9, 3.866275759059902*^9, 
   3.866278860640707*^9, 3.866279610307885*^9, 3.866283089053381*^9, 
   3.8662840988640747`*^9, 3.866301846366849*^9, 3.8663540211677637`*^9, 
   3.8663541757248697`*^9, 3.866354285702705*^9, 3.866354708948234*^9, 
   3.86635480352043*^9, 3.866354946410275*^9, 3.866355129778678*^9, 
   3.866355344404036*^9, 3.8663554109601917`*^9, 3.866355601157222*^9, 
   3.86635584447652*^9, 3.866357046548826*^9, 3.86635827058148*^9, 
   3.8663603567232637`*^9, 3.8663629451402597`*^9, 3.866363945271487*^9, 
   3.866365130852272*^9, 3.866366035676786*^9, 3.866368355050816*^9, 
   3.8663699230437717`*^9, 3.866371572266882*^9, 3.866438770864565*^9, 
   3.86643896077918*^9, 3.8664391415025454`*^9, 3.866439242730338*^9, 
   3.86643934064322*^9, 3.866439448330102*^9, 3.866440229932144*^9, 
   3.8664404742813272`*^9, 3.8664405592015047`*^9, 3.8664414085277576`*^9, 
   3.8664414792281923`*^9, 3.866441619893333*^9, 3.866441689406056*^9, 
   3.8664417857252293`*^9, 3.866441899861754*^9, 3.866442041711031*^9, 
   3.8664421438082438`*^9, 3.86644220577691*^9, 3.866442923332512*^9, 
   3.866443105210555*^9, 3.866443215017268*^9, 3.866443324261043*^9, 
   3.866443392091382*^9, 3.866443463860209*^9, 3.866443916112817*^9, 
   3.866443978954742*^9, 3.8664440999870872`*^9, 3.866444384668812*^9, 
   3.8664455526363*^9, 3.8664459767216597`*^9, 3.8664460963830557`*^9, 
   3.866446198128482*^9, 3.866446371505559*^9, 3.8664466173131857`*^9, 
   3.866446726857621*^9, 3.866446949046866*^9, 3.866447055125682*^9, 
   3.8665132494825897`*^9, 3.866513528458088*^9, 3.866513862467455*^9, 
   3.866514588270062*^9, 3.8665196537633457`*^9, 3.866521033301351*^9, 
   3.866524695734989*^9, 3.8665277373817797`*^9, 3.866528003896955*^9, 
   3.866529999675105*^9, 3.866532541000852*^9, 3.8665328100689297`*^9, 
   3.866542863935906*^9, 3.86654363350113*^9, 3.866545845362557*^9, 
   3.866546635196596*^9, 3.866547880940085*^9, 3.866549439453635*^9, 
   3.8665500175016737`*^9, 3.8665510002342978`*^9, 3.866553594781185*^9, 
   3.8665537613351927`*^9, 3.866554194193324*^9, 3.8665543759376163`*^9, 
   3.8665557900087967`*^9, 3.866600803446225*^9, 3.86660110824417*^9, 
   3.8666014083894787`*^9, 3.8666032722125683`*^9, 3.866603646506237*^9, 
   3.866603924967039*^9, 3.866614149217051*^9, 3.866614517604972*^9, 
   3.8666150772760963`*^9, 3.866615910520022*^9, 3.866617005433221*^9, 
   3.866620518171906*^9, 3.86662136387157*^9, 3.866621931729815*^9, 
   3.86662265578474*^9, 3.866623643819304*^9, 3.866623929846479*^9, 
   3.8666243138661947`*^9, 3.866625027852901*^9, 3.866625329973116*^9, 
   3.8666263955294523`*^9, 3.866626636440639*^9, 3.8666301937443323`*^9, 
   3.866635284071369*^9, 3.8666379464893007`*^9, 3.866865267141653*^9, 
   3.8668659776585407`*^9, 3.8668665360607643`*^9, 3.8668674552454987`*^9, 
   3.866874124396035*^9, 3.86687497460295*^9, 3.8668969132601852`*^9, 
   3.866898071418168*^9, 3.866898609243305*^9, 3.866899135802105*^9, 
   3.866900146525358*^9, 3.866900346483822*^9, 3.86690075029182*^9, 
   3.866942200550881*^9, 3.8669434691033688`*^9, 3.8669440568455133`*^9, 
   3.866944409151135*^9, 3.866946623331648*^9, 3.866950472530398*^9, 
   3.8669509935934668`*^9, 3.866951548335429*^9, 3.866952511511688*^9, 
   3.866953356553648*^9, 3.8669542721524076`*^9, 3.866955408462162*^9, 
   3.866955759821617*^9, 3.866956215314837*^9, 3.866956489039291*^9, 
   3.866957050192541*^9, 3.8669574385039263`*^9, 3.8669581345274153`*^9, 
   3.866958404615336*^9, 3.866958748148402*^9, 3.8669592708283167`*^9, 
   3.866960524376287*^9, 3.866960648062818*^9, 3.866964482955254*^9, 
   3.866965870107953*^9, 3.8669665698327627`*^9, 3.866966912796961*^9, 
   3.866967234979121*^9, 3.8669675446415567`*^9, 3.8669681544987707`*^9, 
   3.8669687474689293`*^9, 3.866969471312014*^9, 3.866975997689666*^9, 
   3.86697784559586*^9, 3.866988474220516*^9, 3.867070541267486*^9, 
   3.867071141063098*^9, 3.867071512821946*^9, 3.867072495499333*^9, 
   3.867072807623479*^9, 3.867073708828951*^9, 3.867074044368046*^9, 
   3.8670743576774607`*^9, 3.867074511128997*^9, 3.867074885972481*^9, 
   3.867075384159924*^9, 3.867075666872263*^9, 3.8670759595572643`*^9, 
   3.867130703473978*^9, 3.8671325789590693`*^9, 3.867142055908609*^9, 
   3.867142222402884*^9, 3.86714258728478*^9, 3.8671430669219217`*^9, 
   3.8671432468665457`*^9, 3.867144668168933*^9, 3.867145744115079*^9, 
   3.86714627085634*^9, 3.8671501033240128`*^9, 3.86715087699004*^9, 
   3.867152069829074*^9, 3.867152733883814*^9, 3.86715325574749*^9, 
   3.867159760259474*^9, 3.867161045989644*^9, 3.867161593031602*^9, 
   3.867162093302425*^9, 3.867162545278716*^9, 3.867162929672419*^9, 
   3.8671631215691357`*^9, 3.8671635752851887`*^9, 3.867163736166375*^9, 
   3.867164020783208*^9, 3.8671642536302013`*^9, 3.867164730673498*^9, 
   3.86720897018189*^9, 3.867209543944471*^9, 3.867210754863386*^9, 
   3.867213186296348*^9, 3.867213987741856*^9, 3.867214842121695*^9, 
   3.867215183394917*^9, 3.867216239673912*^9, 3.867216550433502*^9, 
   3.86721673027888*^9, 3.867217090260976*^9, 3.867217943020084*^9, 
   3.867219362485512*^9, 3.86721988612037*^9, 3.867220752092207*^9, 
   3.867224123145873*^9, 3.8672245028341417`*^9, 3.867224893030838*^9, 
   3.867225253221676*^9, 3.867226899220113*^9, 3.867227193709606*^9, 
   3.867227850496901*^9, 3.8672282892724247`*^9, 3.867235574360211*^9, 
   3.867235802347309*^9, 3.86723620735044*^9, 3.867236645705991*^9, 
   3.867237664538694*^9, 3.8672382521528063`*^9, 3.867238903085815*^9, 
   3.867239250507195*^9, 3.8672396236514893`*^9, 3.867239883283255*^9, 
   3.8672402566845303`*^9, 3.8672416694881287`*^9, 3.867241919213375*^9, 
   3.8672433504474154`*^9, 3.867243745229207*^9, 3.867244112883206*^9, 
   3.8672444029692574`*^9, 3.867244627217216*^9, 3.867292663020062*^9, 
   3.867293070341237*^9, 3.867293578277958*^9, 3.867293942874217*^9, 
   3.867294254384894*^9, 3.867294581837659*^9, 3.8672951611778097`*^9, 
   3.867295683005228*^9, 3.867304246515335*^9, 3.867304762852366*^9, 
   3.867305406975029*^9, 3.867305771133658*^9, 3.8673062724983683`*^9, 
   3.867306606408617*^9, 3.867307169408957*^9, 3.867307380094698*^9, 
   3.8673104061289043`*^9, 3.867311088972395*^9, 3.867311638861496*^9, 
   3.8673118554485693`*^9, 3.867312160097467*^9, 3.8673135117500153`*^9, 
   3.867314146997654*^9, 3.867314434514402*^9, 3.8673181359732227`*^9, 
   3.867318455978945*^9, 3.867318746946628*^9, 3.867319245380412*^9, 
   3.867319558308886*^9, 3.867321199984851*^9, 3.867321463552224*^9, 
   3.8673233735844727`*^9, 3.867323787084449*^9, 3.8673241725604258`*^9, 
   3.867329659517404*^9, 3.867329976854364*^9, 3.8673307791571836`*^9, 
   3.8673310481814213`*^9, 3.8673312110003557`*^9, 3.867331396102231*^9, 
   3.867331840615056*^9, 3.8673327651571198`*^9, 3.867333807483214*^9, 
   3.867334267485148*^9, 3.867379551509262*^9, 3.867379706118277*^9, 
   3.867380208989422*^9, 3.867380441625167*^9, 3.8673807366328*^9, 
   3.867381302682927*^9, 3.867381745571897*^9, 3.86738205042131*^9, 
   3.867382491688291*^9, 3.8673830913584557`*^9, 3.8673834757586*^9, 
   3.8673843358910027`*^9, 3.8673847159639587`*^9, 3.867385052790865*^9, 
   3.8673861417047033`*^9, 3.8673864721323223`*^9, 3.867387027954995*^9, 
   3.867387452676517*^9, 3.867387822766666*^9, 3.8673880857180634`*^9, 
   3.867388433783766*^9, 3.8673999983117247`*^9, 3.867400309497061*^9, 
   3.867400765912784*^9, 3.8674042712454023`*^9, 3.867405171660681*^9, 
   3.8674055927740173`*^9, 3.86740679373538*^9, 3.867407616891014*^9, 
   3.867408261660056*^9, 3.867409571049901*^9, 3.867410389073472*^9, 
   3.8674107990115547`*^9, 3.867411931104046*^9, 3.867418477304476*^9, 
   3.8674190261068087`*^9, 3.8674195901094227`*^9, 3.8674207603084717`*^9, 
   3.86742184116043*^9, 3.867464383052712*^9, 3.867465332275449*^9, 
   3.8674692876969976`*^9, 3.867470425821095*^9, 3.867471394303174*^9, 
   3.8674800170308723`*^9, 3.8674821001653957`*^9, 3.867483077270279*^9, 
   3.86748399390837*^9, 3.86748571092913*^9, 3.867485930024376*^9, 
   3.867486406530424*^9, 3.86756560623253*^9, 3.867565882218875*^9, 
   3.867566129295733*^9, 3.867566486408596*^9, 3.867568883178177*^9, 
   3.867569364404112*^9, 3.867576249193199*^9, 3.867577034087057*^9, 
   3.86758006294209*^9, 3.867580361914866*^9, 3.8675813554675922`*^9, 
   3.867591413262083*^9, 3.8675916969228163`*^9, 3.8675921416186953`*^9, 
   3.867592476569607*^9, 3.867593307680511*^9, 3.867594998911373*^9, 
   3.8676382636106043`*^9, 3.8676506346064453`*^9, 3.8676528842179947`*^9, 
   3.867654807175769*^9, 3.867656382543395*^9, 3.8676598275474453`*^9, 
   3.867660583738608*^9, 3.867820776062737*^9, 3.8678213353311234`*^9, 
   3.867823748394882*^9, 3.867831234747699*^9, 3.8678374859678907`*^9, 
   3.8678469174561987`*^9, 3.8678523440620747`*^9, 3.8678968029434433`*^9, 
   3.868017387774095*^9, 3.8680185491695557`*^9, 3.868019210953308*^9, 
   3.8680200516834803`*^9, 3.868020935116467*^9, 3.868023637788042*^9, 
   3.868074855503366*^9, 3.8680762472602863`*^9, 3.868076989600198*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"0c39481b-dd97-46d2-a7e4-f2329516f456"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Subsection",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 3.8647943165808363`*^9}, {
  3.865509544459216*^9, 3.865509545362651*^9}, {3.8668654702612267`*^9, 
  3.866865471244494*^9}},ExpressionUUID->"e2a69d6c-fddf-4ce0-9a60-\
6b136e91fb12"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{
    RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
    RowBox[{"ConvertDataToClasses", "[", "testData", "]"}]}], "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8675912624933243`*^9, 3.8675912645650873`*^9}, {
  3.867591419757333*^9, 3.86759142034127*^9}, {3.867591718010557*^9, 
  3.867591738878278*^9}, {3.8675933493486156`*^9, 3.867593351860548*^9}, {
  3.867595003334629*^9, 3.867595005556345*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"61cf3e56-b150-406f-a005-b09cf3a4f4b6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"softPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"trainedSoftNet", "[", 
         RowBox[{"First", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", "testData"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hardenedPredictionTargetPairs", "=", 
   RowBox[{"Harden", "[", "softPredictionTargetPairs", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "[", 
  RowBox[{"HardResults", "[", "hardenedPredictionTargetPairs", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}, {
   3.8650544818297043`*^9, 3.865054482561998*^9}, {3.8650591999549913`*^9, 
   3.865059216538383*^9}, {3.865060098170718*^9, 3.865060117548669*^9}, {
   3.865083374025154*^9, 3.865083380805747*^9}, {3.8650835363762093`*^9, 
   3.865083538071233*^9}, {3.865590907688581*^9, 3.865590907991177*^9}, {
   3.865610944975788*^9, 3.865610947181724*^9}, {3.865655407744947*^9, 
   3.865655408023315*^9}, {3.86626050147324*^9, 3.8662605016737347`*^9}, {
   3.86626089567375*^9, 3.86626089681426*^9}, 3.866260938745146*^9, {
   3.866262482360608*^9, 3.866262529517881*^9}, {3.866262922944813*^9, 
   3.866262923422676*^9}, {3.866368441574706*^9, 3.8663684417477407`*^9}, {
   3.8665196844820623`*^9, 3.8665196894081583`*^9}, {3.86651977579454*^9, 
   3.8665198307447023`*^9}, {3.866543759104864*^9, 3.866543761043337*^9}, {
   3.866543933814775*^9, 3.866543946874074*^9}, {3.866544213286334*^9, 
   3.8665442159066887`*^9}, {3.866544345821237*^9, 3.866544359573098*^9}, {
   3.866544406102911*^9, 3.866544410862302*^9}, {3.8665444631671553`*^9, 
   3.866544554177885*^9}, {3.8665453759492197`*^9, 3.866545380545129*^9}, {
   3.866637950431554*^9, 3.866637951085165*^9}, {3.866865285097145*^9, 
   3.866865285469962*^9}, {3.8668653748813343`*^9, 3.8668653802748404`*^9}, {
   3.866865532978038*^9, 3.866865534495945*^9}, {3.866866544565024*^9, 
   3.866866545127615*^9}, 3.867162578537319*^9, {3.867219455610979*^9, 
   3.867219455860599*^9}, {3.8675912676571007`*^9, 3.86759126780343*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"a637f3cb-d7f7-4492-ad2f-108fbd4b3b99"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy = 91.5417%\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", "4988"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "4"}], "}"}], "\[Rule]", "4518"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "4407"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", "4215"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "3"}], "}"}], "\[Rule]", "405"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "2"}], "}"}], "\[Rule]", "305"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", "204"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", "148"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", "145"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2"}], "}"}], "\[Rule]", "131"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}], "\[Rule]", "119"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "78"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "75"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], "\[Rule]", "50"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", "13"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "2"}]}], 
      "\[RightAssociation]"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->CompressedData["
1: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
8iT8Dwi7mso=
  "],
 CellLabel->
  "Out[105]=",ExpressionUUID->"eefc77a0-209f-4c96-8b7e-a341ec93f3ca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "/@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"RandomSample", "[", 
       RowBox[{"hardenedPredictionTargetPairs", ",", "5"}], "]"}], ",", "1"}],
      "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{"True", "->", 
     RowBox[{"Style", "[", 
      RowBox[{"True", ",", "Red"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.867383550245969*^9, 3.867383551294194*^9}, 
   3.867896997431472*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"fd20a90c-0e3a-42a1-ac7f-bc712b1b2778"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"First", "/@", "softPredictionTargetPairs"}], "]"}], ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.867214498029375*^9, 3.867214530414569*^9}, {
  3.867382601200721*^9, 3.867382603134129*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"0bd26ae7-e31b-4a68-b76a-1002446f1f03"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5599999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5599999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 587823.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{42.82244389261408, 
           58.82093643664931}, {-98.21028135288654, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 587823]& ,
        TagBoxNote->"587823"],
       StyleBox["587823", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[587823, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 5714.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{58.32093643664931, 74.31942898068453}, {
           85.57099726847981, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5714]& ,
        TagBoxNote->"5714"],
       StyleBox["5714", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5714, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 1934.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{73.81942898068453, 89.81792152471976}, {
           86.76440474575428, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1934]& ,
        TagBoxNote->"1934"],
       StyleBox["1934", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1934, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 1561.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{89.31792152471976, 105.316414068755}, {
           86.88216691216257, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1561]& ,
        TagBoxNote->"1561"],
       StyleBox["1561", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1561, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 1198.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{104.816414068755, 120.81490661279022`}, {
           86.99677191593258, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1198]& ,
        TagBoxNote->"1198"],
       StyleBox["1198", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1198, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 880.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{120.31490661279022`, 136.31339915682545`}, {
           87.09716968783029, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 880]& ,
        TagBoxNote->"880"],
       StyleBox["880", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[880, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 791.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{135.81339915682545`, 151.81189170086068`}, {
           87.12526843531109, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 791]& ,
        TagBoxNote->"791"],
       StyleBox["791", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[791, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 1963.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{151.31189170086068`, 167.3103842448959}, {
           86.75524897410322, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1963]& ,
        TagBoxNote->"1963"],
       StyleBox["1963", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1963, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.4, 0}, {0.45, 10434.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{166.8103842448959, 182.80887678893114`}, {
           84.08081650320587, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 10434]& ,
        TagBoxNote->"10434"],
       StyleBox["10434", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[10434, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.45, 0}, {0.5, 106786.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{182.30887678893114`, 198.30736933296637`}, {
           53.66092305073238, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 106786]& ,
        TagBoxNote->"106786"],
       StyleBox["106786", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[106786, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {0.55, 103931.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{197.80736933296637`, 213.8058618770016}, {
           54.56229298396482, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 103931]& ,
        TagBoxNote->"103931"],
       StyleBox["103931", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[103931, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 9302.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{213.3058618770016, 229.30435442103683`}, {
           84.43820731386054, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 9302]& ,
        TagBoxNote->"9302"],
       StyleBox["9302", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[9302, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.6, 0}, {0.65, 3286.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{228.80435442103683`, 244.80284696507206`}, {
           86.33755635705717, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3286]& ,
        TagBoxNote->"3286"],
       StyleBox["3286", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3286, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.65, 0}, {0.7, 3347.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{244.30284696507206`, 260.3013395091073}, {
           86.31829766496358, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3347]& ,
        TagBoxNote->"3347"],
       StyleBox["3347", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3347, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.7, 0}, {0.75, 2010.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{259.8013395091073, 275.79983205314255`}, {
           86.74041030970326, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2010]& ,
        TagBoxNote->"2010"],
       StyleBox["2010", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2010, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.75, 0}, {0.8, 503.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{275.29983205314255`, 291.2983245971778}, {
           87.2161947192939, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 503]& ,
        TagBoxNote->"503"],
       StyleBox["503", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[503, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.8, 0}, {0.85, 674.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{290.7983245971778, 306.796817141213}, {
           87.1622072381791, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 674]& ,
        TagBoxNote->"674"],
       StyleBox["674", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[674, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.85, 0}, {0.9, 1173.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{306.296817141213, 322.29530968524824`}, {
           87.00466482252831, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1173]& ,
        TagBoxNote->"1173"],
       StyleBox["1173", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1173, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.9, 0}, {0.95, 7866.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{321.79530968524824`, 337.7938022292835}, {
           84.89157586871931, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7866]& ,
        TagBoxNote->"7866"],
       StyleBox["7866", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7866, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.95, 0}, {1., 416216.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{337.2938022292835, 
           353.2922947733187}, {-44.03116046594474, 87.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 416216]& ,
        TagBoxNote->"416216"],
       StyleBox["416216", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[416216, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.02, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 1.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8672145012856503`*^9, 3.86721453103242*^9}, 
   3.867214886673502*^9, 3.8672152540007877`*^9, 3.867216351594112*^9, 
   3.8672165884984837`*^9, 3.867216774551539*^9, 3.867217133104129*^9, 
   3.867217991284543*^9, 3.867219410741493*^9, 3.867219941199617*^9, 
   3.867220804408003*^9, 3.867224167423118*^9, 3.867224953652439*^9, 
   3.867225310024466*^9, 3.8672269464513607`*^9, 3.8672279101112137`*^9, 
   3.867235616907338*^9, 3.86723626603331*^9, 3.867236701548422*^9, 
   3.867237717473666*^9, 3.867238308657311*^9, 3.867239307370199*^9, 
   3.867239677388426*^9, 3.8672399522345467`*^9, 3.8672403054119577`*^9, 
   3.867241727039076*^9, 3.86724339296774*^9, 3.867243812575938*^9, 
   3.867244167981337*^9, 3.867244457449991*^9, 3.86729274240382*^9, 
   3.867293628350546*^9, 3.867293994011964*^9, 3.867294651545733*^9, 
   3.867295760022895*^9, 3.867304327902404*^9, 3.867305469868129*^9, 
   3.8673063345418577`*^9, 3.867307248568591*^9, 3.8673119534948187`*^9, 
   3.8673135773524446`*^9, 3.867318191097289*^9, 3.867323471170349*^9, 
   3.867329702532007*^9, 3.8673300425460663`*^9, {3.8673825758518867`*^9, 
   3.867382603921441*^9}, 3.867383554208437*^9, 3.867386533410076*^9, 
   3.867408323390875*^9, 3.867419651396039*^9, 3.867469394209402*^9, 
   3.86757711535248*^9, 3.867580419259817*^9, 3.86789700993076*^9, 
   3.868019254985968*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"dfc92463-d5d4-4eeb-b7bd-fbbb9e7a3f7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866953397932728*^9, 3.866953404315634*^9}, {
  3.866953505684793*^9, 3.866953515956293*^9}, {3.867305490607383*^9, 
  3.867305500732195*^9}, {3.867382609248455*^9, 3.867382611150051*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"4836d32b-7df4-4c05-858e-1e553b9f2099"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.7], Thickness[Small]}]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.02, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.866953405398438*^9, {3.8669535086600723`*^9, 3.8669535168089046`*^9}, 
   3.866954313826535*^9, 3.866955457083973*^9, 3.8669557990421457`*^9, 
   3.866956255330904*^9, 3.8669565304074993`*^9, 3.8669570894272423`*^9, 
   3.8669574773997*^9, 3.866958175242688*^9, 3.866958443749235*^9, 
   3.866959311543325*^9, 3.8669645251454897`*^9, 3.8669666181421423`*^9, 
   3.866967585518009*^9, 3.866968194173625*^9, 3.8669687903644257`*^9, 
   3.8669695121091843`*^9, 3.8669778912310266`*^9, 3.8669885587554703`*^9, 
   3.867071193495838*^9, 3.867072542819018*^9, 3.8670737514774847`*^9, 
   3.867074113470283*^9, 3.8670749610975227`*^9, 3.867143628016296*^9, 
   3.867145791625614*^9, 3.867152781387341*^9, 3.8671625871255836`*^9, 
   3.8671637686717653`*^9, 3.867164072222712*^9, 3.8672056243581*^9, 
   3.867209073037076*^9, 3.867209586902226*^9, 3.867214140415625*^9, 
   3.867214888956481*^9, 3.867215256093277*^9, 3.8672163552337627`*^9, 
   3.867216591914497*^9, 3.867216777130972*^9, 3.867217137334942*^9, 
   3.867217996261094*^9, 3.867219420254675*^9, 3.867219946982617*^9, 
   3.8672208086987123`*^9, 3.867224171790861*^9, 3.8672249784404716`*^9, 
   3.867225313424816*^9, 3.8672269503439093`*^9, 3.86722791201066*^9, 
   3.867235619647745*^9, 3.86723626903706*^9, 3.8672367036959677`*^9, 
   3.867237721080928*^9, 3.867238314503063*^9, 3.8672393107718887`*^9, 
   3.8672396811779137`*^9, 3.867239956582532*^9, 3.867240311914506*^9, 
   3.867241732923114*^9, 3.867244174200135*^9, 3.867244467379243*^9, 
   3.867292748791696*^9, 3.86729364497375*^9, 3.8672939960119658`*^9, 
   3.867294655644163*^9, 3.8672957645747232`*^9, 3.867304330659622*^9, {
   3.8673054790161047`*^9, 3.86730550247573*^9}, 3.86730634147044*^9, 
   3.867307252855768*^9, 3.867311956834914*^9, 3.86731358127571*^9, 
   3.867318195891453*^9, 3.867323472972732*^9, 3.867329704811387*^9, 
   3.867330044539565*^9, 3.867382579023087*^9, 3.867382611694048*^9, 
   3.867383555462047*^9, 3.867386535028846*^9, 3.8674083251931877`*^9, 
   3.867419653691588*^9, 3.867469398241379*^9, 3.8675771496278753`*^9, 
   3.867580423407976*^9, 3.867897017548945*^9, 3.868019259711413*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"f5f332f4-9cd4-4e2f-b7d0-1a77a5c3f1c2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 3.865059378776081*^9}, {
  3.866602769035088*^9, 3.866602771891135*^9}, {3.866865474676983*^9, 
  3.866865476493029*^9}},ExpressionUUID->"76d42d52-0573-4522-b5b7-\
498e3dde144e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedSoftNet"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hardPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hnf", "[", 
         RowBox[{"Harden", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", "testData"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "[", 
  RowBox[{"HardResults", "[", "hardenedPredictionTargetPairs", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.86680194442417*^9, 3.866801959585536*^9}, 
   3.8668020564125566`*^9, 3.8668021880135727`*^9, 3.86680224094079*^9, {
   3.866862414056994*^9, 3.866862435758893*^9}, 3.8668631732132587`*^9, 
   3.866863454099498*^9, {3.866863887767027*^9, 3.866863891596203*^9}, {
   3.866866085045*^9, 3.866866085408708*^9}, {3.866866613610317*^9, 
   3.8668666139621067`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"4ca549a6-f4a8-48b8-bd04-5ba2c91f7834"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Accuracy = 93.9858%\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", "5167"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "4643"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "4"}], "}"}], "\[Rule]", "4410"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", "4392"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", "213"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}], "\[Rule]", "199"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "3"}], "}"}], "\[Rule]", "174"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "133"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "2"}], "}"}], "\[Rule]", "105"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", "100"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], "\[Rule]", "75"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "2"}], "}"}], "\[Rule]", "69"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4", ",", "1"}], "}"}], "\[Rule]", "50"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", "42"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", "21"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "10"}]}], 
      "\[RightAssociation]"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.866866039305666*^9, 3.866866854019951*^9, 3.866867736201356*^9, {
   3.866874285844576*^9, 3.866874300418912*^9}, 3.866897703750345*^9, 
   3.866950731292025*^9, 3.867898602706312*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"4405708b-19ed-433a-9ebd-dda6bfa68b1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SpaceSaving", "[", "trainedSoftNet", "]"}]], "Input",
 CellChangeTimes->{{3.8668642342489862`*^9, 3.8668642483212557`*^9}, {
  3.866864301980486*^9, 3.866864302505608*^9}, {3.866864406655108*^9, 
  3.86686453684363*^9}, {3.866864775311109*^9, 3.866864778850369*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"d5dbb3ee-e45f-4e95-8066-408558b38cda"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Soft net size = 0.008 kilobytes\"\>"},
    {"\<\"Hard net size = 0.00025 kilobytes\"\>"},
    {"\<\"Saving factor = 32.\"\>"}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.866864249947411*^9, 3.8668643028534403`*^9, 3.866864414235868*^9, 
   3.866864445660204*^9, {3.866864494244638*^9, 3.866864537301672*^9}, 
   3.866864595971245*^9, 3.866864779447701*^9, 3.86686686475023*^9, 
   3.8668677412127867`*^9, 3.866897713231059*^9, 3.867898621531806*^9, 
   3.8680192787284403`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"ba3c09e3-47fc-4a86-916b-9917ca357cf4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Approximate neural logic", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.865071137544158*^9, 3.865071139735918*^9}, {3.866866918133319*^9, 
  3.8668669229746017`*^9}},ExpressionUUID->"3dfd48ae-245d-41a3-9ee6-\
9f48a3126503"],

Cell[CellGroupData[{

Cell["Null", "Subsection",ExpressionUUID->"dbaf4b13-bbf1-46b2-a867-cbe6ab3057db"],

Cell["Null", "Input",ExpressionUUID->"282b1129-9bb6-4375-827d-fe1a21de5e52"],

Cell["Null", "Input",ExpressionUUID->"4dd2a1a1-93c1-4c86-8a53-3799d9a2326a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Null", "Subsection",ExpressionUUID->"79776b36-72e3-45be-ba51-f07dffccf849"],

Cell["Null", "Input",ExpressionUUID->"85ad096e-ed5c-44c2-8c3a-979fde4a03c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Null", "Subsection",ExpressionUUID->"be01f422-1c1f-4ec9-a959-bf38e8105582"],

Cell[CellGroupData[{

Cell["Null", "Input",ExpressionUUID->"1fe03ab7-3007-4e7c-b36b-88dfd49533c2"],

Cell["Null", "Output",ExpressionUUID->"fb9922be-4d44-44fa-a740-90fd86c255a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Null", "Input",ExpressionUUID->"cc7fdd2c-831f-4bbf-9c2a-d697ed7670ea"],

Cell["Null", "Output",ExpressionUUID->"deeafa17-d205-41b4-9334-177d0b32d635"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.865418895304618*^9, 
  3.865418895944718*^9}},ExpressionUUID->"c33fd357-ab86-4dac-a5dc-\
fb8a483872d5"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{"ParentDirectory", "[", 
      RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8680109147923737`*^9, 3.868010915386524*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"de7ef9f2-bf67-4869-9b14-c25b89d18d50"],

Cell[CellGroupData[{

Cell["Counting", "Section",
 CellChangeTimes->{{3.867832936078092*^9, 
  3.867832936917717*^9}},ExpressionUUID->"49d7fd52-7d0e-4eba-9a43-\
3a6532a9b58f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Experimental", " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"net", "=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"32", "*", "numClasses"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Layer1\>\"", "->", 
          RowBox[{
           RowBox[{"HardNeuralNAND", "[", 
            RowBox[{"inputSize", ",", "600"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Layer2\>\"", "->", 
          RowBox[{
           RowBox[{"HardNeuralNAND", "[", 
            RowBox[{"600", ",", "classificationLayerSize"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<ToMatrix\>\"", "->", 
          RowBox[{"ReshapeLayer", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "classificationLayerSize"}], "}"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Require\>\"", "->", 
          RowBox[{
           RowBox[{"Require", "[", 
            RowBox[{
             RowBox[{"HardNeuralLTEK", "[", 
              RowBox[{"1", ",", "classificationLayerSize", ",", "32"}], "]"}],
              "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<ToVector\>\"", "->", 
          RowBox[{"ReshapeLayer", "[", 
           RowBox[{"{", "classificationLayerSize", "}"}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<ClassPredictions\>\"", "->", 
          RowBox[{
           RowBox[{"HardNeuralPortLayer", "[", 
            RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}], 
           "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
        "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Layer1\>\"", "->", "\"\<Layer2\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Layer2\>\"", "->", "\"\<ToMatrix\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<ToMatrix\>\"", "->", "\"\<Require\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Require\>\"", "->", "\"\<ToVector\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<ToVector\>\"", "->", "\"\<ClassPredictions\>\""}]}], 
        "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.867668231870791*^9, 3.867668235477289*^9}, {
   3.867668376339018*^9, 3.867668395784988*^9}, {3.867669799325087*^9, 
   3.867669809905347*^9}, {3.8676698456204653`*^9, 3.867669869738494*^9}, {
   3.8676699106411133`*^9, 3.8676699115453577`*^9}, {3.867669948359013*^9, 
   3.867670038801297*^9}, {3.86767030213902*^9, 3.867670318841384*^9}, {
   3.867670454382246*^9, 3.867670454482563*^9}, {3.86773420314202*^9, 
   3.867734379574403*^9}, {3.8677344216150846`*^9, 3.867734490143653*^9}, {
   3.867734621874201*^9, 3.867734623184408*^9}, {3.867734693122128*^9, 
   3.867734695505403*^9}, {3.867734747689705*^9, 3.867734756655624*^9}, {
   3.867734790199747*^9, 3.867734987499298*^9}, {3.8677350208744164`*^9, 
   3.867735125633463*^9}, {3.8677351638336763`*^9, 3.867735204009555*^9}, {
   3.867735317610345*^9, 3.8677353254980707`*^9}, {3.867735393290935*^9, 
   3.867735395305931*^9}, {3.8677354322513533`*^9, 3.867735440153603*^9}, {
   3.8677354886910477`*^9, 3.8677354936178827`*^9}, {3.867735591979089*^9, 
   3.867735601154071*^9}, {3.8677356862821093`*^9, 3.8677356918016987`*^9}, {
   3.8677357634512177`*^9, 3.867735791576468*^9}, {3.867735822699938*^9, 
   3.8677358465307007`*^9}, {3.867736920421318*^9, 3.8677369326207657`*^9}, {
   3.867736973742214*^9, 3.867737045436118*^9}, {3.8677371125088177`*^9, 
   3.867737122764319*^9}, {3.867737176710585*^9, 3.867737247838262*^9}, {
   3.8677378255448503`*^9, 3.867737827355835*^9}, {3.867737907966132*^9, 
   3.867737927804604*^9}, {3.867738001497107*^9, 3.867738007068056*^9}, {
   3.867738831068059*^9, 3.8677388441007833`*^9}, {3.867751900566104*^9, 
   3.867751950846384*^9}, {3.867752035360849*^9, 3.8677520509677753`*^9}, 
   3.8677521643541937`*^9, {3.867752700279015*^9, 3.86775272021528*^9}, {
   3.867752776206182*^9, 3.867752776508008*^9}, {3.867753149109016*^9, 
   3.867753149371195*^9}, {3.8677539432696457`*^9, 3.86775395329886*^9}, {
   3.867754162947703*^9, 3.867754173784737*^9}, {3.867812347833035*^9, 
   3.8678123928175793`*^9}, {3.8678124502232027`*^9, 3.867812460277479*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"373847f0-5ceb-4aea-9bd8-2b9bd00ed101"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b749efe-4de6-4ef5-81a5-e56ac96807ba"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 3, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[738, 27, 381, 9, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1144, 40, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1349, 45, 21787, 497, 203, "Output",ExpressionUUID->"5806ad0f-fee1-4ca0-859a-130401d52e30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23173, 547, 207, 4, 69, "Chapter",ExpressionUUID->"c980f6be-656d-464c-97de-7bbd91e03ade"],
Cell[23383, 553, 2717, 72, 217, "Input",ExpressionUUID->"a640c9f1-9738-4c46-b19d-979750434b3f"],
Cell[CellGroupData[{
Cell[26125, 629, 537, 13, 29, "Input",ExpressionUUID->"f98077b4-8d7e-401d-8481-6508057768cf"],
Cell[26665, 644, 193, 3, 33, "Output",ExpressionUUID->"e4ae1fb4-c0bc-4bf3-89db-46ae92637e0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26895, 652, 493, 12, 29, "Input",ExpressionUUID->"d9b20918-29d1-46bd-b70f-acfd27b2c0a3"],
Cell[27391, 666, 221, 4, 33, "Output",ExpressionUUID->"37311f9f-d207-4160-970d-ddd98433cd87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27649, 675, 489, 13, 29, "Input",ExpressionUUID->"cf906399-5828-4b87-80e7-ddc37d71aa2a"],
Cell[28141, 690, 77, 0, 34, "Output",ExpressionUUID->"a059d7eb-fb26-44d7-914e-ed15b2f67445"]
}, Open  ]]
}, Closed]],
Cell[28245, 694, 156, 3, 58, "Chapter",ExpressionUUID->"e172cf77-104a-417b-9e8b-0895cfdd6efc"],
Cell[CellGroupData[{
Cell[28426, 701, 207, 4, 58, "Chapter",ExpressionUUID->"ab35440a-cabc-4736-a5ac-e07454ebd2a0"],
Cell[CellGroupData[{
Cell[28658, 709, 167, 3, 67, "Section",ExpressionUUID->"7a765571-11e0-47e7-bd2b-e5df28d2018f"],
Cell[28828, 714, 2637, 64, 113, "Input",ExpressionUUID->"32fda3b9-b853-499b-9d93-f6cc5b2d03d6"],
Cell[CellGroupData[{
Cell[31490, 782, 3335, 65, 113, "Input",ExpressionUUID->"e694fd5c-31a2-4c80-9a3a-3cbb8af0f0d2",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[34828, 849, 737, 16, 29, "Input",ExpressionUUID->"ec0b1266-533d-40d4-a949-ccce78250c06",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[35568, 867, 9543, 199, 244, "Output",ExpressionUUID->"b2af5ca3-6a7a-4273-aa18-788518782ee7",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[45126, 1069, 8658, 205, 37, "Input",ExpressionUUID->"5f23d7f5-27d3-4f48-9a93-1389f19dc351"]
}, Closed]],
Cell[CellGroupData[{
Cell[53821, 1279, 459, 7, 53, "Section",ExpressionUUID->"fc68a4bd-9bf9-485f-9eed-cf7b8ff25567"],
Cell[54283, 1288, 622, 16, 70, "Input",ExpressionUUID->"afc9d31b-db6d-45ca-8b6b-e25b97a5ac3c"],
Cell[CellGroupData[{
Cell[54930, 1308, 404, 6, 70, "Subsection",ExpressionUUID->"9502650c-75ff-4479-bca2-f7b8b0c4641d"],
Cell[55337, 1316, 1409, 31, 70, "Input",ExpressionUUID->"5fefb9b9-6e54-460e-b544-a43d033404b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56783, 1352, 450, 7, 70, "Subsection",ExpressionUUID->"d41cd2db-8088-4737-b918-a082c6448deb"],
Cell[57236, 1361, 16339, 231, 70, "Input",ExpressionUUID->"5e8aefb1-dfc7-4620-8212-9b7f8316e5ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73612, 1597, 453, 7, 70, "Subsection",ExpressionUUID->"7822fb59-1347-4e85-b721-29a9f368ef8e"],
Cell[CellGroupData[{
Cell[74090, 1608, 400, 7, 70, "Input",ExpressionUUID->"e96a481e-3ba1-4201-9c24-39f96d06cf2b"],
Cell[74493, 1617, 47242, 1073, 70, "Output",ExpressionUUID->"4a27835d-ece8-46cb-bb4e-df3922dc4fd0"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[121796, 2697, 408, 6, 53, "Section",ExpressionUUID->"5330bb32-e656-4b8b-bb36-16ab02f0840f"],
Cell[CellGroupData[{
Cell[122229, 2707, 404, 6, 54, "Subsection",ExpressionUUID->"9ccf4bd6-05a1-49f1-915f-95679eedaa4f"],
Cell[122636, 2715, 382, 9, 29, "Input",ExpressionUUID->"ce6f0f7f-95ec-4012-ad4e-67899225afe1"],
Cell[123021, 2726, 7387, 111, 133, "Input",ExpressionUUID->"feba2f53-f4f5-43e6-a86d-fb7cc5e96658"],
Cell[130411, 2839, 3263, 54, 174, "Input",ExpressionUUID->"a805bd2a-cef0-4df4-b838-7efd7718ed29"],
Cell[133677, 2895, 17566, 246, 32, "Input",ExpressionUUID->"ff705697-08c0-41db-8a85-131ecdba22d6"],
Cell[CellGroupData[{
Cell[151268, 3145, 235, 4, 29, "Input",ExpressionUUID->"1b570bfa-2a4d-48ef-b659-d88693679ac4"],
Cell[151506, 3151, 206923, 3794, 372, "Output",ExpressionUUID->"35d269a6-4b69-4595-a41e-404d77927ed4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[358478, 6951, 501, 8, 54, "Subsection",ExpressionUUID->"22d0189b-d6a7-44ad-b35a-70f7e8d0dd81"],
Cell[358982, 6961, 17887, 253, 113, "Input",ExpressionUUID->"fbdac8c7-4549-4743-864d-e467d909f319"],
Cell[CellGroupData[{
Cell[376894, 7218, 500, 10, 29, "Input",ExpressionUUID->"c3a89cf2-7844-4806-bca2-4513232e25d6"],
Cell[377397, 7230, 44946, 811, 68, "Output",ExpressionUUID->"0c39481b-dd97-46d2-a7e4-f2329516f456"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[422392, 8047, 409, 6, 54, "Subsection",ExpressionUUID->"e2a69d6c-fddf-4ce0-9a60-6b136e91fb12"],
Cell[422804, 8055, 582, 12, 29, "Input",ExpressionUUID->"61cf3e56-b150-406f-a005-b09cf3a4f4b6"],
Cell[CellGroupData[{
Cell[423411, 8071, 10327, 232, 78, "Input",ExpressionUUID->"a637f3cb-d7f7-4492-ad2f-108fbd4b3b99"],
Cell[433741, 8305, 4166, 97, 79, "Output",ExpressionUUID->"eefc77a0-209f-4c96-8b7e-a341ec93f3ca"]
}, Open  ]],
Cell[437922, 8405, 560, 15, 29, "Input",ExpressionUUID->"fd20a90c-0e3a-42a1-ac7f-bc712b1b2778"],
Cell[CellGroupData[{
Cell[438507, 8424, 403, 8, 29, "Input",ExpressionUUID->"0bd26ae7-e31b-4a68-b76a-1002446f1f03"],
Cell[438913, 8434, 16198, 464, 228, "Output",ExpressionUUID->"dfc92463-d5d4-4eeb-b7bd-fbbb9e7a3f7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[455148, 8903, 500, 9, 29, "Input",ExpressionUUID->"4836d32b-7df4-4c05-858e-1e553b9f2099"],
Cell[455651, 8914, 2911, 51, 239, "Output",ExpressionUUID->"f5f332f4-9cd4-4e2f-b7d0-1a77a5c3f1c2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[458611, 8971, 262, 4, 54, "Subsection",ExpressionUUID->"76d42d52-0573-4522-b5b7-498e3dde144e"],
Cell[CellGroupData[{
Cell[458898, 8979, 9118, 217, 78, "Input",ExpressionUUID->"4ca549a6-f4a8-48b8-bd04-5ba2c91f7834"],
Cell[468019, 9198, 2302, 64, 79, "Output",ExpressionUUID->"4405708b-19ed-433a-9ebd-dda6bfa68b1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470358, 9267, 369, 5, 29, "Input",ExpressionUUID->"d5dbb3ee-e45f-4e95-8066-408558b38cda"],
Cell[470730, 9274, 761, 16, 103, "Output",ExpressionUUID->"ba3c09e3-47fc-4a86-916b-9917ca357cf4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[471564, 9298, 268, 4, 58, "Chapter",ExpressionUUID->"3dfd48ae-245d-41a3-9ee6-9f48a3126503"],
Cell[CellGroupData[{
Cell[471857, 9306, 81, 0, 70, "Subsection",ExpressionUUID->"dbaf4b13-bbf1-46b2-a867-cbe6ab3057db"],
Cell[471941, 9308, 76, 0, 70, "Input",ExpressionUUID->"282b1129-9bb6-4375-827d-fe1a21de5e52"],
Cell[472020, 9310, 76, 0, 70, "Input",ExpressionUUID->"4dd2a1a1-93c1-4c86-8a53-3799d9a2326a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472133, 9315, 81, 0, 70, "Subsection",ExpressionUUID->"79776b36-72e3-45be-ba51-f07dffccf849"],
Cell[472217, 9317, 76, 0, 70, "Input",ExpressionUUID->"85ad096e-ed5c-44c2-8c3a-979fde4a03c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472330, 9322, 81, 0, 70, "Subsection",ExpressionUUID->"be01f422-1c1f-4ec9-a959-bf38e8105582"],
Cell[CellGroupData[{
Cell[472436, 9326, 76, 0, 70, "Input",ExpressionUUID->"1fe03ab7-3007-4e7c-b36b-88dfd49533c2"],
Cell[472515, 9328, 77, 0, 70, "Output",ExpressionUUID->"fb9922be-4d44-44fa-a740-90fd86c255a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472629, 9333, 76, 0, 70, "Input",ExpressionUUID->"cc7fdd2c-831f-4bbf-9c2a-d697ed7670ea"],
Cell[472708, 9335, 77, 0, 70, "Output",ExpressionUUID->"deeafa17-d205-41b4-9334-177d0b32d635"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[472846, 9342, 201, 4, 58, "Chapter",ExpressionUUID->"c33fd357-ab86-4dac-a5dc-fb8a483872d5"],
Cell[473050, 9348, 407, 9, 29, "Input",ExpressionUUID->"de7ef9f2-bf67-4869-9b14-c25b89d18d50"],
Cell[CellGroupData[{
Cell[473482, 9361, 153, 3, 67, "Section",ExpressionUUID->"49d7fd52-7d0e-4eba-9a43-3a6532a9b58f"],
Cell[473638, 9366, 4894, 89, 411, "Input",ExpressionUUID->"373847f0-5ceb-4aea-9bd8-2b9bd00ed101"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

