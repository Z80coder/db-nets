(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2213047,      37263]
NotebookOptionsPosition[   2210406,      37206]
NotebookOutlinePosition[   2210871,      37224]
CellTagsIndexPosition[   2210828,      37221]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Logic", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 
  3.864793591864854*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"\"\<neural-logic.m\>\"", ",", 
    RowBox[{"Path", "->", 
     RowBox[{"NotebookDirectory", "[", "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.864789316910233*^9, 3.864789318413851*^9}, 
   3.8647909759269857`*^9, 3.864791161343305*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{12.5, {3., 9.5}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["BinaryNN", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "BinaryNN", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BitLossBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "BitLossBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "NeuralMajorityBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "NeuralMajorityLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BitLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "BitLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BitLossForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "BitLossForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "NeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "NeuralMajorityForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["WeightedNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6f1c30c9-38d2-49c5-b29e-5729eec4611d", {
                   "WeightedNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{3.86479111604138*^9, 3.8647911657240562`*^9, 
  3.864791620800887*^9, 3.86479194597997*^9, 3.86479198092934*^9, 
  3.864792204697258*^9, 3.864792687703233*^9, 3.864793105592959*^9, 
  3.864793526801218*^9, 3.864793732850697*^9, 3.864794507927494*^9, 
  3.864796071752219*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"97eeb405-325c-4378-b671-231b94ec1141"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Learn XOR", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 
  3.864793644095471*^9}},ExpressionUUID->"e172cf77-104a-417b-9e8b-\
0895cfdd6efc"],

Cell[CellGroupData[{

Cell["Generate training data", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 
  3.864793759486944*^9}},ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-\
0201cecf95d8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numBooleanVariables", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Echo", "[", 
   SuperscriptBox["2", "numBooleanVariables"], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10"}], "]"}], "&"}], ",", 
     "\"\<BooleanFunction\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", "500"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{"x", "->", 
         RowBox[{"{", 
          RowBox[{"Boole", "[", 
           RowBox[{"bf", "@@", "x"}], "]"}], "}"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{13.75, {2., 11.75}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{13.75, {2., 11.75}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.8", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],

Cell[BoxData["1024"], "Echo",
 CellChangeTimes->{
  3.864796073654737*^9},ExpressionUUID->"f89b0d19-5491-42a1-8fde-\
7224fbf6fc9c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 
  3.8647940005418167`*^9}},ExpressionUUID->"efe91894-6841-49a9-ab9d-\
fd0123575c7c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NeuralMajorityLayer", "[", 
       RowBox[{"numBooleanVariables", ",", "40"}], "]"}], ",", 
      RowBox[{"NeuralMajorityLayer", "[", 
       RowBox[{"40", ",", "1"}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"bnn", "=", 
  RowBox[{"BinaryNN", "[", "net", "]"}]}]}], "Input",
 CellChangeTimes->CompressedData["
1:eJwd0WtI02EYBXBpi1Ty1kXZJXFJuEwtLUc1nTYtbTQjy2m5mpWrSGultkBx
eGEVZCXCaso02SyoqagsWnO2Lk5Fu3kJXYoQ08omfYo5SUf/8354+MGB8+U8
nHOKbPkaHx+fROrgrYWUprqhxQMFzq06qEtjtcFXd8OJlsu5XfB1fj0xL5n/
G4a/TSW+3/LBA+Nyqpchvfe77z3K8sAIP6ix7xPCIRktHWauY4qgnttE1Bps
4vuUkjRWFqxNMG16QFn3dWcYLKTZluDhzm4PbG7x+tVTtkYa/GGVVxgCz3DK
iQ09Ayy4fXmVOD4TEAlDK44T86q8MfD5eHEsZLSY90B3/h8iW1AqhL5OB1Hs
qDgGa5R9RIm8pF+DftB+O5TOP1n/kDKnLT4ACqxjSVA6HJYMG9pHz8IVnuAi
dKr8K6E+QaWCncZfFrhjsaYXerM7puH4G80MjCieP/gI+dFdh+Anc30lbI0f
JRYEF1mh+baJOPvz8RycYL/8ATNPRPG1lBlx7cQS2dXzcEXSTLQZ/2ph+pdr
jXA4MdQEpSelxBjr8CRUb8udglGpZQGN2IM+Qpz9JmZAq281E3JXdQIYnMVL
gfqqjRlQJNgtghz1YGnNCP77rAzGFl2ywCR6P1F6XTYIjZ+7iBMxC5Pwaepe
BzySGO2ECcEuYuGFDS6o7XERudxSN6Sd7vsHu2XstbWUyo8KIt1jY8KggUAW
dBsrT8HOG0X5sGOGoYR8e+xN2DOt1sOpK9EGqJgLeQd1d1TEMZ5tCcpfbPbA
/4LW2cY=
  "],
 CellLabel->"In[22]:=",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"MajorityN..\"", "\"MajorityNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MajorityNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Catenate\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"BitLoss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MajorityNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MajorityNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"BitLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["BitLoss", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    StyleBox["\"\[Sum]\"", Bold, 12, StripOnInput -> False], 
                    GrayLevel[0.33], 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SummationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    SummationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {333.00000147371924`, 103.49999999999999`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "MajorityNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"majority1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[neurallogic`Private`i < neurallogic`Private`j, 0., 
                    0.]], {neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQNAgASegbVRkhxBDEKwJiRoVLSBWXGtJgFCwPEKI
PLTK5CFBiy4qy6WrbkNrrbt3dy+taH3UGh611GIXxa62qEDBR7c+sFq1Puqe
mRCl3t0/7p83v1/mO+eb732+831zjjS7JD0bAQCoJQAkaz0XZ4gAYMF5No+Y
tGD5p3lFD1tfDkgjUygaKQ+Am/BlAEMKGHA+Dv45tqitmi7mfDYmT9iGOHmT
WdzQCOZb2aRkDiN5W0DyMCYXqbjihf5yS63e3CmN0gW56jDNNkZuF/dDEa6d
W4t/gcgtTvFU2dT62DdbXt2Kf94F5W7EAdBAKI/s8sNzNzC3R+12wseQs7le
FJSypS7AOZyC1bZjHgkiSzVsAbzLXCzy/ORFwskpnyoeX54fq3NyfytCxAuA
3WMguCJGrrtDolFvTJbwXej0TQCkvsd1ILNWEW59aNBG5iL/UjGTmRGKyNov
qcVTRUZ386Ip7A3kHvUu+avsCQ+8kl+6Qgg+wraOn7P4zsLgIDbqf1Konjd/
ic6v9+VXX74TsDhOeHJSM27eppjTQPzc+ZPuGDVoziYiMX1G5JJQ3Z7g5hP4
BJ5+qfNLMvN9fRMbYR6CiHzuK8xeW+5kFVaEk0wmfl5ECv3RZGxKgP9wFIYg
aWIAvoWxCKsdeAJ/HJynxJPBJA8jI6xeA4IMyJ8DubHArwV8zf7gPkWBjKAD
AuDnJmeCBwb0JTGFmw2M6hZtQndHUiuS1KVNqNPO7NYmtNoSPNpEJ5oALmP8
a4TgEsBujPCL6vk3DPzbPezLQFDUwx9UC66CJq2qpSOpAVUf7Ehstc08o030
aMN6tKpaNLGhI+nX7AP8wYH/xH7GkditVTWNqg5r1ap60JlP2QvxLaBFSXRR
FgvIiaAa6AHrTht7nf4XiKkG7YBg2cNPGCMuNwcOaCJOGCWnjREnmgO7kYhv
pZIuhHCZDa4qGYc0uyryHVYzp6zJpSQ4lfmOci5njZrjkbTbwi83S0B7+MXm
wDPNEd9CRjKiXSM51yy5/Gt2tILLqfgP7O9GnDdGtLdJRlW7w9ttET1P2Q2O
Zh61Og2X6PXyCIAKTHILlHgKtWqpYXUvgHHkt2oVs6UQjwB6pbge4j+yTXqX
Ip8IZoMBUE8S4AFwox4Rt1zmqoJmkJwqmatUD+V7TXKZ8efcOd0W3m2M+NYj
GWgOhNG4ioSDMi6nvMllAdyKSpcy1bUmHzKia7icUoPL0vQc+3mp5Px/YK9d
Y3ZVcTllsn8bDTIwUvqYMh14EBwJwdjqiWDP/4tk24OoHIHMEPB6i20vd4Cn
xBrBTgTMh/stEO634Fq1uNZPE6shtvghco2+wU8j12Q2+WnfUwXbje0j3B4n
/gdMH+x8/Q9YarB9VbIBAcERb3rQxPusRLdDSbpK89FyPadiL+fNcwb/Sz3s
624OfI7gnArAWUNwLG5OGc4pAgKLmVNKjymklwCODRyrm1Ou5sAIwSc1hV6S
HLObU4pzKnvYN0jOGoxT7mWk3+7DOBaSs0DAFQYl19Q1AESR3LTzQdv+hDc/
HiwoX87fdPJVYhkvd/2Xmu7WI1s4g6VK7MTcNzb23hFx3+cd+cFYFTHpyw/V
8qaURsuFbxIneVTOQhgHLvwz0HPS0PTITBS2CjjFxJ56/yjYAKg+gGAAoAAV
p5emo0wS+H4GoJ0avzcCB2yKhkZBms2MEAR5SgOgnH+O2+nHpQXRPw+oybjk
XqoGIgBGsWxi9wMXF2V4KM00hiClISndbWyYcQDgNBlU9+dTsOLRFAg2qu7k
3DuIehscM6kmR6nblPSCAg4RihDxivp6nW4VYJK0KJ/loo3nAJdked31WpXw
40GvXK+PJML7U89uO4oD3lgHf5o/iePleWq85fes54xf+jedFZqEPtMYFMb0
7xgPQK4N+FF9L6JJFCpMqa/ze2HecaZ2gogxeS5YRfof2MaYWQfqsyl3PoR5
ugvCOC4p6RyU5ImQWbValbOjLhnWikpY+kp5cFNcx/h3SH4cLxnWq/CvmiV5
BIsmc4R1o7O6tLPq0FndlXWwVK7lcqr0LrOZs8aMllfC8uIK7Rbyr9XzBwlB
MSEYGuGPpPLjsM7wi1LJOWl4uzEij9iY+IkjsQfuLzTpE0eSE03sHhGVGzhr
8znx+S4LfJIucz2sipxyGaf8PguKrSBdWVxXqRjWH1jWbNFwC98Y4P/kgVsS
ze5qlgw3S7rp53mj5IRU0mmD1Z79j3ptAiwjTfTzYIeqYbQU/AYqfWRPPIMm
tnTwPi9wmTNdFrPDCqucwWUVu6xuV+hXSwQ3gODHVP5wPX9ILRjE+degF7gs
/HwbLPsRp2HRs0WcH5AMD4b/E4nIE6epWrQzd8K6kTpp1BGDq6KSU9mUlnKn
XkBFIGIV1XeuSsMvtoWvRyIog6XhI0Z2xgaHqrsjsUU7CwbkUXvSsDaxFk47
6j7zpwp4BbQHlk0Zx9Jke3UIliAP/1Iq/zYR1XZaEzE8OP7cYPhFaIA+NLHF
MavVEebsUNXRJfRgW0JXB/QxqVvfWgoLsoFTCgOY6QrtO86/ZhBcH4D1QnAJ
FjRccDeVX4zxhwg+nN4eYH8/wB9O5d8nor67ZqRq9bnB8dek4Zel4Z3ScLiC
V6UT8/BdiZ9oZx1EExocCd2Zn8DVh87CBrFG76oww+i5+Jcw/ght7U2Cf7ue
fyeVTyVsFcxbOYSWCD2ureWF+lnkejzKVrd16ymdG5PlJsXKk7fUS99TYcdA
sMQAlpUU5lmMRbi2pMhcUGiy4PKY2LgYIiYWzyux4CkFxasr8UqVEpcpFdOz
C6xTcNkCY/Fqo6UKlydE43JCLp+SsdqEy2PxBauL6TkeGztTrpqpUIA4ZhvP
RmiJLr3Bnm7M2fdG2fyoaWXvhU0W/3hobU7c9oA3yj6ctn3HwrVlYZPx9MOj
KOF/L8yJevjuwjemhU2WgT/BvRQK/Qnwt8hgjnLWZJqbYFw6YDYk9HTYL0uO
Nwde1VBb6DIVOGrtxymGDPwrqTClBMNUYgmupPLvtJA2qk9TGV/pKvWud6Z5
Z4eqFUnc7ZjVAHc8OAXLAFUTOd1Jux2JO2Eio7PcjiSY1PUdVBkxwth+DQfB
zN9GUxWD+h4XyWxCcoJbo2lQJ4jmfIEZYAG4RQAwEb6LnNdVn8Z3RlPr8tsD
CCgsLC+KKSwpMceUm3KsJZaCNaYYU7Exu9D0795UFORa85+9yC0os1oKsldb
fTzQDmfnH3DeGX97aUQ+65RK0KpRNQQyPirEglggl82RBwt5RrX/BYI4obGR
qRg+nugJRIdlocONDMn3QIrLQL3QweBqiPzzeBeuvkAYljZoiqd4hP5gd1hN
zD4Zhvkzcg9Kr3oMBzVXuw2HjSP279kEt2awBvA8hkYN1z5YMxeODmu+sRvR
5CiuoXMgX43xps4a6VL/UGOLQmPduDpGhoqVeA0JasKYCuAQoihU2aSW1jqW
16B+exIApmN/F7ohdqDKYRQw3GE1sZkOBcVneMrnjH/Kt1jqgXzt3Lk8/xeZ
bSCOpXBHqvP86myb1DLsO7uKNKIMPy402I0S4liCxJiOjSH2l5pM+gZDp9uc
jPFaluajmxi5jSB0L9eJ8uwB10BNIHcqTg6ypQKPodMDINGeTK7O2Gg02oWO
dj8N4TFo+Ff96pczTO5ILOiLgwaB4RxZz2CIi7FHgDeXx8OZbYaPNgyI8kIn
vCiOle3EmOhfxt0wNJLf19geOl6C7hAYi+v157Dxvq5NIO+azlLJC9XMHDXo
CMwz+OcRF8zsD7DuoKQo9oZgu4H8qX1id5CqjK2JTy29jzr8T6vn4MHdk1Z3
4Lvbp1DruZfBC8O0FHvyNLKt1oY4cXHKJexcezQqYo0K2doRuxA7FYyLPQwm
pE6jqGsZ7H287SJDZABGnMfuI+KU+GvINGY4ru5uQYRcJrFwpE4sVnPtbWf4
nw4E7ONlhNSJRYu5duQ4v0y9jOwOykBDbGpNL+tj0MF2jsM8Zoc7wEBkG4CU
y96exBwivjSsbKvVDEKDDLdITierK7ptRqqQOy59pSeAKFS/iSC8eO4xwI5i
szG7gbigJfn7eJnjRtXkCdYRC+uLJjpRat/9CP/jb2EnSVHV784qq5/El0yZ
y9KVX9yxMQ3Z+sd7d/My1A03H4cm6eJw1ldn9/+1/9ii/s+0CjR9WLWy7/Hj
oSO/l4Zg3x++3nt5d4a6tffQE53zUGznhhR7L2/9UMorjgx17u2qoh2boLS/
DsXbKEWzF/fR03uv5EKWofsJlPA5W3r3Hz37pKivPg05taVP+XqGurOvNTQ0
BLt+f/24HisWmD5ckdV39PHQ4evzUamOqVX0ThRu6EmZUTRBx9LtL8JCsG+O
azLU1rBd6Yiwuu+XYOHcuXqe+ZvfpSHC9UP3sOWcj7Cdvbwup+pk9RV2DjTs
5qHPxJBrbXXgU/mJj/t/ClH3ahR6221r0Q93s+7VUJb0H0GgJV+vLjHD4CRk
TWQqwnUOUVX1WWXJk3vFFRD5aPOKXWmU3hcoybf3p1GWrylSwlfK/h3boL9f
3S43QX9/eCDUX5yM/R2asSAl48yjGcWvQJoj6/u2piFp68/mwYBn9B++RBl2
dB067mF0VysSFFn4VpRs/67+6nVhW6CoC0PHYeh232tlUVoeFi2CEtZUr4Ce
njp67zKl5ebPLLwzUqi/dfNFEntLh3/29xXvQPPe+eE45c6Vjw/hlOMrz+6h
pz9J6SX44+39R68c25V1/On6/jL0GJGcZup6s3ZAvacWnV1Gp4oq66yy/4mq
uBTqnfG3vu3w1eIr4yi9vUc2wnwYTHqtvwY60nr78J8oC5NKFvaoucI27OSd
eTqpYvut6NNa7qe6aCcRzqYj+fOFs+X/80RVzROc4um33qssuvm4uvcFSuDZ
1l0wFINri96AutZmvdPus+3BL31HjFOgcOWN2UJjkfD0GPnFSxbAkL728GVd
E7X6i/uPQ2M6e1uvy0KwC9abUYtMy6mYb+4b71Qk6whd3GNhGvdkru7UGCOX
FOkhzcxPwzIU2BiaFUvHTq07Xhk7dfY1wlAU/9A4LtCJCXmnUqp1ouS4S8cp
R/oeh9N5tfXK2qKb90uG5iGLOKfgnurdf/L27PU7Vo6VcyaL4QvLgb89ObA+
qG41HvBhAnq3//F0r5B7FUU3H5Xca/yAWr79T3TUpzFAYqkzCQAr2Jb6xukd
iXqe93RB9VYJdbZjauneSn2jK8SIjNr/nZPbo7U4cxosDrAmIWHqjlqEKnU9
bXJvJQnDXgsCC+li4Q/pXyRFnkjh7PVZntg5oltDdxEJj1TMfm2Fy6nocoKA
bUjwd4pdvdhTvRNpvRpaL+rt6ZHuNi79fvlII4PZPKBeo1HX8SoXIvZUM34U
J+azP3kfaGQq2ECprpR5Bp9id2KJsJozkL8E85n0WeEf73JJxePgu9jHm0Xq
3Eetu6jn/r9ST69N1SdRnw0RY2xgjNogcySDo7hI59P1GrYtCr2YTuIiif43
3M3bkJIpasyfn9s5QHWscTP0m9zjmV98QX4swrtgHceY7kE1B8o6kA623upX
Us+z5dSzj2MmwOlHqwXPYv8PWv9SWj/luQjG3jZBZpfLnOky9oQGdaiok6tO
EyEb59I8u9kbiS9h0/M2nb1tLlGYb3nenDstcEnDjNNYEoeFyM9jagPxpZrn
o0RC8W52nHA9UY9MsfZjry6L8vu8oa1gCrH17docHE2/+mnbwAFeJRVKFKkT
4wKu3Rb2F0S6uiPakcaE7QLYDW52sWFlWGopvnmSegX7g/c9urzILTaevvlh
zQe8Thy9yA/D2tQgit2F2g0DbKu6MI/oluPzqAaFc9mrzJz+A0gI57Q+WckO
3dnICH57o4otxzfcCCPiUx3PK7+DaNglkF8238cP/PNJNqU/Tvi5mr27Z51j
HqekHilxBdYacPJtLiHuIkVynt2bDzA9k6diHui/DXZhZMonGjEvnvkGgD04
ILinFI9is6BPOGcPZu3AR2wSqrOPIL7Obp9ItkVrh5gXCBKRnUNYiAWReVqQ
WCaTOI/XMsTd8qRUIjtVBe1qmibbx/yqBUnz90O6gwj4AQDdJw8xQruD4Mdd
4W43R8TsYu2GLbsTo1q2wR+uDDaf6tMk7NMfjZwM0l8gMvcO0HR7n9K5KToi
zUd3wH0yKHXhBhTRwzx45UCS8BZdi6r9PxeldVb3fmxOEc55VLEukJ72e1NN
uU5AT680vj9K3ztHskQnfHJ0IisdvKV7pFoXTBPc+5zevE+K3kFpfPx6TI9E
B93qfzAfZ7XoO6tvK7X3g0J20lu7766QEnJs8ztt9PSBlJ6ezAI0b3nRtKDT
eDAjWs9Oqe21Ltae9+LvFmWPraLB1SxaRd/P4bSKkpuXQ8bWxu//izbp2IUd
435VZvNOjy3Fi1ac/VHXSbf7Qxumv6x7RNG00vu7FPeeK+R8LNLJ+I7VVL+D
9D/rd5B8h+Q1+Xv3oAnWwa0QBqENlczRGrAK1rPfQJgyeo2R6SWlIXUJoxq9
m3kbvqS28l4IXwJeXWDMezBKT/3gcYq+cvFB+npwkrf2BoFnkMJz4cklBo5D
wDNI4yG9dlSmD/rwy+CYOoj6oE8OPK6ACeAZ9NFXw7EQPIM+fD0cx4Fn0Gdn
B/De1vigD3+ZOpfBee8YOUAFwDDw4n3QR39vlO7ec3q5iHfugz586GiMfdCH
pxoUFRcf9OFnjfLPek7OYjgPAM+gD798lG75c/RgzHqyffaPnlODwDPow1O/
lTCX7N5c+plKwHKjRRmvLCgusBYYCwvWGK0FJcW6kmLTImNBMX3ALDYZLdlV
BcXWmDylwppvKakYvRaYU5ljMlPkWVmvV1ZmmU2WspJiKMNalVVO0KymSjM8
scYUxKavLrYWFJmytBaT0WpavLrIZCnI0Vgsxqq5FpNp0VjE/F9ZkqVS5ZpM
efLsrDx5TnaWIpaIzUpQyeOzcmNN8vjc7IQ8InsGZWqWdn5xeUkOzUTPl1mM
ZmhSltZYWEgj5lSaLc9oFpsqsnzXGnMslhJLmcn61KEl1qpCU4apzDrPZM1a
lGEqLiuxQLac/KcUemNxLuT0+jNKQSmg3fFOX4cCrSYLjMgoIlYeQ8QQuCkv
O3eGMicuV65U5sTn5MRlJ8jjFdmEMkGugmOjUmGUK+LyEipVyiylYro5Z3oh
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
2huO+p8Ys39QLSxTrZ+vNtREfYmphzWpPeOqv8JyXG0LgUcKt7TOoSjJ/pGr
Q42rXpOrrZiC5DB9epfas67/afojEVBumzO5tR6Iq4liL5++i/U1VmhjextR
rC40whIxd0zxEamJpnc4CJuV/6SGQ/ASho2RBmlCheFa6jkloYI3Zt8qtCVn
YiqeYSxDcpdIlaqF2hwTkrdwh8h4Zg15k97h39AK+Z7ECglYDYlFEhSSLpFZ
pFnCJ3xvUiH2iPrcRBhESSJxfyb9hvrzn/BDYNk71K9bP8K0ROwDJqRwyTew
VxShGvYZq/WM/kt/wyeY4Ysz+jeNDV6e0X9So991xuBGkj62h06LzUmPwuhx
8ek27rQ4TvreEMoeYbpNSHpkPi0au2us3+pveJvEan9m8IRr8NcZg64zqq+M
9euTDG77G06fHpkeGfk/Tf+r1uClsf7dya1VnxjrvyIZyKfbiBVGcXvGQFyb
uDqYAMsh16r9yVEHBQ2y1P/kqL0GyePKAut6MV3RPPtSkd3d/2pdhHH+5ane
B1rmqj9jqb3xVBv6l504pCB1/9fpG9XBqp/x1f78r3ZSWPuaEPgTbJDSpY4p
IYHb6PhiCzGDXfwq3DGFtqCOMVDHOJ9CopJqaHpiDlMYJDKhkiKpPKFCKBbG
usnCGvkUHpUSSdUTWzKFS1u5OTzSyVrqcwaji2GjFcJUIP18xp1iTM9UTZnN
rNHFVkNsMIJYPyOFm8NSqEsR5jC1ZpC33+AzbimQVpsp3Fao9TZjrut2nKFM
OXQuNJn7+QzqzjIzhcYU0p0ipVob4y4zRt7oOnqVEoVC9ecYM0VKtTrrmGKL
HBY/kMNjFSrV6xxN0j1Zm+LPuNvFMFNoVSCpPuTf4MJbY0+REk8X9jY8UENx
GFN0yBfZCNN3h1BiwX4u0g608pVBXH35tD+R7mhxGG0fhxaVT9vDooVh6lGR
tN14G3USA6DNp0Xn02K5NHBq+Bs9gsCFNLCh3SxaPIQXIW0fkxZLTMTf/sKk
RQlpa9TpGpouaYePYiQrl5yT47XX7A6UPAuN9VE7dG8r5z+MwIQ7vLtF14/Q
nu22Yd5eufNg87AW/XvG9V7/vYZz7lzlWuasy47qeOwwp8s2xRJkipK0sAuL
dU8/Sg/gwLMC/F9LYlyyhJQP+RVjYiQMkq0a3/33ezdE2EG8C8MyeZh+Taay
YT/LRRgIz3T4X4jZCo1/93lRm4L9NjkMI0VirvMHI+ez8BH4HyFFx6uMFkMi
YfI/sNQaNxNVuhCo4eI9XVjapqVnd3OxSRoRjOCc2/HNbQq5a2pttN23F634
QDN5aiXY7of/PKjH6EKFT5d6/XUWiYkpT42qAQbdbrpQWDg+IU1R9ezud1Qu
pvXpjvYn7PgUDKeCxJwc9lrtBRXDrNAw1uQwr9N0NYy1e3ImC4nrmvNnhhg2
iGQjnOTxdurZ5Rg5/1P6f1dfIQD6FTBc2Dj98233fSSk9Q/9iZtSyUwEuoRy
+kPmzVYk5sjp/7b5LInkOakNfEflU2e9gEryJzt+7h528V8Sm3/q7CYSHVOa
6kI7Rq6gXsYUahQ+Hfbkhi8MU/502JugSiBM6x/Buu9imlf8RsIyFcloPUvD
HB1djXWZh5XMVt1UcJ2tRTZdie0QKhfnUOwPY5kBaP2rIN1j8O9SulC//pl+
sBZpudjVNqXusIuQtjeetidnN4MIg5BklzJcDG/UGjSe0Q/mKOLDRHp3Kcsb
XJcfpiy/G384OpK2n07b6w6RmbYvkhIbnx7JSte9q6H2JlPtGUc9nKPePag2
6Km2lFlv8BRitbHBDX/DYM5BhwqRQxOkP4pjhcgR5fFBrVg+bX8IbVlIehT8
LUyPzEyP5NNizWmxY4qwbJww3Y+evlsnPSonfW9O0kLIsP1dau9qIGNSAhrO
6EPquYv/3e6vf3syfVD/yHS1gyyfg/9dWmd7dDJTL4FNPyQ7PKI4FNYxboWm
R3qnR0WKokNo8fz0aJ306Px03cbP1Psx9b891V5kqnVPBfalLHOD9lrDGzzD
h8b67UmG7V36L54Z/EUyDNbZCKDF/iTEec85k4zw0+PiafE5G9cNZ6ojCRju
MLztr//K2OBprUECCeXKu8YGg/7UTaki27t1DoWuy0EgH244vnB1EMNj3eFf
lYHT9Digh07bZ06Lykna2g0IoUbtT0gxHHbtQ57hi2farc8MngIB7roOhaLl
RSK9lDrbwzjCKa21a6gDHh3vuhfthjzIp+0GAXqn67bdVHvDV+/rIhKf+p8s
9RFPtXCmWjcHT4hdCKq98FQb47Cfv/HXv5Fk0PpM+w2kdWODemMD0OArY6Ng
Vh5gtuWlFLujkBm9K0D7wOw+oNM9PS6ShmF7wVUswcaiDN1ZrmKGrlKUpTuL
nXQ4K+uBWz7TPNDRwtLlSKbxd7bMamyGPh/7T8Su4Cj/MJZrRFhk6K6gKJbl
YoulizmLLVjBEVGsdaHhMfGseFsblrmN1aKA0Oh5LPM1/uEx/lF7WZZ2C1mW
HEvLeZtigliWFqw1MeH4M8vCwt7S1t7KAluqUMtI4rhyGtz5yV7+23/ZuWc1
e8Ge7/RMdf4u27996TcqO/dcXfDNibX79+iZsrzKJ7s0fly7nS09u3bnAj1T
c+wS+AykJExFOcocbJG2zzsyB/ivQ1C1qS75pf5NQC085CovkYCQjmdZdfPV
ejzBdNRfIANS7/FUGy4UJtH2muOWHZ++m9Crd+TJOtsiksM50fKjEPuwBxA7
qCjO3XU8J3I4CQYLkAHwNWDqOhR7/EG2wRBIZyhEaaqAQ6tDn5Z5koZwtrmY
PC/fxTyZvCAneb7oUD6Pd7SGztU4yrM76rJRy8Pi6DqlmTM1VmJ0zkosmUVH
/405Y28hDxXAwiarGjI32jR1oL1HmZqSP2fFJ2mHJ2nHnwnS8/ts757ooDA/
Pw//yNXhgUHxQYF+K/38XP38vIL8d9lY+Xn6b98ZFMiLivLf67c6PDroy6Ao
6LWY1j859H+/0/L/p23tWaax/lEWdpbWHv6h4X4rY8K3R4dGhM+x+NcjMc7K
b9Jq/fzWB8VtCNgRtD3aD1/Q0z8qenNoUByi+b+y9187/+Hjn5brNBaXWk51
bI4IDXT3Dw+EzT39/rXpf1/d8v8uagkRWy7lLPu/lG7b/6N0W/y/TLfF/13U
TknZ6v+sD/5/R7f1rl2xYYt3RURELo4FkiOiQvcFLQ4K9w/YFfTf3sSFBkaH
/PMiMHRPdFRoQEz01Byo19wYZnSKzk/Mn7b/GunToExau5mhe/4nZlHQr4Wh
dw8lNefOdOn5Saei38figEFRMkZxekVx9jZO4f0cwBRxPDczt9fQBF20BXTL
LpHToGimm+4gz2isVrmWkT2zTjeH9EsAl7I0ZDMzdHKYNTHsxmzbBVQbb9GX
vzZRd2KXWe1C9fEa9c3MiMlhtpOr6eOrpXU9YQbqJYe51oQxbcLrCne3pNW0
MQ/oKQy0ceI7r/HEF1WTN4UxzXa4sqh6yUtbmfm11GeMJn5dJDUkMozeyndt
ouop2ISIVCl6RbXobHSpRp0n7RxnxkZGDFd5qUYt/qCh4mqQeWNdPecRad5d
Ny38wY14sCLeWMADc4F+g5hHErJ0isj6kZe0YutrMC6T4UtSu8Fy/76QTaVi
yfxB5d2eVN78VAMLDsZUEP0nk7KU7jXvjTgJzau4oZ/Dy1zjv4rBwBRqu2a+
ymckb1J2COBjLDq1wJMWyjzn1apBoWA8Tryig6eI9e2NIzo6GD25dkE7b7bC
cnvHsCZqoArtoaqrfkWSjieLpaXgHsHI1M+sLSRpPCKRhm8y7yXpDt9kPeDB
35zfebovPGHBc2QexzN1I93RflDkT3Hh0Pm5dS68OTqGvhdXMpQxai3rearj
qzT/30Q2+Szu4iaKjg0rTYil6aU4YSKCnosJxqxUn7Tn9Jeq1C10oQ85IL+H
SeHfj9p+n8s+Eu3COMBjrOExCpNOiRhC34YMXyzDt+mg72Cqr3mqbw11n9pS
LNZ4WSzJKpY3N7ZW+26+1l1M75VdExZ/rT3euimEncel+HFFXlzKrvweT0pX
ZVR3Jfe7jGgX1QM81TU8VbSwqnDmbxkzSRkzHxyc+TZ15jxFG7TwMmzl/GUr
la1WrpnbXqPdnq/VjhbuwsSn28VGTWKjPCHFTyjyEqKFMyldp6O6D3O7D0e7
qB3gqa3hqaGF1YTHGzKOYxlLHyrZDyramyvao4UdsBHzZSN0qxH3uW9qtN/k
a71BCw9iLFE7i9LEouSxKH4skRcLLdxEYQVFsYO47KBok6ADPPU1PHW0sLqw
5E6GBTnD4qGS06Cik7miE1rYGfMyWeZFtvJymet1Q9vrrNYHtDCXJM5qF2s0
iTXyxBp+4iwvTBEWZiryF0dtX8zdvjg6YPEB/8VreFqFe0W1s8j8bKHORdsv
3Fki//znDZQkRlrSoW41BUsd6vwjWpoNfHjpRby0VSdephAv/9DAX64kXuoY
Ey/T8Jdqm5j4y9sr8JdjRvjL7/SJmSPES18X9PLGLE8eS3RGjxqqH56UjJUJ
9fmtQh0yWSec2UhirMQtPH/NwRqDYF2duTkvC7lMi35XV6XlOaa2yObg5cyX
tdp0M7Vzemm27rStDfxyLTpdkfQ1qWYl4zCJWss/dNCBXu5v+9Rf35yeqdJF
SlMVG7OEz6j+hjX8+hodcL0fcunD/tmk1ckaoudg4k0hycdN3cv9Oa9IBjDl
WVrNPyNP0j/4Z/N8pkZGuhw39X6lTn5BPiD0p5ho4XSPyOn+6yB3TrDunPk4
3aH9rt0HrXNMI8v9IxUThDRl8ovkBJgVQKfzS3mYEkeH8PU1C5O/yQmKPwvO
ReYplKsvWhjsn836K+2ZqstZQ8SCG3mKhTNzEGEoevzwC907IPtMeXKomopC
1msnq19qUn3IO0rPzFpPVg3WLVyIk3C139XhK/sc09Jy/3zRN62IBPJROQne
chJ+WEQ+nhPUWs7PBZ+t13O8VpjuTyHrxydh5f5jX5DnmDMzDQ2ePzPlJ6dg
ujasFCF2fjWH6VYkZYqKB9O/ZdFup2JlXDPQZGsq7v+5cv/vN+k66JO2hIET
qtHvZHVdJ9Un+YoedWOh0rcoapQqTUUNhTz5rDET+lc+VAuWSHjBbiHTrabL
qagyhKaZjh03pYuSDnExyurrwrmwn3k6vt9p+UwXNucrnzRLWxEuzkBGvytF
dXOOKUsUrrOZtDAkGUyOtVBucg3kKdVZZvAXBeu21qgShC4tVb9s1e+f3cUA
0d02mWtOZzKayIQisOQMyus0Y/evTiH6PVXkUa8YUbEdUeHLzgf6rdxF/Pr8
UlCXVQvnIj3TJ9lK5yJdwYrb2JVcCmogK9Gn7OxxjUpFTpCnyJq+knFIRaGW
+41qUDZf1dwINFaGNGaE0/uXnN7yDOGSYN2nLDXCAmxK1e/Z3PDPrlEt98do
1z1VkLVdl6u6SWVK1YeWJTflBGVS7OnnkWS7QLIdIQd9km11LMzR+80c1VJ5
M6MEmpZMBYp1vmp5A3Z9Hiu2VUh/IsTseTpjJpR6NT0maSWWx9ISZCXx01XF
wiX0/BkprkssmW8gsRylkqKTM4UrqY8NbFjJ11jC9czsqgbu9TqqW80shaYC
imj2Pl5tkuc6hQbFH0h11Pp1CgqcdlYRVecwnr147wxJYXctH9UaKDTrz6Kb
7Ik0yt3fVbeQZBBdF6l+xXi2FkwsQBOZzJpIEUuPzyFS4kyBQpnFnRpaAnPd
Hm+WuLVWEDK0cdYvCnFNqiJLvQs8npDP12NydnEZJFJmor77MkZt2E9URVIU
KbymkGSBU/EGp4ICVPxulBR/17KLZ6jApv6qmMzPf5vOWyG8q/milruC1UWK
oml/oDL0mO5cjE29CancM1W8N+fWQpHhGx4nwHMr0DNbbP6Lwn7ulxosbSEN
hoZqIHo5hlP0fn5Q4S+LO4O0MwS9w0DvnIeavygkNKlS1mbSwj2ZLO2jaKIr
F6tTJe8T1hK4YNN8zQrYyDzThXPPP4lFVh49832D713NFJdqtbBMw3JgdLh3
kNp7VQ/yfbXa7ibDd7ykg8O9HNrAAz2tk3JUkii+JW+mQDMriaVzMenQxVXU
dg/SVVBXIVWhSekGy0gX138N0r/5SzalFvSf5Ar61x8k9F9jDDrWlDawkI67
mNy59DsHAvM7IFJG0vMjaDedn4qSMV3cECmbQrK6nFfOSOZnn9FaZ4yHK91U
aVO926JgJfczemlFTA0p8i8dDXl8mEGa8vKmOSFZPmmfuafiEcttJrVg3fB2
KxKK9aYsYZXBFa2DGsrrAoHY8e3YeGzD5jnOlq8WK35muYtbf+srJmhZo55G
Gu6rKaOLPSNZ0Xqg+8PQm6VHIjGW0ZeSqQQs8/x9dT5778nYbP+ZX/BwGnlA
418pS4KVvIDGyotZWmeAxkI5jSn6chpH5mDf+FD/I0wlYpj3Myer5f4Sn+TN
gJgeaGjDPM4rDToxUewI7mqY5E+54Yj7eY3ClJ9rftu1Llg3wH8W4ef/KVVf
tGn99mxsVrk/M4NzSQOFdIukKT83nzHl539tItscD8pX3EL4eSDs/lkt7O7D
MuNyuDPQvieFIJpCilUtLJLynA2hbAb0vmTjmcZDnmn+o/QqMPvZrChCR5eA
/61/Wgcr7YIc3ho5wwLxHz9DriM7Of8hpg3f+KRte5VKJDbtftcT32oeN21I
DddZs319Y0oyVluznkWE4py0B1zmg1Qpl+JtR3kUKUpTreeXGrvP4OQEjSn6
ESzEAwtbH2T4JPu+SjuzbDDFA+XGvxWmcmPShimK5/sprQzKPqPfCBTDMy+9
tu1bK+M9dpnhOsnOx2cgiXnKJaYzE0mMipLgVvLnx4Ow9MipEMzWFh1CCScd
JRzaC+3FtjOBzUwhhoAGQina/9n9rQ91t076VJSP3hisdDPJdw53MRcNDZiD
447P5aKMVQoMyjY2aDAGVJCO55k9peoZ255vz+7SL/ePV99Mmoni9mY5dcKZ
cpTgm7zleJB3eiw9HonTzaDf9atjFsdNWcQ6sWAXvq+2Z+cblPtflHjPQ+uQ
feTrXJSv85cv2fd4UHx6PJ06P7nApv2QPiC0mZdUfUyAze3rdoiyGxC8y3hS
aBoFoC3qjE3kQRiilntJdRsa8t0Pqr74v0E76o41JD2aw3X3IAeW8uhN/Gye
4UvCSJLSpU0u592ClZ4n/QD5disouZTIt4ryfHucvy1Y91WtYfL+u4qT1YTX
8Xy9tD+3xqZCksa2yZP0H/JJO45zfYN1+42NyLnfAHREQy5+g7tdnNzsAswK
j/lQBV3puNmdM+x3FR3XPW5aSNMEjIL5whQWgVH2yqfsMGs65pOWMEZMUTDq
d/1Od1c2ywjMTsuN6xIftXIzboEjz5yKcu2+9SEnsFoBD3QpAh6gP6bT8/Wo
nNJjMcgTarTlkUAgX3+fGfO4T9rXtgfx9eth/W5do+OmY7QnQJLQD0h6RZCU
KJ9yw4xz3Id61PMgmBYynS/8gx6lNr3klvu3ulB9LXMWK5JdeMJArBAAh5DH
yXm4Uhkw7/pgP+QUnlQ55g2SI9lipcDgbOM5biaQ0hdD/M0Iy/EhZ71Kq+Xr
ZgLlaXrkY6Qp+PLcrBAIzmIdnDLsUjBs97N6VAeh7teITbGu3OFz5TS/MWuF
WTk5k2zO6Xf9Uc8ZcLtSsgQryw8GNjMl+JST8inDZmMw5dsQYsoc037XO3rL
j5t6HgzX+XvOl1+kgSFwv5Qbwj7qlCGMnxDuCtbdSjYj0Fo2oJ+ILwKz801D
DMDuT4PdnzXAp9yQT5mdh4UF64bcIKZkHStV94h2C8rGzMr96TOvXtVFjndV
7jAcvSmHUY5JLj4eVHrw5GQgfe5U1BwKEPY4rK6430LkQ81rJcg/ZwaVisHy
M/sA6ZFPANJLyc3/4nlyESxKJuBbq5yaqDx+eLBu/I25BAMnAW7GeAdls+YG
Kw1uRzntxVxqRMyu83ppPpF6V/EYqycXedk/MXZuwwkfaiHzK4KAuRBj87yO
mw6C/GL9wxuR/IThcvn1y7e/nVcTEazbaLKIfAr5q9JX0qbIC9rBSvXJwXO4
nCY9lB52zGFhmqcR0m09UYIo6JJTkFItN5Ubczl5PmlXWV9NmcqgBUK65J8R
/1e59c+THyRNQ7p/bzT4/XiQucov8jBrFJRds7Dc35v2sFYPaeGhXAtcA3n4
EyS3HA/yVCkmtNAEWhg+mO6TXPQqjWTodSECmf0mmrxOipGH3FGlkC+zzyx6
aoIHJh9gtP2CYbBSa8CkXxnH9QfLm2+g2QDNR10H1s+lvDkvbAXogs0kv1Lw
j89jMB12cRV0AdN61qynJiNM24LwzpE/fuMWAt4ROgBIcrF00A2MA9wxnAYg
yZs/l9IHIKn2KZNbrXa3v0hNkfZQVbR6eP0bhOnG1KYwncuYHNOxtfLvL6Rs
bViBY7rns0bPHPRcc1ezQrHSXbiV5QSotd4dn/JePmWuVuH9hXXbXhBTNLVH
zxxvWntXs2HFMsah96/UFEnJvHEugWy5FtGsDo7CX90OCDz3UqbAc5cTAqMM
BJ4Ziu+W3uFoR2sc1tHSpicnjbhQZ5Is13K1KTOTONrirVtZzkAEi0SaxMcr
XN9/4/wLI8Zfu1bM2w3QMWTpubuarbC5g4VzjytPuJXrTGBtQFajlClk9adn
F8zaV6tda5WumEz3bU9Pc42wXJup3cEZU/hYqA5wnPdRDscH1aeKgj9da+n3
LId/9SOKgv27jb5Q//bXhSS/4d4u6kS3Ew51IwedB1wR+mXRjI+6aOVAVzTH
5a1r7UFgCq2yoCZzXN70RE1dYHX2WKYssKZDC9f0Li4gW4bZUVIAIFsWA1U2
z1OIysYWwWGeiy4dwWF9MA/jjWcYP6NJamAehSc9qU/APMjpgK/4gSEpYJyE
v3JTOcrBIVbG9GBdLtuKcP1qiF1HxgKyu5aU+9eo6nkZIxfQS5ZXbsbyyk2S
zMkNYqo+BBfAmG5rtg/+3ZC6cgYT3NubTH7V9uyvM5Zna9zAB1hp1PyI9Dfp
X5iL+r04pmCb9HeKJLA1Hl2D26l2UucBE9lhXWimhtpGVFtoyGuL2UlTRvWD
VsVGkwt5QRzVR0zc51Z2O1l9HiDxIT9k2YG3PaJD8rPHaQxhy9HFt2T73CD3
jN8JlPLCqt91z/etOabcjHCdWcs02cpkBZFtMlGWCnMBGhwB6uPx4PSKPhWc
fv6eLwnW9a6zJgT0O8TG7Njt2Xzrcv+mDPs1bARtHOQCapBvvuMY2TM3KD6j
lYgRXwC92/7K8CG3IMjbxf4E8joFwCIp7SbcxYNs6O0yQUHD+Kg8aOxW9gzN
5tmEsAk0kwFlyWvHYKUA0T4z7mKmKUxJMMPjzD9T9ih7h2bX2kQSU47DlLsH
lwcrhXynR23imC4/C2jf3XQS7Z/3t2G67eh2auKfvMu3eiL0oXB0wuljdEaw
brvxMiI/tZWqh+UNB2djy8r9IyWfj+Ncb5ZzHW86xfX8U+QtuUFNqk8Js9i3
fbD9oAQXQGy3U1H8WVDYUwDMTgGXjqIgGagkD5LZcuL3K8cD8ctq2F343p1g
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
2huO+p8Ys39QLSxTrZ+vNtREfYmphzWpPeOqv8JyXG0LgUcKt7TOoSjJ/pGr
Q42rXpOrrZiC5DB9epfas67/afojEVBumzO5tR6Iq4liL5++i/U1VmhjextR
rC40whIxd0zxEamJpnc4CJuV/6SGQ/ASho2RBmlCheFa6jkloYI3Zt8qtCVn
YiqeYSxDcpdIlaqF2hwTkrdwh8h4Zg15k97h39AK+Z7ECglYDYlFEhSSLpFZ
pFnCJ3xvUiH2iPrcRBhESSJxfyb9hvrzn/BDYNk71K9bP8K0ROwDJqRwyTew
VxShGvYZq/WM/kt/wyeY4Ysz+jeNDV6e0X9So991xuBGkj62h06LzUmPwuhx
8ek27rQ4TvreEMoeYbpNSHpkPi0au2us3+pveJvEan9m8IRr8NcZg64zqq+M
9euTDG77G06fHpkeGfk/Tf+r1uClsf7dya1VnxjrvyIZyKfbiBVGcXvGQFyb
uDqYAMsh16r9yVEHBQ2y1P/kqL0GyePKAut6MV3RPPtSkd3d/2pdhHH+5ane
B1rmqj9jqb3xVBv6l504pCB1/9fpG9XBqp/x1f78r3ZSWPuaEPgTbJDSpY4p
IYHb6PhiCzGDXfwq3DGFtqCOMVDHOJ9CopJqaHpiDlMYJDKhkiKpPKFCKBbG
usnCGvkUHpUSSdUTWzKFS1u5OTzSyVrqcwaji2GjFcJUIP18xp1iTM9UTZnN
rNHFVkNsMIJYPyOFm8NSqEsR5jC1ZpC33+AzbimQVpsp3Fao9TZjrut2nKFM
OXQuNJn7+QzqzjIzhcYU0p0ipVob4y4zRt7oOnqVEoVC9ecYM0VKtTrrmGKL
HBY/kMNjFSrV6xxN0j1Zm+LPuNvFMFNoVSCpPuTf4MJbY0+REk8X9jY8UENx
GFN0yBfZCNN3h1BiwX4u0g608pVBXH35tD+R7mhxGG0fhxaVT9vDooVh6lGR
tN14G3USA6DNp0Xn02K5NHBq+Bs9gsCFNLCh3SxaPIQXIW0fkxZLTMTf/sKk
RQlpa9TpGpouaYePYiQrl5yT47XX7A6UPAuN9VE7dG8r5z+MwIQ7vLtF14/Q
nu22Yd5eufNg87AW/XvG9V7/vYZz7lzlWuasy47qeOwwp8s2xRJkipK0sAuL
dU8/Sg/gwLMC/F9LYlyyhJQP+RVjYiQMkq0a3/33ezdE2EG8C8MyeZh+Taay
YT/LRRgIz3T4X4jZCo1/93lRm4L9NjkMI0VirvMHI+ez8BH4HyFFx6uMFkMi
YfI/sNQaNxNVuhCo4eI9XVjapqVnd3OxSRoRjOCc2/HNbQq5a2pttN23F634
QDN5aiXY7of/PKjH6EKFT5d6/XUWiYkpT42qAQbdbrpQWDg+IU1R9ezud1Qu
pvXpjvYn7PgUDKeCxJwc9lrtBRXDrNAw1uQwr9N0NYy1e3ImC4nrmvNnhhg2
iGQjnOTxdurZ5Rg5/1P6f1dfIQD6FTBc2Dj98233fSSk9Q/9iZtSyUwEuoRy
+kPmzVYk5sjp/7b5LInkOakNfEflU2e9gEryJzt+7h528V8Sm3/q7CYSHVOa
6kI7Rq6gXsYUahQ+Hfbkhi8MU/502JugSiBM6x/Buu9imlf8RsIyFcloPUvD
HB1djXWZh5XMVt1UcJ2tRTZdie0QKhfnUOwPY5kBaP2rIN1j8O9SulC//pl+
sBZpudjVNqXusIuQtjeetidnN4MIg5BklzJcDG/UGjSe0Q/mKOLDRHp3Kcsb
XJcfpiy/G384OpK2n07b6w6RmbYvkhIbnx7JSte9q6H2JlPtGUc9nKPePag2
6Km2lFlv8BRitbHBDX/DYM5BhwqRQxOkP4pjhcgR5fFBrVg+bX8IbVlIehT8
LUyPzEyP5NNizWmxY4qwbJww3Y+evlsnPSonfW9O0kLIsP1dau9qIGNSAhrO
6EPquYv/3e6vf3syfVD/yHS1gyyfg/9dWmd7dDJTL4FNPyQ7PKI4FNYxboWm
R3qnR0WKokNo8fz0aJ306Px03cbP1Psx9b891V5kqnVPBfalLHOD9lrDGzzD
h8b67UmG7V36L54Z/EUyDNbZCKDF/iTEec85k4zw0+PiafE5G9cNZ6ojCRju
MLztr//K2OBprUECCeXKu8YGg/7UTaki27t1DoWuy0EgH244vnB1EMNj3eFf
lYHT9Digh07bZ06Lykna2g0IoUbtT0gxHHbtQ57hi2farc8MngIB7roOhaLl
RSK9lDrbwzjCKa21a6gDHh3vuhfthjzIp+0GAXqn67bdVHvDV+/rIhKf+p8s
9RFPtXCmWjcHT4hdCKq98FQb47Cfv/HXv5Fk0PpM+w2kdWODemMD0OArY6Ng
Vh5gtuWlFLujkBm9K0D7wOw+oNM9PS6ShmF7wVUswcaiDN1ZrmKGrlKUpTuL
nXQ4K+uBWz7TPNDRwtLlSKbxd7bMamyGPh/7T8Su4Cj/MJZrRFhk6K6gKJbl
YoulizmLLVjBEVGsdaHhMfGseFsblrmN1aKA0Oh5LPM1/uEx/lF7WZZ2C1mW
HEvLeZtigliWFqw1MeH4M8vCwt7S1t7KAluqUMtI4rhyGtz5yV7+23/ZuWc1
e8Ge7/RMdf4u27996TcqO/dcXfDNibX79+iZsrzKJ7s0fly7nS09u3bnAj1T
c+wS+AykJExFOcocbJG2zzsyB/ivQ1C1qS75pf5NQC085CovkYCQjmdZdfPV
ejzBdNRfIANS7/FUGy4UJtH2muOWHZ++m9Crd+TJOtsiksM50fKjEPuwBxA7
qCjO3XU8J3I4CQYLkAHwNWDqOhR7/EG2wRBIZyhEaaqAQ6tDn5Z5koZwtrmY
PC/fxTyZvCAneb7oUD6Pd7SGztU4yrM76rJRy8Pi6DqlmTM1VmJ0zkosmUVH
/405Y28hDxXAwiarGjI32jR1oL1HmZqSP2fFJ2mHJ2nHnwnS8/ts757ooDA/
Pw//yNXhgUHxQYF+K/38XP38vIL8d9lY+Xn6b98ZFMiLivLf67c6PDroy6Ao
6LWY1j859H+/0/L/p23tWaax/lEWdpbWHv6h4X4rY8K3R4dGhM+x+NcjMc7K
b9Jq/fzWB8VtCNgRtD3aD1/Q0z8qenNoUByi+b+y9187/+Hjn5brNBaXWk51
bI4IDXT3Dw+EzT39/rXpf1/d8v8uagkRWy7lLPu/lG7b/6N0W/y/TLfF/13U
TknZ6v+sD/5/R7f1rl2xYYt3RURELo4FkiOiQvcFLQ4K9w/YFfTf3sSFBkaH
/PMiMHRPdFRoQEz01Byo19wYZnSKzk/Mn7b/GunToExau5mhe/4nZlHQr4Wh
dw8lNefOdOn5Saei38figEFRMkZxekVx9jZO4f0cwBRxPDczt9fQBF20BXTL
LpHToGimm+4gz2isVrmWkT2zTjeH9EsAl7I0ZDMzdHKYNTHsxmzbBVQbb9GX
vzZRd2KXWe1C9fEa9c3MiMlhtpOr6eOrpXU9YQbqJYe51oQxbcLrCne3pNW0
MQ/oKQy0ceI7r/HEF1WTN4UxzXa4sqh6yUtbmfm11GeMJn5dJDUkMozeyndt
ouop2ISIVCl6RbXobHSpRp0n7RxnxkZGDFd5qUYt/qCh4mqQeWNdPecRad5d
Ny38wY14sCLeWMADc4F+g5hHErJ0isj6kZe0YutrMC6T4UtSu8Fy/76QTaVi
yfxB5d2eVN78VAMLDsZUEP0nk7KU7jXvjTgJzau4oZ/Dy1zjv4rBwBRqu2a+
ymckb1J2COBjLDq1wJMWyjzn1apBoWA8Tryig6eI9e2NIzo6GD25dkE7b7bC
cnvHsCZqoArtoaqrfkWSjieLpaXgHsHI1M+sLSRpPCKRhm8y7yXpDt9kPeDB
35zfebovPGHBc2QexzN1I93RflDkT3Hh0Pm5dS68OTqGvhdXMpQxai3rearj
qzT/30Q2+Szu4iaKjg0rTYil6aU4YSKCnosJxqxUn7Tn9Jeq1C10oQ85IL+H
SeHfj9p+n8s+Eu3COMBjrOExCpNOiRhC34YMXyzDt+mg72Cqr3mqbw11n9pS
LNZ4WSzJKpY3N7ZW+26+1l1M75VdExZ/rT3euimEncel+HFFXlzKrvweT0pX
ZVR3Jfe7jGgX1QM81TU8VbSwqnDmbxkzSRkzHxyc+TZ15jxFG7TwMmzl/GUr
la1WrpnbXqPdnq/VjhbuwsSn28VGTWKjPCHFTyjyEqKFMyldp6O6D3O7D0e7
qB3gqa3hqaGF1YTHGzKOYxlLHyrZDyramyvao4UdsBHzZSN0qxH3uW9qtN/k
a71BCw9iLFE7i9LEouSxKH4skRcLLdxEYQVFsYO47KBok6ADPPU1PHW0sLqw
5E6GBTnD4qGS06Cik7miE1rYGfMyWeZFtvJymet1Q9vrrNYHtDCXJM5qF2s0
iTXyxBp+4iwvTBEWZiryF0dtX8zdvjg6YPEB/8VreFqFe0W1s8j8bKHORdsv
3Fki//znDZQkRlrSoW41BUsd6vwjWpoNfHjpRby0VSdephAv/9DAX64kXuoY
Ey/T8Jdqm5j4y9sr8JdjRvjL7/SJmSPES18X9PLGLE8eS3RGjxqqH56UjJUJ
9fmtQh0yWSec2UhirMQtPH/NwRqDYF2duTkvC7lMi35XV6XlOaa2yObg5cyX
tdp0M7Vzemm27rStDfxyLTpdkfQ1qWYl4zCJWss/dNCBXu5v+9Rf35yeqdJF
SlMVG7OEz6j+hjX8+hodcL0fcunD/tmk1ckaoudg4k0hycdN3cv9Oa9IBjDl
WVrNPyNP0j/4Z/N8pkZGuhw39X6lTn5BPiD0p5ho4XSPyOn+6yB3TrDunPk4
3aH9rt0HrXNMI8v9IxUThDRl8ovkBJgVQKfzS3mYEkeH8PU1C5O/yQmKPwvO
ReYplKsvWhjsn836K+2ZqstZQ8SCG3mKhTNzEGEoevzwC907IPtMeXKomopC
1msnq19qUn3IO0rPzFpPVg3WLVyIk3C139XhK/sc09Jy/3zRN62IBPJROQne
chJ+WEQ+nhPUWs7PBZ+t13O8VpjuTyHrxydh5f5jX5DnmDMzDQ2ePzPlJ6dg
ujasFCF2fjWH6VYkZYqKB9O/ZdFup2JlXDPQZGsq7v+5cv/vN+k66JO2hIET
qtHvZHVdJ9Un+YoedWOh0rcoapQqTUUNhTz5rDET+lc+VAuWSHjBbiHTrabL
qagyhKaZjh03pYuSDnExyurrwrmwn3k6vt9p+UwXNucrnzRLWxEuzkBGvytF
dXOOKUsUrrOZtDAkGUyOtVBucg3kKdVZZvAXBeu21qgShC4tVb9s1e+f3cUA
0d02mWtOZzKayIQisOQMyus0Y/evTiH6PVXkUa8YUbEdUeHLzgf6rdxF/Pr8
UlCXVQvnIj3TJ9lK5yJdwYrb2JVcCmogK9Gn7OxxjUpFTpCnyJq+knFIRaGW
+41qUDZf1dwINFaGNGaE0/uXnN7yDOGSYN2nLDXCAmxK1e/Z3PDPrlEt98do
1z1VkLVdl6u6SWVK1YeWJTflBGVS7OnnkWS7QLIdIQd9km11LMzR+80c1VJ5
M6MEmpZMBYp1vmp5A3Z9Hiu2VUh/IsTseTpjJpR6NT0maSWWx9ISZCXx01XF
wiX0/BkprkssmW8gsRylkqKTM4UrqY8NbFjJ11jC9czsqgbu9TqqW80shaYC
imj2Pl5tkuc6hQbFH0h11Pp1CgqcdlYRVecwnr147wxJYXctH9UaKDTrz6Kb
7Ik0yt3fVbeQZBBdF6l+xXi2FkwsQBOZzJpIEUuPzyFS4kyBQpnFnRpaAnPd
Hm+WuLVWEDK0cdYvCnFNqiJLvQs8npDP12NydnEZJFJmor77MkZt2E9URVIU
KbymkGSBU/EGp4ICVPxulBR/17KLZ6jApv6qmMzPf5vOWyG8q/milruC1UWK
oml/oDL0mO5cjE29CancM1W8N+fWQpHhGx4nwHMr0DNbbP6Lwn7ulxosbSEN
hoZqIHo5hlP0fn5Q4S+LO4O0MwS9w0DvnIeavygkNKlS1mbSwj2ZLO2jaKIr
F6tTJe8T1hK4YNN8zQrYyDzThXPPP4lFVh49832D713NFJdqtbBMw3JgdLh3
kNp7VQ/yfbXa7ibDd7ykg8O9HNrAAz2tk3JUkii+JW+mQDMriaVzMenQxVXU
dg/SVVBXIVWhSekGy0gX138N0r/5SzalFvSf5Ar61x8k9F9jDDrWlDawkI67
mNy59DsHAvM7IFJG0vMjaDedn4qSMV3cECmbQrK6nFfOSOZnn9FaZ4yHK91U
aVO926JgJfczemlFTA0p8i8dDXl8mEGa8vKmOSFZPmmfuafiEcttJrVg3fB2
KxKK9aYsYZXBFa2DGsrrAoHY8e3YeGzD5jnOlq8WK35muYtbf+srJmhZo55G
Gu6rKaOLPSNZ0Xqg+8PQm6VHIjGW0ZeSqQQs8/x9dT5778nYbP+ZX/BwGnlA
418pS4KVvIDGyotZWmeAxkI5jSn6chpH5mDf+FD/I0wlYpj3Myer5f4Sn+TN
gJgeaGjDPM4rDToxUewI7mqY5E+54Yj7eY3ClJ9rftu1Llg3wH8W4ef/KVVf
tGn99mxsVrk/M4NzSQOFdIukKT83nzHl539tItscD8pX3EL4eSDs/lkt7O7D
MuNyuDPQvieFIJpCilUtLJLynA2hbAb0vmTjmcZDnmn+o/QqMPvZrChCR5eA
/61/Wgcr7YIc3ho5wwLxHz9DriM7Of8hpg3f+KRte5VKJDbtftcT32oeN21I
DddZs319Y0oyVluznkWE4py0B1zmg1Qpl+JtR3kUKUpTreeXGrvP4OQEjSn6
ESzEAwtbH2T4JPu+SjuzbDDFA+XGvxWmcmPShimK5/sprQzKPqPfCBTDMy+9
tu1bK+M9dpnhOsnOx2cgiXnKJaYzE0mMipLgVvLnx4Ow9MipEMzWFh1CCScd
JRzaC+3FtjOBzUwhhoAGQina/9n9rQ91t076VJSP3hisdDPJdw53MRcNDZiD
447P5aKMVQoMyjY2aDAGVJCO55k9peoZ255vz+7SL/ePV99Mmoni9mY5dcKZ
cpTgm7zleJB3eiw9HonTzaDf9atjFsdNWcQ6sWAXvq+2Z+cblPtflHjPQ+uQ
feTrXJSv85cv2fd4UHx6PJ06P7nApv2QPiC0mZdUfUyAze3rdoiyGxC8y3hS
aBoFoC3qjE3kQRiilntJdRsa8t0Pqr74v0E76o41JD2aw3X3IAeW8uhN/Gye
4UvCSJLSpU0u592ClZ4n/QD5disouZTIt4ryfHucvy1Y91WtYfL+u4qT1YTX
8Xy9tD+3xqZCksa2yZP0H/JJO45zfYN1+42NyLnfAHREQy5+g7tdnNzsAswK
j/lQBV3puNmdM+x3FR3XPW5aSNMEjIL5whQWgVH2yqfsMGs65pOWMEZMUTDq
d/1Od1c2ywjMTsuN6xIftXIzboEjz5yKcu2+9SEnsFoBD3QpAh6gP6bT8/Wo
nNJjMcgTarTlkUAgX3+fGfO4T9rXtgfx9eth/W5do+OmY7QnQJLQD0h6RZCU
KJ9yw4xz3Id61PMgmBYynS/8gx6lNr3klvu3ulB9LXMWK5JdeMJArBAAh5DH
yXm4Uhkw7/pgP+QUnlQ55g2SI9lipcDgbOM5biaQ0hdD/M0Iy/EhZ71Kq+Xr
ZgLlaXrkY6Qp+PLcrBAIzmIdnDLsUjBs97N6VAeh7teITbGu3OFz5TS/MWuF
WTk5k2zO6Xf9Uc8ZcLtSsgQryw8GNjMl+JST8inDZmMw5dsQYsoc037XO3rL
j5t6HgzX+XvOl1+kgSFwv5Qbwj7qlCGMnxDuCtbdSjYj0Fo2oJ+ILwKz801D
DMDuT4PdnzXAp9yQT5mdh4UF64bcIKZkHStV94h2C8rGzMr96TOvXtVFjndV
7jAcvSmHUY5JLj4eVHrw5GQgfe5U1BwKEPY4rK6430LkQ81rJcg/ZwaVisHy
M/sA6ZFPANJLyc3/4nlyESxKJuBbq5yaqDx+eLBu/I25BAMnAW7GeAdls+YG
Kw1uRzntxVxqRMyu83ppPpF6V/EYqycXedk/MXZuwwkfaiHzK4KAuRBj87yO
mw6C/GL9wxuR/IThcvn1y7e/nVcTEazbaLKIfAr5q9JX0qbIC9rBSvXJwXO4
nCY9lB52zGFhmqcR0m09UYIo6JJTkFItN5Ubczl5PmlXWV9NmcqgBUK65J8R
/1e59c+THyRNQ7p/bzT4/XiQucov8jBrFJRds7Dc35v2sFYPaeGhXAtcA3n4
EyS3HA/yVCkmtNAEWhg+mO6TXPQqjWTodSECmf0mmrxOipGH3FGlkC+zzyx6
aoIHJh9gtP2CYbBSa8CkXxnH9QfLm2+g2QDNR10H1s+lvDkvbAXogs0kv1Lw
j89jMB12cRV0AdN61qynJiNM24LwzpE/fuMWAt4ROgBIcrF00A2MA9wxnAYg
yZs/l9IHIKn2KZNbrXa3v0hNkfZQVbR6eP0bhOnG1KYwncuYHNOxtfLvL6Rs
bViBY7rns0bPHPRcc1ezQrHSXbiV5QSotd4dn/JePmWuVuH9hXXbXhBTNLVH
zxxvWntXs2HFMsah96/UFEnJvHEugWy5FtGsDo7CX90OCDz3UqbAc5cTAqMM
BJ4Ziu+W3uFoR2sc1tHSpicnjbhQZ5Is13K1KTOTONrirVtZzkAEi0SaxMcr
XN9/4/wLI8Zfu1bM2w3QMWTpubuarbC5g4VzjytPuJXrTGBtQFajlClk9adn
F8zaV6tda5WumEz3bU9Pc42wXJup3cEZU/hYqA5wnPdRDscH1aeKgj9da+n3
LId/9SOKgv27jb5Q//bXhSS/4d4u6kS3Ew51IwedB1wR+mXRjI+6aOVAVzTH
5a1r7UFgCq2yoCZzXN70RE1dYHX2WKYssKZDC9f0Li4gW4bZUVIAIFsWA1U2
z1OIysYWwWGeiy4dwWF9MA/jjWcYP6NJamAehSc9qU/APMjpgK/4gSEpYJyE
v3JTOcrBIVbG9GBdLtuKcP1qiF1HxgKyu5aU+9eo6nkZIxfQS5ZXbsbyyk2S
zMkNYqo+BBfAmG5rtg/+3ZC6cgYT3NubTH7V9uyvM5Zna9zAB1hp1PyI9Dfp
X5iL+r04pmCb9HeKJLA1Hl2D26l2UucBE9lhXWimhtpGVFtoyGuL2UlTRvWD
VsVGkwt5QRzVR0zc51Z2O1l9HiDxIT9k2YG3PaJD8rPHaQxhy9HFt2T73CD3
jN8JlPLCqt91z/etOabcjHCdWcs02cpkBZFtMlGWCnMBGhwB6uPx4PSKPhWc
fv6eLwnW9a6zJgT0O8TG7Njt2Xzrcv+mDPs1bARtHOQCapBvvuMY2TM3KD6j
lYgRXwC92/7K8CG3IMjbxf4E8joFwCIp7SbcxYNs6O0yQUHD+Kg8aOxW9gzN
5tmEsAk0kwFlyWvHYKUA0T4z7mKmKUxJMMPjzD9T9ih7h2bX2kQSU47DlLsH
lwcrhXynR23imC4/C2jf3XQS7Z/3t2G67eh2auKfvMu3eiL0oXB0wuljdEaw
brvxMiI/tZWqh+UNB2djy8r9IyWfj+Ncb5ZzHW86xfX8U+QtuUFNqk8Js9i3
fbD9oAQXQGy3U1H8WVDYUwDMTgGXjqIgGagkD5LZcuL3K8cD8ctq2F343p1g
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority12" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[NeuralNetworks`NaturalT, 
                    NeuralNetworks`SizeT], NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority13" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority14" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority15" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority16" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
8Z2eyHfad1l4JVh3U+CKqZ22rlUNVvJKqQBjvww7YfhOKaXynYIX1MBOs0Ll
QngcdckneebrNN7XC35BAf3igsmAXu5f+mO5ywJlhZRk7DeMr/3hKAAKLj2Z
pNO+OZMnLPfvGvvrsqXtIkXFh3SXpv8Abqjv6oIV6/NL2tcUkeej0/MiIMGW
KAMfykloXMC/7EPV3isnYUhzwc8i7LhpSFbSIS5fw9Y9S2W9CsRMR1zznoum
NH+oMrk1N0iYpTOl+S0Fv5j8B0lJG0lJO2vzC/IfyM5m4VLyVZmS0qGCmuJg
3cDAlVNS6vrqMvpRimzWSlA9aeW5WWWsYmQyOKkKT+SkvlnQCqTOvjRFatH4
oR99knVfpyX9cPkRklbNon+kFbmzCJJRuM4wt8Trq2Ty6zT/7su/n83nhjNC
ehfnLyplZ65kHu7SbC/XoJxT4XFYFJllCrfy78HFiptcSELP2VrubDpvbxCr
VUMkgvdMkeYvi94pX0TF3zuke6L4eyLnat9VYVWw7q4Xcq62rrvWoA1c5SOu
klYOs1Yujl8C5N3AUyOvCk+NwMX82Sp/78wmrYqaA2XzT+AgYTd9v3pjzA1W
Cg/MN2HucsvNUnmFFHAAV0DpErnD3iLLIC1nGUwpoM7iiUk0UoA+UoB+1o4X
yR+QyxKkjslJ/fsqvx4qw3Orpkjdt7AkWCn2nB71h+rnXyGXrZ902Vdpz8hX
34Fo6arK8Dqs/gWI0u4G45yGgontd9Xh9dhr4KCBf5duHH81XMdJq20JbqFl
3F9ZMwa8uKYGLAWKImYJKcGCTm0+eZnHtdJgadfrABq0wY+oudvxI2pjOvXb
PEUHmztdbGdNsOzNAJU3f/nWem0Tew+VtO7TnkF2B0fLOjtAS4FOtaUSZ/NY
hptwq3A71ABH3RDIvHEEB5kpADIFs8SPF1JyUlZzAjy9YZvZpy8/WsjLadJm
aQ8iMvzx4mRQTsbnFxWDbe6wzLZPkUHdEcdZyzErUiZFkXJqC0kPlPEyYzsV
lRlMKDO+/SI/+BdGoJcZFCf+qVCcnLNR+0UhyGUJcJqpC1tY4JxGBsu3+EEx
3OYO3+zLqS3SdiyzXhtpFqgOW+TCFknq+BY75Vtc+4L15S+MkK/lW/x0U/Oc
OpRMmWZQMgnNGo5vbQoG7ocJiH1Szv3Ps9ofLxTl/jTF/Rc//Vq/sDaXaQCl
2W5qHTXFAK99mnRR7QPhhBe0s/bUPcvC1ScU2NTUmcn8/N9nL7irWaSU5Crc
6vklbCEmtjgl36J81gfY4kSFfIsrz+oW1p5g6sIWe9EWukR5Jd/iz521F+9Z
1qw+ObXFuy/07mrW/1bMs0WfHDeqYNgqssY9oZbd+gHpx7YSifeV2o0kjSu9
FRaz58xkPnZc31nB0/R0Z7spuFo1G2mkNq0r62MXe2Ru4p7rXj7Apu4o3MRN
6bTuc9bY3UHSkS5sKCJpmuz6im0+Gi57VykVP9NeOJP5bCRcusFNp5rrRdp4
paVEonPyM9LG9Z2lG6T3n7H/cMIXK+pnaxuyPGgPWIpPhwRXZNbrpeKwWUDD
62Xh0gZj92aelfuZtpKqluo+tlPAYcVHXLpGLfPe8Co3Y6tmGJuqpw8bfdjW
RjAwUJRBdAi2/AgdWfdGi97ORh3jCXplaERjZ3kZ6nh8IHHLmdrPSFmVveMZ
ne8vd0q/dUN7ZfU6nB6qzpCKM2ZMY39fH3vzYqA4sG1ZH3vlPNRqXtbPtnHo
AkEMjfezS+5JG2J4bkuBj1HHDllZP3vk203cTaP2fezYRTD8aI9NPzv2KOoq
hkYPTBst6mv+uGdMfIYK/P4JC4j91T0pxv9sGt/PDnaBGSce/+JY07XkyBBT
2/K9eKMaGr78KUgZZ81ecqIAZ36ovEzTFliLS5A2XO5xCjhF0Xr4ibQuS8UC
dSTZ6Cqp2Bot8tjaVypeNAO1bPKk4stqjjOZHTFH2pyi2q5Jcpx4XqSs8JZK
ifd5bBMpS9BZJBlr8Oh1CjhNWqvoZtvZ7fScnW2EWOuO62en4dxCY1SPSVjW
aKysJaafTV2PFN1i38/OdkCtTpBIsDdqtZWDbHzwPhDJ+S+gFd27v6/ZbA1X
NYWpwXiwLtFNy2Xpn6USnUKcwdESJVy7+06fvliz1MBNpGW7oXf0Y/f7RVRc
eUmjBzZ0O5+WilWJYfdPbw00aHDZ1Sh8bPWxt1KS8wxMMWtbS7kkJwtssmOo
so/9pT4HWd+KKwPWHt2JYS1OUS9JGg8Y7rUtewtaEjM6nQJSEbvxkl4n8ID1
0yh7XSLJqcSsmS5uHLelExob6fcCR50CbpFXK7rZFUCrSHGVoltc9egxRSSR
0oShDxM9pRLvXHAD35ZruBuY4dLpATcYIRzCaoBtZogLNWaATdNjTRInKJBZ
g4F8PmuagVzvY194h0xxoo+d0M08xv+eMs1BwCZn/iOaZucN0oYMmhthpIIq
GVL/41kgqo7lfm1hIOIHHUOlPHUrsJHhPHDdMfF74m3nifwakFxjbxmYgAVt
Hb5ib6xH8we/tjKJjjcSZm+xRH+bFaGUoWUTA2BBdsiCTrWUSVoP1HqRNE71
VsjcUvJmcT9lwcYeMTt6AHxJD7U6wVCCZ3M+FfNjp6g9WTEslWfbGgJbhqub
nQIOkW7/jYlk+mJJ6wBS6frmaxJ9VTcrileXoHrofWKLU8AFpAWbDHCDPxWg
Vewx4BSQTQVNlna0fJyh8cd8XMb7+9g3bVGrd7SPnbYanPnckLSfHdcoFW/U
QyFMegTk4L0ZMdh5XeJdjGLZqbZySWs/2jcBmM5ZSvrUAo6Cg7TjFtAJrb9J
0Hr/dMgp4KUitEYSBuIE35DVwL6yRkt9m2UenZtxkcXfH7KS9ZRJvMewVKt/
FksBopOR+dkJusH8qAvwuGPXz142v4sJJmXr17tM1l1+0BQCgo1EKv59xjTz
2NfPfrmocNI+9iceIt+PZqp6vRg/NTQa0fKlEffq/eR1eizjG8W2yVG9wxGd
PwpdQYQvbC/3jpweCtZFMX7IYYDtFPWO9GHwlxwrjbuyEzVsG8pujTrZhPOo
bAFpof3HC8J8pmjWCmzkq3tuOm7nuhMn5D0FCoWvxvxk81jm9fkrNIQT+PiW
RGW6skXIRgW+bA321RFZ8YatDdG/Tk8ivrJrHtKG36jIVFdcGRJUy6w7pOLj
KhDdXh+A6IaUeZ4CAi27AtaQgURb3gFKf4VUvc8X3magln0HqF+Ev80bcIr6
nbQBDAFc/Pkytd1KcTPxrHOlzTFC9h4CkTMoP7DzGigf0sq9fwXiAfZmJI7o
Nqt+SEM/kpo/8bIZkML0mdR6Ew33jW0Vl3tKLnc6+g3E3uuxuSyLgVz4Gg/v
UoFUrAF6+n0C6H9Ps0JOeKVz7JRswkfZEc88Pdd9O2WCE5AkNZ4OVOLR4dg8
XM1263tsZZ3lv80Az3xcLJBmLH0vLlPhf0phsaQdYu3L2ZkoCldAisoGo26r
gHAco/GVG2vFtuaYvJa4iGZQrFOATOHTKPFNFYh6Mkh8aOyWeUAemp787AbY
aWuQ6bWM97FLzHGayhp7HD+2jfjQ3CfDi6Q7UQAqqMVt/ym0MvHWKVBGIe4F
eRAR+3AF3et1ijpMGGOXY17zeESnjUHkpx7/vsGj0ynK5AFurnHVA+MRkJOw
dCvSg+GWlbgiWoAmp4AjVOTkp3viEp+SHqLBg9ZPe0b8Oisk+ru5brgtd3SO
+kEOO7lPOBmbRu1lLaWQjAi3txlg//ESGs3j/Xgunoljj9in0obH1KbaCM3D
M/xlzjOyhsgqKz50yv5l2dL61HUlCVLxcpr7p+Jyiro4xdzl7onTLTdLYIMW
qz4w1evTLOebfvateYPrUIRPGN3rK4uLeElZD2a7AZjvrJToPIOguxFim59U
XIYDqncZEI1af0ShJ6y7TNJei/z1zfvKHikkvbeEnUEiT1VBrfcJUvdrszhB
RV+pqn+z5fkyu4hoWDw+scepzzld0r5e/4NZra3GiGypht2SQs962cS/HPMa
OOYLNk0nclqY+FANaqxWZH6KLLYp2yJHPTW0L0O2LMG+mVCbX/PyCYQRRvxY
xhn/6Pb3UmttlJ2tPdr2oKzu21ycN3ua/GIimlDijPfo2eyIK8mxj/3HOjw7
SsGy3fFW3AB7lVx2dgmyuDDxNHD4DeAjVRo4zJ/7w/FUNjF9k9iw31AAsQ+D
DJ+Eh1jIFX3sFqOudURYGDsiq0iiTQsDMX3sWzQN3PiHBB8HyiXeC0hyZHS5
2ykqkM8HvBG5filrxnMrG4GsvB8AMrOG6+YU8AfO0rYBG+SiRwcguadti4QA
2xIT8RvuHhCrohpImig19B7waH7v1wYJNZZLJLXO7vd+ncWSrSvdFmomab3L
aLOaABSz9Ts8YHcdyGuWRnTPNeBMRjTrbW2JYaCmYwpewGH1AOQ7p6geIJeD
ErIvkNu6GLW2DQAaicWV0FacZweysj4iLZLpQ9Akg0TsC4aQ+lbj8n7fz/7D
vmsyBJYIpA1JBJDw6xEkyN51SBuuEs+NLZVPZdYQUnSnwtr+Ky2JlVsuC2FD
j15YRpuERBjfObDvY0uRxHt3jdUn6bMeoiQOSK0TpeKZymD0rz8AXJW0vkCZ
92lniaR1P05wZ2kGYeWnpOJfcYN6d/nEOGbzKRgDtNMNORiXvGB0VHeaJQ8M
d446RTXiEk/qjfNonvCDvK5zdVoCDgSfvYZ80vZ+M/hkkeRkizUKI9YdLdd8
O8s9hhKBuCxNFDNioGh4poxIcjwCIQEx8XoMiHuP99kWQF2DA3d7wBbz8Cgz
AiZ6Cc9pFaekDdtgg9VMRMzQu6cDzpAl8qh4bM3qFPj1Jnq0OQV8QNGzHBJY
gAzpZ29GdwJY7GT51Ng8ES6zhsVT8aogzqPtuhDqm8bRSkk7ZDWbHcjaOq+F
ZSOz33saFjlHBcGMbes5vxzH4JAsivVxCDYBcN5oGtL9vURyko+tAGN7ZXNl
YCRR2iDodPKK19EzNLveOrCs4vCG5m17bB08Iq4+uzL8KxEOjjSXX5HZh+0A
6e31aMaDTuvP09Ey8PQVniUiICt1IcLGkRtkTobP5adbhiMGtPFKdW/j0N6P
UJbo7EVIVADWP9bwesVkydbZLQNJe2jiskSSg3RRQmSEruWdbWN+yNB+wbEb
tLbKcU7Ph9O9cUQ+29vYUz7RUtGB6w1VQ/PUpvl+XB9bW8cTSTo1vHPcVwYJ
N3aAPcu2ECWPAwNQN4RofwJhSqpkUDKaEfFrfz+7h4hVMLe8UhYfthYkH3tq
6NisyQUdC2RQDPXMzhzLcN3q4tGsrTfZakmfarWVTLU6083xxaBitguTxSTW
kQ522tabPopOcEL2k9U93DgqAw76FoG5xWyTFklyonH4Dih5rOES4ZdJoxWn
OhMTTkdxcTRkXXk6YrKVYRQ92erYYo0HjB6QXiiSXkIbVPGjOOLuAeT7Fm+1
VEjad0/OuOwXjBER6363FCrEgLppBckMgFYxNOQFDhEAjAhvuSIVk3BXtr0P
LeTKj8tOdU7SEOPRGTPZCvPbM7nLvc7YyT5BZ9xkK+N0/GQrz2/vZOuy3htw
AY3GXqQsiFqGhAC3DaVPtQZ6plqjK4lKNBZKwvlT4rU/JYuP6CR7AMjo6Eno
XucU8BNywdjLEFwPkj/l7DOQdwZKN49HAT9JxsQGOJv7ITwY4Cy9Dz9xBp1I
VHa+r5yKlBMJMmuIAaZ4+IqraotCkS2hZ+JX2hxUzXm2FQmIuU9P34Sasaq3
VIKITf5eZeunpukU1Qw+HiLEI1NZVctwOLLO0j72KiOCubCWbN1p7vxeLDn5
I1FBv+/o3TfRc/2gOvKd/X7g2FC2CPGEmIdK3nQNvAIVDNh0yABh0mZPVaTL
78usgVUPlWluYtPPvrkVjzTlYU9R4I1tbBlBoSdwdDhh1QMCFVWOjkvA9Rvx
vHcF9utBI0eOjJ4/h+CrLUBlHh4rK6HkVZ0NSeDx9fDOEYHfOSLfCU63vIsY
uokfR/VE97FHDPBizrqfPWsNftgQDXjdbhrHHSWSreFTybTtvV8LRJJ9uD56
rvnTNk2H0mNiDXRQ8uc4aE8RPy3a33j6PCGvvYm97z52SgV4jEsN7y6/JysV
7EV+d7VnWWeLDGL/amTXj4e3SRvKuESt7eAnG+lntyhMYof9H7uhgpz0qDJJ
zqRHlUraf5hksKBn7HR3rOM0Fp4VS3Re4VlwCBI4YUy9wwLi2KrH4XR3NdRM
x/8fUWsEQq3LIE9cxmv7+Ai9q8jsqporfGiOqL4iKn/J1rNTwm4ejWhO/wdr
VcniwnOI6hpS1teTReXE5eaJiNG5wR7EKOuOZmcopdCRBeCK3yEIV7kpQgWO
irFxhLlWQyMmEawglbIWR6WQyoJ3IcsZsA77alqB8pmvVHxVeZqZvetnxxKD
3wlySbhZPfoQ3vKuEwq+34nqGxKcGCW4kaq2tCX4ARyktewQZIoD+9d/UZh7
42F71eG/2m++evi03T1g6+3Bh6+2PlSzxExySfOiTr58K+3Za1R2RxhiL6bO
GzzVs3tiIMLo6jvSBbJJXnWcUdnb9lXrfFiXhOb3X7ev6t9UYwzTBqtadk/c
D93PcJ/Puh1RPpq1Xy3zvCgkkzzw3vCC7MlTQX2V0sUkpkmyce5ridglxCxv
RMPVxnY+60ac1CZI9B3Z5EDJ0AxVsTiYe2hrz/4q2c7yEY0txIATy8aTYYBj
y97PrKDj57iqZR5J35NNpI0RRm81XPVhy593to1kLRCiHQPu9y1vSWxfxbDn
XxK6d0qfrDpQT1b5WlkcrVctqL9BgVZUxR+C+nNK0BqefV9Q334SuuxbBE8S
1YwspPhWnaHNaoiTUcGoBpvhDVRIK0dDja5Ovh3Q04rHuesJrSiRzXb+gN25
rvD8OPOCz8GDh3JlI5QvaxZTkTQj21++k5bsN7oaTlIOTRHzxcHj7LPM3N9g
/4uUbKDpVJWgftVCCyCVPhDadkFQH4gI/HtLgeBFCGX+Wd1Mk4G3uS+HZCNZ
qMtGUR/v2l35UnZi2Yrkc6CR/lAji9ekHax/Vle6Jah3o6FlTpUI6i2VCj+V
e9uq/opRjbVLkGT3nLIJxkV/K3SI6HhabA9arijZfXrkdN2qN4+7LgrpnW/b
T6oeURYPGpTcK4KOVy+Hngagjje+A5cPdM2mG5vonD3+UWyeEvx3lvSloH4Y
GPv7SbHgyap+dVwIVS8HPnSCSb3AQpFJRZ7qj5go6GtbtWs3sqKWiCerfvpG
+Ok6t8He/KbxdKlfUO+pApuG+xZ4PERk3ZeO9599zZp9rnXPiYHXiaBbL+L9
rYzJ922BOJUJty4THfs7zuF8LB9QfYIzNtQRTIwYiJiXq3aWd2hr53sDGZj3
EVP0qFzRE3fqY1jHqoWfA50N54eerGqkM8QrTDLPFu/dcj9iS/XeqisD441h
5R/fwqsp/+l//XEgzMjiR1BORQHYjBtSk0E1dAUnnSOfdbwALqR1MIR6riGm
6vyoFAhf9ebkNPYfhhldjZ/G/m8vBS/OUkxA+eQBqWGB7AmI+TzOzLaSvj+A
mYb+9+2bVEHwu05d2D27YAMP5+dD/zuBbLfR26xm1Rxkry4lA7nnX1dfAVpc
kpA7d8bJDtLBidaaeYIT9Rr2COqf4x5SdV5Qb4g8JFq/QFD/ERaO+qITNPrT
RqSyW3vaVh3OhZZ7wduOVevy8Nb7J6vW/Yxa1a+frmL8PI2jJzuNrjZN4+g1
hISTimirhE5BfSlu9YIBQf0POFeCWwNkQppP330s2G10dSdup50xdXhIGK10
diGlgwhr3s8eGKhuzMhC+17Y37bqp/3T9r0RY2QRiqR+sifG6OpNYeinJjWS
RfkFScVkYCD35dvOkazrVYIX8bhNNQwk9LyX3RTU76JBcIisAt+rAhbOwErl
naFGZX8Kxfju5dWj1cW7jcqO4bEysuJljLRkr9FVVxSe8gb2g2QpZvlUFzE9
LeS8s4nymeN/t686/HsXWNPLvfolb/VugW8hT42qBNZ/xlmvrA5rw61T2l5K
dPTcVzbBQ2zP6w/3w4zsvJO+RLv9fb3l3Yf7+39UR4Fq7/iIxgw8ZEVUjWjs
VMVbB0Y1fjSC1sPX20Y1huaiVt+JUQ1Xo0xovbcfPS0ezNIrEKS46WRap35f
JtD9vSzjwfeVZVn1pUefff/g3t1Hpee2+clPtj8OXJfo/IXjSsDA7TaQtoiz
Mfs+NpU4My1Dd1VHUDkTGwbo5gPCOXZ+kOvyccTjC7hYQhyOQWsCtcp8Ydwb
4nAMkuNJPE2iw+vc6TdeCVBP/qsuGWAfwy9cyjN6r090QsG+SmHyZm9iAh0i
OZI+LWjPdTtF/TSZsuMKeqSne1bq4ddao8AHca01Ckhl9tSVXKWHzPqyVLwb
L3Hjw6ViY3SGWdkhFZdNPyK1HWCvxO+5hhyhLJp+gN/hFJVFJOlXIx1DY/eh
7r6EX7JkdUf7DSR6AMdX8CK7esgpqq1U0jqE39N0l0q8TZM+I+4d2u2ghjWb
DmKNqehQTCBAFc6Zf5f+HiC9AVyi4dBKw8+DwwecAsZxbSRAwfkMf3sZ+urw
K4IM0FDzdOQBAFBVDTb5czhDek3SOnl/VCnRP0AcJ77vGL3+scWuj51mh1d6
Y33sWOJuywEQil4+kmc0ulrTdv9UWNZhg4oPP91n2xZB0qfHIJvazvuxphfg
HrOnLRETnkOdtsTlLRemLzFgtmP6Eh/siLugrM7lkjbnaigQp18XlEPZjwrW
c81g1Nr4QdeBvKGRj70VkpzJQgogKgDZm3a4wdsMsG1wZDV6DdgmDhEOQNFL
nHBd62cvW0mrXs1ZnzIhW+fWqLJQ622i7DQ52YXxhRaptVqz5mx3Yt8MbcuO
mAH2+Z3TSH08vHEFUaQ6buhOBPinqDeN+eKwX6cx/41gy8/TmA/s/mPX9BXL
VvxriYRRUlacUv1S4/W/aM6YaS0L+2P6kpUniqcvOaQ9dWPwoVEWP8C+iR+H
oYPokjCpeO/05WMjesnriSO0KFRrBEMBjheiY+LPaehUyxG8SpLTiQ54Byo2
gF/hxXAFlD57CV+DQiIUL4vLOqQNldTJW7vKbTLrSrAndFhn1Ukc1j2fRniz
hx/TDT+oaRx4lwjGLcKLOY8WKOZm6U3zyz+dArIUEJWnO52ieoDK5fiVb3OR
RGeQuFYDX4zBjw5ayoDyd5r4yRxQuxovzyag4NhIcyeuMqy3dSYKmsGT8chW
BZGtGo92lRDZxIT3QdVcgR/yXO5xinoiP5/p/uDXWSbxdiSBq4e1XZM8igmr
VQSaY68MQM2tzZ92/jwaIW2YoBFHGENWjUOJHidspl/AQXQ5RCIO0qwTR50T
pQ128qPIxoHqvDZz/FADtOL9Ja6VIXR8S6Kl1OJlhE1Ez/uwXpvqFum2oYpt
bYnbgP5c/K7pCMSRg/htEvAUZYcf1Y7Gewy9TwRVnrz1q5OKZZgwhd72nH77
ck8iaM2ahcr4zAFaEl6GN3Yq4OcSezfMNheZVFy1tC0vWrbskmW5vV1Jga52
ccmyUssKK/tjdrbFVuWzbGyPWbEXTkub0U9XHbFkTWKa/bkyQPXrShFovjDU
lmjyfB/lHJG1q0reV18BuNCHTQOP5wUvFjKrd4vXNoWyCVzfPqJxxxAlxIiP
AAN4H24aL+ZVSyhv9dJLFTqc0nFsIU1o6U0czdIj3t4q8MwPOK143IbrkhK2
W+HPP3qr/yhQxCdsc9apj9B/rjk8sY7YZY+KVumn5B94cR5Agi4+KPrjLmKQ
9DNVokS61VtVIssFsJGDQ6+TQG08ZQ5gPZeSt7nne6uvRBiV3ROKveeQ5+0w
LHn9YQCgzLILgGlu7iFg+jWEFy70tQUgABz5pLHAqmYSv+7c1wOlUDgAgT0L
8fRvOKrxzSIEoUJPOC+7Y5+Z2nUymGtWH7pr/GNMx6ojOOiK1usZGi8AoPFR
mEZgrJ6hROc5OPUj0n049a2vKS5ILP4FBSaTaonLk/VCdbEI37rq5t4tsnew
ohKSUIpB9Vxi+odzxPSYz7Rw2OIwmlVHLNSjGgkKNS8IfQKAU0g5/0nRcr5j
1RVlfB1BSTNCc1tbQCQ2OASTnioZ8IMi7iKCUdGzoYJ6g8PWE8WCF2nEXn3d
+A5JF+4zcHVV2TigIqcgApfeelW882nxWRzcgWzbUZF3sur9HbUapJ+z56X7
7u/0Ldn5oWCgbdVCWwSAq+Oerrqihk90crbBWRuTduHbdb0dcsW361FXxwf4
ljxFNFcAHLTrJ3CjtOqWtLoqxqhsOTF1gkEh5kpPMIRQAit33NzvJNv/ZJWa
J15dR1bdfP+xoNdBnTCYnte+t2SzocoLRAB6lz1gx1hc9bMv9HHwUjKs/YLg
hSFRLd5/f7InccuypzhXNyNE2kjw+/eNZkkPEjVBRMIF2ZZRjQVroT+sajTr
s/LWL3nnVTOZ/lv0eWUxE7fAdusxnNJ94+5EVdryPvfpAFSlei2wD0H8q75v
GFzE+ZnqAksMV5eh801i3vi4/eSgdyqqxKBOdWti0Cnnu5ODPmyeHLS/zQrV
3O9yR06LbY/iRWOUoOB1x8cwQNQ7tSMRfBWMZl0Hn/kbFZsgCwgIuP1ceNsO
9rMJ2cCbL4C4YcpsVDXdCtNvkbW/pHx6BnH+yYiG3mLkDK8/2HQLQUcH7kPs
eI4LqnHPj7ighp6OaCwlBp10rifORCJPvYz42ANF2hciKO2u9+zcuiwaPx1B
Zhn6dNXCRkTI6ycXJnoGNbYTRyKzRzWa8YOEvQajGkYWVuC/FcVhhP9uxsvL
0Y5VP+1DreKBp6vuek+rY37eaWTHI6WhEPCm4mOv1JuoBW/1VVXLchsF9Zvx
SmrrgOBFylT9MtAngyKxEdUv0af+ELy4GWo074/k3wyz7+8qyVF5GVBX9yJ7
zKOxUws/Ghy/NzBxGnLY7WnXtJ8NsNM24CAZQG7xkunnikWSdsrkJxwD9h8h
wwlQtr03Ctk22Bn7nBvYuQyqgajuSol3BDq8q0KX05fkXy/FT3RLv8WxTm2L
rd9Q4lNpQwyXOB2WJsisB9hzNSavCA6sl8X0sUsm7ycbm20lsvLfcICwHFLN
9/Lbt1My61PShsv1/zvHgE4BXejktTh8tGTWJOCvCJPZ97PjKJNHleMfO0sk
OUSeHL0GGCAVP5Ee39ZWiV+njJZKdF7jH/j1AEqMR4eSlzvLFuH3WzadUnEG
MbzS6JMPtia6S3Zru316GTuxlzrJtEAgWz7ANsNve1ugJnmpg99IFfWzZ+EA
szmun32e+E5HAMBrvVS8QgU/bQXBKSpzkCD9e4b92v4w4k6/dJZsnTxbPXC5
Z/h027FJOR5psT0lG7tH9cYBwmicxxBIpiEPYJMQz/QZYA0fEYBCGOk5ewQH
951WgG2Npkqk5RtkMVAYrZhel5VATbAQr4eu97Gz/dBZZdv1sBcIHO2tguJD
igRfWtl9k3glDb9KafkUfkrai/vZIwuncfG4RLL10hQX3SOSIaozfjcLdjFX
nzV58joRJou5JxW/nk5OPBSnxOebDoBcowG49pSFFyPGYjo7S/vZNEXiUnYo
eqK7QuLtjANBKMVy/JHqn3aWAejbjV8s7vNoM54OuEBEp9BJa6lvmxl+p929
N+wYccsIKPARYtT2VGdsKM6oIOw4PrajczMxtiyBfPJTHN439Z1jKL5dbEHb
Bfzjv5Yyu+lnwKjAIG7kgOvxKhnUJsv62SUak7eh0nAZOiUmmP7Qz852wq0m
BmYlSBtS8fN7MLjxDJlteAlefXZCbdwJJb0S/uWI/f2eiQhAfHdw7PcUOPkB
x7OoSvwb/3SgsgXqRbwlAHspQ8J8f6Xb6WxL2iLu9NpD4n0O56GtOIa414A6
/jjOXnmGHn7rc6S3xBq/aXA80hZLdLz/feqL1IJeGVQYGzX/devTUyLReY/f
8TZfk7RD2Z5NMFsJLoLXZb1gGC+XcD7nbhrd7yf1eoE59YOusvDDBfQh53Hi
mKHZKcp/5idgtmEbsHMTv+i6B5b6DWmdoltcXjeqXYKmWxXI+yb+9YzDAP71
zCX8JmvsiNGX3Kmvba5NjF6X6OB39kcGyq+quBM3+hvcxhq2gST7cOuoGqWa
FyLtjKNYmUGg91HBhh7nAmnDb3hoW3GkeaJKFuMrbbi0bvKLI4+BDxJA3jpD
0y6VUzqdAq7jNYgEovGe9ZPfbjqnS7ZemLz3zesZkTSP4FcBQ+PhmcgebQpG
46iTFW+MrLdIot9oRVz3tFhJZIj1FfgXOPG+QLr+PxF/AsT4mjhlANE+xiMF
FF3P2bHEl7EQwkbW4sEMquWXuH5ayvvY/1GgIiY2tlXk9ZRcbvvg2xIvGIoV
yGz72H+EIbcYuhZWNv2CEXzaGr+V2lcgFQvwD1wPZOiV4h81t0g/n7pztzsi
Kwm7hLNU3WtDRCAoUeN0MMLBR6Mnhq5JtoYRt4XvO1qiNyDPAZpWTX5I4Ndd
uV5mDRGtdpbbNH/7ffpz8evpzyUa2tOeSx/gV6COHlKx3fQ35R7Tn68/wL9L
Hgav8CHu8BshBoPvtSg++PT2OJGahi66WyeL6euglXnTVyo7OP06cqSfvYqz
9xjXccZzqwUWGzcOgXH8SnyfCzb+C6oy46pHP87Q6NGajOaOHrKxfvaX+OkH
JOS4iYFiic5O/Kquu1SCYSQLDIN/sC1UtYOiRaK4+trsZ67P+XeYVHf9Xbp3
Meis02XtLgxi0tzUihl/RjbUZtfqM+1aLfMpJrQt1BjuC/6dGjUxDO4iZcFg
R1ZUYVApPtg5CVZLWphp22r5E1WTtiXtDy6szDFyN9il+4ZyVbTINYEVWxjU
pV4Pg2VJrbXZPDemQ6vlUXoADJ7BQ2TMR2SsVAQyXC8hMmxnzoHBPyS/qM0+
8zlzeatljfJZGOzDG+bf4S8QG+7SjVJ8IFpEKWDtKwwaxAf3JSOmtiEy7qoA
GdR9aOXIJWjlBipaWYZWHjRCg/3nCLakWbqgASvRgEH6W2DK0CAB6GTXqxcz
ElLGarNJR5nOrZZizeew2mcuH/h3MteIjXbpfqEEgymLjWG1JlO02vs5B2uz
/S+cs2i1HNRCW59GK7O+0NTdpbtGRSl1EWWH8dnCIO9FblrFjCup4hvZxsXM
ja2WTbNMlLektbm4+d/J3ILIeLTWBbRzeHVoYVC+BVrZJg2YIt1CTL3SQbI1
dF3jfwcLFs/bpXuTYZG6SHTc+HxhkPvSelh5V1rOjexn95iftVrW6yIyPJGK
WTvQyutUkYovIZo9rdHKlWbXQBFP5yxrtWzXQ4Mz8cFRaPD69fuAjDurIwuD
OMvR4Ivp9cSv2Ee/n/kshn4/89qF6Gcy0O+n1NIhmSfNzufxtHi6Wk10rh30
KdBoD/Xqzurgv+xRdY8nk1Wn6iqk/sJwYa7bg7HEjJRb1NURDI2jnpGsDs6c
h+hH9Vm1Uz9x7zn1AzG/Gyi0L3T1V3CM4LS6YNF1g/yZ6FdlUad+dUD+Pz/N
wxTXLqxLmvrJkbck67X86Lqa6NmKpOQkGvHDQNxlDHUdvm78MfL815hxjTnG
fNSAKaSp0hezsDXkF8mW6IfD8R8AtqVM/SzVmpnJy3KC3I9O/WTZJrrIhxzY
yMqZ/NGqtam7srk+bH06+BbwfXMPutyPTySrXHVX8Gp997HzGDZ1txzWm+hx
4jeAmmE9xb+hpBmbYCQ08eBaPY752PJyDwI3NuFWCNjm9SKsE9gmDVsOj/+r
tqsPaiq74u89QhIUMIE4DR+WqN0p28E0CQkk7ioJBEUlqIAfHRpDSF403XwZ
Hl9WgQB12a3usq3jR6mKM93ZnW7rMLPg1y4K1a12lV0Vd3Q3swbXdrRlt9S1
LaIivR+5IbH2D/+oM3jeOe+ec+8993dvbl7ePWfboWAD+Rlb4w4WtAiT8UNo
U3AilHEJGDwU+oCeBxagyU1VI5Cd6EtC7NEsw5/NzL3SzpHfnTMWDx/uvgzv
jh+/BWr/a9PNbnFH1DN2jr4InyTd6H8S3IzfLXrzOvfl9KMXX8ZLtMY93mIO
UdHPiwZuF3gM0WtdhXtFCWj/78ePL4ENaPJ2V8Q8jAxehd0f7/8cdv/Ypoxr
qLUnv4l5t349B324za1ZBV0x0Xy7dAPu/s2Qxnz/jGcx9Mkb4xE8HkB4XIHw
yIvEC+8x6CRGlIbgGl+gShUnuvSzYKQM0WDn0K2ATNo5JJWUXE462yqB0SgS
IlEI4sjRqpMGxbCKVwjjqMHDSxmySt6FnIBijVhIMz8eHeylAwirxghWM3k3
cs7qYaQ2iMA/GXJX6bmzvSVzYAyM+AgCyzSswjyLB+ODqRnZQv3OjLZEcv7u
q3ZZoiNt1kKpMvsoPO83J3slY987CMOZMPPlo9U3WqvRib2lkZN+EiZ3P6vt
ggFQ4BHNNRccCV3DfwhQFaDffOjH8RPNgvBbveaRU0/u74UAHa9v4Sfj0yKm
sYkzwYtgGE7ffiBGI226XWe68+hwcA58XXei3lMEhuHh6SA8feAHumN1biUY
gFPNI4KeklSRqX54un8Y4umh2zKEvixt3329zzN96goSHsSIHx8QQ0A88oQo
tAnR7B7RHBwraMaHCu5sN4UmW4KfwGaEPoyHJX96OmNODDoR6AP360xjj0JB
U8xPBlVro9mO4BVoZ/yDNFTjG1XDoCOngyemjR0nIezyVncnRpfnaPy70uSm
kfwnQQfyT56nEPTx4dGRnYg9lkywduiZWMtm0gHWJMU6uO5BrLkR1nwRrAXS
RCsB1noyIdZmE6y1RbD2kaE6CmvpmTFYo4YI1kojRyLn8YJRWPssjLU1YoC1
oRmsfTKXHTXPehdibTFzl5p/Y2dSZ89CajFjPzF/NHLMdI3w4+q9RxQwzig8
8/mkZ8ELekfCrsDr+mzRV21zgA4KOGFIJBq/LRdeq957S080SgzdL+jXzxYw
FLUO+GQ5WT00O6Yn48kzbNPEY29WG/4WaL7+r6kJuOL9ZuKhpxhO50/H6vsq
9X0j3DcFYusyJJnYySGJeyVgXzKFdr4Py0/Cw3tx4Zd3zNf7pm7jtRF8daoz
Bwu8q1DhMT4yXtfMDy+V5pGpM93DABc3Q6f+AoG5ozmI2QGE06ndGZ9C9s6H
U/ror/gbyMJbZ4IrT+xaZ4TtPHPnGKqraQbLE1MtVeUxkOwWldNXzCONHhVS
CeGpc9w83X8Avs3ErQ6CWXLFNNH/EWK9VUnR6uHEKRB/mQh/RQh/MO2KGnz2
wk/mDv5riosi4dCshfx4AKjLgs8UNXqIlLeppAzRKyIYdvAIfwWVI07mwaQr
32+VDC4QtwxYBpXFknvXH9KZia3qloNVr3eoL3RQs39Bg53nwRFRpF4JqteA
6qVxvZRu+z6Gd2RUDz4JweJVbW2XJcGonAE99UpHHB3O81CtoK4+7uuX6O2P
+wayGZlpumOJMSlid26UXQbPpwXw3oAssZAfepsyZGu7xO2M0KDYeEN2N55W
qh7I44Uql57Ho7doRWgO4jr6UR0aasZXbci2CdkWkH3KgncDhT2GhF2UxCiW
FKdddmHnqgXAf6AXeDfxtUEqO88nrrS2qoOUbv17SYZfon0MzQP7mHMifGh1
6Lv7A1ddilRxclFGV+F7Cfw9tOfFE28d6LRtiSu/e+vI4NHE0zA4Txy9SyrL
AuWzemkxezanfS0Px9LoFXhFP8r45z+6fJlpYO3YCteOJS8rLPuGGl5N6qyW
tR7o1Eq/aJV8O38caAp5Cpde2ATjffKlrTJpBzOv8byvqCuANj8cifa9q20e
70uFcDPFhwuOgyL7pS5+teJiV7YBLA3pXTTYSgXSI2GO+mjpJVVOKTysKxPy
f5WV/T7v416aFiTQl1JkYFsFw49OBtSrBnNSk3k/AD77jg9iaHpH/HI6J+Xe
+D5fqbj4cd2O2ecla89ZQsuMD1LmSvd8azyHJtKrGHCmqnUxE+MwU0793Pi4
361OuSpLZXJK+GCzwpUVZcYhuaaZ+SOw9mZWAMJ0DI/0v9OkFUZxQYsA3gpV
SWJ2GJUXU8X4EWc+al4LWrqprQAPKIdQsmhBB/Mzgfby0nbeW5qNgz9pF13K
lx5pbk9p1Wq3vhYXxg+bSFGfA5oSt+cEP4xNBtz8IaCl4TmwMVwWUhmkYWVl
HM5bogd0aRh7VNR9iiIZmnDeFV4URckHv0dRzXF4LZ0H/iqIXEtRI0AO99c+
8JcfJU8Eyi8B/h0K3yfyUXANPUAolAtzKOrvFJ7ThCI5qJcBHRNTM5TIUwGf
Ts1QIl9E4zlMKJEXAh7OckJJvavD+qufsuOksQ8IJeXbaJz3k1BSfj+NfUwo
kb8D+FxqhhJ/fkHjtFWEEvly4LdUwP8tqr/Qb49oLCeUlE9mcDlCSb1ZYT7r
KbmCwe0jlMgLGOwvQom8Mqxf+ZQdFvCzqRlK5L5wOd9T5QOAz6BmKPHnrxk8
3oQSeS/ggVqEEvk1BicsI5TIv2bweBBK5FQU3gXEbyJ8nULNUCKH/8xgrqXT
aK6dgnXUW/15OpXS6XFyTqvLuc0KE9IYvR4WZagpA2w9a7FUcH7W6l7OcmVs
I2e0claUBMNigZflrNWO7z8zSYWSXIQJMVnqrOXWeaz+JmhqJjfG/8rDE61W
6CR6saafVTvKccE2+lgbJ3cqLZbNjY0WH+uv9XpAb7kmS71imZ9lTWV1btbv
tCHd8joP53SzlhihpcLr57gtfm9DOMNUcaON9UFnoRpsrNMld+SpiW4R8AfH
RhtAxdys2+ZrkvsUTi3+z5mnjq2mluVgzo/asCGDy+W1AUsrYsbHotMpc3V2
pcqirVHaLeqamnxLjSNXZbHVOGryFTqdVql0oAEsWuGphwaAEuI3+K0+0H1L
kdXlQoLiRp9/pkwZ20Dyn/iL/X6vHzQn0tEKrsnFVrK1HMCBxVTJemq9fqBm
2xIpgZOX+HHnwyVgBcjFmN0MDHKsH3g/LEB+qbXa7fIGJ7dF7q1n/Q6XtwF6
hrgMNCLirch4+oF3PJzVJfd4gV+stfJam9fHyu2szYXzmjgdLPSgvJYD/kT6
sXLWY0dSpUqukCtkrKPGrsmz5dpVeXm2fJstt0anylfXKMDs0IJra57aqlLn
OnSN2jxLnnqRz7bIBZOJbTBFMo09b54xeYNLXvp/mGJRRp9vkj2l+DzTTF76
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQNAgASegbVRkhxBDEKwJiRoVLSBWXGtJgFCwPEKI
PLTK5CFBiy4qy6WrbkNrrbt3dy+taH3UGh611GIXxa62qEDBR7c+sFq1Puqe
mRCl3t0/7p83v1/mO+eb732+831zjjS7JD0bAQCoJQAkaz0XZ4gAYMF5No+Y
tGD5p3lFD1tfDkgjUygaKQ+Am/BlAEMKGHA+Dv45tqitmi7mfDYmT9iGOHmT
WdzQCOZb2aRkDiN5W0DyMCYXqbjihf5yS63e3CmN0gW56jDNNkZuF/dDEa6d
W4t/gcgtTvFU2dT62DdbXt2Kf94F5W7EAdBAKI/s8sNzNzC3R+12wseQs7le
FJSypS7AOZyC1bZjHgkiSzVsAbzLXCzy/ORFwskpnyoeX54fq3NyfytCxAuA
3WMguCJGrrtDolFvTJbwXej0TQCkvsd1ILNWEW59aNBG5iL/UjGTmRGKyNov
qcVTRUZ386Ip7A3kHvUu+avsCQ+8kl+6Qgg+wraOn7P4zsLgIDbqf1Konjd/
ic6v9+VXX74TsDhOeHJSM27eppjTQPzc+ZPuGDVoziYiMX1G5JJQ3Z7g5hP4
BJ5+qfNLMvN9fRMbYR6CiHzuK8xeW+5kFVaEk0wmfl5ECv3RZGxKgP9wFIYg
aWIAvoWxCKsdeAJ/HJynxJPBJA8jI6xeA4IMyJ8DubHArwV8zf7gPkWBjKAD
AuDnJmeCBwb0JTGFmw2M6hZtQndHUiuS1KVNqNPO7NYmtNoSPNpEJ5oALmP8
a4TgEsBujPCL6vk3DPzbPezLQFDUwx9UC66CJq2qpSOpAVUf7Ehstc08o030
aMN6tKpaNLGhI+nX7AP8wYH/xH7GkditVTWNqg5r1ap60JlP2QvxLaBFSXRR
FgvIiaAa6AHrTht7nf4XiKkG7YBg2cNPGCMuNwcOaCJOGCWnjREnmgO7kYhv
pZIuhHCZDa4qGYc0uyryHVYzp6zJpSQ4lfmOci5njZrjkbTbwi83S0B7+MXm
wDPNEd9CRjKiXSM51yy5/Gt2tILLqfgP7O9GnDdGtLdJRlW7w9ttET1P2Q2O
Zh61Og2X6PXyCIAKTHILlHgKtWqpYXUvgHHkt2oVs6UQjwB6pbge4j+yTXqX
Ip8IZoMBUE8S4AFwox4Rt1zmqoJmkJwqmatUD+V7TXKZ8efcOd0W3m2M+NYj
GWgOhNG4ioSDMi6nvMllAdyKSpcy1bUmHzKia7icUoPL0vQc+3mp5Px/YK9d
Y3ZVcTllsn8bDTIwUvqYMh14EBwJwdjqiWDP/4tk24OoHIHMEPB6i20vd4Cn
xBrBTgTMh/stEO634Fq1uNZPE6shtvghco2+wU8j12Q2+WnfUwXbje0j3B4n
/gdMH+x8/Q9YarB9VbIBAcERb3rQxPusRLdDSbpK89FyPadiL+fNcwb/Sz3s
624OfI7gnArAWUNwLG5OGc4pAgKLmVNKjymklwCODRyrm1Ou5sAIwSc1hV6S
HLObU4pzKnvYN0jOGoxT7mWk3+7DOBaSs0DAFQYl19Q1AESR3LTzQdv+hDc/
HiwoX87fdPJVYhkvd/2Xmu7WI1s4g6VK7MTcNzb23hFx3+cd+cFYFTHpyw/V
8qaURsuFbxIneVTOQhgHLvwz0HPS0PTITBS2CjjFxJ56/yjYAKg+gGAAoAAV
p5emo0wS+H4GoJ0avzcCB2yKhkZBms2MEAR5SgOgnH+O2+nHpQXRPw+oybjk
XqoGIgBGsWxi9wMXF2V4KM00hiClISndbWyYcQDgNBlU9+dTsOLRFAg2qu7k
3DuIehscM6kmR6nblPSCAg4RihDxivp6nW4VYJK0KJ/loo3nAJdked31WpXw
40GvXK+PJML7U89uO4oD3lgHf5o/iePleWq85fes54xf+jedFZqEPtMYFMb0
7xgPQK4N+FF9L6JJFCpMqa/ze2HecaZ2gogxeS5YRfof2MaYWQfqsyl3PoR5
ugvCOC4p6RyU5ImQWbValbOjLhnWikpY+kp5cFNcx/h3SH4cLxnWq/CvmiV5
BIsmc4R1o7O6tLPq0FndlXWwVK7lcqr0LrOZs8aMllfC8uIK7Rbyr9XzBwlB
MSEYGuGPpPLjsM7wi1LJOWl4uzEij9iY+IkjsQfuLzTpE0eSE03sHhGVGzhr
8znx+S4LfJIucz2sipxyGaf8PguKrSBdWVxXqRjWH1jWbNFwC98Y4P/kgVsS
ze5qlgw3S7rp53mj5IRU0mmD1Z79j3ptAiwjTfTzYIeqYbQU/AYqfWRPPIMm
tnTwPi9wmTNdFrPDCqucwWUVu6xuV+hXSwQ3gODHVP5wPX9ILRjE+degF7gs
/HwbLPsRp2HRs0WcH5AMD4b/E4nIE6epWrQzd8K6kTpp1BGDq6KSU9mUlnKn
XkBFIGIV1XeuSsMvtoWvRyIog6XhI0Z2xgaHqrsjsUU7CwbkUXvSsDaxFk47
6j7zpwp4BbQHlk0Zx9Jke3UIliAP/1Iq/zYR1XZaEzE8OP7cYPhFaIA+NLHF
MavVEebsUNXRJfRgW0JXB/QxqVvfWgoLsoFTCgOY6QrtO86/ZhBcH4D1QnAJ
FjRccDeVX4zxhwg+nN4eYH8/wB9O5d8nor67ZqRq9bnB8dek4Zel4Z3ScLiC
V6UT8/BdiZ9oZx1EExocCd2Zn8DVh87CBrFG76oww+i5+Jcw/ght7U2Cf7ue
fyeVTyVsFcxbOYSWCD2ureWF+lnkejzKVrd16ymdG5PlJsXKk7fUS99TYcdA
sMQAlpUU5lmMRbi2pMhcUGiy4PKY2LgYIiYWzyux4CkFxasr8UqVEpcpFdOz
C6xTcNkCY/Fqo6UKlydE43JCLp+SsdqEy2PxBauL6TkeGztTrpqpUIA4ZhvP
RmiJLr3Bnm7M2fdG2fyoaWXvhU0W/3hobU7c9oA3yj6ctn3HwrVlYZPx9MOj
KOF/L8yJevjuwjemhU2WgT/BvRQK/Qnwt8hgjnLWZJqbYFw6YDYk9HTYL0uO
Nwde1VBb6DIVOGrtxymGDPwrqTClBMNUYgmupPLvtJA2qk9TGV/pKvWud6Z5
Z4eqFUnc7ZjVAHc8OAXLAFUTOd1Jux2JO2Eio7PcjiSY1PUdVBkxwth+DQfB
zN9GUxWD+h4XyWxCcoJbo2lQJ4jmfIEZYAG4RQAwEb6LnNdVn8Z3RlPr8tsD
CCgsLC+KKSwpMceUm3KsJZaCNaYYU7Exu9D0795UFORa85+9yC0os1oKsldb
fTzQDmfnH3DeGX97aUQ+65RK0KpRNQQyPirEglggl82RBwt5RrX/BYI4obGR
qRg+nugJRIdlocONDMn3QIrLQL3QweBqiPzzeBeuvkAYljZoiqd4hP5gd1hN
zD4Zhvkzcg9Kr3oMBzVXuw2HjSP279kEt2awBvA8hkYN1z5YMxeODmu+sRvR
5CiuoXMgX43xps4a6VL/UGOLQmPduDpGhoqVeA0JasKYCuAQoihU2aSW1jqW
16B+exIApmN/F7ohdqDKYRQw3GE1sZkOBcVneMrnjH/Kt1jqgXzt3Lk8/xeZ
bSCOpXBHqvP86myb1DLsO7uKNKIMPy402I0S4liCxJiOjSH2l5pM+gZDp9uc
jPFaluajmxi5jSB0L9eJ8uwB10BNIHcqTg6ypQKPodMDINGeTK7O2Gg02oWO
dj8N4TFo+Ff96pczTO5ILOiLgwaB4RxZz2CIi7FHgDeXx8OZbYaPNgyI8kIn
vCiOle3EmOhfxt0wNJLf19geOl6C7hAYi+v157Dxvq5NIO+azlLJC9XMHDXo
CMwz+OcRF8zsD7DuoKQo9oZgu4H8qX1id5CqjK2JTy29jzr8T6vn4MHdk1Z3
4Lvbp1DruZfBC8O0FHvyNLKt1oY4cXHKJexcezQqYo0K2doRuxA7FYyLPQwm
pE6jqGsZ7H287SJDZABGnMfuI+KU+GvINGY4ru5uQYRcJrFwpE4sVnPtbWf4
nw4E7ONlhNSJRYu5duQ4v0y9jOwOykBDbGpNL+tj0MF2jsM8Zoc7wEBkG4CU
y96exBwivjSsbKvVDEKDDLdITierK7ptRqqQOy59pSeAKFS/iSC8eO4xwI5i
szG7gbigJfn7eJnjRtXkCdYRC+uLJjpRat/9CP/jb2EnSVHV784qq5/El0yZ
y9KVX9yxMQ3Z+sd7d/My1A03H4cm6eJw1ldn9/+1/9ii/s+0CjR9WLWy7/Hj
oSO/l4Zg3x++3nt5d4a6tffQE53zUGznhhR7L2/9UMorjgx17u2qoh2boLS/
DsXbKEWzF/fR03uv5EKWofsJlPA5W3r3Hz37pKivPg05taVP+XqGurOvNTQ0
BLt+f/24HisWmD5ckdV39PHQ4evzUamOqVX0ThRu6EmZUTRBx9LtL8JCsG+O
azLU1rBd6Yiwuu+XYOHcuXqe+ZvfpSHC9UP3sOWcj7Cdvbwup+pk9RV2DjTs
5qHPxJBrbXXgU/mJj/t/ClH3ahR6221r0Q93s+7VUJb0H0GgJV+vLjHD4CRk
TWQqwnUOUVX1WWXJk3vFFRD5aPOKXWmU3hcoybf3p1GWrylSwlfK/h3boL9f
3S43QX9/eCDUX5yM/R2asSAl48yjGcWvQJoj6/u2piFp68/mwYBn9B++RBl2
dB067mF0VysSFFn4VpRs/67+6nVhW6CoC0PHYeh232tlUVoeFi2CEtZUr4Ce
njp67zKl5ebPLLwzUqi/dfNFEntLh3/29xXvQPPe+eE45c6Vjw/hlOMrz+6h
pz9J6SX44+39R68c25V1/On6/jL0GJGcZup6s3ZAvacWnV1Gp4oq66yy/4mq
uBTqnfG3vu3w1eIr4yi9vUc2wnwYTHqtvwY60nr78J8oC5NKFvaoucI27OSd
eTqpYvut6NNa7qe6aCcRzqYj+fOFs+X/80RVzROc4um33qssuvm4uvcFSuDZ
1l0wFINri96AutZmvdPus+3BL31HjFOgcOWN2UJjkfD0GPnFSxbAkL728GVd
E7X6i/uPQ2M6e1uvy0KwC9abUYtMy6mYb+4b71Qk6whd3GNhGvdkru7UGCOX
FOkhzcxPwzIU2BiaFUvHTq07Xhk7dfY1wlAU/9A4LtCJCXmnUqp1ouS4S8cp
R/oeh9N5tfXK2qKb90uG5iGLOKfgnurdf/L27PU7Vo6VcyaL4QvLgb89ObA+
qG41HvBhAnq3//F0r5B7FUU3H5Xca/yAWr79T3TUpzFAYqkzCQAr2Jb6xukd
iXqe93RB9VYJdbZjauneSn2jK8SIjNr/nZPbo7U4cxosDrAmIWHqjlqEKnU9
bXJvJQnDXgsCC+li4Q/pXyRFnkjh7PVZntg5oltDdxEJj1TMfm2Fy6nocoKA
bUjwd4pdvdhTvRNpvRpaL+rt6ZHuNi79fvlII4PZPKBeo1HX8SoXIvZUM34U
J+azP3kfaGQq2ECprpR5Bp9id2KJsJozkL8E85n0WeEf73JJxePgu9jHm0Xq
3Eetu6jn/r9ST69N1SdRnw0RY2xgjNogcySDo7hI59P1GrYtCr2YTuIiif43
3M3bkJIpasyfn9s5QHWscTP0m9zjmV98QX4swrtgHceY7kE1B8o6kA623upX
Us+z5dSzj2MmwOlHqwXPYv8PWv9SWj/luQjG3jZBZpfLnOky9oQGdaiok6tO
EyEb59I8u9kbiS9h0/M2nb1tLlGYb3nenDstcEnDjNNYEoeFyM9jagPxpZrn
o0RC8W52nHA9UY9MsfZjry6L8vu8oa1gCrH17docHE2/+mnbwAFeJRVKFKkT
4wKu3Rb2F0S6uiPakcaE7QLYDW52sWFlWGopvnmSegX7g/c9urzILTaevvlh
zQe8Thy9yA/D2tQgit2F2g0DbKu6MI/oluPzqAaFc9mrzJz+A0gI57Q+WckO
3dnICH57o4otxzfcCCPiUx3PK7+DaNglkF8238cP/PNJNqU/Tvi5mr27Z51j
HqekHilxBdYacPJtLiHuIkVynt2bDzA9k6diHui/DXZhZMonGjEvnvkGgD04
ILinFI9is6BPOGcPZu3AR2wSqrOPIL7Obp9ItkVrh5gXCBKRnUNYiAWReVqQ
WCaTOI/XMsTd8qRUIjtVBe1qmibbx/yqBUnz90O6gwj4AQDdJw8xQruD4Mdd
4W43R8TsYu2GLbsTo1q2wR+uDDaf6tMk7NMfjZwM0l8gMvcO0HR7n9K5KToi
zUd3wH0yKHXhBhTRwzx45UCS8BZdi6r9PxeldVb3fmxOEc55VLEukJ72e1NN
uU5AT680vj9K3ztHskQnfHJ0IisdvKV7pFoXTBPc+5zevE+K3kFpfPx6TI9E
B93qfzAfZ7XoO6tvK7X3g0J20lu7766QEnJs8ztt9PSBlJ6ezAI0b3nRtKDT
eDAjWs9Oqe21Ltae9+LvFmWPraLB1SxaRd/P4bSKkpuXQ8bWxu//izbp2IUd
435VZvNOjy3Fi1ac/VHXSbf7Qxumv6x7RNG00vu7FPeeK+R8LNLJ+I7VVL+D
9D/rd5B8h+Q1+Xv3oAnWwa0QBqENlczRGrAK1rPfQJgyeo2R6SWlIXUJoxq9
m3kbvqS28l4IXwJeXWDMezBKT/3gcYq+cvFB+npwkrf2BoFnkMJz4cklBo5D
wDNI4yG9dlSmD/rwy+CYOoj6oE8OPK6ACeAZ9NFXw7EQPIM+fD0cx4Fn0Gdn
B/De1vigD3+ZOpfBee8YOUAFwDDw4n3QR39vlO7ec3q5iHfugz586GiMfdCH
pxoUFRcf9OFnjfLPek7OYjgPAM+gD798lG75c/RgzHqyffaPnlODwDPow1O/
lTCX7N5c+plKwHKjRRmvLCgusBYYCwvWGK0FJcW6kmLTImNBMX3ALDYZLdlV
BcXWmDylwppvKakYvRaYU5ljMlPkWVmvV1ZmmU2WspJiKMNalVVO0KymSjM8
scYUxKavLrYWFJmytBaT0WpavLrIZCnI0Vgsxqq5FpNp0VjE/F9ZkqVS5ZpM
efLsrDx5TnaWIpaIzUpQyeOzcmNN8vjc7IQ8InsGZWqWdn5xeUkOzUTPl1mM
ZmhSltZYWEgj5lSaLc9oFpsqsnzXGnMslhJLmcn61KEl1qpCU4apzDrPZM1a
lGEqLiuxQLac/KcUemNxLuT0+jNKQSmg3fFOX4cCrSYLjMgoIlYeQ8QQuCkv
O3eGMicuV65U5sTn5MRlJ8jjFdmEMkGugmOjUmGUK+LyEipVyiylYro5Z3oh
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority17" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority18" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority19" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[neurallogic`Private`i < neurallogic`Private`j, 0., 
                    0.]], {neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority20" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority21" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority22" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
2huO+p8Ys39QLSxTrZ+vNtREfYmphzWpPeOqv8JyXG0LgUcKt7TOoSjJ/pGr
Q42rXpOrrZiC5DB9epfas67/afojEVBumzO5tR6Iq4liL5++i/U1VmhjextR
rC40whIxd0zxEamJpnc4CJuV/6SGQ/ASho2RBmlCheFa6jkloYI3Zt8qtCVn
YiqeYSxDcpdIlaqF2hwTkrdwh8h4Zg15k97h39AK+Z7ECglYDYlFEhSSLpFZ
pFnCJ3xvUiH2iPrcRBhESSJxfyb9hvrzn/BDYNk71K9bP8K0ROwDJqRwyTew
VxShGvYZq/WM/kt/wyeY4Ysz+jeNDV6e0X9So991xuBGkj62h06LzUmPwuhx
8ek27rQ4TvreEMoeYbpNSHpkPi0au2us3+pveJvEan9m8IRr8NcZg64zqq+M
9euTDG77G06fHpkeGfk/Tf+r1uClsf7dya1VnxjrvyIZyKfbiBVGcXvGQFyb
uDqYAMsh16r9yVEHBQ2y1P/kqL0GyePKAut6MV3RPPtSkd3d/2pdhHH+5ane
B1rmqj9jqb3xVBv6l504pCB1/9fpG9XBqp/x1f78r3ZSWPuaEPgTbJDSpY4p
IYHb6PhiCzGDXfwq3DGFtqCOMVDHOJ9CopJqaHpiDlMYJDKhkiKpPKFCKBbG
usnCGvkUHpUSSdUTWzKFS1u5OTzSyVrqcwaji2GjFcJUIP18xp1iTM9UTZnN
rNHFVkNsMIJYPyOFm8NSqEsR5jC1ZpC33+AzbimQVpsp3Fao9TZjrut2nKFM
OXQuNJn7+QzqzjIzhcYU0p0ipVob4y4zRt7oOnqVEoVC9ecYM0VKtTrrmGKL
HBY/kMNjFSrV6xxN0j1Zm+LPuNvFMFNoVSCpPuTf4MJbY0+REk8X9jY8UENx
GFN0yBfZCNN3h1BiwX4u0g608pVBXH35tD+R7mhxGG0fhxaVT9vDooVh6lGR
tN14G3USA6DNp0Xn02K5NHBq+Bs9gsCFNLCh3SxaPIQXIW0fkxZLTMTf/sKk
RQlpa9TpGpouaYePYiQrl5yT47XX7A6UPAuN9VE7dG8r5z+MwIQ7vLtF14/Q
nu22Yd5eufNg87AW/XvG9V7/vYZz7lzlWuasy47qeOwwp8s2xRJkipK0sAuL
dU8/Sg/gwLMC/F9LYlyyhJQP+RVjYiQMkq0a3/33ezdE2EG8C8MyeZh+Taay
YT/LRRgIz3T4X4jZCo1/93lRm4L9NjkMI0VirvMHI+ez8BH4HyFFx6uMFkMi
YfI/sNQaNxNVuhCo4eI9XVjapqVnd3OxSRoRjOCc2/HNbQq5a2pttN23F634
QDN5aiXY7of/PKjH6EKFT5d6/XUWiYkpT42qAQbdbrpQWDg+IU1R9ezud1Qu
pvXpjvYn7PgUDKeCxJwc9lrtBRXDrNAw1uQwr9N0NYy1e3ImC4nrmvNnhhg2
iGQjnOTxdurZ5Rg5/1P6f1dfIQD6FTBc2Dj98233fSSk9Q/9iZtSyUwEuoRy
+kPmzVYk5sjp/7b5LInkOakNfEflU2e9gEryJzt+7h528V8Sm3/q7CYSHVOa
6kI7Rq6gXsYUahQ+Hfbkhi8MU/502JugSiBM6x/Buu9imlf8RsIyFcloPUvD
HB1djXWZh5XMVt1UcJ2tRTZdie0QKhfnUOwPY5kBaP2rIN1j8O9SulC//pl+
sBZpudjVNqXusIuQtjeetidnN4MIg5BklzJcDG/UGjSe0Q/mKOLDRHp3Kcsb
XJcfpiy/G384OpK2n07b6w6RmbYvkhIbnx7JSte9q6H2JlPtGUc9nKPePag2
6Km2lFlv8BRitbHBDX/DYM5BhwqRQxOkP4pjhcgR5fFBrVg+bX8IbVlIehT8
LUyPzEyP5NNizWmxY4qwbJww3Y+evlsnPSonfW9O0kLIsP1dau9qIGNSAhrO
6EPquYv/3e6vf3syfVD/yHS1gyyfg/9dWmd7dDJTL4FNPyQ7PKI4FNYxboWm
R3qnR0WKokNo8fz0aJ306Px03cbP1Psx9b891V5kqnVPBfalLHOD9lrDGzzD
h8b67UmG7V36L54Z/EUyDNbZCKDF/iTEec85k4zw0+PiafE5G9cNZ6ojCRju
MLztr//K2OBprUECCeXKu8YGg/7UTaki27t1DoWuy0EgH244vnB1EMNj3eFf
lYHT9Digh07bZ06Lykna2g0IoUbtT0gxHHbtQ57hi2farc8MngIB7roOhaLl
RSK9lDrbwzjCKa21a6gDHh3vuhfthjzIp+0GAXqn67bdVHvDV+/rIhKf+p8s
9RFPtXCmWjcHT4hdCKq98FQb47Cfv/HXv5Fk0PpM+w2kdWODemMD0OArY6Ng
Vh5gtuWlFLujkBm9K0D7wOw+oNM9PS6ShmF7wVUswcaiDN1ZrmKGrlKUpTuL
nXQ4K+uBWz7TPNDRwtLlSKbxd7bMamyGPh/7T8Su4Cj/MJZrRFhk6K6gKJbl
YoulizmLLVjBEVGsdaHhMfGseFsblrmN1aKA0Oh5LPM1/uEx/lF7WZZ2C1mW
HEvLeZtigliWFqw1MeH4M8vCwt7S1t7KAluqUMtI4rhyGtz5yV7+23/ZuWc1
e8Ge7/RMdf4u27996TcqO/dcXfDNibX79+iZsrzKJ7s0fly7nS09u3bnAj1T
c+wS+AykJExFOcocbJG2zzsyB/ivQ1C1qS75pf5NQC085CovkYCQjmdZdfPV
ejzBdNRfIANS7/FUGy4UJtH2muOWHZ++m9Crd+TJOtsiksM50fKjEPuwBxA7
qCjO3XU8J3I4CQYLkAHwNWDqOhR7/EG2wRBIZyhEaaqAQ6tDn5Z5koZwtrmY
PC/fxTyZvCAneb7oUD6Pd7SGztU4yrM76rJRy8Pi6DqlmTM1VmJ0zkosmUVH
/405Y28hDxXAwiarGjI32jR1oL1HmZqSP2fFJ2mHJ2nHnwnS8/ts757ooDA/
Pw//yNXhgUHxQYF+K/38XP38vIL8d9lY+Xn6b98ZFMiLivLf67c6PDroy6Ao
6LWY1j859H+/0/L/p23tWaax/lEWdpbWHv6h4X4rY8K3R4dGhM+x+NcjMc7K
b9Jq/fzWB8VtCNgRtD3aD1/Q0z8qenNoUByi+b+y9187/+Hjn5brNBaXWk51
bI4IDXT3Dw+EzT39/rXpf1/d8v8uagkRWy7lLPu/lG7b/6N0W/y/TLfF/13U
TknZ6v+sD/5/R7f1rl2xYYt3RURELo4FkiOiQvcFLQ4K9w/YFfTf3sSFBkaH
/PMiMHRPdFRoQEz01Byo19wYZnSKzk/Mn7b/GunToExau5mhe/4nZlHQr4Wh
dw8lNefOdOn5Saei38figEFRMkZxekVx9jZO4f0cwBRxPDczt9fQBF20BXTL
LpHToGimm+4gz2isVrmWkT2zTjeH9EsAl7I0ZDMzdHKYNTHsxmzbBVQbb9GX
vzZRd2KXWe1C9fEa9c3MiMlhtpOr6eOrpXU9YQbqJYe51oQxbcLrCne3pNW0
MQ/oKQy0ceI7r/HEF1WTN4UxzXa4sqh6yUtbmfm11GeMJn5dJDUkMozeyndt
ouop2ISIVCl6RbXobHSpRp0n7RxnxkZGDFd5qUYt/qCh4mqQeWNdPecRad5d
Ny38wY14sCLeWMADc4F+g5hHErJ0isj6kZe0YutrMC6T4UtSu8Fy/76QTaVi
yfxB5d2eVN78VAMLDsZUEP0nk7KU7jXvjTgJzau4oZ/Dy1zjv4rBwBRqu2a+
ymckb1J2COBjLDq1wJMWyjzn1apBoWA8Tryig6eI9e2NIzo6GD25dkE7b7bC
cnvHsCZqoArtoaqrfkWSjieLpaXgHsHI1M+sLSRpPCKRhm8y7yXpDt9kPeDB
35zfebovPGHBc2QexzN1I93RflDkT3Hh0Pm5dS68OTqGvhdXMpQxai3rearj
qzT/30Q2+Szu4iaKjg0rTYil6aU4YSKCnosJxqxUn7Tn9Jeq1C10oQ85IL+H
SeHfj9p+n8s+Eu3COMBjrOExCpNOiRhC34YMXyzDt+mg72Cqr3mqbw11n9pS
LNZ4WSzJKpY3N7ZW+26+1l1M75VdExZ/rT3euimEncel+HFFXlzKrvweT0pX
ZVR3Jfe7jGgX1QM81TU8VbSwqnDmbxkzSRkzHxyc+TZ15jxFG7TwMmzl/GUr
la1WrpnbXqPdnq/VjhbuwsSn28VGTWKjPCHFTyjyEqKFMyldp6O6D3O7D0e7
qB3gqa3hqaGF1YTHGzKOYxlLHyrZDyramyvao4UdsBHzZSN0qxH3uW9qtN/k
a71BCw9iLFE7i9LEouSxKH4skRcLLdxEYQVFsYO47KBok6ADPPU1PHW0sLqw
5E6GBTnD4qGS06Cik7miE1rYGfMyWeZFtvJymet1Q9vrrNYHtDCXJM5qF2s0
iTXyxBp+4iwvTBEWZiryF0dtX8zdvjg6YPEB/8VreFqFe0W1s8j8bKHORdsv
3Fki//znDZQkRlrSoW41BUsd6vwjWpoNfHjpRby0VSdephAv/9DAX64kXuoY
Ey/T8Jdqm5j4y9sr8JdjRvjL7/SJmSPES18X9PLGLE8eS3RGjxqqH56UjJUJ
9fmtQh0yWSec2UhirMQtPH/NwRqDYF2duTkvC7lMi35XV6XlOaa2yObg5cyX
tdp0M7Vzemm27rStDfxyLTpdkfQ1qWYl4zCJWss/dNCBXu5v+9Rf35yeqdJF
SlMVG7OEz6j+hjX8+hodcL0fcunD/tmk1ckaoudg4k0hycdN3cv9Oa9IBjDl
WVrNPyNP0j/4Z/N8pkZGuhw39X6lTn5BPiD0p5ho4XSPyOn+6yB3TrDunPk4
3aH9rt0HrXNMI8v9IxUThDRl8ovkBJgVQKfzS3mYEkeH8PU1C5O/yQmKPwvO
ReYplKsvWhjsn836K+2ZqstZQ8SCG3mKhTNzEGEoevzwC907IPtMeXKomopC
1msnq19qUn3IO0rPzFpPVg3WLVyIk3C139XhK/sc09Jy/3zRN62IBPJROQne
chJ+WEQ+nhPUWs7PBZ+t13O8VpjuTyHrxydh5f5jX5DnmDMzDQ2ePzPlJ6dg
ujasFCF2fjWH6VYkZYqKB9O/ZdFup2JlXDPQZGsq7v+5cv/vN+k66JO2hIET
qtHvZHVdJ9Un+YoedWOh0rcoapQqTUUNhTz5rDET+lc+VAuWSHjBbiHTrabL
qagyhKaZjh03pYuSDnExyurrwrmwn3k6vt9p+UwXNucrnzRLWxEuzkBGvytF
dXOOKUsUrrOZtDAkGUyOtVBucg3kKdVZZvAXBeu21qgShC4tVb9s1e+f3cUA
0d02mWtOZzKayIQisOQMyus0Y/evTiH6PVXkUa8YUbEdUeHLzgf6rdxF/Pr8
UlCXVQvnIj3TJ9lK5yJdwYrb2JVcCmogK9Gn7OxxjUpFTpCnyJq+knFIRaGW
+41qUDZf1dwINFaGNGaE0/uXnN7yDOGSYN2nLDXCAmxK1e/Z3PDPrlEt98do
1z1VkLVdl6u6SWVK1YeWJTflBGVS7OnnkWS7QLIdIQd9km11LMzR+80c1VJ5
M6MEmpZMBYp1vmp5A3Z9Hiu2VUh/IsTseTpjJpR6NT0maSWWx9ISZCXx01XF
wiX0/BkprkssmW8gsRylkqKTM4UrqY8NbFjJ11jC9czsqgbu9TqqW80shaYC
imj2Pl5tkuc6hQbFH0h11Pp1CgqcdlYRVecwnr147wxJYXctH9UaKDTrz6Kb
7Ik0yt3fVbeQZBBdF6l+xXi2FkwsQBOZzJpIEUuPzyFS4kyBQpnFnRpaAnPd
Hm+WuLVWEDK0cdYvCnFNqiJLvQs8npDP12NydnEZJFJmor77MkZt2E9URVIU
KbymkGSBU/EGp4ICVPxulBR/17KLZ6jApv6qmMzPf5vOWyG8q/milruC1UWK
oml/oDL0mO5cjE29CancM1W8N+fWQpHhGx4nwHMr0DNbbP6Lwn7ulxosbSEN
hoZqIHo5hlP0fn5Q4S+LO4O0MwS9w0DvnIeavygkNKlS1mbSwj2ZLO2jaKIr
F6tTJe8T1hK4YNN8zQrYyDzThXPPP4lFVh49832D713NFJdqtbBMw3JgdLh3
kNp7VQ/yfbXa7ibDd7ykg8O9HNrAAz2tk3JUkii+JW+mQDMriaVzMenQxVXU
dg/SVVBXIVWhSekGy0gX138N0r/5SzalFvSf5Ar61x8k9F9jDDrWlDawkI67
mNy59DsHAvM7IFJG0vMjaDedn4qSMV3cECmbQrK6nFfOSOZnn9FaZ4yHK91U
aVO926JgJfczemlFTA0p8i8dDXl8mEGa8vKmOSFZPmmfuafiEcttJrVg3fB2
KxKK9aYsYZXBFa2DGsrrAoHY8e3YeGzD5jnOlq8WK35muYtbf+srJmhZo55G
Gu6rKaOLPSNZ0Xqg+8PQm6VHIjGW0ZeSqQQs8/x9dT5778nYbP+ZX/BwGnlA
418pS4KVvIDGyotZWmeAxkI5jSn6chpH5mDf+FD/I0wlYpj3Myer5f4Sn+TN
gJgeaGjDPM4rDToxUewI7mqY5E+54Yj7eY3ClJ9rftu1Llg3wH8W4ef/KVVf
tGn99mxsVrk/M4NzSQOFdIukKT83nzHl539tItscD8pX3EL4eSDs/lkt7O7D
MuNyuDPQvieFIJpCilUtLJLynA2hbAb0vmTjmcZDnmn+o/QqMPvZrChCR5eA
/61/Wgcr7YIc3ho5wwLxHz9DriM7Of8hpg3f+KRte5VKJDbtftcT32oeN21I
DddZs319Y0oyVluznkWE4py0B1zmg1Qpl+JtR3kUKUpTreeXGrvP4OQEjSn6
ESzEAwtbH2T4JPu+SjuzbDDFA+XGvxWmcmPShimK5/sprQzKPqPfCBTDMy+9
tu1bK+M9dpnhOsnOx2cgiXnKJaYzE0mMipLgVvLnx4Ow9MipEMzWFh1CCScd
JRzaC+3FtjOBzUwhhoAGQina/9n9rQ91t076VJSP3hisdDPJdw53MRcNDZiD
447P5aKMVQoMyjY2aDAGVJCO55k9peoZ255vz+7SL/ePV99Mmoni9mY5dcKZ
cpTgm7zleJB3eiw9HonTzaDf9atjFsdNWcQ6sWAXvq+2Z+cblPtflHjPQ+uQ
feTrXJSv85cv2fd4UHx6PJ06P7nApv2QPiC0mZdUfUyAze3rdoiyGxC8y3hS
aBoFoC3qjE3kQRiilntJdRsa8t0Pqr74v0E76o41JD2aw3X3IAeW8uhN/Gye
4UvCSJLSpU0u592ClZ4n/QD5disouZTIt4ryfHucvy1Y91WtYfL+u4qT1YTX
8Xy9tD+3xqZCksa2yZP0H/JJO45zfYN1+42NyLnfAHREQy5+g7tdnNzsAswK
j/lQBV3puNmdM+x3FR3XPW5aSNMEjIL5whQWgVH2yqfsMGs65pOWMEZMUTDq
d/1Od1c2ywjMTsuN6xIftXIzboEjz5yKcu2+9SEnsFoBD3QpAh6gP6bT8/Wo
nNJjMcgTarTlkUAgX3+fGfO4T9rXtgfx9eth/W5do+OmY7QnQJLQD0h6RZCU
KJ9yw4xz3Id61PMgmBYynS/8gx6lNr3klvu3ulB9LXMWK5JdeMJArBAAh5DH
yXm4Uhkw7/pgP+QUnlQ55g2SI9lipcDgbOM5biaQ0hdD/M0Iy/EhZ71Kq+Xr
ZgLlaXrkY6Qp+PLcrBAIzmIdnDLsUjBs97N6VAeh7teITbGu3OFz5TS/MWuF
WTk5k2zO6Xf9Uc8ZcLtSsgQryw8GNjMl+JST8inDZmMw5dsQYsoc037XO3rL
j5t6HgzX+XvOl1+kgSFwv5Qbwj7qlCGMnxDuCtbdSjYj0Fo2oJ+ILwKz801D
DMDuT4PdnzXAp9yQT5mdh4UF64bcIKZkHStV94h2C8rGzMr96TOvXtVFjndV
7jAcvSmHUY5JLj4eVHrw5GQgfe5U1BwKEPY4rK6430LkQ81rJcg/ZwaVisHy
M/sA6ZFPANJLyc3/4nlyESxKJuBbq5yaqDx+eLBu/I25BAMnAW7GeAdls+YG
Kw1uRzntxVxqRMyu83ppPpF6V/EYqycXedk/MXZuwwkfaiHzK4KAuRBj87yO
mw6C/GL9wxuR/IThcvn1y7e/nVcTEazbaLKIfAr5q9JX0qbIC9rBSvXJwXO4
nCY9lB52zGFhmqcR0m09UYIo6JJTkFItN5Ubczl5PmlXWV9NmcqgBUK65J8R
/1e59c+THyRNQ7p/bzT4/XiQucov8jBrFJRds7Dc35v2sFYPaeGhXAtcA3n4
EyS3HA/yVCkmtNAEWhg+mO6TXPQqjWTodSECmf0mmrxOipGH3FGlkC+zzyx6
aoIHJh9gtP2CYbBSa8CkXxnH9QfLm2+g2QDNR10H1s+lvDkvbAXogs0kv1Lw
j89jMB12cRV0AdN61qynJiNM24LwzpE/fuMWAt4ROgBIcrF00A2MA9wxnAYg
yZs/l9IHIKn2KZNbrXa3v0hNkfZQVbR6eP0bhOnG1KYwncuYHNOxtfLvL6Rs
bViBY7rns0bPHPRcc1ezQrHSXbiV5QSotd4dn/JePmWuVuH9hXXbXhBTNLVH
zxxvWntXs2HFMsah96/UFEnJvHEugWy5FtGsDo7CX90OCDz3UqbAc5cTAqMM
BJ4Ziu+W3uFoR2sc1tHSpicnjbhQZ5Is13K1KTOTONrirVtZzkAEi0SaxMcr
XN9/4/wLI8Zfu1bM2w3QMWTpubuarbC5g4VzjytPuJXrTGBtQFajlClk9adn
F8zaV6tda5WumEz3bU9Pc42wXJup3cEZU/hYqA5wnPdRDscH1aeKgj9da+n3
LId/9SOKgv27jb5Q//bXhSS/4d4u6kS3Ew51IwedB1wR+mXRjI+6aOVAVzTH
5a1r7UFgCq2yoCZzXN70RE1dYHX2WKYssKZDC9f0Li4gW4bZUVIAIFsWA1U2
z1OIysYWwWGeiy4dwWF9MA/jjWcYP6NJamAehSc9qU/APMjpgK/4gSEpYJyE
v3JTOcrBIVbG9GBdLtuKcP1qiF1HxgKyu5aU+9eo6nkZIxfQS5ZXbsbyyk2S
zMkNYqo+BBfAmG5rtg/+3ZC6cgYT3NubTH7V9uyvM5Zna9zAB1hp1PyI9Dfp
X5iL+r04pmCb9HeKJLA1Hl2D26l2UucBE9lhXWimhtpGVFtoyGuL2UlTRvWD
VsVGkwt5QRzVR0zc51Z2O1l9HiDxIT9k2YG3PaJD8rPHaQxhy9HFt2T73CD3
jN8JlPLCqt91z/etOabcjHCdWcs02cpkBZFtMlGWCnMBGhwB6uPx4PSKPhWc
fv6eLwnW9a6zJgT0O8TG7Njt2Xzrcv+mDPs1bARtHOQCapBvvuMY2TM3KD6j
lYgRXwC92/7K8CG3IMjbxf4E8joFwCIp7SbcxYNs6O0yQUHD+Kg8aOxW9gzN
5tmEsAk0kwFlyWvHYKUA0T4z7mKmKUxJMMPjzD9T9ih7h2bX2kQSU47DlLsH
lwcrhXynR23imC4/C2jf3XQS7Z/3t2G67eh2auKfvMu3eiL0oXB0wuljdEaw
brvxMiI/tZWqh+UNB2djy8r9IyWfj+Ncb5ZzHW86xfX8U+QtuUFNqk8Js9i3
fbD9oAQXQGy3U1H8WVDYUwDMTgGXjqIgGagkD5LZcuL3K8cD8ctq2F343p1g
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority23" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQNAgASegbVRkhxBDEKwJiRoVLSBWXGtJgFCwPEKI
PLTK5CFBiy4qy6WrbkNrrbt3dy+taH3UGh611GIXxa62qEDBR7c+sFq1Puqe
mRCl3t0/7p83v1/mO+eb732+831zjjS7JD0bAQCoJQAkaz0XZ4gAYMF5No+Y
tGD5p3lFD1tfDkgjUygaKQ+Am/BlAEMKGHA+Dv45tqitmi7mfDYmT9iGOHmT
WdzQCOZb2aRkDiN5W0DyMCYXqbjihf5yS63e3CmN0gW56jDNNkZuF/dDEa6d
W4t/gcgtTvFU2dT62DdbXt2Kf94F5W7EAdBAKI/s8sNzNzC3R+12wseQs7le
FJSypS7AOZyC1bZjHgkiSzVsAbzLXCzy/ORFwskpnyoeX54fq3NyfytCxAuA
3WMguCJGrrtDolFvTJbwXej0TQCkvsd1ILNWEW59aNBG5iL/UjGTmRGKyNov
qcVTRUZ386Ip7A3kHvUu+avsCQ+8kl+6Qgg+wraOn7P4zsLgIDbqf1Konjd/
ic6v9+VXX74TsDhOeHJSM27eppjTQPzc+ZPuGDVoziYiMX1G5JJQ3Z7g5hP4
BJ5+qfNLMvN9fRMbYR6CiHzuK8xeW+5kFVaEk0wmfl5ECv3RZGxKgP9wFIYg
aWIAvoWxCKsdeAJ/HJynxJPBJA8jI6xeA4IMyJ8DubHArwV8zf7gPkWBjKAD
AuDnJmeCBwb0JTGFmw2M6hZtQndHUiuS1KVNqNPO7NYmtNoSPNpEJ5oALmP8
a4TgEsBujPCL6vk3DPzbPezLQFDUwx9UC66CJq2qpSOpAVUf7Ehstc08o030
aMN6tKpaNLGhI+nX7AP8wYH/xH7GkditVTWNqg5r1ap60JlP2QvxLaBFSXRR
FgvIiaAa6AHrTht7nf4XiKkG7YBg2cNPGCMuNwcOaCJOGCWnjREnmgO7kYhv
pZIuhHCZDa4qGYc0uyryHVYzp6zJpSQ4lfmOci5njZrjkbTbwi83S0B7+MXm
wDPNEd9CRjKiXSM51yy5/Gt2tILLqfgP7O9GnDdGtLdJRlW7w9ttET1P2Q2O
Zh61Og2X6PXyCIAKTHILlHgKtWqpYXUvgHHkt2oVs6UQjwB6pbge4j+yTXqX
Ip8IZoMBUE8S4AFwox4Rt1zmqoJmkJwqmatUD+V7TXKZ8efcOd0W3m2M+NYj
GWgOhNG4ioSDMi6nvMllAdyKSpcy1bUmHzKia7icUoPL0vQc+3mp5Px/YK9d
Y3ZVcTllsn8bDTIwUvqYMh14EBwJwdjqiWDP/4tk24OoHIHMEPB6i20vd4Cn
xBrBTgTMh/stEO634Fq1uNZPE6shtvghco2+wU8j12Q2+WnfUwXbje0j3B4n
/gdMH+x8/Q9YarB9VbIBAcERb3rQxPusRLdDSbpK89FyPadiL+fNcwb/Sz3s
624OfI7gnArAWUNwLG5OGc4pAgKLmVNKjymklwCODRyrm1Ou5sAIwSc1hV6S
HLObU4pzKnvYN0jOGoxT7mWk3+7DOBaSs0DAFQYl19Q1AESR3LTzQdv+hDc/
HiwoX87fdPJVYhkvd/2Xmu7WI1s4g6VK7MTcNzb23hFx3+cd+cFYFTHpyw/V
8qaURsuFbxIneVTOQhgHLvwz0HPS0PTITBS2CjjFxJ56/yjYAKg+gGAAoAAV
p5emo0wS+H4GoJ0avzcCB2yKhkZBms2MEAR5SgOgnH+O2+nHpQXRPw+oybjk
XqoGIgBGsWxi9wMXF2V4KM00hiClISndbWyYcQDgNBlU9+dTsOLRFAg2qu7k
3DuIehscM6kmR6nblPSCAg4RihDxivp6nW4VYJK0KJ/loo3nAJdked31WpXw
40GvXK+PJML7U89uO4oD3lgHf5o/iePleWq85fes54xf+jedFZqEPtMYFMb0
7xgPQK4N+FF9L6JJFCpMqa/ze2HecaZ2gogxeS5YRfof2MaYWQfqsyl3PoR5
ugvCOC4p6RyU5ImQWbValbOjLhnWikpY+kp5cFNcx/h3SH4cLxnWq/CvmiV5
BIsmc4R1o7O6tLPq0FndlXWwVK7lcqr0LrOZs8aMllfC8uIK7Rbyr9XzBwlB
MSEYGuGPpPLjsM7wi1LJOWl4uzEij9iY+IkjsQfuLzTpE0eSE03sHhGVGzhr
8znx+S4LfJIucz2sipxyGaf8PguKrSBdWVxXqRjWH1jWbNFwC98Y4P/kgVsS
ze5qlgw3S7rp53mj5IRU0mmD1Z79j3ptAiwjTfTzYIeqYbQU/AYqfWRPPIMm
tnTwPi9wmTNdFrPDCqucwWUVu6xuV+hXSwQ3gODHVP5wPX9ILRjE+degF7gs
/HwbLPsRp2HRs0WcH5AMD4b/E4nIE6epWrQzd8K6kTpp1BGDq6KSU9mUlnKn
XkBFIGIV1XeuSsMvtoWvRyIog6XhI0Z2xgaHqrsjsUU7CwbkUXvSsDaxFk47
6j7zpwp4BbQHlk0Zx9Jke3UIliAP/1Iq/zYR1XZaEzE8OP7cYPhFaIA+NLHF
MavVEebsUNXRJfRgW0JXB/QxqVvfWgoLsoFTCgOY6QrtO86/ZhBcH4D1QnAJ
FjRccDeVX4zxhwg+nN4eYH8/wB9O5d8nor67ZqRq9bnB8dek4Zel4Z3ScLiC
V6UT8/BdiZ9oZx1EExocCd2Zn8DVh87CBrFG76oww+i5+Jcw/ght7U2Cf7ue
fyeVTyVsFcxbOYSWCD2ureWF+lnkejzKVrd16ymdG5PlJsXKk7fUS99TYcdA
sMQAlpUU5lmMRbi2pMhcUGiy4PKY2LgYIiYWzyux4CkFxasr8UqVEpcpFdOz
C6xTcNkCY/Fqo6UKlydE43JCLp+SsdqEy2PxBauL6TkeGztTrpqpUIA4ZhvP
RmiJLr3Bnm7M2fdG2fyoaWXvhU0W/3hobU7c9oA3yj6ctn3HwrVlYZPx9MOj
KOF/L8yJevjuwjemhU2WgT/BvRQK/Qnwt8hgjnLWZJqbYFw6YDYk9HTYL0uO
Nwde1VBb6DIVOGrtxymGDPwrqTClBMNUYgmupPLvtJA2qk9TGV/pKvWud6Z5
Z4eqFUnc7ZjVAHc8OAXLAFUTOd1Jux2JO2Eio7PcjiSY1PUdVBkxwth+DQfB
zN9GUxWD+h4XyWxCcoJbo2lQJ4jmfIEZYAG4RQAwEb6LnNdVn8Z3RlPr8tsD
CCgsLC+KKSwpMceUm3KsJZaCNaYYU7Exu9D0795UFORa85+9yC0os1oKsldb
fTzQDmfnH3DeGX97aUQ+65RK0KpRNQQyPirEglggl82RBwt5RrX/BYI4obGR
qRg+nugJRIdlocONDMn3QIrLQL3QweBqiPzzeBeuvkAYljZoiqd4hP5gd1hN
zD4Zhvkzcg9Kr3oMBzVXuw2HjSP279kEt2awBvA8hkYN1z5YMxeODmu+sRvR
5CiuoXMgX43xps4a6VL/UGOLQmPduDpGhoqVeA0JasKYCuAQoihU2aSW1jqW
16B+exIApmN/F7ohdqDKYRQw3GE1sZkOBcVneMrnjH/Kt1jqgXzt3Lk8/xeZ
bSCOpXBHqvP86myb1DLsO7uKNKIMPy402I0S4liCxJiOjSH2l5pM+gZDp9uc
jPFaluajmxi5jSB0L9eJ8uwB10BNIHcqTg6ypQKPodMDINGeTK7O2Gg02oWO
dj8N4TFo+Ff96pczTO5ILOiLgwaB4RxZz2CIi7FHgDeXx8OZbYaPNgyI8kIn
vCiOle3EmOhfxt0wNJLf19geOl6C7hAYi+v157Dxvq5NIO+azlLJC9XMHDXo
CMwz+OcRF8zsD7DuoKQo9oZgu4H8qX1id5CqjK2JTy29jzr8T6vn4MHdk1Z3
4Lvbp1DruZfBC8O0FHvyNLKt1oY4cXHKJexcezQqYo0K2doRuxA7FYyLPQwm
pE6jqGsZ7H287SJDZABGnMfuI+KU+GvINGY4ru5uQYRcJrFwpE4sVnPtbWf4
nw4E7ONlhNSJRYu5duQ4v0y9jOwOykBDbGpNL+tj0MF2jsM8Zoc7wEBkG4CU
y96exBwivjSsbKvVDEKDDLdITierK7ptRqqQOy59pSeAKFS/iSC8eO4xwI5i
szG7gbigJfn7eJnjRtXkCdYRC+uLJjpRat/9CP/jb2EnSVHV784qq5/El0yZ
y9KVX9yxMQ3Z+sd7d/My1A03H4cm6eJw1ldn9/+1/9ii/s+0CjR9WLWy7/Hj
oSO/l4Zg3x++3nt5d4a6tffQE53zUGznhhR7L2/9UMorjgx17u2qoh2boLS/
DsXbKEWzF/fR03uv5EKWofsJlPA5W3r3Hz37pKivPg05taVP+XqGurOvNTQ0
BLt+f/24HisWmD5ckdV39PHQ4evzUamOqVX0ThRu6EmZUTRBx9LtL8JCsG+O
azLU1rBd6Yiwuu+XYOHcuXqe+ZvfpSHC9UP3sOWcj7Cdvbwup+pk9RV2DjTs
5qHPxJBrbXXgU/mJj/t/ClH3ahR6221r0Q93s+7VUJb0H0GgJV+vLjHD4CRk
TWQqwnUOUVX1WWXJk3vFFRD5aPOKXWmU3hcoybf3p1GWrylSwlfK/h3boL9f
3S43QX9/eCDUX5yM/R2asSAl48yjGcWvQJoj6/u2piFp68/mwYBn9B++RBl2
dB067mF0VysSFFn4VpRs/67+6nVhW6CoC0PHYeh232tlUVoeFi2CEtZUr4Ce
njp67zKl5ebPLLwzUqi/dfNFEntLh3/29xXvQPPe+eE45c6Vjw/hlOMrz+6h
pz9J6SX44+39R68c25V1/On6/jL0GJGcZup6s3ZAvacWnV1Gp4oq66yy/4mq
uBTqnfG3vu3w1eIr4yi9vUc2wnwYTHqtvwY60nr78J8oC5NKFvaoucI27OSd
eTqpYvut6NNa7qe6aCcRzqYj+fOFs+X/80RVzROc4um33qssuvm4uvcFSuDZ
1l0wFINri96AutZmvdPus+3BL31HjFOgcOWN2UJjkfD0GPnFSxbAkL728GVd
E7X6i/uPQ2M6e1uvy0KwC9abUYtMy6mYb+4b71Qk6whd3GNhGvdkru7UGCOX
FOkhzcxPwzIU2BiaFUvHTq07Xhk7dfY1wlAU/9A4LtCJCXmnUqp1ouS4S8cp
R/oeh9N5tfXK2qKb90uG5iGLOKfgnurdf/L27PU7Vo6VcyaL4QvLgb89ObA+
qG41HvBhAnq3//F0r5B7FUU3H5Xca/yAWr79T3TUpzFAYqkzCQAr2Jb6xukd
iXqe93RB9VYJdbZjauneSn2jK8SIjNr/nZPbo7U4cxosDrAmIWHqjlqEKnU9
bXJvJQnDXgsCC+li4Q/pXyRFnkjh7PVZntg5oltDdxEJj1TMfm2Fy6nocoKA
bUjwd4pdvdhTvRNpvRpaL+rt6ZHuNi79fvlII4PZPKBeo1HX8SoXIvZUM34U
J+azP3kfaGQq2ECprpR5Bp9id2KJsJozkL8E85n0WeEf73JJxePgu9jHm0Xq
3Eetu6jn/r9ST69N1SdRnw0RY2xgjNogcySDo7hI59P1GrYtCr2YTuIiif43
3M3bkJIpasyfn9s5QHWscTP0m9zjmV98QX4swrtgHceY7kE1B8o6kA623upX
Us+z5dSzj2MmwOlHqwXPYv8PWv9SWj/luQjG3jZBZpfLnOky9oQGdaiok6tO
EyEb59I8u9kbiS9h0/M2nb1tLlGYb3nenDstcEnDjNNYEoeFyM9jagPxpZrn
o0RC8W52nHA9UY9MsfZjry6L8vu8oa1gCrH17docHE2/+mnbwAFeJRVKFKkT
4wKu3Rb2F0S6uiPakcaE7QLYDW52sWFlWGopvnmSegX7g/c9urzILTaevvlh
zQe8Thy9yA/D2tQgit2F2g0DbKu6MI/oluPzqAaFc9mrzJz+A0gI57Q+WckO
3dnICH57o4otxzfcCCPiUx3PK7+DaNglkF8238cP/PNJNqU/Tvi5mr27Z51j
HqekHilxBdYacPJtLiHuIkVynt2bDzA9k6diHui/DXZhZMonGjEvnvkGgD04
ILinFI9is6BPOGcPZu3AR2wSqrOPIL7Obp9ItkVrh5gXCBKRnUNYiAWReVqQ
WCaTOI/XMsTd8qRUIjtVBe1qmibbx/yqBUnz90O6gwj4AQDdJw8xQruD4Mdd
4W43R8TsYu2GLbsTo1q2wR+uDDaf6tMk7NMfjZwM0l8gMvcO0HR7n9K5KToi
zUd3wH0yKHXhBhTRwzx45UCS8BZdi6r9PxeldVb3fmxOEc55VLEukJ72e1NN
uU5AT680vj9K3ztHskQnfHJ0IisdvKV7pFoXTBPc+5zevE+K3kFpfPx6TI9E
B93qfzAfZ7XoO6tvK7X3g0J20lu7766QEnJs8ztt9PSBlJ6ezAI0b3nRtKDT
eDAjWs9Oqe21Ltae9+LvFmWPraLB1SxaRd/P4bSKkpuXQ8bWxu//izbp2IUd
435VZvNOjy3Fi1ac/VHXSbf7Qxumv6x7RNG00vu7FPeeK+R8LNLJ+I7VVL+D
9D/rd5B8h+Q1+Xv3oAnWwa0QBqENlczRGrAK1rPfQJgyeo2R6SWlIXUJoxq9
m3kbvqS28l4IXwJeXWDMezBKT/3gcYq+cvFB+npwkrf2BoFnkMJz4cklBo5D
wDNI4yG9dlSmD/rwy+CYOoj6oE8OPK6ACeAZ9NFXw7EQPIM+fD0cx4Fn0Gdn
B/De1vigD3+ZOpfBee8YOUAFwDDw4n3QR39vlO7ec3q5iHfugz586GiMfdCH
pxoUFRcf9OFnjfLPek7OYjgPAM+gD798lG75c/RgzHqyffaPnlODwDPow1O/
lTCX7N5c+plKwHKjRRmvLCgusBYYCwvWGK0FJcW6kmLTImNBMX3ALDYZLdlV
BcXWmDylwppvKakYvRaYU5ljMlPkWVmvV1ZmmU2WspJiKMNalVVO0KymSjM8
scYUxKavLrYWFJmytBaT0WpavLrIZCnI0Vgsxqq5FpNp0VjE/F9ZkqVS5ZpM
efLsrDx5TnaWIpaIzUpQyeOzcmNN8vjc7IQ8InsGZWqWdn5xeUkOzUTPl1mM
ZmhSltZYWEgj5lSaLc9oFpsqsnzXGnMslhJLmcn61KEl1qpCU4apzDrPZM1a
lGEqLiuxQLac/KcUemNxLuT0+jNKQSmg3fFOX4cCrSYLjMgoIlYeQ8QQuCkv
O3eGMicuV65U5sTn5MRlJ8jjFdmEMkGugmOjUmGUK+LyEipVyiylYro5Z3oh
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority24" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
8Z2eyHfad1l4JVh3U+CKqZ22rlUNVvJKqQBjvww7YfhOKaXynYIX1MBOs0Ll
QngcdckneebrNN7XC35BAf3igsmAXu5f+mO5ywJlhZRk7DeMr/3hKAAKLj2Z
pNO+OZMnLPfvGvvrsqXtIkXFh3SXpv8Abqjv6oIV6/NL2tcUkeej0/MiIMGW
KAMfykloXMC/7EPV3isnYUhzwc8i7LhpSFbSIS5fw9Y9S2W9CsRMR1zznoum
NH+oMrk1N0iYpTOl+S0Fv5j8B0lJG0lJO2vzC/IfyM5m4VLyVZmS0qGCmuJg
3cDAlVNS6vrqMvpRimzWSlA9aeW5WWWsYmQyOKkKT+SkvlnQCqTOvjRFatH4
oR99knVfpyX9cPkRklbNon+kFbmzCJJRuM4wt8Trq2Ty6zT/7su/n83nhjNC
ehfnLyplZ65kHu7SbC/XoJxT4XFYFJllCrfy78HFiptcSELP2VrubDpvbxCr
VUMkgvdMkeYvi94pX0TF3zuke6L4eyLnat9VYVWw7q4Xcq62rrvWoA1c5SOu
klYOs1Yujl8C5N3AUyOvCk+NwMX82Sp/78wmrYqaA2XzT+AgYTd9v3pjzA1W
Cg/MN2HucsvNUnmFFHAAV0DpErnD3iLLIC1nGUwpoM7iiUk0UoA+UoB+1o4X
yR+QyxKkjslJ/fsqvx4qw3Orpkjdt7AkWCn2nB71h+rnXyGXrZ902Vdpz8hX
34Fo6arK8Dqs/gWI0u4G45yGgontd9Xh9dhr4KCBf5duHH81XMdJq20JbqFl
3F9ZMwa8uKYGLAWKImYJKcGCTm0+eZnHtdJgadfrABq0wY+oudvxI2pjOvXb
PEUHmztdbGdNsOzNAJU3f/nWem0Tew+VtO7TnkF2B0fLOjtAS4FOtaUSZ/NY
hptwq3A71ABH3RDIvHEEB5kpADIFs8SPF1JyUlZzAjy9YZvZpy8/WsjLadJm
aQ8iMvzx4mRQTsbnFxWDbe6wzLZPkUHdEcdZyzErUiZFkXJqC0kPlPEyYzsV
lRlMKDO+/SI/+BdGoJcZFCf+qVCcnLNR+0UhyGUJcJqpC1tY4JxGBsu3+EEx
3OYO3+zLqS3SdiyzXhtpFqgOW+TCFknq+BY75Vtc+4L15S+MkK/lW/x0U/Oc
OpRMmWZQMgnNGo5vbQoG7ocJiH1Szv3Ps9ofLxTl/jTF/Rc//Vq/sDaXaQCl
2W5qHTXFAK99mnRR7QPhhBe0s/bUPcvC1ScU2NTUmcn8/N9nL7irWaSU5Crc
6vklbCEmtjgl36J81gfY4kSFfIsrz+oW1p5g6sIWe9EWukR5Jd/iz521F+9Z
1qw+ObXFuy/07mrW/1bMs0WfHDeqYNgqssY9oZbd+gHpx7YSifeV2o0kjSu9
FRaz58xkPnZc31nB0/R0Z7spuFo1G2mkNq0r62MXe2Ru4p7rXj7Apu4o3MRN
6bTuc9bY3UHSkS5sKCJpmuz6im0+Gi57VykVP9NeOJP5bCRcusFNp5rrRdp4
paVEonPyM9LG9Z2lG6T3n7H/cMIXK+pnaxuyPGgPWIpPhwRXZNbrpeKwWUDD
62Xh0gZj92aelfuZtpKqluo+tlPAYcVHXLpGLfPe8Co3Y6tmGJuqpw8bfdjW
RjAwUJRBdAi2/AgdWfdGi97ORh3jCXplaERjZ3kZ6nh8IHHLmdrPSFmVveMZ
ne8vd0q/dUN7ZfU6nB6qzpCKM2ZMY39fH3vzYqA4sG1ZH3vlPNRqXtbPtnHo
AkEMjfezS+5JG2J4bkuBj1HHDllZP3vk203cTaP2fezYRTD8aI9NPzv2KOoq
hkYPTBst6mv+uGdMfIYK/P4JC4j91T0pxv9sGt/PDnaBGSce/+JY07XkyBBT
2/K9eKMaGr78KUgZZ81ecqIAZ36ovEzTFliLS5A2XO5xCjhF0Xr4ibQuS8UC
dSTZ6Cqp2Bot8tjaVypeNAO1bPKk4stqjjOZHTFH2pyi2q5Jcpx4XqSs8JZK
ifd5bBMpS9BZJBlr8Oh1CjhNWqvoZtvZ7fScnW2EWOuO62en4dxCY1SPSVjW
aKysJaafTV2PFN1i38/OdkCtTpBIsDdqtZWDbHzwPhDJ+S+gFd27v6/ZbA1X
NYWpwXiwLtFNy2Xpn6USnUKcwdESJVy7+06fvliz1MBNpGW7oXf0Y/f7RVRc
eUmjBzZ0O5+WilWJYfdPbw00aHDZ1Sh8bPWxt1KS8wxMMWtbS7kkJwtssmOo
so/9pT4HWd+KKwPWHt2JYS1OUS9JGg8Y7rUtewtaEjM6nQJSEbvxkl4n8ID1
0yh7XSLJqcSsmS5uHLelExob6fcCR50CbpFXK7rZFUCrSHGVoltc9egxRSSR
0oShDxM9pRLvXHAD35ZruBuY4dLpATcYIRzCaoBtZogLNWaATdNjTRInKJBZ
g4F8PmuagVzvY194h0xxoo+d0M08xv+eMs1BwCZn/iOaZucN0oYMmhthpIIq
GVL/41kgqo7lfm1hIOIHHUOlPHUrsJHhPHDdMfF74m3nifwakFxjbxmYgAVt
Hb5ib6xH8we/tjKJjjcSZm+xRH+bFaGUoWUTA2BBdsiCTrWUSVoP1HqRNE71
VsjcUvJmcT9lwcYeMTt6AHxJD7U6wVCCZ3M+FfNjp6g9WTEslWfbGgJbhqub
nQIOkW7/jYlk+mJJ6wBS6frmaxJ9VTcrileXoHrofWKLU8AFpAWbDHCDPxWg
Vewx4BSQTQVNlna0fJyh8cd8XMb7+9g3bVGrd7SPnbYanPnckLSfHdcoFW/U
QyFMegTk4L0ZMdh5XeJdjGLZqbZySWs/2jcBmM5ZSvrUAo6Cg7TjFtAJrb9J
0Hr/dMgp4KUitEYSBuIE35DVwL6yRkt9m2UenZtxkcXfH7KS9ZRJvMewVKt/
FksBopOR+dkJusH8qAvwuGPXz142v4sJJmXr17tM1l1+0BQCgo1EKv59xjTz
2NfPfrmocNI+9iceIt+PZqp6vRg/NTQa0fKlEffq/eR1eizjG8W2yVG9wxGd
PwpdQYQvbC/3jpweCtZFMX7IYYDtFPWO9GHwlxwrjbuyEzVsG8pujTrZhPOo
bAFpof3HC8J8pmjWCmzkq3tuOm7nuhMn5D0FCoWvxvxk81jm9fkrNIQT+PiW
RGW6skXIRgW+bA321RFZ8YatDdG/Tk8ivrJrHtKG36jIVFdcGRJUy6w7pOLj
KhDdXh+A6IaUeZ4CAi27AtaQgURb3gFKf4VUvc8X3magln0HqF+Ev80bcIr6
nbQBDAFc/Pkytd1KcTPxrHOlzTFC9h4CkTMoP7DzGigf0sq9fwXiAfZmJI7o
Nqt+SEM/kpo/8bIZkML0mdR6Ew33jW0Vl3tKLnc6+g3E3uuxuSyLgVz4Gg/v
UoFUrAF6+n0C6H9Ps0JOeKVz7JRswkfZEc88Pdd9O2WCE5AkNZ4OVOLR4dg8
XM1263tsZZ3lv80Az3xcLJBmLH0vLlPhf0phsaQdYu3L2ZkoCldAisoGo26r
gHAco/GVG2vFtuaYvJa4iGZQrFOATOHTKPFNFYh6Mkh8aOyWeUAemp787AbY
aWuQ6bWM97FLzHGayhp7HD+2jfjQ3CfDi6Q7UQAqqMVt/ym0MvHWKVBGIe4F
eRAR+3AF3et1ijpMGGOXY17zeESnjUHkpx7/vsGj0ynK5AFurnHVA+MRkJOw
dCvSg+GWlbgiWoAmp4AjVOTkp3viEp+SHqLBg9ZPe0b8Oisk+ru5brgtd3SO
+kEOO7lPOBmbRu1lLaWQjAi3txlg//ESGs3j/Xgunoljj9in0obH1KbaCM3D
M/xlzjOyhsgqKz50yv5l2dL61HUlCVLxcpr7p+Jyiro4xdzl7onTLTdLYIMW
qz4w1evTLOebfvateYPrUIRPGN3rK4uLeElZD2a7AZjvrJToPIOguxFim59U
XIYDqncZEI1af0ShJ6y7TNJei/z1zfvKHikkvbeEnUEiT1VBrfcJUvdrszhB
RV+pqn+z5fkyu4hoWDw+scepzzld0r5e/4NZra3GiGypht2SQs962cS/HPMa
OOYLNk0nclqY+FANaqxWZH6KLLYp2yJHPTW0L0O2LMG+mVCbX/PyCYQRRvxY
xhn/6Pb3UmttlJ2tPdr2oKzu21ycN3ua/GIimlDijPfo2eyIK8mxj/3HOjw7
SsGy3fFW3AB7lVx2dgmyuDDxNHD4DeAjVRo4zJ/7w/FUNjF9k9iw31AAsQ+D
DJ+Eh1jIFX3sFqOudURYGDsiq0iiTQsDMX3sWzQN3PiHBB8HyiXeC0hyZHS5
2ykqkM8HvBG5filrxnMrG4GsvB8AMrOG6+YU8AfO0rYBG+SiRwcguadti4QA
2xIT8RvuHhCrohpImig19B7waH7v1wYJNZZLJLXO7vd+ncWSrSvdFmomab3L
aLOaABSz9Ts8YHcdyGuWRnTPNeBMRjTrbW2JYaCmYwpewGH1AOQ7p6geIJeD
ErIvkNu6GLW2DQAaicWV0FacZweysj4iLZLpQ9Akg0TsC4aQ+lbj8n7fz/7D
vmsyBJYIpA1JBJDw6xEkyN51SBuuEs+NLZVPZdYQUnSnwtr+Ky2JlVsuC2FD
j15YRpuERBjfObDvY0uRxHt3jdUn6bMeoiQOSK0TpeKZymD0rz8AXJW0vkCZ
92lniaR1P05wZ2kGYeWnpOJfcYN6d/nEOGbzKRgDtNMNORiXvGB0VHeaJQ8M
d446RTXiEk/qjfNonvCDvK5zdVoCDgSfvYZ80vZ+M/hkkeRkizUKI9YdLdd8
O8s9hhKBuCxNFDNioGh4poxIcjwCIQEx8XoMiHuP99kWQF2DA3d7wBbz8Cgz
AiZ6Cc9pFaekDdtgg9VMRMzQu6cDzpAl8qh4bM3qFPj1Jnq0OQV8QNGzHBJY
gAzpZ29GdwJY7GT51Ng8ES6zhsVT8aogzqPtuhDqm8bRSkk7ZDWbHcjaOq+F
ZSOz33saFjlHBcGMbes5vxzH4JAsivVxCDYBcN5oGtL9vURyko+tAGN7ZXNl
YCRR2iDodPKK19EzNLveOrCs4vCG5m17bB08Iq4+uzL8KxEOjjSXX5HZh+0A
6e31aMaDTuvP09Ey8PQVniUiICt1IcLGkRtkTobP5adbhiMGtPFKdW/j0N6P
UJbo7EVIVADWP9bwesVkydbZLQNJe2jiskSSg3RRQmSEruWdbWN+yNB+wbEb
tLbKcU7Ph9O9cUQ+29vYUz7RUtGB6w1VQ/PUpvl+XB9bW8cTSTo1vHPcVwYJ
N3aAPcu2ECWPAwNQN4RofwJhSqpkUDKaEfFrfz+7h4hVMLe8UhYfthYkH3tq
6NisyQUdC2RQDPXMzhzLcN3q4tGsrTfZakmfarWVTLU6083xxaBitguTxSTW
kQ522tabPopOcEL2k9U93DgqAw76FoG5xWyTFklyonH4Dih5rOES4ZdJoxWn
OhMTTkdxcTRkXXk6YrKVYRQ92erYYo0HjB6QXiiSXkIbVPGjOOLuAeT7Fm+1
VEjad0/OuOwXjBER6363FCrEgLppBckMgFYxNOQFDhEAjAhvuSIVk3BXtr0P
LeTKj8tOdU7SEOPRGTPZCvPbM7nLvc7YyT5BZ9xkK+N0/GQrz2/vZOuy3htw
AY3GXqQsiFqGhAC3DaVPtQZ6plqjK4lKNBZKwvlT4rU/JYuP6CR7AMjo6Eno
XucU8BNywdjLEFwPkj/l7DOQdwZKN49HAT9JxsQGOJv7ITwY4Cy9Dz9xBp1I
VHa+r5yKlBMJMmuIAaZ4+IqraotCkS2hZ+JX2hxUzXm2FQmIuU9P34Sasaq3
VIKITf5eZeunpukU1Qw+HiLEI1NZVctwOLLO0j72KiOCubCWbN1p7vxeLDn5
I1FBv+/o3TfRc/2gOvKd/X7g2FC2CPGEmIdK3nQNvAIVDNh0yABh0mZPVaTL
78usgVUPlWluYtPPvrkVjzTlYU9R4I1tbBlBoSdwdDhh1QMCFVWOjkvA9Rvx
vHcF9utBI0eOjJ4/h+CrLUBlHh4rK6HkVZ0NSeDx9fDOEYHfOSLfCU63vIsY
uokfR/VE97FHDPBizrqfPWsNftgQDXjdbhrHHSWSreFTybTtvV8LRJJ9uD56
rvnTNk2H0mNiDXRQ8uc4aE8RPy3a33j6PCGvvYm97z52SgV4jEsN7y6/JysV
7EV+d7VnWWeLDGL/amTXj4e3SRvKuESt7eAnG+lntyhMYof9H7uhgpz0qDJJ
zqRHlUraf5hksKBn7HR3rOM0Fp4VS3Re4VlwCBI4YUy9wwLi2KrH4XR3NdRM
x/8fUWsEQq3LIE9cxmv7+Ai9q8jsqporfGiOqL4iKn/J1rNTwm4ejWhO/wdr
VcniwnOI6hpS1teTReXE5eaJiNG5wR7EKOuOZmcopdCRBeCK3yEIV7kpQgWO
irFxhLlWQyMmEawglbIWR6WQyoJ3IcsZsA77alqB8pmvVHxVeZqZvetnxxKD
3wlySbhZPfoQ3vKuEwq+34nqGxKcGCW4kaq2tCX4ARyktewQZIoD+9d/UZh7
42F71eG/2m++evi03T1g6+3Bh6+2PlSzxExySfOiTr58K+3Za1R2RxhiL6bO
GzzVs3tiIMLo6jvSBbJJXnWcUdnb9lXrfFiXhOb3X7ev6t9UYwzTBqtadk/c
D93PcJ/Puh1RPpq1Xy3zvCgkkzzw3vCC7MlTQX2V0sUkpkmyce5ridglxCxv
RMPVxnY+60ac1CZI9B3Z5EDJ0AxVsTiYe2hrz/4q2c7yEY0txIATy8aTYYBj
y97PrKDj57iqZR5J35NNpI0RRm81XPVhy593to1kLRCiHQPu9y1vSWxfxbDn
XxK6d0qfrDpQT1b5WlkcrVctqL9BgVZUxR+C+nNK0BqefV9Q334SuuxbBE8S
1YwspPhWnaHNaoiTUcGoBpvhDVRIK0dDja5Ovh3Q04rHuesJrSiRzXb+gN25
rvD8OPOCz8GDh3JlI5QvaxZTkTQj21++k5bsN7oaTlIOTRHzxcHj7LPM3N9g
/4uUbKDpVJWgftVCCyCVPhDadkFQH4gI/HtLgeBFCGX+Wd1Mk4G3uS+HZCNZ
qMtGUR/v2l35UnZi2Yrkc6CR/lAji9ekHax/Vle6Jah3o6FlTpUI6i2VCj+V
e9uq/opRjbVLkGT3nLIJxkV/K3SI6HhabA9arijZfXrkdN2qN4+7LgrpnW/b
T6oeURYPGpTcK4KOVy+Hngagjje+A5cPdM2mG5vonD3+UWyeEvx3lvSloH4Y
GPv7SbHgyap+dVwIVS8HPnSCSb3AQpFJRZ7qj5go6GtbtWs3sqKWiCerfvpG
+Ok6t8He/KbxdKlfUO+pApuG+xZ4PERk3ZeO9599zZp9rnXPiYHXiaBbL+L9
rYzJ922BOJUJty4THfs7zuF8LB9QfYIzNtQRTIwYiJiXq3aWd2hr53sDGZj3
EVP0qFzRE3fqY1jHqoWfA50N54eerGqkM8QrTDLPFu/dcj9iS/XeqisD441h
5R/fwqsp/+l//XEgzMjiR1BORQHYjBtSk0E1dAUnnSOfdbwALqR1MIR6riGm
6vyoFAhf9ebkNPYfhhldjZ/G/m8vBS/OUkxA+eQBqWGB7AmI+TzOzLaSvj+A
mYb+9+2bVEHwu05d2D27YAMP5+dD/zuBbLfR26xm1Rxkry4lA7nnX1dfAVpc
kpA7d8bJDtLBidaaeYIT9Rr2COqf4x5SdV5Qb4g8JFq/QFD/ERaO+qITNPrT
RqSyW3vaVh3OhZZ7wduOVevy8Nb7J6vW/Yxa1a+frmL8PI2jJzuNrjZN4+g1
hISTimirhE5BfSlu9YIBQf0POFeCWwNkQppP330s2G10dSdup50xdXhIGK10
diGlgwhr3s8eGKhuzMhC+17Y37bqp/3T9r0RY2QRiqR+sifG6OpNYeinJjWS
RfkFScVkYCD35dvOkazrVYIX8bhNNQwk9LyX3RTU76JBcIisAt+rAhbOwErl
naFGZX8Kxfju5dWj1cW7jcqO4bEysuJljLRkr9FVVxSe8gb2g2QpZvlUFzE9
LeS8s4nymeN/t686/HsXWNPLvfolb/VugW8hT42qBNZ/xlmvrA5rw61T2l5K
dPTcVzbBQ2zP6w/3w4zsvJO+RLv9fb3l3Yf7+39UR4Fq7/iIxgw8ZEVUjWjs
VMVbB0Y1fjSC1sPX20Y1huaiVt+JUQ1Xo0xovbcfPS0ezNIrEKS46WRap35f
JtD9vSzjwfeVZVn1pUefff/g3t1Hpee2+clPtj8OXJfo/IXjSsDA7TaQtoiz
Mfs+NpU4My1Dd1VHUDkTGwbo5gPCOXZ+kOvyccTjC7hYQhyOQWsCtcp8Ydwb
4nAMkuNJPE2iw+vc6TdeCVBP/qsuGWAfwy9cyjN6r090QsG+SmHyZm9iAh0i
OZI+LWjPdTtF/TSZsuMKeqSne1bq4ddao8AHca01Ckhl9tSVXKWHzPqyVLwb
L3Hjw6ViY3SGWdkhFZdNPyK1HWCvxO+5hhyhLJp+gN/hFJVFJOlXIx1DY/eh
7r6EX7JkdUf7DSR6AMdX8CK7esgpqq1U0jqE39N0l0q8TZM+I+4d2u2ghjWb
DmKNqehQTCBAFc6Zf5f+HiC9AVyi4dBKw8+DwwecAsZxbSRAwfkMf3sZ+urw
K4IM0FDzdOQBAFBVDTb5czhDek3SOnl/VCnRP0AcJ77vGL3+scWuj51mh1d6
Y33sWOJuywEQil4+kmc0ulrTdv9UWNZhg4oPP91n2xZB0qfHIJvazvuxphfg
HrOnLRETnkOdtsTlLRemLzFgtmP6Eh/siLugrM7lkjbnaigQp18XlEPZjwrW
c81g1Nr4QdeBvKGRj70VkpzJQgogKgDZm3a4wdsMsG1wZDV6DdgmDhEOQNFL
nHBd62cvW0mrXs1ZnzIhW+fWqLJQ622i7DQ52YXxhRaptVqz5mx3Yt8MbcuO
mAH2+Z3TSH08vHEFUaQ6buhOBPinqDeN+eKwX6cx/41gy8/TmA/s/mPX9BXL
VvxriYRRUlacUv1S4/W/aM6YaS0L+2P6kpUniqcvOaQ9dWPwoVEWP8C+iR+H
oYPokjCpeO/05WMjesnriSO0KFRrBEMBjheiY+LPaehUyxG8SpLTiQ54Byo2
gF/hxXAFlD57CV+DQiIUL4vLOqQNldTJW7vKbTLrSrAndFhn1Ukc1j2fRniz
hx/TDT+oaRx4lwjGLcKLOY8WKOZm6U3zyz+dArIUEJWnO52ieoDK5fiVb3OR
RGeQuFYDX4zBjw5ayoDyd5r4yRxQuxovzyag4NhIcyeuMqy3dSYKmsGT8chW
BZGtGo92lRDZxIT3QdVcgR/yXO5xinoiP5/p/uDXWSbxdiSBq4e1XZM8igmr
VQSaY68MQM2tzZ92/jwaIW2YoBFHGENWjUOJHidspl/AQXQ5RCIO0qwTR50T
pQ128qPIxoHqvDZz/FADtOL9Ja6VIXR8S6Kl1OJlhE1Ez/uwXpvqFum2oYpt
bYnbgP5c/K7pCMSRg/htEvAUZYcf1Y7Gewy9TwRVnrz1q5OKZZgwhd72nH77
ck8iaM2ahcr4zAFaEl6GN3Yq4OcSezfMNheZVFy1tC0vWrbskmW5vV1Jga52
ccmyUssKK/tjdrbFVuWzbGyPWbEXTkub0U9XHbFkTWKa/bkyQPXrShFovjDU
lmjyfB/lHJG1q0reV18BuNCHTQOP5wUvFjKrd4vXNoWyCVzfPqJxxxAlxIiP
AAN4H24aL+ZVSyhv9dJLFTqc0nFsIU1o6U0czdIj3t4q8MwPOK143IbrkhK2
W+HPP3qr/yhQxCdsc9apj9B/rjk8sY7YZY+KVumn5B94cR5Agi4+KPrjLmKQ
9DNVokS61VtVIssFsJGDQ6+TQG08ZQ5gPZeSt7nne6uvRBiV3ROKveeQ5+0w
LHn9YQCgzLILgGlu7iFg+jWEFy70tQUgABz5pLHAqmYSv+7c1wOlUDgAgT0L
8fRvOKrxzSIEoUJPOC+7Y5+Z2nUymGtWH7pr/GNMx6ojOOiK1usZGi8AoPFR
mEZgrJ6hROc5OPUj0n049a2vKS5ILP4FBSaTaonLk/VCdbEI37rq5t4tsnew
ohKSUIpB9Vxi+odzxPSYz7Rw2OIwmlVHLNSjGgkKNS8IfQKAU0g5/0nRcr5j
1RVlfB1BSTNCc1tbQCQ2OASTnioZ8IMi7iKCUdGzoYJ6g8PWE8WCF2nEXn3d
+A5JF+4zcHVV2TigIqcgApfeelW882nxWRzcgWzbUZF3sur9HbUapJ+z56X7
7u/0Ldn5oWCgbdVCWwSAq+Oerrqihk90crbBWRuTduHbdb0dcsW361FXxwf4
ljxFNFcAHLTrJ3CjtOqWtLoqxqhsOTF1gkEh5kpPMIRQAit33NzvJNv/ZJWa
J15dR1bdfP+xoNdBnTCYnte+t2SzocoLRAB6lz1gx1hc9bMv9HHwUjKs/YLg
hSFRLd5/f7InccuypzhXNyNE2kjw+/eNZkkPEjVBRMIF2ZZRjQVroT+sajTr
s/LWL3nnVTOZ/lv0eWUxE7fAdusxnNJ94+5EVdryPvfpAFSlei2wD0H8q75v
GFzE+ZnqAksMV5eh801i3vi4/eSgdyqqxKBOdWti0Cnnu5ODPmyeHLS/zQrV
3O9yR06LbY/iRWOUoOB1x8cwQNQ7tSMRfBWMZl0Hn/kbFZsgCwgIuP1ceNsO
9rMJ2cCbL4C4YcpsVDXdCtNvkbW/pHx6BnH+yYiG3mLkDK8/2HQLQUcH7kPs
eI4LqnHPj7ighp6OaCwlBp10rifORCJPvYz42ANF2hciKO2u9+zcuiwaPx1B
Zhn6dNXCRkTI6ycXJnoGNbYTRyKzRzWa8YOEvQajGkYWVuC/FcVhhP9uxsvL
0Y5VP+1DreKBp6vuek+rY37eaWTHI6WhEPCm4mOv1JuoBW/1VVXLchsF9Zvx
SmrrgOBFylT9MtAngyKxEdUv0af+ELy4GWo074/k3wyz7+8qyVF5GVBX9yJ7
zKOxUws/Ghy/NzBxGnLY7WnXtJ8NsNM24CAZQG7xkunnikWSdsrkJxwD9h8h
wwlQtr03Ctk22Bn7nBvYuQyqgajuSol3BDq8q0KX05fkXy/FT3RLv8WxTm2L
rd9Q4lNpQwyXOB2WJsisB9hzNSavCA6sl8X0sUsm7ycbm20lsvLfcICwHFLN
9/Lbt1My61PShsv1/zvHgE4BXejktTh8tGTWJOCvCJPZ97PjKJNHleMfO0sk
OUSeHL0GGCAVP5Ee39ZWiV+njJZKdF7jH/j1AEqMR4eSlzvLFuH3WzadUnEG
MbzS6JMPtia6S3Zru316GTuxlzrJtEAgWz7ANsNve1ugJnmpg99IFfWzZ+EA
szmun32e+E5HAMBrvVS8QgU/bQXBKSpzkCD9e4b92v4w4k6/dJZsnTxbPXC5
Z/h027FJOR5psT0lG7tH9cYBwmicxxBIpiEPYJMQz/QZYA0fEYBCGOk5ewQH
951WgG2Npkqk5RtkMVAYrZhel5VATbAQr4eu97Gz/dBZZdv1sBcIHO2tguJD
igRfWtl9k3glDb9KafkUfkrai/vZIwuncfG4RLL10hQX3SOSIaozfjcLdjFX
nzV58joRJou5JxW/nk5OPBSnxOebDoBcowG49pSFFyPGYjo7S/vZNEXiUnYo
eqK7QuLtjANBKMVy/JHqn3aWAejbjV8s7vNoM54OuEBEp9BJa6lvmxl+p929
N+wYccsIKPARYtT2VGdsKM6oIOw4PrajczMxtiyBfPJTHN439Z1jKL5dbEHb
Bfzjv5Yyu+lnwKjAIG7kgOvxKhnUJsv62SUak7eh0nAZOiUmmP7Qz852wq0m
BmYlSBtS8fN7MLjxDJlteAlefXZCbdwJJb0S/uWI/f2eiQhAfHdw7PcUOPkB
x7OoSvwb/3SgsgXqRbwlAHspQ8J8f6Xb6WxL2iLu9NpD4n0O56GtOIa414A6
/jjOXnmGHn7rc6S3xBq/aXA80hZLdLz/feqL1IJeGVQYGzX/devTUyLReY/f
8TZfk7RD2Z5NMFsJLoLXZb1gGC+XcD7nbhrd7yf1eoE59YOusvDDBfQh53Hi
mKHZKcp/5idgtmEbsHMTv+i6B5b6DWmdoltcXjeqXYKmWxXI+yb+9YzDAP71
zCX8JmvsiNGX3Kmvba5NjF6X6OB39kcGyq+quBM3+hvcxhq2gST7cOuoGqWa
FyLtjKNYmUGg91HBhh7nAmnDb3hoW3GkeaJKFuMrbbi0bvKLI4+BDxJA3jpD
0y6VUzqdAq7jNYgEovGe9ZPfbjqnS7ZemLz3zesZkTSP4FcBQ+PhmcgebQpG
46iTFW+MrLdIot9oRVz3tFhJZIj1FfgXOPG+QLr+PxF/AsT4mjhlANE+xiMF
FF3P2bHEl7EQwkbW4sEMquWXuH5ayvvY/1GgIiY2tlXk9ZRcbvvg2xIvGIoV
yGz72H+EIbcYuhZWNv2CEXzaGr+V2lcgFQvwD1wPZOiV4h81t0g/n7pztzsi
Kwm7hLNU3WtDRCAoUeN0MMLBR6Mnhq5JtoYRt4XvO1qiNyDPAZpWTX5I4Ndd
uV5mDRGtdpbbNH/7ffpz8evpzyUa2tOeSx/gV6COHlKx3fQ35R7Tn68/wL9L
Hgav8CHu8BshBoPvtSg++PT2OJGahi66WyeL6euglXnTVyo7OP06cqSfvYqz
9xjXccZzqwUWGzcOgXH8SnyfCzb+C6oy46pHP87Q6NGajOaOHrKxfvaX+OkH
JOS4iYFiic5O/Kquu1SCYSQLDIN/sC1UtYOiRaK4+trsZ67P+XeYVHf9Xbp3
Meis02XtLgxi0tzUihl/RjbUZtfqM+1aLfMpJrQt1BjuC/6dGjUxDO4iZcFg
R1ZUYVApPtg5CVZLWphp22r5E1WTtiXtDy6szDFyN9il+4ZyVbTINYEVWxjU
pV4Pg2VJrbXZPDemQ6vlUXoADJ7BQ2TMR2SsVAQyXC8hMmxnzoHBPyS/qM0+
8zlzeatljfJZGOzDG+bf4S8QG+7SjVJ8IFpEKWDtKwwaxAf3JSOmtiEy7qoA
GdR9aOXIJWjlBipaWYZWHjRCg/3nCLakWbqgASvRgEH6W2DK0CAB6GTXqxcz
ElLGarNJR5nOrZZizeew2mcuH/h3MteIjXbpfqEEgymLjWG1JlO02vs5B2uz
/S+cs2i1HNRCW59GK7O+0NTdpbtGRSl1EWWH8dnCIO9FblrFjCup4hvZxsXM
ja2WTbNMlLektbm4+d/J3ILIeLTWBbRzeHVoYVC+BVrZJg2YIt1CTL3SQbI1
dF3jfwcLFs/bpXuTYZG6SHTc+HxhkPvSelh5V1rOjexn95iftVrW6yIyPJGK
WTvQyutUkYovIZo9rdHKlWbXQBFP5yxrtWzXQ4Mz8cFRaPD69fuAjDurIwuD
OMvR4Ivp9cSv2Ee/n/kshn4/89qF6Gcy0O+n1NIhmSfNzufxtHi6Wk10rh30
KdBoD/Xqzurgv+xRdY8nk1Wn6iqk/sJwYa7bg7HEjJRb1NURDI2jnpGsDs6c
h+hH9Vm1Uz9x7zn1AzG/Gyi0L3T1V3CM4LS6YNF1g/yZ6FdlUad+dUD+Pz/N
wxTXLqxLmvrJkbck67X86Lqa6NmKpOQkGvHDQNxlDHUdvm78MfL815hxjTnG
fNSAKaSp0hezsDXkF8mW6IfD8R8AtqVM/SzVmpnJy3KC3I9O/WTZJrrIhxzY
yMqZ/NGqtam7srk+bH06+BbwfXMPutyPTySrXHVX8Gp997HzGDZ1txzWm+hx
4jeAmmE9xb+hpBmbYCQ08eBaPY752PJyDwI3NuFWCNjm9SKsE9gmDVsOj/+r
tqsPaiq74u89QhIUMIE4DR+WqN0p28E0CQkk7ioJBEUlqIAfHRpDSF403XwZ
Hl9WgQB12a3usq3jR6mKM93ZnW7rMLPg1y4K1a12lV0Vd3Q3swbXdrRlt9S1
LaIivR+5IbH2D/+oM3jeOe+ec+8993dvbl7ePWfboWAD+Rlb4w4WtAiT8UNo
U3AilHEJGDwU+oCeBxagyU1VI5Cd6EtC7NEsw5/NzL3SzpHfnTMWDx/uvgzv
jh+/BWr/a9PNbnFH1DN2jr4InyTd6H8S3IzfLXrzOvfl9KMXX8ZLtMY93mIO
UdHPiwZuF3gM0WtdhXtFCWj/78ePL4ENaPJ2V8Q8jAxehd0f7/8cdv/Ypoxr
qLUnv4l5t349B324za1ZBV0x0Xy7dAPu/s2Qxnz/jGcx9Mkb4xE8HkB4XIHw
yIvEC+8x6CRGlIbgGl+gShUnuvSzYKQM0WDn0K2ATNo5JJWUXE462yqB0SgS
IlEI4sjRqpMGxbCKVwjjqMHDSxmySt6FnIBijVhIMz8eHeylAwirxghWM3k3
cs7qYaQ2iMA/GXJX6bmzvSVzYAyM+AgCyzSswjyLB+ODqRnZQv3OjLZEcv7u
q3ZZoiNt1kKpMvsoPO83J3slY987CMOZMPPlo9U3WqvRib2lkZN+EiZ3P6vt
ggFQ4BHNNRccCV3DfwhQFaDffOjH8RPNgvBbveaRU0/u74UAHa9v4Sfj0yKm
sYkzwYtgGE7ffiBGI226XWe68+hwcA58XXei3lMEhuHh6SA8feAHumN1biUY
gFPNI4KeklSRqX54un8Y4umh2zKEvixt3329zzN96goSHsSIHx8QQ0A88oQo
tAnR7B7RHBwraMaHCu5sN4UmW4KfwGaEPoyHJX96OmNODDoR6AP360xjj0JB
U8xPBlVro9mO4BVoZ/yDNFTjG1XDoCOngyemjR0nIezyVncnRpfnaPy70uSm
kfwnQQfyT56nEPTx4dGRnYg9lkywduiZWMtm0gHWJMU6uO5BrLkR1nwRrAXS
RCsB1noyIdZmE6y1RbD2kaE6CmvpmTFYo4YI1kojRyLn8YJRWPssjLU1YoC1
oRmsfTKXHTXPehdibTFzl5p/Y2dSZ89CajFjPzF/NHLMdI3w4+q9RxQwzig8
8/mkZ8ELekfCrsDr+mzRV21zgA4KOGFIJBq/LRdeq957S080SgzdL+jXzxYw
FLUO+GQ5WT00O6Yn48kzbNPEY29WG/4WaL7+r6kJuOL9ZuKhpxhO50/H6vsq
9X0j3DcFYusyJJnYySGJeyVgXzKFdr4Py0/Cw3tx4Zd3zNf7pm7jtRF8daoz
Bwu8q1DhMT4yXtfMDy+V5pGpM93DABc3Q6f+AoG5ozmI2QGE06ndGZ9C9s6H
U/ror/gbyMJbZ4IrT+xaZ4TtPHPnGKqraQbLE1MtVeUxkOwWldNXzCONHhVS
CeGpc9w83X8Avs3ErQ6CWXLFNNH/EWK9VUnR6uHEKRB/mQh/RQh/MO2KGnz2
wk/mDv5riosi4dCshfx4AKjLgs8UNXqIlLeppAzRKyIYdvAIfwWVI07mwaQr
32+VDC4QtwxYBpXFknvXH9KZia3qloNVr3eoL3RQs39Bg53nwRFRpF4JqteA
6qVxvZRu+z6Gd2RUDz4JweJVbW2XJcGonAE99UpHHB3O81CtoK4+7uuX6O2P
+wayGZlpumOJMSlid26UXQbPpwXw3oAssZAfepsyZGu7xO2M0KDYeEN2N55W
qh7I44Uql57Ho7doRWgO4jr6UR0aasZXbci2CdkWkH3KgncDhT2GhF2UxCiW
FKdddmHnqgXAf6AXeDfxtUEqO88nrrS2qoOUbv17SYZfon0MzQP7mHMifGh1
6Lv7A1ddilRxclFGV+F7Cfw9tOfFE28d6LRtiSu/e+vI4NHE0zA4Txy9SyrL
AuWzemkxezanfS0Px9LoFXhFP8r45z+6fJlpYO3YCteOJS8rLPuGGl5N6qyW
tR7o1Eq/aJV8O38caAp5Cpde2ATjffKlrTJpBzOv8byvqCuANj8cifa9q20e
70uFcDPFhwuOgyL7pS5+teJiV7YBLA3pXTTYSgXSI2GO+mjpJVVOKTysKxPy
f5WV/T7v416aFiTQl1JkYFsFw49OBtSrBnNSk3k/AD77jg9iaHpH/HI6J+Xe
+D5fqbj4cd2O2ecla89ZQsuMD1LmSvd8azyHJtKrGHCmqnUxE+MwU0793Pi4
361OuSpLZXJK+GCzwpUVZcYhuaaZ+SOw9mZWAMJ0DI/0v9OkFUZxQYsA3gpV
SWJ2GJUXU8X4EWc+al4LWrqprQAPKIdQsmhBB/Mzgfby0nbeW5qNgz9pF13K
lx5pbk9p1Wq3vhYXxg+bSFGfA5oSt+cEP4xNBtz8IaCl4TmwMVwWUhmkYWVl
HM5bogd0aRh7VNR9iiIZmnDeFV4URckHv0dRzXF4LZ0H/iqIXEtRI0AO99c+
8JcfJU8Eyi8B/h0K3yfyUXANPUAolAtzKOrvFJ7ThCI5qJcBHRNTM5TIUwGf
Ts1QIl9E4zlMKJEXAh7OckJJvavD+qufsuOksQ8IJeXbaJz3k1BSfj+NfUwo
kb8D+FxqhhJ/fkHjtFWEEvly4LdUwP8tqr/Qb49oLCeUlE9mcDlCSb1ZYT7r
KbmCwe0jlMgLGOwvQom8Mqxf+ZQdFvCzqRlK5L5wOd9T5QOAz6BmKPHnrxk8
3oQSeS/ggVqEEvk1BicsI5TIv2bweBBK5FQU3gXEbyJ8nULNUCKH/8xgrqXT
aK6dgnXUW/15OpXS6XFyTqvLuc0KE9IYvR4WZagpA2w9a7FUcH7W6l7OcmVs
I2e0claUBMNigZflrNWO7z8zSYWSXIQJMVnqrOXWeaz+JmhqJjfG/8rDE61W
6CR6saafVTvKccE2+lgbJ3cqLZbNjY0WH+uv9XpAb7kmS71imZ9lTWV1btbv
tCHd8joP53SzlhihpcLr57gtfm9DOMNUcaON9UFnoRpsrNMld+SpiW4R8AfH
RhtAxdys2+ZrkvsUTi3+z5mnjq2mluVgzo/asCGDy+W1AUsrYsbHotMpc3V2
pcqirVHaLeqamnxLjSNXZbHVOGryFTqdVql0oAEsWuGphwaAEuI3+K0+0H1L
kdXlQoLiRp9/pkwZ20Dyn/iL/X6vHzQn0tEKrsnFVrK1HMCBxVTJemq9fqBm
2xIpgZOX+HHnwyVgBcjFmN0MDHKsH3g/LEB+qbXa7fIGJ7dF7q1n/Q6XtwF6
hrgMNCLirch4+oF3PJzVJfd4gV+stfJam9fHyu2szYXzmjgdLPSgvJYD/kT6
sXLWY0dSpUqukCtkrKPGrsmz5dpVeXm2fJstt0anylfXKMDs0IJra57aqlLn
OnSN2jxLnnqRz7bIBZOJbTBFMo09b54xeYNLXvp/mGJRRp9vkj2l+DzTTF76
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority25" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority26" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[NeuralNetworks`NaturalT, 
                    NeuralNetworks`SizeT], NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority27" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority28" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority29" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
8Z2eyHfad1l4JVh3U+CKqZ22rlUNVvJKqQBjvww7YfhOKaXynYIX1MBOs0Ll
QngcdckneebrNN7XC35BAf3igsmAXu5f+mO5ywJlhZRk7DeMr/3hKAAKLj2Z
pNO+OZMnLPfvGvvrsqXtIkXFh3SXpv8Abqjv6oIV6/NL2tcUkeej0/MiIMGW
KAMfykloXMC/7EPV3isnYUhzwc8i7LhpSFbSIS5fw9Y9S2W9CsRMR1zznoum
NH+oMrk1N0iYpTOl+S0Fv5j8B0lJG0lJO2vzC/IfyM5m4VLyVZmS0qGCmuJg
3cDAlVNS6vrqMvpRimzWSlA9aeW5WWWsYmQyOKkKT+SkvlnQCqTOvjRFatH4
oR99knVfpyX9cPkRklbNon+kFbmzCJJRuM4wt8Trq2Ty6zT/7su/n83nhjNC
ehfnLyplZ65kHu7SbC/XoJxT4XFYFJllCrfy78HFiptcSELP2VrubDpvbxCr
VUMkgvdMkeYvi94pX0TF3zuke6L4eyLnat9VYVWw7q4Xcq62rrvWoA1c5SOu
klYOs1Yujl8C5N3AUyOvCk+NwMX82Sp/78wmrYqaA2XzT+AgYTd9v3pjzA1W
Cg/MN2HucsvNUnmFFHAAV0DpErnD3iLLIC1nGUwpoM7iiUk0UoA+UoB+1o4X
yR+QyxKkjslJ/fsqvx4qw3Orpkjdt7AkWCn2nB71h+rnXyGXrZ902Vdpz8hX
34Fo6arK8Dqs/gWI0u4G45yGgontd9Xh9dhr4KCBf5duHH81XMdJq20JbqFl
3F9ZMwa8uKYGLAWKImYJKcGCTm0+eZnHtdJgadfrABq0wY+oudvxI2pjOvXb
PEUHmztdbGdNsOzNAJU3f/nWem0Tew+VtO7TnkF2B0fLOjtAS4FOtaUSZ/NY
hptwq3A71ABH3RDIvHEEB5kpADIFs8SPF1JyUlZzAjy9YZvZpy8/WsjLadJm
aQ8iMvzx4mRQTsbnFxWDbe6wzLZPkUHdEcdZyzErUiZFkXJqC0kPlPEyYzsV
lRlMKDO+/SI/+BdGoJcZFCf+qVCcnLNR+0UhyGUJcJqpC1tY4JxGBsu3+EEx
3OYO3+zLqS3SdiyzXhtpFqgOW+TCFknq+BY75Vtc+4L15S+MkK/lW/x0U/Oc
OpRMmWZQMgnNGo5vbQoG7ocJiH1Szv3Ps9ofLxTl/jTF/Rc//Vq/sDaXaQCl
2W5qHTXFAK99mnRR7QPhhBe0s/bUPcvC1ScU2NTUmcn8/N9nL7irWaSU5Crc
6vklbCEmtjgl36J81gfY4kSFfIsrz+oW1p5g6sIWe9EWukR5Jd/iz521F+9Z
1qw+ObXFuy/07mrW/1bMs0WfHDeqYNgqssY9oZbd+gHpx7YSifeV2o0kjSu9
FRaz58xkPnZc31nB0/R0Z7spuFo1G2mkNq0r62MXe2Ru4p7rXj7Apu4o3MRN
6bTuc9bY3UHSkS5sKCJpmuz6im0+Gi57VykVP9NeOJP5bCRcusFNp5rrRdp4
paVEonPyM9LG9Z2lG6T3n7H/cMIXK+pnaxuyPGgPWIpPhwRXZNbrpeKwWUDD
62Xh0gZj92aelfuZtpKqluo+tlPAYcVHXLpGLfPe8Co3Y6tmGJuqpw8bfdjW
RjAwUJRBdAi2/AgdWfdGi97ORh3jCXplaERjZ3kZ6nh8IHHLmdrPSFmVveMZ
ne8vd0q/dUN7ZfU6nB6qzpCKM2ZMY39fH3vzYqA4sG1ZH3vlPNRqXtbPtnHo
AkEMjfezS+5JG2J4bkuBj1HHDllZP3vk203cTaP2fezYRTD8aI9NPzv2KOoq
hkYPTBst6mv+uGdMfIYK/P4JC4j91T0pxv9sGt/PDnaBGSce/+JY07XkyBBT
2/K9eKMaGr78KUgZZ81ecqIAZ36ovEzTFliLS5A2XO5xCjhF0Xr4ibQuS8UC
dSTZ6Cqp2Bot8tjaVypeNAO1bPKk4stqjjOZHTFH2pyi2q5Jcpx4XqSs8JZK
ifd5bBMpS9BZJBlr8Oh1CjhNWqvoZtvZ7fScnW2EWOuO62en4dxCY1SPSVjW
aKysJaafTV2PFN1i38/OdkCtTpBIsDdqtZWDbHzwPhDJ+S+gFd27v6/ZbA1X
NYWpwXiwLtFNy2Xpn6USnUKcwdESJVy7+06fvliz1MBNpGW7oXf0Y/f7RVRc
eUmjBzZ0O5+WilWJYfdPbw00aHDZ1Sh8bPWxt1KS8wxMMWtbS7kkJwtssmOo
so/9pT4HWd+KKwPWHt2JYS1OUS9JGg8Y7rUtewtaEjM6nQJSEbvxkl4n8ID1
0yh7XSLJqcSsmS5uHLelExob6fcCR50CbpFXK7rZFUCrSHGVoltc9egxRSSR
0oShDxM9pRLvXHAD35ZruBuY4dLpATcYIRzCaoBtZogLNWaATdNjTRInKJBZ
g4F8PmuagVzvY194h0xxoo+d0M08xv+eMs1BwCZn/iOaZucN0oYMmhthpIIq
GVL/41kgqo7lfm1hIOIHHUOlPHUrsJHhPHDdMfF74m3nifwakFxjbxmYgAVt
Hb5ib6xH8we/tjKJjjcSZm+xRH+bFaGUoWUTA2BBdsiCTrWUSVoP1HqRNE71
VsjcUvJmcT9lwcYeMTt6AHxJD7U6wVCCZ3M+FfNjp6g9WTEslWfbGgJbhqub
nQIOkW7/jYlk+mJJ6wBS6frmaxJ9VTcrileXoHrofWKLU8AFpAWbDHCDPxWg
Vewx4BSQTQVNlna0fJyh8cd8XMb7+9g3bVGrd7SPnbYanPnckLSfHdcoFW/U
QyFMegTk4L0ZMdh5XeJdjGLZqbZySWs/2jcBmM5ZSvrUAo6Cg7TjFtAJrb9J
0Hr/dMgp4KUitEYSBuIE35DVwL6yRkt9m2UenZtxkcXfH7KS9ZRJvMewVKt/
FksBopOR+dkJusH8qAvwuGPXz142v4sJJmXr17tM1l1+0BQCgo1EKv59xjTz
2NfPfrmocNI+9iceIt+PZqp6vRg/NTQa0fKlEffq/eR1eizjG8W2yVG9wxGd
PwpdQYQvbC/3jpweCtZFMX7IYYDtFPWO9GHwlxwrjbuyEzVsG8pujTrZhPOo
bAFpof3HC8J8pmjWCmzkq3tuOm7nuhMn5D0FCoWvxvxk81jm9fkrNIQT+PiW
RGW6skXIRgW+bA321RFZ8YatDdG/Tk8ivrJrHtKG36jIVFdcGRJUy6w7pOLj
KhDdXh+A6IaUeZ4CAi27AtaQgURb3gFKf4VUvc8X3magln0HqF+Ev80bcIr6
nbQBDAFc/Pkytd1KcTPxrHOlzTFC9h4CkTMoP7DzGigf0sq9fwXiAfZmJI7o
Nqt+SEM/kpo/8bIZkML0mdR6Ew33jW0Vl3tKLnc6+g3E3uuxuSyLgVz4Gg/v
UoFUrAF6+n0C6H9Ps0JOeKVz7JRswkfZEc88Pdd9O2WCE5AkNZ4OVOLR4dg8
XM1263tsZZ3lv80Az3xcLJBmLH0vLlPhf0phsaQdYu3L2ZkoCldAisoGo26r
gHAco/GVG2vFtuaYvJa4iGZQrFOATOHTKPFNFYh6Mkh8aOyWeUAemp787AbY
aWuQ6bWM97FLzHGayhp7HD+2jfjQ3CfDi6Q7UQAqqMVt/ym0MvHWKVBGIe4F
eRAR+3AF3et1ijpMGGOXY17zeESnjUHkpx7/vsGj0ynK5AFurnHVA+MRkJOw
dCvSg+GWlbgiWoAmp4AjVOTkp3viEp+SHqLBg9ZPe0b8Oisk+ru5brgtd3SO
+kEOO7lPOBmbRu1lLaWQjAi3txlg//ESGs3j/Xgunoljj9in0obH1KbaCM3D
M/xlzjOyhsgqKz50yv5l2dL61HUlCVLxcpr7p+Jyiro4xdzl7onTLTdLYIMW
qz4w1evTLOebfvateYPrUIRPGN3rK4uLeElZD2a7AZjvrJToPIOguxFim59U
XIYDqncZEI1af0ShJ6y7TNJei/z1zfvKHikkvbeEnUEiT1VBrfcJUvdrszhB
RV+pqn+z5fkyu4hoWDw+scepzzld0r5e/4NZra3GiGypht2SQs962cS/HPMa
OOYLNk0nclqY+FANaqxWZH6KLLYp2yJHPTW0L0O2LMG+mVCbX/PyCYQRRvxY
xhn/6Pb3UmttlJ2tPdr2oKzu21ycN3ua/GIimlDijPfo2eyIK8mxj/3HOjw7
SsGy3fFW3AB7lVx2dgmyuDDxNHD4DeAjVRo4zJ/7w/FUNjF9k9iw31AAsQ+D
DJ+Eh1jIFX3sFqOudURYGDsiq0iiTQsDMX3sWzQN3PiHBB8HyiXeC0hyZHS5
2ykqkM8HvBG5filrxnMrG4GsvB8AMrOG6+YU8AfO0rYBG+SiRwcguadti4QA
2xIT8RvuHhCrohpImig19B7waH7v1wYJNZZLJLXO7vd+ncWSrSvdFmomab3L
aLOaABSz9Ts8YHcdyGuWRnTPNeBMRjTrbW2JYaCmYwpewGH1AOQ7p6geIJeD
ErIvkNu6GLW2DQAaicWV0FacZweysj4iLZLpQ9Akg0TsC4aQ+lbj8n7fz/7D
vmsyBJYIpA1JBJDw6xEkyN51SBuuEs+NLZVPZdYQUnSnwtr+Ky2JlVsuC2FD
j15YRpuERBjfObDvY0uRxHt3jdUn6bMeoiQOSK0TpeKZymD0rz8AXJW0vkCZ
92lniaR1P05wZ2kGYeWnpOJfcYN6d/nEOGbzKRgDtNMNORiXvGB0VHeaJQ8M
d446RTXiEk/qjfNonvCDvK5zdVoCDgSfvYZ80vZ+M/hkkeRkizUKI9YdLdd8
O8s9hhKBuCxNFDNioGh4poxIcjwCIQEx8XoMiHuP99kWQF2DA3d7wBbz8Cgz
AiZ6Cc9pFaekDdtgg9VMRMzQu6cDzpAl8qh4bM3qFPj1Jnq0OQV8QNGzHBJY
gAzpZ29GdwJY7GT51Ng8ES6zhsVT8aogzqPtuhDqm8bRSkk7ZDWbHcjaOq+F
ZSOz33saFjlHBcGMbes5vxzH4JAsivVxCDYBcN5oGtL9vURyko+tAGN7ZXNl
YCRR2iDodPKK19EzNLveOrCs4vCG5m17bB08Iq4+uzL8KxEOjjSXX5HZh+0A
6e31aMaDTuvP09Ey8PQVniUiICt1IcLGkRtkTobP5adbhiMGtPFKdW/j0N6P
UJbo7EVIVADWP9bwesVkydbZLQNJe2jiskSSg3RRQmSEruWdbWN+yNB+wbEb
tLbKcU7Ph9O9cUQ+29vYUz7RUtGB6w1VQ/PUpvl+XB9bW8cTSTo1vHPcVwYJ
N3aAPcu2ECWPAwNQN4RofwJhSqpkUDKaEfFrfz+7h4hVMLe8UhYfthYkH3tq
6NisyQUdC2RQDPXMzhzLcN3q4tGsrTfZakmfarWVTLU6083xxaBitguTxSTW
kQ522tabPopOcEL2k9U93DgqAw76FoG5xWyTFklyonH4Dih5rOES4ZdJoxWn
OhMTTkdxcTRkXXk6YrKVYRQ92erYYo0HjB6QXiiSXkIbVPGjOOLuAeT7Fm+1
VEjad0/OuOwXjBER6363FCrEgLppBckMgFYxNOQFDhEAjAhvuSIVk3BXtr0P
LeTKj8tOdU7SEOPRGTPZCvPbM7nLvc7YyT5BZ9xkK+N0/GQrz2/vZOuy3htw
AY3GXqQsiFqGhAC3DaVPtQZ6plqjK4lKNBZKwvlT4rU/JYuP6CR7AMjo6Eno
XucU8BNywdjLEFwPkj/l7DOQdwZKN49HAT9JxsQGOJv7ITwY4Cy9Dz9xBp1I
VHa+r5yKlBMJMmuIAaZ4+IqraotCkS2hZ+JX2hxUzXm2FQmIuU9P34Sasaq3
VIKITf5eZeunpukU1Qw+HiLEI1NZVctwOLLO0j72KiOCubCWbN1p7vxeLDn5
I1FBv+/o3TfRc/2gOvKd/X7g2FC2CPGEmIdK3nQNvAIVDNh0yABh0mZPVaTL
78usgVUPlWluYtPPvrkVjzTlYU9R4I1tbBlBoSdwdDhh1QMCFVWOjkvA9Rvx
vHcF9utBI0eOjJ4/h+CrLUBlHh4rK6HkVZ0NSeDx9fDOEYHfOSLfCU63vIsY
uokfR/VE97FHDPBizrqfPWsNftgQDXjdbhrHHSWSreFTybTtvV8LRJJ9uD56
rvnTNk2H0mNiDXRQ8uc4aE8RPy3a33j6PCGvvYm97z52SgV4jEsN7y6/JysV
7EV+d7VnWWeLDGL/amTXj4e3SRvKuESt7eAnG+lntyhMYof9H7uhgpz0qDJJ
zqRHlUraf5hksKBn7HR3rOM0Fp4VS3Re4VlwCBI4YUy9wwLi2KrH4XR3NdRM
x/8fUWsEQq3LIE9cxmv7+Ai9q8jsqporfGiOqL4iKn/J1rNTwm4ejWhO/wdr
VcniwnOI6hpS1teTReXE5eaJiNG5wR7EKOuOZmcopdCRBeCK3yEIV7kpQgWO
irFxhLlWQyMmEawglbIWR6WQyoJ3IcsZsA77alqB8pmvVHxVeZqZvetnxxKD
3wlySbhZPfoQ3vKuEwq+34nqGxKcGCW4kaq2tCX4ARyktewQZIoD+9d/UZh7
42F71eG/2m++evi03T1g6+3Bh6+2PlSzxExySfOiTr58K+3Za1R2RxhiL6bO
GzzVs3tiIMLo6jvSBbJJXnWcUdnb9lXrfFiXhOb3X7ev6t9UYwzTBqtadk/c
D93PcJ/Puh1RPpq1Xy3zvCgkkzzw3vCC7MlTQX2V0sUkpkmyce5ridglxCxv
RMPVxnY+60ac1CZI9B3Z5EDJ0AxVsTiYe2hrz/4q2c7yEY0txIATy8aTYYBj
y97PrKDj57iqZR5J35NNpI0RRm81XPVhy593to1kLRCiHQPu9y1vSWxfxbDn
XxK6d0qfrDpQT1b5WlkcrVctqL9BgVZUxR+C+nNK0BqefV9Q334SuuxbBE8S
1YwspPhWnaHNaoiTUcGoBpvhDVRIK0dDja5Ovh3Q04rHuesJrSiRzXb+gN25
rvD8OPOCz8GDh3JlI5QvaxZTkTQj21++k5bsN7oaTlIOTRHzxcHj7LPM3N9g
/4uUbKDpVJWgftVCCyCVPhDadkFQH4gI/HtLgeBFCGX+Wd1Mk4G3uS+HZCNZ
qMtGUR/v2l35UnZi2Yrkc6CR/lAji9ekHax/Vle6Jah3o6FlTpUI6i2VCj+V
e9uq/opRjbVLkGT3nLIJxkV/K3SI6HhabA9arijZfXrkdN2qN4+7LgrpnW/b
T6oeURYPGpTcK4KOVy+Hngagjje+A5cPdM2mG5vonD3+UWyeEvx3lvSloH4Y
GPv7SbHgyap+dVwIVS8HPnSCSb3AQpFJRZ7qj5go6GtbtWs3sqKWiCerfvpG
+Ok6t8He/KbxdKlfUO+pApuG+xZ4PERk3ZeO9599zZp9rnXPiYHXiaBbL+L9
rYzJ922BOJUJty4THfs7zuF8LB9QfYIzNtQRTIwYiJiXq3aWd2hr53sDGZj3
EVP0qFzRE3fqY1jHqoWfA50N54eerGqkM8QrTDLPFu/dcj9iS/XeqisD441h
5R/fwqsp/+l//XEgzMjiR1BORQHYjBtSk0E1dAUnnSOfdbwALqR1MIR6riGm
6vyoFAhf9ebkNPYfhhldjZ/G/m8vBS/OUkxA+eQBqWGB7AmI+TzOzLaSvj+A
mYb+9+2bVEHwu05d2D27YAMP5+dD/zuBbLfR26xm1Rxkry4lA7nnX1dfAVpc
kpA7d8bJDtLBidaaeYIT9Rr2COqf4x5SdV5Qb4g8JFq/QFD/ERaO+qITNPrT
RqSyW3vaVh3OhZZ7wduOVevy8Nb7J6vW/Yxa1a+frmL8PI2jJzuNrjZN4+g1
hISTimirhE5BfSlu9YIBQf0POFeCWwNkQppP330s2G10dSdup50xdXhIGK10
diGlgwhr3s8eGKhuzMhC+17Y37bqp/3T9r0RY2QRiqR+sifG6OpNYeinJjWS
RfkFScVkYCD35dvOkazrVYIX8bhNNQwk9LyX3RTU76JBcIisAt+rAhbOwErl
naFGZX8Kxfju5dWj1cW7jcqO4bEysuJljLRkr9FVVxSe8gb2g2QpZvlUFzE9
LeS8s4nymeN/t686/HsXWNPLvfolb/VugW8hT42qBNZ/xlmvrA5rw61T2l5K
dPTcVzbBQ2zP6w/3w4zsvJO+RLv9fb3l3Yf7+39UR4Fq7/iIxgw8ZEVUjWjs
VMVbB0Y1fjSC1sPX20Y1huaiVt+JUQ1Xo0xovbcfPS0ezNIrEKS46WRap35f
JtD9vSzjwfeVZVn1pUefff/g3t1Hpee2+clPtj8OXJfo/IXjSsDA7TaQtoiz
Mfs+NpU4My1Dd1VHUDkTGwbo5gPCOXZ+kOvyccTjC7hYQhyOQWsCtcp8Ydwb
4nAMkuNJPE2iw+vc6TdeCVBP/qsuGWAfwy9cyjN6r090QsG+SmHyZm9iAh0i
OZI+LWjPdTtF/TSZsuMKeqSne1bq4ddao8AHca01Ckhl9tSVXKWHzPqyVLwb
L3Hjw6ViY3SGWdkhFZdNPyK1HWCvxO+5hhyhLJp+gN/hFJVFJOlXIx1DY/eh
7r6EX7JkdUf7DSR6AMdX8CK7esgpqq1U0jqE39N0l0q8TZM+I+4d2u2ghjWb
DmKNqehQTCBAFc6Zf5f+HiC9AVyi4dBKw8+DwwecAsZxbSRAwfkMf3sZ+urw
K4IM0FDzdOQBAFBVDTb5czhDek3SOnl/VCnRP0AcJ77vGL3+scWuj51mh1d6
Y33sWOJuywEQil4+kmc0ulrTdv9UWNZhg4oPP91n2xZB0qfHIJvazvuxphfg
HrOnLRETnkOdtsTlLRemLzFgtmP6Eh/siLugrM7lkjbnaigQp18XlEPZjwrW
c81g1Nr4QdeBvKGRj70VkpzJQgogKgDZm3a4wdsMsG1wZDV6DdgmDhEOQNFL
nHBd62cvW0mrXs1ZnzIhW+fWqLJQ622i7DQ52YXxhRaptVqz5mx3Yt8MbcuO
mAH2+Z3TSH08vHEFUaQ6buhOBPinqDeN+eKwX6cx/41gy8/TmA/s/mPX9BXL
VvxriYRRUlacUv1S4/W/aM6YaS0L+2P6kpUniqcvOaQ9dWPwoVEWP8C+iR+H
oYPokjCpeO/05WMjesnriSO0KFRrBEMBjheiY+LPaehUyxG8SpLTiQ54Byo2
gF/hxXAFlD57CV+DQiIUL4vLOqQNldTJW7vKbTLrSrAndFhn1Ukc1j2fRniz
hx/TDT+oaRx4lwjGLcKLOY8WKOZm6U3zyz+dArIUEJWnO52ieoDK5fiVb3OR
RGeQuFYDX4zBjw5ayoDyd5r4yRxQuxovzyag4NhIcyeuMqy3dSYKmsGT8chW
BZGtGo92lRDZxIT3QdVcgR/yXO5xinoiP5/p/uDXWSbxdiSBq4e1XZM8igmr
VQSaY68MQM2tzZ92/jwaIW2YoBFHGENWjUOJHidspl/AQXQ5RCIO0qwTR50T
pQ128qPIxoHqvDZz/FADtOL9Ja6VIXR8S6Kl1OJlhE1Ez/uwXpvqFum2oYpt
bYnbgP5c/K7pCMSRg/htEvAUZYcf1Y7Gewy9TwRVnrz1q5OKZZgwhd72nH77
ck8iaM2ahcr4zAFaEl6GN3Yq4OcSezfMNheZVFy1tC0vWrbskmW5vV1Jga52
ccmyUssKK/tjdrbFVuWzbGyPWbEXTkub0U9XHbFkTWKa/bkyQPXrShFovjDU
lmjyfB/lHJG1q0reV18BuNCHTQOP5wUvFjKrd4vXNoWyCVzfPqJxxxAlxIiP
AAN4H24aL+ZVSyhv9dJLFTqc0nFsIU1o6U0czdIj3t4q8MwPOK143IbrkhK2
W+HPP3qr/yhQxCdsc9apj9B/rjk8sY7YZY+KVumn5B94cR5Agi4+KPrjLmKQ
9DNVokS61VtVIssFsJGDQ6+TQG08ZQ5gPZeSt7nne6uvRBiV3ROKveeQ5+0w
LHn9YQCgzLILgGlu7iFg+jWEFy70tQUgABz5pLHAqmYSv+7c1wOlUDgAgT0L
8fRvOKrxzSIEoUJPOC+7Y5+Z2nUymGtWH7pr/GNMx6ojOOiK1usZGi8AoPFR
mEZgrJ6hROc5OPUj0n049a2vKS5ILP4FBSaTaonLk/VCdbEI37rq5t4tsnew
ohKSUIpB9Vxi+odzxPSYz7Rw2OIwmlVHLNSjGgkKNS8IfQKAU0g5/0nRcr5j
1RVlfB1BSTNCc1tbQCQ2OASTnioZ8IMi7iKCUdGzoYJ6g8PWE8WCF2nEXn3d
+A5JF+4zcHVV2TigIqcgApfeelW882nxWRzcgWzbUZF3sur9HbUapJ+z56X7
7u/0Ldn5oWCgbdVCWwSAq+Oerrqihk90crbBWRuTduHbdb0dcsW361FXxwf4
ljxFNFcAHLTrJ3CjtOqWtLoqxqhsOTF1gkEh5kpPMIRQAit33NzvJNv/ZJWa
J15dR1bdfP+xoNdBnTCYnte+t2SzocoLRAB6lz1gx1hc9bMv9HHwUjKs/YLg
hSFRLd5/f7InccuypzhXNyNE2kjw+/eNZkkPEjVBRMIF2ZZRjQVroT+sajTr
s/LWL3nnVTOZ/lv0eWUxE7fAdusxnNJ94+5EVdryPvfpAFSlei2wD0H8q75v
GFzE+ZnqAksMV5eh801i3vi4/eSgdyqqxKBOdWti0Cnnu5ODPmyeHLS/zQrV
3O9yR06LbY/iRWOUoOB1x8cwQNQ7tSMRfBWMZl0Hn/kbFZsgCwgIuP1ceNsO
9rMJ2cCbL4C4YcpsVDXdCtNvkbW/pHx6BnH+yYiG3mLkDK8/2HQLQUcH7kPs
eI4LqnHPj7ighp6OaCwlBp10rifORCJPvYz42ANF2hciKO2u9+zcuiwaPx1B
Zhn6dNXCRkTI6ycXJnoGNbYTRyKzRzWa8YOEvQajGkYWVuC/FcVhhP9uxsvL
0Y5VP+1DreKBp6vuek+rY37eaWTHI6WhEPCm4mOv1JuoBW/1VVXLchsF9Zvx
SmrrgOBFylT9MtAngyKxEdUv0af+ELy4GWo074/k3wyz7+8qyVF5GVBX9yJ7
zKOxUws/Ghy/NzBxGnLY7WnXtJ8NsNM24CAZQG7xkunnikWSdsrkJxwD9h8h
wwlQtr03Ctk22Bn7nBvYuQyqgajuSol3BDq8q0KX05fkXy/FT3RLv8WxTm2L
rd9Q4lNpQwyXOB2WJsisB9hzNSavCA6sl8X0sUsm7ycbm20lsvLfcICwHFLN
9/Lbt1My61PShsv1/zvHgE4BXejktTh8tGTWJOCvCJPZ97PjKJNHleMfO0sk
OUSeHL0GGCAVP5Ee39ZWiV+njJZKdF7jH/j1AEqMR4eSlzvLFuH3WzadUnEG
MbzS6JMPtia6S3Zru316GTuxlzrJtEAgWz7ANsNve1ugJnmpg99IFfWzZ+EA
szmun32e+E5HAMBrvVS8QgU/bQXBKSpzkCD9e4b92v4w4k6/dJZsnTxbPXC5
Z/h027FJOR5psT0lG7tH9cYBwmicxxBIpiEPYJMQz/QZYA0fEYBCGOk5ewQH
951WgG2Npkqk5RtkMVAYrZhel5VATbAQr4eu97Gz/dBZZdv1sBcIHO2tguJD
igRfWtl9k3glDb9KafkUfkrai/vZIwuncfG4RLL10hQX3SOSIaozfjcLdjFX
nzV58joRJou5JxW/nk5OPBSnxOebDoBcowG49pSFFyPGYjo7S/vZNEXiUnYo
eqK7QuLtjANBKMVy/JHqn3aWAejbjV8s7vNoM54OuEBEp9BJa6lvmxl+p929
N+wYccsIKPARYtT2VGdsKM6oIOw4PrajczMxtiyBfPJTHN439Z1jKL5dbEHb
Bfzjv5Yyu+lnwKjAIG7kgOvxKhnUJsv62SUak7eh0nAZOiUmmP7Qz852wq0m
BmYlSBtS8fN7MLjxDJlteAlefXZCbdwJJb0S/uWI/f2eiQhAfHdw7PcUOPkB
x7OoSvwb/3SgsgXqRbwlAHspQ8J8f6Xb6WxL2iLu9NpD4n0O56GtOIa414A6
/jjOXnmGHn7rc6S3xBq/aXA80hZLdLz/feqL1IJeGVQYGzX/devTUyLReY/f
8TZfk7RD2Z5NMFsJLoLXZb1gGC+XcD7nbhrd7yf1eoE59YOusvDDBfQh53Hi
mKHZKcp/5idgtmEbsHMTv+i6B5b6DWmdoltcXjeqXYKmWxXI+yb+9YzDAP71
zCX8JmvsiNGX3Kmvba5NjF6X6OB39kcGyq+quBM3+hvcxhq2gST7cOuoGqWa
FyLtjKNYmUGg91HBhh7nAmnDb3hoW3GkeaJKFuMrbbi0bvKLI4+BDxJA3jpD
0y6VUzqdAq7jNYgEovGe9ZPfbjqnS7ZemLz3zesZkTSP4FcBQ+PhmcgebQpG
46iTFW+MrLdIot9oRVz3tFhJZIj1FfgXOPG+QLr+PxF/AsT4mjhlANE+xiMF
FF3P2bHEl7EQwkbW4sEMquWXuH5ayvvY/1GgIiY2tlXk9ZRcbvvg2xIvGIoV
yGz72H+EIbcYuhZWNv2CEXzaGr+V2lcgFQvwD1wPZOiV4h81t0g/n7pztzsi
Kwm7hLNU3WtDRCAoUeN0MMLBR6Mnhq5JtoYRt4XvO1qiNyDPAZpWTX5I4Ndd
uV5mDRGtdpbbNH/7ffpz8evpzyUa2tOeSx/gV6COHlKx3fQ35R7Tn68/wL9L
Hgav8CHu8BshBoPvtSg++PT2OJGahi66WyeL6euglXnTVyo7OP06cqSfvYqz
9xjXccZzqwUWGzcOgXH8SnyfCzb+C6oy46pHP87Q6NGajOaOHrKxfvaX+OkH
JOS4iYFiic5O/Kquu1SCYSQLDIN/sC1UtYOiRaK4+trsZ67P+XeYVHf9Xbp3
Meis02XtLgxi0tzUihl/RjbUZtfqM+1aLfMpJrQt1BjuC/6dGjUxDO4iZcFg
R1ZUYVApPtg5CVZLWphp22r5E1WTtiXtDy6szDFyN9il+4ZyVbTINYEVWxjU
pV4Pg2VJrbXZPDemQ6vlUXoADJ7BQ2TMR2SsVAQyXC8hMmxnzoHBPyS/qM0+
8zlzeatljfJZGOzDG+bf4S8QG+7SjVJ8IFpEKWDtKwwaxAf3JSOmtiEy7qoA
GdR9aOXIJWjlBipaWYZWHjRCg/3nCLakWbqgASvRgEH6W2DK0CAB6GTXqxcz
ElLGarNJR5nOrZZizeew2mcuH/h3MteIjXbpfqEEgymLjWG1JlO02vs5B2uz
/S+cs2i1HNRCW59GK7O+0NTdpbtGRSl1EWWH8dnCIO9FblrFjCup4hvZxsXM
ja2WTbNMlLektbm4+d/J3ILIeLTWBbRzeHVoYVC+BVrZJg2YIt1CTL3SQbI1
dF3jfwcLFs/bpXuTYZG6SHTc+HxhkPvSelh5V1rOjexn95iftVrW6yIyPJGK
WTvQyutUkYovIZo9rdHKlWbXQBFP5yxrtWzXQ4Mz8cFRaPD69fuAjDurIwuD
OMvR4Ivp9cSv2Ee/n/kshn4/89qF6Gcy0O+n1NIhmSfNzufxtHi6Wk10rh30
KdBoD/Xqzurgv+xRdY8nk1Wn6iqk/sJwYa7bg7HEjJRb1NURDI2jnpGsDs6c
h+hH9Vm1Uz9x7zn1AzG/Gyi0L3T1V3CM4LS6YNF1g/yZ6FdlUad+dUD+Pz/N
wxTXLqxLmvrJkbck67X86Lqa6NmKpOQkGvHDQNxlDHUdvm78MfL815hxjTnG
fNSAKaSp0hezsDXkF8mW6IfD8R8AtqVM/SzVmpnJy3KC3I9O/WTZJrrIhxzY
yMqZ/NGqtam7srk+bH06+BbwfXMPutyPTySrXHVX8Gp997HzGDZ1txzWm+hx
4jeAmmE9xb+hpBmbYCQ08eBaPY752PJyDwI3NuFWCNjm9SKsE9gmDVsOj/+r
tqsPaiq74u89QhIUMIE4DR+WqN0p28E0CQkk7ioJBEUlqIAfHRpDSF403XwZ
Hl9WgQB12a3usq3jR6mKM93ZnW7rMLPg1y4K1a12lV0Vd3Q3swbXdrRlt9S1
LaIivR+5IbH2D/+oM3jeOe+ec+8993dvbl7ePWfboWAD+Rlb4w4WtAiT8UNo
U3AilHEJGDwU+oCeBxagyU1VI5Cd6EtC7NEsw5/NzL3SzpHfnTMWDx/uvgzv
jh+/BWr/a9PNbnFH1DN2jr4InyTd6H8S3IzfLXrzOvfl9KMXX8ZLtMY93mIO
UdHPiwZuF3gM0WtdhXtFCWj/78ePL4ENaPJ2V8Q8jAxehd0f7/8cdv/Ypoxr
qLUnv4l5t349B324za1ZBV0x0Xy7dAPu/s2Qxnz/jGcx9Mkb4xE8HkB4XIHw
yIvEC+8x6CRGlIbgGl+gShUnuvSzYKQM0WDn0K2ATNo5JJWUXE462yqB0SgS
IlEI4sjRqpMGxbCKVwjjqMHDSxmySt6FnIBijVhIMz8eHeylAwirxghWM3k3
cs7qYaQ2iMA/GXJX6bmzvSVzYAyM+AgCyzSswjyLB+ODqRnZQv3OjLZEcv7u
q3ZZoiNt1kKpMvsoPO83J3slY987CMOZMPPlo9U3WqvRib2lkZN+EiZ3P6vt
ggFQ4BHNNRccCV3DfwhQFaDffOjH8RPNgvBbveaRU0/u74UAHa9v4Sfj0yKm
sYkzwYtgGE7ffiBGI226XWe68+hwcA58XXei3lMEhuHh6SA8feAHumN1biUY
gFPNI4KeklSRqX54un8Y4umh2zKEvixt3329zzN96goSHsSIHx8QQ0A88oQo
tAnR7B7RHBwraMaHCu5sN4UmW4KfwGaEPoyHJX96OmNODDoR6AP360xjj0JB
U8xPBlVro9mO4BVoZ/yDNFTjG1XDoCOngyemjR0nIezyVncnRpfnaPy70uSm
kfwnQQfyT56nEPTx4dGRnYg9lkywduiZWMtm0gHWJMU6uO5BrLkR1nwRrAXS
RCsB1noyIdZmE6y1RbD2kaE6CmvpmTFYo4YI1kojRyLn8YJRWPssjLU1YoC1
oRmsfTKXHTXPehdibTFzl5p/Y2dSZ89CajFjPzF/NHLMdI3w4+q9RxQwzig8
8/mkZ8ELekfCrsDr+mzRV21zgA4KOGFIJBq/LRdeq957S080SgzdL+jXzxYw
FLUO+GQ5WT00O6Yn48kzbNPEY29WG/4WaL7+r6kJuOL9ZuKhpxhO50/H6vsq
9X0j3DcFYusyJJnYySGJeyVgXzKFdr4Py0/Cw3tx4Zd3zNf7pm7jtRF8daoz
Bwu8q1DhMT4yXtfMDy+V5pGpM93DABc3Q6f+AoG5ozmI2QGE06ndGZ9C9s6H
U/ror/gbyMJbZ4IrT+xaZ4TtPHPnGKqraQbLE1MtVeUxkOwWldNXzCONHhVS
CeGpc9w83X8Avs3ErQ6CWXLFNNH/EWK9VUnR6uHEKRB/mQh/RQh/MO2KGnz2
wk/mDv5riosi4dCshfx4AKjLgs8UNXqIlLeppAzRKyIYdvAIfwWVI07mwaQr
32+VDC4QtwxYBpXFknvXH9KZia3qloNVr3eoL3RQs39Bg53nwRFRpF4JqteA
6qVxvZRu+z6Gd2RUDz4JweJVbW2XJcGonAE99UpHHB3O81CtoK4+7uuX6O2P
+wayGZlpumOJMSlid26UXQbPpwXw3oAssZAfepsyZGu7xO2M0KDYeEN2N55W
qh7I44Uql57Ho7doRWgO4jr6UR0aasZXbci2CdkWkH3KgncDhT2GhF2UxCiW
FKdddmHnqgXAf6AXeDfxtUEqO88nrrS2qoOUbv17SYZfon0MzQP7mHMifGh1
6Lv7A1ddilRxclFGV+F7Cfw9tOfFE28d6LRtiSu/e+vI4NHE0zA4Txy9SyrL
AuWzemkxezanfS0Px9LoFXhFP8r45z+6fJlpYO3YCteOJS8rLPuGGl5N6qyW
tR7o1Eq/aJV8O38caAp5Cpde2ATjffKlrTJpBzOv8byvqCuANj8cifa9q20e
70uFcDPFhwuOgyL7pS5+teJiV7YBLA3pXTTYSgXSI2GO+mjpJVVOKTysKxPy
f5WV/T7v416aFiTQl1JkYFsFw49OBtSrBnNSk3k/AD77jg9iaHpH/HI6J+Xe
+D5fqbj4cd2O2ecla89ZQsuMD1LmSvd8azyHJtKrGHCmqnUxE+MwU0793Pi4
361OuSpLZXJK+GCzwpUVZcYhuaaZ+SOw9mZWAMJ0DI/0v9OkFUZxQYsA3gpV
SWJ2GJUXU8X4EWc+al4LWrqprQAPKIdQsmhBB/Mzgfby0nbeW5qNgz9pF13K
lx5pbk9p1Wq3vhYXxg+bSFGfA5oSt+cEP4xNBtz8IaCl4TmwMVwWUhmkYWVl
HM5bogd0aRh7VNR9iiIZmnDeFV4URckHv0dRzXF4LZ0H/iqIXEtRI0AO99c+
8JcfJU8Eyi8B/h0K3yfyUXANPUAolAtzKOrvFJ7ThCI5qJcBHRNTM5TIUwGf
Ts1QIl9E4zlMKJEXAh7OckJJvavD+qufsuOksQ8IJeXbaJz3k1BSfj+NfUwo
kb8D+FxqhhJ/fkHjtFWEEvly4LdUwP8tqr/Qb49oLCeUlE9mcDlCSb1ZYT7r
KbmCwe0jlMgLGOwvQom8Mqxf+ZQdFvCzqRlK5L5wOd9T5QOAz6BmKPHnrxk8
3oQSeS/ggVqEEvk1BicsI5TIv2bweBBK5FQU3gXEbyJ8nULNUCKH/8xgrqXT
aK6dgnXUW/15OpXS6XFyTqvLuc0KE9IYvR4WZagpA2w9a7FUcH7W6l7OcmVs
I2e0claUBMNigZflrNWO7z8zSYWSXIQJMVnqrOXWeaz+JmhqJjfG/8rDE61W
6CR6saafVTvKccE2+lgbJ3cqLZbNjY0WH+uv9XpAb7kmS71imZ9lTWV1btbv
tCHd8joP53SzlhihpcLr57gtfm9DOMNUcaON9UFnoRpsrNMld+SpiW4R8AfH
RhtAxdys2+ZrkvsUTi3+z5mnjq2mluVgzo/asCGDy+W1AUsrYsbHotMpc3V2
pcqirVHaLeqamnxLjSNXZbHVOGryFTqdVql0oAEsWuGphwaAEuI3+K0+0H1L
kdXlQoLiRp9/pkwZ20Dyn/iL/X6vHzQn0tEKrsnFVrK1HMCBxVTJemq9fqBm
2xIpgZOX+HHnwyVgBcjFmN0MDHKsH3g/LEB+qbXa7fIGJ7dF7q1n/Q6XtwF6
hrgMNCLirch4+oF3PJzVJfd4gV+stfJam9fHyu2szYXzmjgdLPSgvJYD/kT6
sXLWY0dSpUqukCtkrKPGrsmz5dpVeXm2fJstt0anylfXKMDs0IJra57aqlLn
OnSN2jxLnnqRz7bIBZOJbTBFMo09b54xeYNLXvp/mGJRRp9vkj2l+DzTTF76
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority30" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority31" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority32" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority33" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[neurallogic`Private`i < neurallogic`Private`j, 0., 
                    0.]], {neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority34" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority35" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority36" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority37" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority38" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority39" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority40" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[NeuralNetworks`NaturalT, 
                    NeuralNetworks`SizeT], NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {10}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "catenate" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input8" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input9" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input10" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input11" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input12" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input13" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input14" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input15" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input16" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input17" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input18" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input19" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input20" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input21" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input22" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input23" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input24" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input25" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input26" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input27" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input28" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input29" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input30" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input31" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input32" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input33" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input34" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input35" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input36" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input37" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input38" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input39" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input40" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input28"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input30"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input31"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input32"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input37"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input38"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input39"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input40"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"majority1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {40}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> ((1 - Slot["Weights"]) + 
                    Slot["Bits"] (2 Slot["Weights"] - 1)& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Subtract[1, #] + #2 (-1 + 2 #)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT], "Bits" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT], "Bits" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99139d12_8b1d_4bb7_bf32_cbfb7099811f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBIgQEAUkCkQQZwDAjIJCaDigCK1fqEqBAQKKoPI5BAI
hCFaMdBaRBRFax3aKtgik4xClTogii0oIChWtMhgQUAi5j77HEil6/tb7/3j
vu+7rqvVffbZwzM/n2fvA8YBEV4BJAzD4vdhmItrzVNrLQxThOcABmfOGp+q
4DBp0QaVjcJ1aIwxA8Py9DFMhWyMkeF5FvxPS2Jn8RoUVlOZlnZfk1IYpop0
XUOFrwKE+ivILl+ruLxgWmrZ0nXWKltGid0j643Zbprph5m8r8mBDfSrWizX
lWLWbyTLqBSd+ebzMy0OFG7NYt1qgHUPsjAsCv61NGlQYgWmKnzDPpcCf3Wn
nMnU0lx35LBKyot1zKN1zBp9krkn/wjGeElnmrSbemiYrquymni52sIthf6F
FklnDZZcw+fQtciB+XX6PO5BE321Ittl7rJqihnfVJiUZ0Lmf3RWVEjVKTIn
FyaaClfcko37KfEf7HbTx5Iw60NYZNN39HRsxe1IDAvxSnMz4X07m/HKkuyZ
cjfJKkiHpVY/7wafe8oEwxTm1/szmZkXtY67GGeyNFUveh6pfcak56xPme9i
zP3BhLG+fv6v+UzbmQ2fp93tciu8fm7e2ZTfevRf8maZ/H224WBCqAus9LMd
+ZV56CFz//GDvQcTakPNzh6fo6Ww/uvzYk2z06WnXh1DjU2MEAWXjF3RC+re
pH23VTdYROo7lKnrWaB1sI0lzPeDjhmKX0U6NBUq0ObPNs40r7NgsgLnWSq6
sHi3k4QmgTmPFrqaeeZ/qaxgvoZMXkfSOcOxtXKX+X1lgq1NCtmncWNcpsXU
Cmg6S6/5+C02y0DW17nyJs5LtOmMPDXVh7IWeOXFyvVNKfyX9BKlBVm7bRXI
52eEha7Z5OK5iKasdV4ng7RRB+wKjEhP3CWDPzQWw4bpgs3RExtj2aoKb1Ef
hRXGP4QaRpgz9hHLxJRfiVTH+R9QF5ZC4isrOBytc7zrqlcjcjxaZ3uuzvGo
q14OxbHI1TaTwld7VqM25KmGPVMbaKK+7lJ7yVEP46sNNlH7mGrDQjWhXQrF
4a6rHZbiUOGqd9F1eRFMJC1PEdkWutrd/df0fqZa//8w3W15aZ1jishucmue
Qwpleb58eg31OVO4g+LEQjQ7Y/5ctHgdbOTY4Gp32NUeVihKsqtxhVl22Eum
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
kqeGochwFG+AXbfArjc24EqKUppS0pML2Mlg3RvbHQklvYV0enpzUDbfEeoS
9rYoU2TF2+TkDsrJVT6XHJUbxFIfIpR0G2hMtP/OhzyU76WUqZKAqPtMCU1h
zpUb/rnk6NwgW8nwZOyHKVlnv/VJHmYthPJwLsi0CE+Le8hTadFzfsgFH+o7
voQ4BFre7+owb+ZxU766Zh5W1nUSYcA8fEqMfIr3fPEFn7SReGJKPUzZMq/j
uGm8JFxnR3BewkGUSfPkmfSpXA6HLtWcCtbtcnUi1DZWqq56Pjo4m+tU7s81
iDeZi+QQL5dDvpyp2+eTBblBOZJxgqlXwFTujjyf5HH3bfPlx/7Ov36WWb5J
frSf+cMFVswl+Y2BcdAG3l9e8lsBt9unkh99Lz/5P7xpueKltfILBdalA8pe
x/65NPAa1zq3eObUXUTtub/n5ZgWArNRl04/R8zWnJYz66KMmGUhDPUj9n2w
7t+uzslJ658zq5nP7uR33RE+u9P17A73+Z3853dY3Xf43Xe6uu9wGWOW5pQq
RqtwiWhZ1x2u2pjlRXgcg0dneNQas7RVrGJsTlpC+U/XHdasMct8eAxPWiLa
2nWHrw1zaVWMh/AY03WnywDewmM/DBZ03ck3grdKVQzP5CWib7vu1JiOWYrh
MQQeTwAxc8csMZUqRmPyEso1GLxozFIIj/3wWAmPS8YsmapVjHWiJaJHMNh6
zDIeHgNFSyhPYCmbMcsmeDwAbwfhrSMQqV7FeASPI113MKcxyxzJ5Bk65gwl
0XMn7tKGg0nKW1j9dVqik6/SeJx5AnD0xbbz5FDtW9zA6GBgrfPFl3zSJrok
AJQKXZiMomv2c6PIgdlcWIps7GwlhTmP5p2nd5GzwVxMlHEvn4fMRYi8/Ar5
RG7QK3UZoCblBYCaRAuCs4XO5f78uTkm85CR5fxjZPJZt68k5+UGjakzlSZn
/fhjfK7pIKjZ/eJ5r0NQgWMXJitwmLEQqoL+K3+9TknTSwa6fagaSlmTxFpV
/jzXC4jF3IDYZ85zPpbyL8C8ENw+Dsjtg3w5/6dg3ZUpbuAMmEKWZpl6QcH6
Q+OvuWIGUFiI4giDqAPlUywv8y8H66574ZasIbqhzOM0rVlwDmqNlCooGX6C
LegiXI5FcjluWhD/ow9Va3WWcBXB09rLX5vYoMPVGboX6QozktxekK/BTs9V
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
X/DC681/AOeMReA=
                    "]]|>, "orcInstance" -> 99062352, 
                    "orcModuleId" -> 98071824, "targetMachineId" -> 
                    85768896|>, 139650987522848, 139650987522704, 
                    139650987522784, 139650987515904, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_88deef2b_f2cb_4101_9827_d1e27db9f0b5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
ddGybNHTW5j/6x1MTEVhTMr/Cspo3vwLu7llhQ==
                    "]]|>, 
                    "orcInstance" -> 99121344, "orcModuleId" -> 85499840, 
                    "targetMachineId" -> 99048320|>, 139650987504384, 
                    139650987504208, 139650987504288, 139650987503616, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {40}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7e15009a7167aca9", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "catenate" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "BitLoss" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.45, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.45, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 
                    0., (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, 
                    neurallogic`Private`n])^2], {
                    neurallogic`Private`n, 1, 1}]]]]], "ErrorFunction" -> 
                    Null, "InitializationName" -> 
                    "Initialization_86a904ac_0a25_4fcc_a0dc_f03d7c7263ce", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
AS/c0lOjL7HW8L9aWaxQ
                    "]]|>, "orcInstance" -> 99282800, 
                    "orcModuleId" -> 85683664, "targetMachineId" -> 
                    101962784|>, 139650987491504, 139650987491312, 
                    139650987491440, 139650987483136, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[neurallogic`Private`n <= 1, 
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.45, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.45, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 0., 
                    2 (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, neurallogic`Private`n])], 
                    0.], {neurallogic`Private`n, 1, 2 1}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_99782f59_163d_4ed7_9714_354c6d1ea482", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
MPvi+wz/A/LFdBE=
                    "]]|>, "orcInstance" -> 101103664, 
                    "orcModuleId" -> 85655984, "targetMachineId" -> 
                    99127488|>, 139650813915392, 139650813915200, 
                    139650813915328, 139650813906944, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {2}, "$Batched" -> 
                    False, "$CompileBatchedWrapper" -> False, "$MXOpName" -> 
                    "44d89113f6c4e0ac", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "Summation", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MajorityNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MajorityNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8647940289960737`*^9, 3.86479458456325*^9, 
  3.8647946885772552`*^9, 3.864794828967071*^9, 3.8647949140594063`*^9, 
  3.864794981629747*^9, 3.8647950738630657`*^9, 3.864795104886257*^9, 
  3.864795183156526*^9, 3.864795356595887*^9, 3.8647958710939627`*^9, 
  3.8647961938096857`*^9, 3.864796445435845*^9, 3.864796696472126*^9, 
  3.864796932091053*^9, 3.864797123429097*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"6e62241d-33c3-42a8-86da-757f61487432"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}},ExpressionUUID->"ad8f60ad-b03c-4795-b29f-\
2120bea29aab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedNet", ",", "resultsObject"}], "}"}], "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"bnn", ",", "trainData", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", "\"\<ResultsObject\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"testData", ",", 
        RowBox[{"\"\<Interval\>\"", "->", "20"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "\[Rule]", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<ADAM\>\"", ",", 
        RowBox[{"\"\<WeightClipping\>\"", "->", "1.0"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "10000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"eaa3d115-a086-4307-a3c4-028cf226a277"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 
  3.8647943165808363`*^9}},ExpressionUUID->"b675450a-34c8-422e-899e-\
e8ac46fc9f8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExtractWeights", "[", "net_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"arrays", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NetExtract", "[", 
             RowBox[{"#", ",", "\"\<Array\>\""}], "]"}], "&"}], "/@", 
           RowBox[{"NetExtract", "[", 
            RowBox[{"#", ",", "\"\<Arrays\>\""}], "]"}]}], "&"}], "/@", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"#", ",", "\"\<Weights\>\""}], "]"}]}], "&"}], "/@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Values", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", "\"\<catenate\>\"", "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"NetExtract", "[", 
              RowBox[{"#", ",", "All"}], "]"}], "&"}], "/@", 
            RowBox[{"NetExtract", "[", 
             RowBox[{"net", ",", "All"}], "]"}]}], ")"}]}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"#", ",", "\"\<Array\>\""}], "]"}], "]"}], "&"}], "/@", 
     "arrays"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"ec566d49-f36a-43fd-b5c3-ee142eb3b4bc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"resultsObject", "[", "\"\<RoundMeasurements\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"majorityNet", "=", 
    RowBox[{"NetExtract", "[", 
     RowBox[{"trainedNet", ",", "\"\<MajorityNet\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"TODO", ":", " ", 
    RowBox[{"we", " ", 
     RowBox[{"don", "'"}], "t", " ", "want", " ", "negative", " ", 
     "weights"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "majorityNet", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "0"}], "&"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.861598551906061*^9, 3.8615985567851887`*^9}, {
  3.863178625879333*^9, 3.8631786268708572`*^9}, {3.863240306853362*^9, 
  3.863240307588504*^9}, {3.8647943299915457`*^9, 3.864794330447215*^9}, {
  3.864794373237455*^9, 3.864794410229562*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"4e74efee-1a4b-46dc-91cb-63310f4470cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.21579977869987488`"}], ",", 
   RowBox[{"-", "0.24142172932624817`"}], ",", 
   RowBox[{"-", "0.2600598633289337`"}], ",", 
   RowBox[{"-", "0.30724993348121643`"}], ",", 
   RowBox[{"-", "0.2741025984287262`"}], ",", 
   RowBox[{"-", "0.29526063799858093`"}], ",", 
   RowBox[{"-", "0.3049468398094177`"}], ",", 
   RowBox[{"-", "0.25645992159843445`"}], ",", 
   RowBox[{"-", "0.25030621886253357`"}], ",", 
   RowBox[{"-", "0.2576448619365692`"}], ",", 
   RowBox[{"-", "0.2739150822162628`"}], ",", 
   RowBox[{"-", "0.28632140159606934`"}], ",", 
   RowBox[{"-", "0.3111429810523987`"}], ",", 
   RowBox[{"-", "0.2439609169960022`"}], ",", 
   RowBox[{"-", "0.29101142287254333`"}], ",", 
   RowBox[{"-", "0.26765841245651245`"}], ",", 
   RowBox[{"-", "0.2775532901287079`"}], ",", 
   RowBox[{"-", "0.25957000255584717`"}], ",", 
   RowBox[{"-", "0.2744232714176178`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237746772*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"bd8f57fc-5caa-4bdf-b0f3-e30458e604ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"predictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{13.75, {2., 11.75}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{13.75, {2., 11.75}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"majorityNet", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "]"}], ",", 
        RowBox[{"First", "[", 
         RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"testData", ",", 
       RowBox[{"UpTo", "[", "10000", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hardenedPredictionTargetPairs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Harden", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
    "predictionTargetPairs"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sort", "[", 
  RowBox[{"Counts", "[", "hardenedPredictionTargetPairs", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "4"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "190"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "204"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.864794524228527*^9, 3.864794804565859*^9, 
  3.864797246176762*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"c03c07d2-4a03-4d4c-a328-a0c259db38a9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 762},
WindowMargins->{{0, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.0 for Linux x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b749efe-4de6-4ef5-81a5-e56ac96807ba"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 3, 122, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[738, 27, 385, 8, 36, "Input",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],
Cell[CellGroupData[{
Cell[1148, 39, 202, 3, 36, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1353, 44, 6976, 163, 143, "Output",ExpressionUUID->"97eeb405-325c-4378-b671-231b94ec1141"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8366, 212, 156, 3, 85, "Chapter",ExpressionUUID->"e172cf77-104a-417b-9e8b-0895cfdd6efc"],
Cell[CellGroupData[{
Cell[8547, 219, 167, 3, 83, "Section",ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-0201cecf95d8"],
Cell[CellGroupData[{
Cell[8739, 226, 10920, 256, 175, "Input",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],
Cell[19662, 484, 131, 3, 31, "Echo",ExpressionUUID->"f89b0d19-5491-42a1-8fde-7224fbf6fc9c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19842, 493, 206, 4, 83, "Section",ExpressionUUID->"efe91894-6841-49a9-ab9d-fd0123575c7c"],
Cell[CellGroupData[{
Cell[20073, 501, 1350, 29, 63, "Input",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],
Cell[21426, 532, 2161893, 36110, 83, "Output",ExpressionUUID->"6e62241d-33c3-42a8-86da-757f61487432"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2183368, 36648, 250, 4, 83, "Section",ExpressionUUID->"ad8f60ad-b03c-4795-b29f-2120bea29aab"],
Cell[2183621, 36654, 5768, 90, 141, "Input",ExpressionUUID->"eaa3d115-a086-4307-a3c4-028cf226a277"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2189426, 36749, 300, 5, 83, "Section",ExpressionUUID->"b675450a-34c8-422e-899e-e8ac46fc9f8e"],
Cell[2189729, 36756, 1523, 40, 166, "Input",ExpressionUUID->"ec566d49-f36a-43fd-b5c3-ee142eb3b4bc"],
Cell[CellGroupData[{
Cell[2191277, 36800, 1042, 24, 115, "Input",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],
Cell[2192322, 36826, 3652, 53, 41, "Output",ExpressionUUID->"4e74efee-1a4b-46dc-91cb-63310f4470cc"],
Cell[2195977, 36881, 4478, 71, 88, "Output",ExpressionUUID->"bd8f57fc-5caa-4bdf-b0f3-e30458e604ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2200492, 36957, 9232, 223, 96, "Input",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],
Cell[2209727, 37182, 627, 18, 41, "Output",ExpressionUUID->"c03c07d2-4a03-4d4c-a328-a0c259db38a9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

