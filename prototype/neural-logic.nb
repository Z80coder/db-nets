(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   4033345,      74741]
NotebookOptionsPosition[   4016654,      74452]
NotebookOutlinePosition[   4017092,      74469]
CellTagsIndexPosition[   4017049,      74466]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Logic", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 
  3.864793591864854*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"\"\<neural-logic.m\>\"", ",", 
    RowBox[{"Path", "->", 
     RowBox[{"NotebookDirectory", "[", "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.864789316910233*^9, 3.864789318413851*^9}, 
   3.8647909759269857`*^9, 3.864791161343305*^9, {3.865060533686211*^9, 
   3.865060534575768*^9}, {3.865654305983205*^9, 3.8656543071935663`*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["AppendLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "AppendLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BooleanMajorityChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BooleanMajorityChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardIncludeAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardIncludeAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralMajorityLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Stretch", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "Stretch", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BinaryNN", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BinaryNN", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BooleanMajorityLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BooleanMajorityLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardIncludeOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardIncludeOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralANDLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralANDLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["WeightedNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "WeightedNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BitLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BitLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralDNFLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralDNFLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["BitLossBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BitLossBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardBinaryNN", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardBinaryNN", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralORLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralORLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["BitLossForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "BitLossForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNeuralLogicNet", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "InitializeNeuralLogicNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralMajorityBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomSoftBit", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "RandomSoftBit", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Blip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "Blip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "NeuralMajorityForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-8895ab13-9625-4fdf-a0ff-903331714284", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.15833333333333333`]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGAwBOI/QY2cjaffOFZob+cH0fcWzPQA0a+i7QtBtPreuaUg
+oP/tIkg+lHDt7MguvWnEVMTkJ6y+KYZiH5pMTsARHOsq90IovWEfpQ0A+mH
3edPTwTSHu0110G01i02uUlA+oBQjNQUIP2naY7TKiB9LFPW8D+QNhC4UQ6i
j8o7fQHRPxdcnsZw5o0jy6XqSYxAms1Nt4UZSJf4iPSC6G8aOkIsQDppn+dy
DiA9s+nCixUgdV8bKlcCaZ6Ny402AukwTb7HIHrloqDvIDqnZP2BTUB6kvyy
+yC67emZF5uBdNfeQtUtQNp5zlGuHUB63/3VQheBtEHF1fW/gfQfmTpxjrNv
HNf/rpulAaS/nv4qlgCkz28IXJsMpFPULu6qB9IcawyrG4H0lyi9t+eAtF9e
s8RFIL1Nc6nJdSB9pKzir8o5oLs+G8/xBdIAQZ3gEw==
  "],
 CellLabel->"Out[2]=",ExpressionUUID->"821832b2-386b-4db1-9efb-08ccc4c36efb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Learn XOR", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 
  3.864793644095471*^9}},ExpressionUUID->"e172cf77-104a-417b-9e8b-\
0895cfdd6efc"],

Cell[CellGroupData[{

Cell["Generate training data", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 
  3.864793759486944*^9}},ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-\
0201cecf95d8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numBooleanVariables", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Echo", "[", 
   SuperscriptBox["2", "numBooleanVariables"], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10"}], "]"}], "&"}], ",", 
     "\"\<BooleanFunction\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", "200"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Soften", "/@", "x"}], "->", 
         RowBox[{"{", 
          RowBox[{"Soften", "[", 
           RowBox[{"Boole", "[", 
            RowBox[{"bf", "@@", "x"}], "]"}], "]"}], "}"}]}]}], "]"}], "&"}], 
     ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}, {3.8648255889830313`*^9, 3.864825592504498*^9}, {
   3.864825624917417*^9, 3.864825626880946*^9}, {3.864829407265236*^9, 
   3.8648294087742167`*^9}, {3.864829443456806*^9, 3.864829444846697*^9}, {
   3.864829792396603*^9, 3.8648297927316837`*^9}, {3.864830032545388*^9, 
   3.8648300662967587`*^9}, 3.86483040909219*^9, {3.864830633132044*^9, 
   3.8648306348014383`*^9}, {3.8648309522842607`*^9, 
   3.8648309524254227`*^9}, {3.864831241412085*^9, 3.8648312465735483`*^9}, {
   3.864831361588151*^9, 3.864831427353725*^9}, {3.864831467589365*^9, 
   3.864831467738257*^9}, {3.8650545097885313`*^9, 3.865054521919083*^9}, {
   3.865574752812943*^9, 3.865574784399784*^9}, {3.865592534192895*^9, 
   3.865592534298318*^9}, {3.865592762627692*^9, 3.8655927636071053`*^9}, {
   3.865594557687479*^9, 3.865594557984342*^9}, {3.865594963476437*^9, 
   3.8655949635928717`*^9}, {3.865780594387285*^9, 3.8657805954725647`*^9}, {
   3.86578528554428*^9, 3.865785286930284*^9}, {3.8658288989019117`*^9, 
   3.865828899235673*^9}, {3.865830427368958*^9, 3.865830428545253*^9}, {
   3.865830742328867*^9, 3.8658307442321053`*^9}, {3.865831732136331*^9, 
   3.8658317341109133`*^9}, {3.865837020252844*^9, 3.865837020623869*^9}, {
   3.8658371834605103`*^9, 3.865837184543343*^9}, {3.8658377080420017`*^9, 
   3.865837708413855*^9}, {3.865837740366976*^9, 3.86583774055787*^9}, {
   3.865859522557151*^9, 3.865859523313833*^9}, {3.865859830431425*^9, 
   3.865859831995036*^9}, {3.865866201299968*^9, 3.865866202414603*^9}, {
   3.8658663169608183`*^9, 3.865866318295281*^9}, {3.865866383754406*^9, 
   3.8658663858232803`*^9}, {3.8660002644683657`*^9, 3.866000265575876*^9}, {
   3.866000397664502*^9, 3.866000398839758*^9}, {3.8660004574432163`*^9, 
   3.8660004580794077`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],

Cell[BoxData["1024"], "Echo",
 CellChangeTimes->{
  3.8660009204972763`*^9},ExpressionUUID->"ee80eed0-093d-4a56-87e7-\
61a610bfc3d3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 
  3.8647940005418167`*^9}},ExpressionUUID->"efe91894-6841-49a9-ab9d-\
fd0123575c7c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"BinaryNN", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NeuralDNFLayer", "[", 
       RowBox[{"numBooleanVariables", ",", "200", ",", "50"}], "]"}], ",", 
      RowBox[{"NeuralDNFLayer", "[", 
       RowBox[{"50", ",", "50", ",", "1"}], "]"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8632419379972563`*^9, 3.8632419530902557`*^9}, {
   3.863242016852003*^9, 3.863242016954556*^9}, {3.863242114731778*^9, 
   3.863242116511199*^9}, {3.8632425778512383`*^9, 3.863242578023574*^9}, {
   3.863242694378633*^9, 3.863242700041648*^9}, {3.863242823054079*^9, 
   3.863242825001767*^9}, {3.863243281805369*^9, 3.863243296105442*^9}, {
   3.863243344813389*^9, 3.86324334881746*^9}, {3.86324542198872*^9, 
   3.8632454248519697`*^9}, {3.863247013631166*^9, 3.8632470334948177`*^9}, {
   3.863248829969164*^9, 3.863248837552525*^9}, {3.863248975956862*^9, 
   3.8632489810980988`*^9}, {3.863249034093567*^9, 3.863249035816573*^9}, {
   3.863249118209298*^9, 3.863249119936665*^9}, {3.863249176433206*^9, 
   3.863249178608775*^9}, {3.863249255953167*^9, 3.863249259400838*^9}, {
   3.863249317769299*^9, 3.8632493194487257`*^9}, {3.8632494276013317`*^9, 
   3.863249430808964*^9}, {3.863249547870276*^9, 3.8632495499207163`*^9}, {
   3.86326070757487*^9, 3.863260713814412*^9}, {3.863261285184248*^9, 
   3.86326128955131*^9}, {3.863261670585479*^9, 3.863261672743452*^9}, {
   3.8632619665523157`*^9, 3.863262009944212*^9}, {3.863262184327989*^9, 
   3.863262195943681*^9}, {3.863262679270957*^9, 3.863262684091329*^9}, {
   3.863262941416381*^9, 3.863262948679788*^9}, {3.863263791169449*^9, 
   3.8632637935097647`*^9}, {3.863264236522559*^9, 3.8632642385373077`*^9}, {
   3.863264739345749*^9, 3.863264741641567*^9}, {3.863265060997054*^9, 
   3.863265077722269*^9}, {3.8632657532290382`*^9, 3.863265757380649*^9}, {
   3.863266075449151*^9, 3.863266076916868*^9}, {3.863266503645965*^9, 
   3.863266507525423*^9}, {3.863266720694066*^9, 3.863266722885908*^9}, {
   3.86326700633547*^9, 3.86326701072333*^9}, {3.863267435632831*^9, 
   3.8632674383443003`*^9}, {3.863267530432967*^9, 3.863267540032316*^9}, {
   3.863267828905903*^9, 3.863267833697029*^9}, {3.8632678966094522`*^9, 
   3.8632679216013536`*^9}, {3.864794014235001*^9, 3.8647940213073177`*^9}, {
   3.864794579263083*^9, 3.864794582125517*^9}, {3.864794682982588*^9, 
   3.86479468552535*^9}, {3.864794815286722*^9, 3.8647948257578917`*^9}, {
   3.864794905319006*^9, 3.864794911345727*^9}, {3.864794968574999*^9, 
   3.864794975365551*^9}, {3.864795059598652*^9, 3.864795101917604*^9}, {
   3.864795176886681*^9, 3.8647951794938307`*^9}, {3.8647953499990253`*^9, 
   3.864795352461677*^9}, {3.8647958599272413`*^9, 3.864795867358115*^9}, {
   3.864796080808188*^9, 3.864796089430326*^9}, {3.8647964361830683`*^9, 
   3.8647964413259087`*^9}, {3.864796688559135*^9, 3.864796691954176*^9}, {
   3.864797117975442*^9, 3.864797120678393*^9}, {3.864826111862607*^9, 
   3.8648261150051203`*^9}, {3.864826725117402*^9, 3.864826727363949*^9}, {
   3.864826847101227*^9, 3.864826858500071*^9}, {3.8648270681741257`*^9, 
   3.86482707018915*^9}, 3.864827425001938*^9, {3.864827680321042*^9, 
   3.864827682351656*^9}, {3.86482781394549*^9, 3.864827845840191*^9}, {
   3.864827883489957*^9, 3.864827886096278*^9}, {3.864827940781341*^9, 
   3.864827942872632*^9}, {3.864828391480813*^9, 3.864828397088695*^9}, {
   3.8648293065587587`*^9, 3.86482931137199*^9}, {3.8648294855503187`*^9, 
   3.864829492068088*^9}, {3.864829632032124*^9, 3.864829649853505*^9}, {
   3.864829729363516*^9, 3.8648297312826347`*^9}, {3.8648298530341988`*^9, 
   3.864829896781884*^9}, {3.86483009905539*^9, 3.864830100854253*^9}, {
   3.864830459056789*^9, 3.8648304611396923`*^9}, {3.864831049105101*^9, 
   3.8648310514158287`*^9}, {3.8648310817206783`*^9, 3.864831084088099*^9}, {
   3.864831234984818*^9, 3.8648312373753557`*^9}, {3.8648315017002277`*^9, 
   3.864831518455496*^9}, {3.864871523401445*^9, 3.864871525742118*^9}, {
   3.864872919623292*^9, 3.86487292394188*^9}, {3.8648743555590353`*^9, 
   3.8648743586936007`*^9}, {3.864880470356598*^9, 3.864880492074786*^9}, {
   3.864880589123769*^9, 3.864880597338715*^9}, {3.864903253533717*^9, 
   3.864903256636949*^9}, {3.865049504504595*^9, 3.8650495097439137`*^9}, {
   3.865049899816092*^9, 3.8650499283434467`*^9}, {3.8650526191804943`*^9, 
   3.8650526203855*^9}, {3.865054359306863*^9, 3.865054360919783*^9}, {
   3.865054531004756*^9, 3.865054533635377*^9}, {3.865054636844325*^9, 
   3.865054638211547*^9}, {3.865054764276216*^9, 3.865054766576495*^9}, {
   3.865065366124354*^9, 3.8650653678961906`*^9}, {3.865067873242037*^9, 
   3.865067874697713*^9}, {3.865067971749751*^9, 3.865067973925385*^9}, {
   3.8650680166780157`*^9, 3.8650680494050293`*^9}, {3.86506862048127*^9, 
   3.8650686321330547`*^9}, {3.865069572174119*^9, 3.865069576957403*^9}, {
   3.8650696234621058`*^9, 3.865069628253461*^9}, {3.865419614176634*^9, 
   3.865419618712538*^9}, {3.8654196567766037`*^9, 3.8654197016163883`*^9}, {
   3.865420088086615*^9, 3.865420090855755*^9}, {3.8654204754801283`*^9, 
   3.865420498148871*^9}, {3.8654207392326813`*^9, 3.86542073937121*^9}, {
   3.8654210803909683`*^9, 3.8654210898229856`*^9}, {3.8654213156081867`*^9, 
   3.865421320422872*^9}, {3.865421421743269*^9, 3.865421421999049*^9}, {
   3.865421522240629*^9, 3.865421526639143*^9}, {3.8654215951115847`*^9, 
   3.865421616871176*^9}, {3.865428722194433*^9, 3.8654287256695423`*^9}, {
   3.8654294194507723`*^9, 3.86542942260203*^9}, {3.865479576881824*^9, 
   3.865479580233204*^9}, {3.865479687297686*^9, 3.865479687413538*^9}, {
   3.865479947297221*^9, 3.865479947420513*^9}, {3.865483699415125*^9, 
   3.865483699838196*^9}, {3.865496239616465*^9, 3.865496239858955*^9}, {
   3.8654963805237913`*^9, 3.865496380674542*^9}, {3.865500151199391*^9, 
   3.865500151326848*^9}, {3.865500691943943*^9, 3.8655006920711184`*^9}, {
   3.865500736576084*^9, 3.865500794855249*^9}, {3.865500840831663*^9, 
   3.865500840927329*^9}, {3.865500937439568*^9, 3.865500937503277*^9}, {
   3.8655668213807697`*^9, 3.865566822035492*^9}, {3.865569725265851*^9, 
   3.8655697257129803`*^9}, {3.8655725686948347`*^9, 3.865572588963434*^9}, 
   3.865573187228284*^9, 3.8655736885008383`*^9, {3.865573881296842*^9, 
   3.865573881844605*^9}, {3.865574687693657*^9, 3.865574688053021*^9}, {
   3.865574789313718*^9, 3.8655747897172422`*^9}, {3.865575127310062*^9, 
   3.8655751274853897`*^9}, {3.8655757122470827`*^9, 3.865575712397706*^9}, {
   3.865576005558997*^9, 3.865576005790172*^9}, 3.865591121506907*^9, {
   3.865591153842525*^9, 3.865591154030252*^9}, {3.865591187387072*^9, 
   3.86559118753829*^9}, {3.8655913017448606`*^9, 3.865591302003117*^9}, {
   3.8655915227792807`*^9, 3.865591523386601*^9}, {3.865592002795477*^9, 
   3.8655920034025993`*^9}, {3.865592759877048*^9, 3.865592760024234*^9}, {
   3.865593912276279*^9, 3.8655939125003443`*^9}, {3.865594118542412*^9, 
   3.865594120005424*^9}, {3.8655945639825897`*^9, 3.8655945850327597`*^9}, {
   3.8656003236275177`*^9, 3.8656003274156103`*^9}, {3.8656020987646313`*^9, 
   3.8656021069182653`*^9}, {3.86560244067406*^9, 3.865602447500977*^9}, {
   3.865602572001937*^9, 3.8656025752617083`*^9}, {3.8656029919257803`*^9, 
   3.865603008349451*^9}, {3.865603251542083*^9, 3.865603268253531*^9}, {
   3.8656788088577433`*^9, 3.865678825994018*^9}, {3.865678916563418*^9, 
   3.865678922489442*^9}, {3.8656801682669086`*^9, 3.865680168975705*^9}, {
   3.865680465477624*^9, 3.865680471732812*^9}, {3.865680578605466*^9, 
   3.865680583616625*^9}, {3.8657795884657993`*^9, 3.865779595009117*^9}, {
   3.865779824314979*^9, 3.8657798376808367`*^9}, {3.8657801902812433`*^9, 
   3.865780194553763*^9}, {3.865780518437499*^9, 3.865780520995426*^9}, {
   3.865780651234041*^9, 3.865780651480955*^9}, {3.865780688703351*^9, 
   3.8657807028972588`*^9}, {3.865780807089864*^9, 3.865780807569862*^9}, {
   3.865781021730044*^9, 3.865781025569098*^9}, {3.865781074513928*^9, 
   3.8657810786647863`*^9}, {3.8657811306315002`*^9, 3.865781133440978*^9}, {
   3.865830432902985*^9, 3.865830440430963*^9}, {3.865830634461301*^9, 
   3.865830635782885*^9}, 3.8658307997023773`*^9, {3.865831576482025*^9, 
   3.8658315777731028`*^9}, {3.865837023717944*^9, 3.865837023893067*^9}, {
   3.865865269103393*^9, 3.8658652692984257`*^9}, {3.865865908508061*^9, 
   3.8658659231805277`*^9}, 3.8658659679439697`*^9, {3.865996540584362*^9, 
   3.8659965491837387`*^9}, {3.865999126477611*^9, 3.865999130138935*^9}, {
   3.865999426227064*^9, 3.8659994268084383`*^9}, {3.865999571408245*^9, 
   3.8659995746577377`*^9}, {3.865999720420474*^9, 3.865999730614956*^9}, {
   3.8659999704471693`*^9, 3.865999973582377*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bnn", "=", 
  RowBox[{"AppendLoss", "[", "softNet", "]"}]}]], "Input",
 CellChangeTimes->{{3.865049515720042*^9, 3.865049522714059*^9}, {
  3.865049990999758*^9, 3.865049992510968*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"838c2fb9-4256-4be2-930f-6b7047b4641e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Catenate\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"BitLoss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"10\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"BitLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["BitLoss", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    StyleBox["\"\[Sum]\"", Bold, 12, StripOnInput -> False], 
                    GrayLevel[0.33], 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SummationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    SummationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {333.00000147371924`, 103.49999999999999`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"NOT layer 1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (MapThread[
                    1 - #2 + # (2 #2 - 1)& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    1 + Subtract[# (-1 + 2 #2), #2]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"]}|>, 
                    "AND layer" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"n1" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n2" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n3" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n4" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n5" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n6" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n7" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n8" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n9" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n10" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n11" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n12" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n13" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n14" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n15" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n16" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n17" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n18" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n19" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n20" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n21" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n22" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n23" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n24" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n25" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n26" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n27" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n28" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n29" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n30" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n31" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n32" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n33" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n34" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n35" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n36" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n37" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n38" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n39" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n40" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n41" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n42" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n43" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n44" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n45" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n46" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n47" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n48" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n49" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n50" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n51" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n52" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n53" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n54" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n55" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n56" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n57" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n58" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n59" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n60" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n61" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n62" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n63" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n64" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n65" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n66" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n67" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n68" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n69" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n70" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n71" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n72" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n73" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n74" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n75" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n76" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n77" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n78" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n79" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n80" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n81" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n82" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n83" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n84" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n85" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n86" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n87" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n88" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n89" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n90" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n91" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n92" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n93" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n94" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n95" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n96" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n97" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n98" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n99" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n100" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n101" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n102" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n103" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n104" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n105" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n106" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n107" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n108" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n109" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n110" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n111" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n112" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n113" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n114" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n115" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n116" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n117" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n118" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n119" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n120" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n121" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n122" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n123" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n124" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n125" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n126" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n127" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n128" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n129" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n130" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n131" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n132" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n133" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n134" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n135" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n136" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n137" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n138" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n139" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n140" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n141" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n142" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n143" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n144" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n145" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n146" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n147" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n148" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n149" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n150" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n151" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n152" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n153" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n154" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n155" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n156" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n157" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n158" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n159" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n160" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n161" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n162" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n163" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n164" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n165" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n166" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n167" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n168" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n169" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n170" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n171" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n172" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n173" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n174" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n175" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n176" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n177" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n178" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n179" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n180" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n181" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n182" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n183" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n184" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n185" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n186" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n187" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n188" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n189" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n190" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n191" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n192" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n193" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n194" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n195" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n196" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n197" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n198" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n199" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n200" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {10}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input3" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input4" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input5" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input6" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input7" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input8" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input9" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input10" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input11" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input12" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input13" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input14" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input15" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input16" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input17" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input18" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input19" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input20" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input21" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input22" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input23" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input24" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input25" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input26" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input27" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input28" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input29" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input30" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input31" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input32" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input33" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input34" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input35" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input36" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input37" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input38" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input39" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input40" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input41" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input42" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input43" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input44" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input45" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input46" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input47" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input48" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input49" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input50" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input51" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input52" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input53" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input54" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input55" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input56" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input57" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input58" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input59" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input60" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input61" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input62" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input63" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input64" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input65" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input66" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input67" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input68" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input69" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input70" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input71" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input72" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input73" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input74" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input75" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input76" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input77" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input78" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input79" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input80" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input81" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input82" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input83" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input84" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input85" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input86" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input87" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input88" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input89" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input90" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input91" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input92" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input93" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input94" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input95" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input96" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input97" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input98" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input99" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input100" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input101" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input102" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input103" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input104" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input105" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input106" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input107" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input108" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input109" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input110" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input111" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input112" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input113" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input114" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input115" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input116" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input117" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input118" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input119" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input120" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input121" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input122" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input123" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input124" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input125" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input126" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input127" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input128" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input129" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input130" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input131" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input132" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input133" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input134" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input135" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input136" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input137" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input138" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input139" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input140" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input141" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input142" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input143" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input144" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input145" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input146" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input147" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input148" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input149" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input150" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input151" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input152" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input153" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input154" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input155" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input156" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input157" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input158" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input159" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input160" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input161" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input162" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input163" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input164" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input165" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input166" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input167" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input168" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input169" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input170" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input171" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input172" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input173" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input174" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input175" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input176" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input177" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input178" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input179" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input180" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input181" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input182" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input183" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input184" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input185" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input186" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input187" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input188" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input189" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input190" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input191" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input192" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input193" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input194" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input195" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input196" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input197" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input198" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input199" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input200" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "n1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n100", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n101", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n102", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n103", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n104", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n105", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n106", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n107", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n108", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n109", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n110", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n111", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n112", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n113", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n114", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n115", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n116", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n117", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n118", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n119", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n120", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n121", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n122", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n123", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n124", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n125", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n126", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n127", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n128", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n129", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n130", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n131", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n132", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n133", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n134", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n135", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n136", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n137", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n138", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n139", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n140", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n141", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n142", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n143", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n144", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n145", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n146", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n147", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n148", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n149", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n150", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n151", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n152", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n153", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n154", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n155", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n156", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n157", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n158", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n159", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n160", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n161", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n162", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n163", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n164", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n165", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n166", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n167", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n168", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n169", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n170", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n171", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n172", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n173", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n174", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n175", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n176", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n177", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n178", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n179", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n180", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n181", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n182", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n183", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n184", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n185", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n186", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n187", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n188", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n189", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n190", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n191", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n192", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n193", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n194", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n195", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n196", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n197", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n198", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n199", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "n200", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n44", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n45", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n46", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n47", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n48", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n49", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n50", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n51", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n52", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n53", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n54", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n55", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n56", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n57", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n58", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n59", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n60", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n61", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n62", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n63", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n64", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n65", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n66", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n67", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n68", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n69", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n70", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n71", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n72", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n73", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n74", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n75", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n76", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n77", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n78", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n79", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n80", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n81", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n82", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n83", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n84", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n85", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n86", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n87", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n88", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n89", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n90", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n91", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n92", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n93", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n94", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n95", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n96", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n97", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n98", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n99", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input28"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input30"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input31"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input32"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input37"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input38"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input39"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input40"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input41"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input42"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input43"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n43", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input44"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n44", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input45"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n45", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input46"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n46", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input47"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n47", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input48"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n48", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input49"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n49", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input50"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n50", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input51"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n51", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input52"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n52", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input53"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n53", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input54"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n54", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input55"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n55", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input56"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n56", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input57"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n57", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input58"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n58", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input59"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n59", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input60"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n60", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input61"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n61", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input62"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n62", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input63"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n63", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input64"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n64", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input65"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n65", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input66"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n66", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input67"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n67", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input68"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n68", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input69"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n69", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input70"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n70", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input71"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n71", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input72"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n72", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input73"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n73", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input74"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n74", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input75"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n75", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input76"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n76", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input77"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n77", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input78"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n78", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input79"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n79", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input80"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n80", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input81"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n81", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input82"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n82", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input83"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n83", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input84"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n84", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input85"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n85", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input86"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n86", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input87"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n87", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input88"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n88", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input89"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n89", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input90"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n90", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input91"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n91", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input92"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n92", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input93"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n93", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input94"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n94", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input95"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n95", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input96"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n96", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input97"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n97", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input98"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n98", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input99"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n99", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input100"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n100", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input101"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n101", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input102"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n102", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input103"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n103", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input104"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n104", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input105"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n105", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input106"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n106", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input107"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n107", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input108"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n108", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input109"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n109", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input110"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n110", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input111"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n111", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input112"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n112", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input113"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n113", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input114"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n114", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input115"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n115", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input116"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n116", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input117"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n117", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input118"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n118", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input119"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n119", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input120"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n120", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input121"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n121", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input122"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n122", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input123"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n123", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input124"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n124", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input125"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n125", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input126"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n126", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input127"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n127", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input128"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n128", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input129"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n129", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input130"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n130", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input131"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n131", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input132"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n132", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input133"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n133", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input134"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n134", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input135"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n135", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input136"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n136", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input137"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n137", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input138"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n138", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input139"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n139", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input140"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n140", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input141"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n141", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input142"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n142", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input143"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n143", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input144"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n144", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input145"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n145", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input146"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n146", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input147"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n147", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input148"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n148", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input149"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n149", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input150"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n150", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input151"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n151", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input152"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n152", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input153"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n153", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input154"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n154", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input155"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n155", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input156"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n156", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input157"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n157", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input158"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n158", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input159"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n159", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input160"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n160", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input161"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n161", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input162"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n162", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input163"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n163", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input164"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n164", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input165"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n165", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input166"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n166", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input167"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n167", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input168"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n168", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input169"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n169", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input170"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n170", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input171"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n171", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input172"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n172", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input173"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n173", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input174"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n174", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input175"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n175", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input176"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n176", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input177"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n177", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input178"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n178", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input179"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n179", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input180"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n180", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input181"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n181", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input182"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n182", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input183"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n183", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input184"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n184", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input185"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n185", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input186"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n186", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input187"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n187", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input188"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n188", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input189"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n189", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input190"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n190", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input191"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n191", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input192"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n192", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input193"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n193", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input194"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n194", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input195"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n195", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input196"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n196", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input197"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n197", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input198"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n198", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input199"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n199", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input200"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n200", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"]}|>, 
                    "OR layer" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"n1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n2" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n3" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n4" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n5" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n6" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n7" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n8" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n9" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + Subtract[Subtract[1, #] (-1 + 
                    2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n10" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 2 (-0.5 + 
                    Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n11" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n12" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n13" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n14" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n15" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n16" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n17" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n18" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n19" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n20" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n21" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n22" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n23" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n24" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n25" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n26" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n27" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n28" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n29" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n30" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n31" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n32" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + Subtract[Subtract[1, #] (-1 + 
                    2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n33" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 2 (-0.5 + 
                    Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n34" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n35" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n36" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n37" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n38" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n39" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n40" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n41" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n42" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n43" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n44" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n45" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n46" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n47" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n48" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n49" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n50" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {200}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {200}|>,
                     "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input3" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input4" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input5" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input6" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input7" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input8" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input9" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input10" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input11" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input12" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input13" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input14" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input15" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input16" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input17" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input18" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input19" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input20" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input21" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input22" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input23" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input24" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input25" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input26" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input27" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input28" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input29" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input30" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input31" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input32" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input33" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input34" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input35" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input36" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input37" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input38" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input39" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input40" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input41" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input42" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input43" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input44" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input45" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input46" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input47" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input48" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input49" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input50" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "n1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n44", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n45", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n46", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n47", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n48", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n49", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n50", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input28"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input30"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input31"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input32"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input37"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input38"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input39"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input40"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input41"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input42"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input43"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n43", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input44"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n44", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input45"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n45", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input46"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n46", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input47"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n47", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input48"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n48", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input49"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n49", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input50"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n50", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "NOT layer 1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND layer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT layer 1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OR layer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND layer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OR layer", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"NOT layer 1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> (MapThread[
                    1 - #2 + # (2 #2 - 1)& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    1 + Subtract[# (-1 + 2 #2), #2]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"]}|>, 
                    "AND layer" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"n1" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n2" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n3" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n4" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n5" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n6" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n7" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n8" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n9" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n10" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n11" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n12" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n13" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n14" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n15" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n16" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n17" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n18" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n19" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n20" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n21" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n22" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n23" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n24" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n25" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n26" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n27" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n28" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n29" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n30" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", "Input"]
                     -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n31" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n32" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n33" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n34" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n35" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n36" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n37" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n38" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n39" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n40" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n41" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n42" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n43" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n44" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n45" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n46" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n47" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n48" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n49" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "n50" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeAND[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[If[#2 > 0.5, 
                    If[# > 0.5, #, 1 + Subtract[# (-1 + 2 #2), #2]], 
                    
                    If[# > 0.5, 1 + 2 Subtract[0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, #], 1 + 
                    Subtract[2 # (0.2 If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "And1", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input3" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input4" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input5" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input6" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input7" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input8" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input9" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input10" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input11" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input12" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input13" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input14" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input15" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input16" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input17" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input18" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input19" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input20" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input21" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input22" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input23" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input24" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input25" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input26" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input27" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input28" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input29" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input30" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input31" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input32" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input33" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input34" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input35" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input36" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input37" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input38" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input39" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input40" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input41" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input42" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input43" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input44" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input45" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input46" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input47" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input48" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT], 
                    "Input49" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input50" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "n1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n41", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n42", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n43", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n44", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n45", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n46", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n47", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n48", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n49", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n50", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "n9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input28"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input30"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input31"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input32"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input37"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input38"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input39"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input40"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input41"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n41", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input42"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n42", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input43"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n43", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input44"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n44", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input45"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n45", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input46"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n46", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input47"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n47", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input48"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n48", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input49"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n49", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input50"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n50", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"]}|>, 
                    "OR layer" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"n1" -> <|
                    "Type" -> "Graph", "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {50}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {50}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|"Type" -> "Function", "Arrays" -> <||>,
                     "Parameters" -> <|"Function" -> (MapThread[
                    neurallogic`HardIncludeOR[#, #2]& , {
                    Slot["Input"], 
                    Slot["Weights"]}]& ), 
                    "Net" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Subtract[1, 
                    If[#2 > 0.5, 
                    If[Subtract[1, #] > 0.5, 
                    Subtract[1, #], 1 + 
                    Subtract[Subtract[1, #] (-1 + 2 #2), #2]], 
                    If[
                    Subtract[1, #] > 0.5, 1 + 2 Subtract[0.2 
                    If[2 (-0.5 + Subtract[1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])], #2] Subtract[1, 
                    Subtract[1, #]], 1 + 
                    Subtract[2 Subtract[1, #] (0.2 If[2 (-0.5 + Subtract[
                    1, #2]) > 0.5, 
                    Subtract[1, 2 (-0.5 + Subtract[1, #2])], 
                    2 (-0.5 + Subtract[1, #2])]), #2]]]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{50}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NonLin", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Inputs", 
                    "Weights"] -> NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath["Nodes", "Reshape", "Outputs", 
                    "Output"]}|>, "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "NonLin" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {1}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "n1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "n1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NonLin", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "NOT layer 1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND layer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NOT layer 1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OR layer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "AND layer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OR layer", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "BitLoss" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 
                    0., (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, 
                    neurallogic`Private`n])^2], {
                    neurallogic`Private`n, 1, 1}]]]]], "ErrorFunction" -> 
                    Null, "InitializationName" -> 
                    "Initialization_96897ff3_a97d_4022_ab95_c97aa7f93510", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
Fcl9/e09zJcPxk5xNZ08pUe/wyv/sb5/dp9+Z7b7Q/1CVqyCvc2VpCOevuqv
12scpy0pshXYrXSnCxryTbZa8kIPUJZUbVVkf7/19Zc91x46n/+9pcUXVgqh
Y12yc9CFNTMUlKlPl1/XBBdmXZq97YuX17CaWW7UY68q9O/rK1JOxl9+79h8
xRHOsSd/FAYRz1o6PXPWTa4SfLjy6NHH6r5ryRMehk6enUR5SjY7CJlxfv1F
/dqGiNOsfTZH2Vb7W7uWX+9Ud+9K+AwIyGr9iY79de1Z2l0tW49vWpN/pTmj
v7qzvzDj707MaYwfJBcD/v616dHGapHbDJAVHQj4B8p2nkWlH5YL+so7dYWi
0TPR18DVJn8zdXUoFKgihFZAcMfbG8qtPoZsEV8q1xQ8ywISqnphDlnWey/F
2Zufc8z0qGOpyDnoB0wF2jMrUpr70xuqd1oppDMLdzw9me1emtKYaQHyz3W3
6hiu+0ymCg+qJU5KvSriJvrc2bQA+/z41AIS6LRE0BMw7Zip6/4Skeq+2V4r
xdP9mhTnDvpZOxZQING+e+/7kGAzTws0mg2tWQWlYRBpXbOoKeLpfKhu5RkO
WvraMVDdki+o5Y/SGEfHAVJTe6sFvYXpayfADx3BFfJHE8yQsp3v6ClPKdN3
NSqQMgQXrnc+04kYoexsiIjxQ72JL1VLmu5lTZg95czLpVH7LB/rl2a73NXr
9INfmA1IZLmG7qWdMBmT7OoaLz068Ebb2P1bvRSR1/U9g/VIEEaZ6Jo7Inl8
PB3Xczua3Ur4Vm7mma8sNylkvYX62uQxpms2AKUwoyYB3CXBSnkVEMQPkGsO
he2Ii6k9cyYgMp/0lWv6NNHB2YgTZd105zPzTAA7VcfbGp5bAHYKlxem67da
XsXYeaG6diZiWldZ964wqgKpRXWb7taTvrqMd+3QmC17LH8UdRKxCuiLNlMv
AuJYi75Jyu/Jq64gvn10AvDtOca3DlVEVAYa+inBWnoKhnZBNUL7rvnnQDkc
T8gfPcXGeueGio5yfWfPY4/upfkCs4mc+2MiYv/n4omsAxWTBWhMFpRLQjRA
+YR+iCrNJ1q6s7cYdVUKRoaH7+Fvst0r0lWg9QjhEqREaxsCVCbArKhudTRm
uV45bwZQfLpcKXE+g+lWcqPCPB9gffF4eiemEWWAkmII6il5ZUbNx0bTE92z
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
4i29ibcg4K17em36xdbc/wvLRR2R
                    "]]|>, 
                    "ExternalLibraryPaths" -> {
                    "CompilerCoreRuntime", "CompilerCoreRuntime"}, 
                    "orcInstance" -> 81305552, "orcModuleId" -> 72658848, 
                    "targetMachineId" -> 82021920|>, 140320688058528, 
                    140320688058336, 140320688058464, 140320688050176, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[neurallogic`Private`n <= 1, 
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 0., 
                    2 (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, neurallogic`Private`n])], 
                    0.], {neurallogic`Private`n, 1, 2 1}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_22721454_01ab_49e4_bac4_c4604bbfcd36", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
6D9WolXlfXzjGbiqYkDgat+MTrID+1Q+5zSXRyHXz0fOxdCReBedU1wuQ5FG
XB2KboSK07hbWcyvRMFdsRw/7hi+gpddBFxQ+eI2bs+gS0kifFPzvS2MXQV3
kc4ehH4/EQ8hdkHEIhTvdcLQKh8xPnAFmTwzpJCX62WN0If2I+AuyLT6bb3O
nBy4sgQ3FgePXgCTY7lGOfpnpE4HQQAMRYIKsdfJApJEENH4PVgn92IuCtT8
BCcR5Y0D0xArg/XZ2pMM9aRsJt4kTPoG76OuQbIdSINE5SJ3Ug45ujO9Hz/S
A6SPtRujUxjhQNaWnhc58k9gFNOAF1CUImVsQNEtWVuumlUvX5ojx+0cPBSE
H1LwBy5ZmkIFS22E31Z83PSu9sgE2XnEbs29GAI65/cTKhsFpxB9N5SJlDcr
njfge6rhq6P4woN2OTr6rer6o7GctyIkedxbz6nHfwnVblJqziHvv1J/SCVL
f624amv6VjHdZaO3n2u/hUUQz9PKxgufU9jAhNWixfoTvpdKhUHkbaTQndBm
PcLDpnQo3e9hUWadcDgoDtXMV9crauykftcZljA29EcieNF13Ap3WwpVdZdm
D78U9kzrG9Se6QSgmrwvOFXzWleyfi9xdmMIrkutaJcSoo33yr2qyC182y3E
+zV0T3HyxvwjnNp5rRGsuyXcWaBb0xTQDTMF3Q4YgW6/wG4fwm5VsNsHoNv9
eaAby6bwUsKZz1rlXnev3efb/k18XkPfI87cSGnkXJlH2sbqK4n1ZiRd500H
3URmAFs7BWDLJAFsDRCbGtAWsgfQ1ryMwb8ucimsSYicEir3qjA+ybe9S75Z
Q0/O3baR4s+tmkcqA93uvwe6MeaCbqVTQbfbJqBbuhHoVp+7zXAeVW0Kz6O2
WsLzKKrhPCqXOJs2/TDX2LqNxrE8vME5qtk7kgzPooz+7dv0bUZcfwuytyk1
uILj7G1q5jVlJ/0sx6TPMzwqGOaGOeHm8GNbI11iOFms/77Pnfwh+zqDpqvV
IsxxrSQHf0in+MI6hx3aIr6fJDusjAheeC75FMOk2fdrBhkePKBjg1ReN/W0
pGgmvSk81LKUNFvi7037krQv9Z88SnxTVDerzJORiB8gfKhPTUsNNRAcU7Ej
+tYdTwvvrDD92UN80zbvIiURpnX7tYUOkYGutGukfd2BrmEf0sPtTxGMjG/Z
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
55CnwEP4oT3ZysximbdGRWWydAuwSzVxY7x9NuWtE/DF9zSLhQtfDX2G35rd
KKPjn6OSQy3//Xxy9Pj/9n8ZAk/C18/F3vqyBZYvRRXLRm+G6lav4uqkbOQE
roqKqvLBmkl4FPIiAJ+MLeOFZbhk1oBl+js+mQNAiflQiBGKJc9c1tvD0yV1
2mDPaVx/A5L+AQ8KgOXK5p8nAAgfvvpKcW8/EvsAME2qE28e+g2+fuBnsdP5
i3NuYJgsPlhg2tlXoNkfR2OeA0tpk7bO6sbAS6GskX8XzUvEMDzFnESTXiuU
n0Zra3jUiBKqPW/qUk0qxgsJpqjDuaNSRLfa76nLNH9IrSo16RgyPp0Dy+3Q
Gl90YbzwIgXyXNU5HBRXhr9Vf4cvDuFARvbAWMzAT45D0FAvGoRq/4p/D3Jc
vVoeFCfH166iupi5HRk+FTJ8aUiHldBUuOH8aUuyihB/Ecqq4tKPUP+BKnjW
8gUJDrtFNg3WLt1WZvAP4w3KmXjDIgG66qq+XpHh85Y0g+K+QRT3KdGVV7fl
VwXP0BBlyivFzO+RfNRXl1lA2zaarQx66pLuAQuJVIGDLtP83lq+fcBeI762
yMA84CYNmOCxwv24ZYxAJ4cL3rrr6WXhJHpZfQ5OXwYT096K49+gyGmQ/wMO
f6Gnhot0yicJ6NRpZHzO4Xds3Zbv4Vcgvlar0ucg87NYUIoaOpWPApFO7ikb
L3RDdTt15eNVoxTv6yS6VoVOIDW4dO/oYzjOcfkVsTlsuFwk1zbUG0Pink8A
QI19zXyE72XneKEQHoT9mroamvpp8MyzbVg42PP6k9JRpLTqRUBdpjdB7fDv
hAd2ZxEfsipjq3+5aOsg+e2Lto5qe17abvUvd2x9j/iul3/1neVnoaxlQsWi
zQq1cGD0oGx0UnV55dvdq/mozK9+y/DpxUhrM5JkaFKFw5eLe4VQbzbLhPB0
eRdyvnerslUTEZqa4k3W0F3u6BLdT4vQZPBHcFsGa87azcLhmm8evlykDNwi
myi22wKwlMlR1WP0eUS2vLoMF8w9VEGFD10r/EzrdBedU2Wt1uzij+H6pa4q
ZiohXGNPnRhfb+ftBpDglePccPyL7N3ne0Zh9dumsIebic/DC3vOtoUu62zc
WIsM08Dke5E6bzlQ8xqukFmeUIPUEYOXV6uhk4nrQQusD3jSY5/hhj1i4HKX
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
QvwnCeIVvYlXYOCVa3pm+MXn2/8DyP59YA==
                    "]]|>, 
                    "ExternalLibraryPaths" -> {
                    "CompilerCoreRuntime", "CompilerCoreRuntime"}, 
                    "orcInstance" -> 81250960, "orcModuleId" -> 72673488, 
                    "targetMachineId" -> 81200352|>, 140320688038112, 
                    140320688037920, 140320688038048, 140320688029696, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {2}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1cde8f5faea9d1ff", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "Summation", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`AtomT], "Target" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8648979774977818`*^9, 3.8649030065461082`*^9, 3.864903262480233*^9, 
   3.86504958579627*^9, {3.86504998643436*^9, 3.8650499940362167`*^9}, 
   3.865050059197459*^9, 3.8650544412960253`*^9, 3.865054535169259*^9, 
   3.865054639967608*^9, 3.8650547690070953`*^9, 3.865059576978177*^9, 
   3.865059790436716*^9, 3.8650653750637503`*^9, 3.865065555753196*^9, 
   3.865065611004587*^9, 3.8650676680287952`*^9, 3.865067876644807*^9, 
   3.865067975702506*^9, {3.865068024184951*^9, 3.865068052570566*^9}, 
   3.865068636863194*^9, 3.865068958676113*^9, 3.8650695822228613`*^9, 
   3.8650696354951897`*^9, 3.8654198622627487`*^9, 3.865420095732831*^9, 
   3.865420972774472*^9, 3.8654210126879997`*^9, 3.865421099226204*^9, 
   3.865421323238349*^9, 3.865421426053117*^9, 3.8654215628453712`*^9, {
   3.8654216074917707`*^9, 3.86542162005336*^9}, 3.865428151432199*^9, 
   3.8654287345778637`*^9, 3.865429054626409*^9, 3.8654293065494423`*^9, 
   3.865429426005782*^9, 3.8654306686726713`*^9, 3.865479325446987*^9, 
   3.865479583573203*^9, 3.865479689574666*^9, 3.865479815323929*^9, 
   3.865479950816572*^9, 3.865481821167424*^9, 3.865481994677546*^9, 
   3.865482545703555*^9, 3.865482708370368*^9, 3.86548370190205*^9, 
   3.8654868159812727`*^9, 3.8654870462631893`*^9, 3.8654954268468246`*^9, 
   3.865495583309318*^9, 3.865496064801043*^9, 3.865496248071377*^9, 
   3.8654963829990187`*^9, 3.8654965077964163`*^9, 3.865496592296339*^9, 
   3.865496701886044*^9, 3.865497236625126*^9, 3.865500050433408*^9, 
   3.865500154815855*^9, 3.865500220489944*^9, 3.8655005255039883`*^9, 
   3.865500603413117*^9, 3.865500694466668*^9, {3.8655007380601273`*^9, 
   3.865500795915904*^9}, 3.8655008421540003`*^9, 3.8655009386893787`*^9, 
   3.865566679863598*^9, 3.865566827473055*^9, 3.865567274592492*^9, 
   3.8655674491940203`*^9, 3.8655687190626097`*^9, 3.865568872983485*^9, 
   3.8655690797577133`*^9, 3.8655692320249863`*^9, 3.865569312403153*^9, 
   3.865569502128812*^9, 3.865569577167795*^9, 3.865569695536481*^9, 
   3.865569727321425*^9, 3.8655702613034554`*^9, 3.8655711331140013`*^9, 
   3.865571275153861*^9, 3.865571315711754*^9, 3.865571557525464*^9, 
   3.86557223148673*^9, 3.865572527550457*^9, {3.8655725715050383`*^9, 
   3.8655725907794857`*^9}, 3.865572653609177*^9, 3.865572818975409*^9, 
   3.865572915513506*^9, 3.865572975799892*^9, 3.865573108743168*^9, 
   3.865573190566824*^9, 3.865573492813673*^9, 3.865573690043578*^9, 
   3.865573844357398*^9, 3.865573884173944*^9, 3.865573953600718*^9, 
   3.865574069831852*^9, 3.8655741368494263`*^9, 3.865574689351982*^9, 
   3.865574757568428*^9, 3.86557479612709*^9, 3.865575129195607*^9, {
   3.865575416924082*^9, 3.8655754439269743`*^9}, 3.865575715027607*^9, 
   3.86557600721299*^9, 3.865576083395692*^9, 3.865576168419168*^9, 
   3.865591182703329*^9, 3.865678852533474*^9, {3.865678901906776*^9, 
   3.86567892919038*^9}, 3.8656790532497663`*^9, 3.865679522819127*^9, 
   3.865680117717989*^9, 3.865680178262205*^9, 3.8656804803837214`*^9, 
   3.8656805920607643`*^9, 3.865779758205204*^9, 3.865779859051792*^9, 
   3.865780275998282*^9, 3.865780537799964*^9, 3.865780655413946*^9, 
   3.865780709868534*^9, 3.865780816675136*^9, 3.865781030277255*^9, 
   3.865781081476149*^9, 3.865781145274815*^9, 3.865828840960733*^9, 
   3.865829093823874*^9, 3.8658304903620462`*^9, 3.865830652564085*^9, 
   3.865831170975173*^9, 3.865831643603095*^9, 3.865837068668036*^9, 
   3.865837519018941*^9, 3.865859466482292*^9, 3.8658595651888*^9, 
   3.865863373306286*^9, 3.865865106292226*^9, 3.8658652281969633`*^9, 
   3.865865301628067*^9, 3.865865442509845*^9, 3.865865624659881*^9, 
   3.8658659540534363`*^9, 3.865865997104291*^9, 3.865999198362226*^9, 
   3.865999292075437*^9, 3.865999479775797*^9, 3.8659996135835123`*^9, 
   3.865999765423428*^9, 3.8659998836225*^9, 3.866000024004284*^9, 
   3.8660009861258793`*^9, 3.866001498730785*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"309c1112-c2f7-4b9a-b5bc-fbc7cac61584"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}},ExpressionUUID->"ad8f60ad-b03c-4795-b29f-\
2120bea29aab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedBNN", ",", "resultsObject"}], "}"}], "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"bnn", ",", "trainData", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", "\"\<ResultsObject\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "\[Rule]", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"LearningRate", "->", "0.01"}], ",", "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "10000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865428232330284*^9, 3.865428244613282*^9}, {
   3.865428446564876*^9, 3.865428449969599*^9}, {3.865428501394691*^9, 
   3.8654285016500673`*^9}, {3.865429140268173*^9, 3.8654291434209957`*^9}, 
   3.865429214011307*^9, {3.8654294339340467`*^9, 3.8654294340827503`*^9}, {
   3.8654295152773523`*^9, 3.86542951704326*^9}, {3.865429556839031*^9, 
   3.8654295638516693`*^9}, {3.865429730422987*^9, 3.86542974562778*^9}, {
   3.8654298210523777`*^9, 3.865429867652165*^9}, {3.865429972383316*^9, 
   3.865430011504182*^9}, {3.865430135624197*^9, 3.865430137845003*^9}, {
   3.8654305811438723`*^9, 3.865430581573798*^9}, {3.865479560301008*^9, 
   3.865479560450088*^9}, {3.865479962455144*^9, 3.865479976126848*^9}, {
   3.865480085468527*^9, 3.865480088569261*^9}, {3.8654801896917953`*^9, 
   3.865480191625102*^9}, {3.8654802745407743`*^9, 3.8654802777047157`*^9}, {
   3.865480354091114*^9, 3.865480427712871*^9}, 3.865480507227429*^9, {
   3.8654805938834343`*^9, 3.865480626187419*^9}, {3.8654806881070223`*^9, 
   3.8654806899444427`*^9}, {3.865480756788917*^9, 3.865480760072857*^9}, {
   3.865480835571855*^9, 3.865480837592866*^9}, {3.8654818234747877`*^9, 
   3.865481848923358*^9}, {3.8654818794747753`*^9, 3.8654819237112207`*^9}, {
   3.865481959331347*^9, 3.865481961975203*^9}, {3.865482814303081*^9, 
   3.865482827407219*^9}, {3.86548288204804*^9, 3.865482884755291*^9}, {
   3.865482943063621*^9, 3.86548294500378*^9}, {3.865483139165812*^9, 
   3.865483140493231*^9}, {3.8654831787330713`*^9, 3.8654831814858637`*^9}, {
   3.8654833114936857`*^9, 3.8654833153505707`*^9}, 3.865483418090312*^9, {
   3.86548380635133*^9, 3.865483808008194*^9}, 3.8654959442322807`*^9, {
   3.865496124932585*^9, 3.865496127516869*^9}, {3.86549628562296*^9, 
   3.865496288706304*^9}, {3.865496455564855*^9, 3.865496458796282*^9}, {
   3.865496716167138*^9, 3.8654967300916777`*^9}, {3.8654968430102673`*^9, 
   3.8654968463960943`*^9}, 3.865496929165958*^9, {3.8654971140104437`*^9, 
   3.865497122463436*^9}, {3.865497292077404*^9, 3.865497337732139*^9}, {
   3.865497692818831*^9, 3.865497695205945*^9}, 3.865500055008408*^9, {
   3.865500144762206*^9, 3.8655001468564568`*^9}, {3.8655006044843197`*^9, 
   3.865500606376629*^9}, {3.8655006839198008`*^9, 3.8655006865925217`*^9}, {
   3.865500997671008*^9, 3.865501023153001*^9}, 3.865501072099613*^9, {
   3.8655669765103683`*^9, 3.865566982612595*^9}, {3.865567532801262*^9, 
   3.865567532944982*^9}, {3.865567842847506*^9, 3.86556784541306*^9}, {
   3.8655687230251017`*^9, 3.865568734226145*^9}, {3.8655689692829447`*^9, 
   3.865568973575356*^9}, {3.865569092556924*^9, 3.865569092700306*^9}, {
   3.865569397076442*^9, 3.86556940865919*^9}, {3.86556946176305*^9, 
   3.865569461931089*^9}, {3.865569795453826*^9, 3.8655697990498857`*^9}, {
   3.865570096965913*^9, 3.8655700978262243`*^9}, {3.865570253993876*^9, 
   3.865570254135398*^9}, {3.865570294032295*^9, 3.865570298226688*^9}, {
   3.8655711353927507`*^9, 3.865571135538004*^9}, {3.865571174847946*^9, 
   3.865571179242852*^9}, {3.865571278486369*^9, 3.8655712805259523`*^9}, {
   3.865571379439022*^9, 3.8655713847148438`*^9}, {3.8655714649668217`*^9, 
   3.8655714656145067`*^9}, {3.865571512655325*^9, 3.8655715128320932`*^9}, {
   3.865571633280881*^9, 3.865571635683063*^9}, {3.8655722468771257`*^9, 
   3.8655722470411654`*^9}, {3.865572302511961*^9, 3.8655723054485493`*^9}, {
   3.865572539198292*^9, 3.865572539337015*^9}, {3.8655752188789263`*^9, 
   3.865575237154901*^9}, {3.865575304100212*^9, 3.865575304277326*^9}, {
   3.865575570908123*^9, 3.865575595866898*^9}, {3.865575807100389*^9, 
   3.865575808439022*^9}, 3.865575931747429*^9, {3.865575998477322*^9, 
   3.865576000654451*^9}, {3.8655911281687193`*^9, 3.8655911426183167`*^9}, {
   3.865591175236245*^9, 3.86559117857428*^9}, {3.865594685707263*^9, 
   3.8655946993351088`*^9}, 3.865594856065406*^9, {3.8655949553391438`*^9, 
   3.865594955516395*^9}, {3.865595110500951*^9, 3.8655951196959333`*^9}, {
   3.865595246507476*^9, 3.8655952737938643`*^9}, 3.865595926530221*^9, {
   3.865601455082287*^9, 3.865601455254142*^9}, 3.865601522587998*^9, 
   3.8656016960045424`*^9, 3.865602785829811*^9, {3.865602843467071*^9, 
   3.865602843612894*^9}, {3.8656788360144043`*^9, 3.865678867450468*^9}, 
   3.865678956383746*^9, 3.865680389326783*^9, {3.865680522561952*^9, 
   3.865680526203846*^9}, 3.865680602967496*^9, {3.865680636893855*^9, 
   3.865680665330213*^9}, 3.8657799342259483`*^9, {3.865779974052992*^9, 
   3.865779974175137*^9}, {3.865780010459446*^9, 3.865780015522176*^9}, {
   3.865780887690321*^9, 3.865780915453484*^9}, 3.865785336164051*^9, 
   3.865838114839967*^9, {3.865838147569162*^9, 3.865838148034783*^9}, {
   3.8658596610175133`*^9, 3.865859661296295*^9}, 3.865859697817361*^9, 
   3.865865273114361*^9, {3.865865649017152*^9, 3.865865649178698*^9}, {
   3.865865928753685*^9, 3.8658659324474697`*^9}, 3.86586638948285*^9, {
   3.865866454316039*^9, 3.865866455646196*^9}, {3.86591263532898*^9, 
   3.865912644249567*^9}, {3.8659993024508266`*^9, 3.865999320057988*^9}, {
   3.866002180347974*^9, 
   3.86600218183318*^9}},ExpressionUUID->"eaa3d115-a086-4307-a3c4-\
028cf226a277"],

Cell[CellGroupData[{

Cell[BoxData["resultsObject"], "Input",
 CellChangeTimes->{{3.866002184775483*^9, 3.866002185294262*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"fb6ed126-9351-44fd-bf08-f3a57c6a1fd1"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "2314"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "115"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["11min"], 
                  TextCell["11min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], 
                 TagBox[
                  InterpretationBox[
                   StyleBox["\"28.\"", ShowStringCharacters -> False], 
                   28.167907300780428`, AutoDelete -> True], 
                  NumberForm[#, 2]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "160"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["validation examples:"], 
                  TextCell["validation examples:"]], "40"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "18512"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "8"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"1.03\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.10340807047223564`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["validation"], 
                 TextCell["validation"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"3.39\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.3389294310515254, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[GridBox[{
                {"", 
                 ItemBox["\<\"rounds\"\>",
                  DefaultBaseStyle->"LabeledLabel"]},
                {
                 RotationBox[
                  ItemBox["\<\"loss\"\>",
                   DefaultBaseStyle->"LabeledLabel"],
                  BoxRotation->1.5708], 
                 GraphicsBox[
                  {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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

                    "]]}, {}}, {
                    {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1:eJw11AtUU2UAB/CJorzKF2IPzhI0HioqKAiC7I88HI+9YLBNMBPNVxCoZzwU
xWhqouEDxcJQjOSogbFUIiEu2FIhAvUYYsbYQwkVEgQJgoPN3e/b+XZ2vrt9
v/vf/7v3OiWmRH9kweFwtpverz/bDhSZRhfPt/+7YZ8QI8POh3glORHX/Uzz
IvMBS1R9M7Hc1zSf7q82DVtwy1YrckzzRNc005iGuRf/PvbQNF/2+uvpM2Ed
qTuYHWpk0sw/eAeNSmHMlDAjI+zWmAYXzdH3Xp5caWQ05gOzULTD9UZ+uJEx
L/efjTrPpZygKHr+9+FUMniiXkR9Vxy277duEBgZ8+kT3eH/aESkiKD55qFY
U+3YkmBkKswHPOCw+766R0q9hVgdGLmnik/ni7Df5dP8NzbS9Z6okhZGLZcY
GXMdbV6QcJov2K+j/SzGkfaSsCO76f9ZggcZlxY4p1DPG3ubxtr0+6nnA6Z+
V5DlEeotxdqFWzz6cqnni9r07QMPz1DPD2tKx/+oiqXeMmTx0+5d+M9APH+o
52QUVE6gXgBUhVMrrG2ptxzXnrTWxYwZiBeIZv3N0Qv/GojHw96jyU0HRw3s
ejnw5dXKj09tovthmk+sOf5LsZExLxcGwarrao1NIenbEISyZO9eLpfu/wrY
VfHyq5xpnhU4dOmg/5AF8ZKCMWlA8tyl08B6zcHQpMzq+eecgexfCAzG512B
uQbWGwzBX/LAjPHHaL5QJLbkld753kDyhWLujk7eAxHxhGEQuVwMfGFFPEMY
fHgPytvu6Em+ldgdfjVPOYN4bSuhrJwftiSUeEl8bHjTqmznqJ7k46PGZWbZ
aI+e5AtHWVX6XWUJ8QbDYTNFdnnNTT3JFwHXorw8+5/0JF8EPqndqAqrIJ4w
EoxOubOghHiGSMBjXIHfbZovCvslaqeGQuK1RWF67+jp/A+JlySAeNgym2uh
Z16ZXwJk+7036+smHcknxNBvW2IbS3UknxC3Nn3lFKPUkXwiVBSrA2vsdSSf
CDY3HHLtHHQM5/ULYpwMvdgU6axjr6+tYiQ6u2q6ezvY+7FajOC7w1yXKx1k
vRi3HVV6fUsHez4fCX5w6386Q9XBenskkAU8zko/2kGuVwm8+mZnDl8j3ogE
dg2uh65vJt78aCRJf83+IoR4adHgV7bmBD/Ssl5dNE6vX2w5V0C8vmjcslh7
v7tBS54XMai9rztZ06glfcWAy92wLV2tZb3KGDh/65267xrxOFJYievjhwq1
rOcpxQ7fl1aoId5OKQo+51RPfagl948US5z4nS+yiTcoRcDAgsd79mnZ/eDF
oj3TjZ/STLytsdg178k5kZx41bGovaSodrpNvAlx4CeLzhw+TjyfODgJ+lXn
vYiXHYcbPzPnpDLiqeNw/ln3nI1vE28kDrl/2nc2NrezXogM5YsnBVwWEi9N
hpwWm9R1A+2sx8jg4t7zx2Rr4vXJgMGxzFYL2p8chnfF7npPkk8lh0fGZ1dU
L9pJf3K4BWTtbR0h3is5hvJehj/taif9KdDicPZ37STanwJZz3S2ml6ST6PA
2ryzXqEDxBtUoH+RPtnWgva3CkP27ifGOtrJ82kVJEMJykN2tL9VcLuZuDl1
Bu0vHuvfWn+lXE77i8ccQeq8Om/aXzy2ZZ6K2OevZb2GeGz3KBUXe9D+4qGp
FziO9ND+EtB1AI6SybS/BHzwZFm18zjiMQnQTeWoKqZpmf8Be561sQ==
                    "]]}, 
                    {Hue[0.59, 0.7, 0.65], AbsolutePointSize[2.2], 
                    PointBox[CompressedData["
1:eJw11AtUU2UAB/CJorzKF2IPzhI0HioqKAiC7I88HI+9YLBNMBPNVxCoZzwU
xWhqouEDxcJQjOSogbFUIiEu2FIhAvUYYsbYQwkVEgQJgoPN3e/b+XZ2vrt9
v/vf/7v3OiWmRH9kweFwtpverz/bDhSZRhfPt/+7YZ8QI8POh3glORHX/Uzz
IvMBS1R9M7Hc1zSf7q82DVtwy1YrckzzRNc005iGuRf/PvbQNF/2+uvpM2Ed
qTuYHWpk0sw/eAeNSmHMlDAjI+zWmAYXzdH3Xp5caWQ05gOzULTD9UZ+uJEx
L/efjTrPpZygKHr+9+FUMniiXkR9Vxy277duEBgZ8+kT3eH/aESkiKD55qFY
U+3YkmBkKswHPOCw+766R0q9hVgdGLmnik/ni7Df5dP8NzbS9Z6okhZGLZcY
GXMdbV6QcJov2K+j/SzGkfaSsCO76f9ZggcZlxY4p1DPG3ubxtr0+6nnA6Z+
V5DlEeotxdqFWzz6cqnni9r07QMPz1DPD2tKx/+oiqXeMmTx0+5d+M9APH+o
52QUVE6gXgBUhVMrrG2ptxzXnrTWxYwZiBeIZv3N0Qv/GojHw96jyU0HRw3s
ejnw5dXKj09tovthmk+sOf5LsZExLxcGwarrao1NIenbEISyZO9eLpfu/wrY
VfHyq5xpnhU4dOmg/5AF8ZKCMWlA8tyl08B6zcHQpMzq+eecgexfCAzG512B
uQbWGwzBX/LAjPHHaL5QJLbkld753kDyhWLujk7eAxHxhGEQuVwMfGFFPEMY
fHgPytvu6Em+ldgdfjVPOYN4bSuhrJwftiSUeEl8bHjTqmznqJ7k46PGZWbZ
aI+e5AtHWVX6XWUJ8QbDYTNFdnnNTT3JFwHXorw8+5/0JF8EPqndqAqrIJ4w
EoxOubOghHiGSMBjXIHfbZovCvslaqeGQuK1RWF67+jp/A+JlySAeNgym2uh
Z16ZXwJk+7036+smHcknxNBvW2IbS3UknxC3Nn3lFKPUkXwiVBSrA2vsdSSf
CDY3HHLtHHQM5/ULYpwMvdgU6axjr6+tYiQ6u2q6ezvY+7FajOC7w1yXKx1k
vRi3HVV6fUsHez4fCX5w6386Q9XBenskkAU8zko/2kGuVwm8+mZnDl8j3ogE
dg2uh65vJt78aCRJf83+IoR4adHgV7bmBD/Ssl5dNE6vX2w5V0C8vmjcslh7
v7tBS54XMai9rztZ06glfcWAy92wLV2tZb3KGDh/65267xrxOFJYievjhwq1
rOcpxQ7fl1aoId5OKQo+51RPfagl948US5z4nS+yiTcoRcDAgsd79mnZ/eDF
oj3TjZ/STLytsdg178k5kZx41bGovaSodrpNvAlx4CeLzhw+TjyfODgJ+lXn
vYiXHYcbPzPnpDLiqeNw/ln3nI1vE28kDrl/2nc2NrezXogM5YsnBVwWEi9N
hpwWm9R1A+2sx8jg4t7zx2Rr4vXJgMGxzFYL2p8chnfF7npPkk8lh0fGZ1dU
L9pJf3K4BWTtbR0h3is5hvJehj/taif9KdDicPZ37STanwJZz3S2ml6ST6PA
2ryzXqEDxBtUoH+RPtnWgva3CkP27ifGOtrJ82kVJEMJykN2tL9VcLuZuDl1
Bu0vHuvfWn+lXE77i8ccQeq8Om/aXzy2ZZ6K2OevZb2GeGz3KBUXe9D+4qGp
FziO9ND+EtB1AI6SybS/BHzwZFm18zjiMQnQTeWoKqZpmf8Be561sQ==
                    "]]}}},
                  AspectRatio->Full,
                  Axes->None,
                  Background->GrayLevel[1],
                  
                  BaseStyle->{
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                  Frame->True,
                  FrameStyle->GrayLevel[0.5],
                  FrameTicks->None,
                  GridLines->{{25., 50., 75., 100., 125., 150.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.5228787452803374`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.301029995663981, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.154901959985743, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-1.045757490560675, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}}},
                  ImagePadding->1,
                  ImageSize->{302, 182.},
                  PlotRange->{{0, 115.62500000000057`}, {-1.915, -0.385}},
                  PlotRangeClipping->True,
                  PlotRangePadding->None,
                  Prolog->{{
                    InsetBox[
                    FormBox["25", TraditionalForm], 
                    Offset[{-2, -2}, {25., -0.385}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["50", TraditionalForm], 
                    Offset[{-2, -2}, {50., -0.385}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["75", TraditionalForm], 
                    Offset[{-2, -2}, {75., -0.385}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., -0.385}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["125", TraditionalForm], 
                    Offset[{-2, -2}, {125., -0.385}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["150", TraditionalForm], 
                    Offset[{-2, -2}, {150., -0.385}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], 
                    ImageScaled[{0, 0.}]]}}]}
               },
               BaseStyle->{
                FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                 GrayLevel[0.4]},
               
               GridBoxAlignment->{
                "Columns" -> {{Center}}, "Rows" -> {{Center}}},
               GridBoxSpacings->{"Columns" -> {{0.5}}}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              StyleBox[
               RowBox[{
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.083, 1., 1.],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.59, 0.7, 0.75],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
               FontFamily->"Verdana",
               FontSize->8,
               FontColor->GrayLevel[0.4]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
         NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{3.86600218576171*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"c208605c-e909-47bc-ab6f-da3aaf1d9234"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["resultsObject"], "Input",
 CellChangeTimes->{{3.866001268185637*^9, 3.86600126894619*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"bfc2b0a0-1ee5-4d7b-b16f-4308145fada7"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "3092"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "618"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["4.6min"], 
                  TextCell["4.6min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "405"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "160"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["validation examples:"], 
                  TextCell["validation examples:"]], "40"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "111312"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "36"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"1.97\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.19704078114268433`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["validation"], 
                 TextCell["validation"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"3.11\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.3107803818812045, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[GridBox[{
                {"", 
                 ItemBox["\<\"rounds\"\>",
                  DefaultBaseStyle->"LabeledLabel"]},
                {
                 RotationBox[
                  ItemBox["\<\"loss\"\>",
                   DefaultBaseStyle->"LabeledLabel"],
                  BoxRotation->1.5708], 
                 GraphicsBox[
                  {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
yAW9EJLP/wPpCqDC
                    "]]}, {}}, {
                    {Hue[0.59, 0.7, 0.75], LineBox[CompressedData["
1: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
                    "]]}, {}}},
                  AspectRatio->Full,
                  Axes->None,
                  Background->GrayLevel[1],
                  
                  BaseStyle->{
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                  Frame->True,
                  FrameStyle->GrayLevel[0.5],
                  FrameTicks->None,
                  GridLines->{{200., 400., 600., 800., 1000.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.5228787452803374`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.301029995663981, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.154901959985743, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-1.045757490560675, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}}},
                  ImagePadding->1,
                  ImageSize->{302, 182.},
                  
                  PlotRange->{{0, 618.1}, {-1.2120000000000002`, 
                    0.012000000000000002`}},
                  PlotRangeClipping->True,
                  PlotRangePadding->None,
                  Prolog->{{
                    InsetBox[
                    FormBox["200", TraditionalForm], 
                    Offset[{-2, -2}, {200., 0.012000000000000002`}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["400", TraditionalForm], 
                    Offset[{-2, -2}, {400., 0.012000000000000002`}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["600", TraditionalForm], 
                    Offset[{-2, -2}, {600., 0.012000000000000002`}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["800", TraditionalForm], 
                    Offset[{-2, -2}, {800., 0.012000000000000002`}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["1000", TraditionalForm], 
                    Offset[{-2, -2}, {1000., 0.012000000000000002`}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], 
                    ImageScaled[{0, 0.}]]}}]}
               },
               
               BaseStyle->{
                FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                 GrayLevel[0.4]},
               
               GridBoxAlignment->{
                "Columns" -> {{Center}}, "Rows" -> {{Center}}},
               GridBoxSpacings->{"Columns" -> {{0.5}}}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              StyleBox[
               RowBox[{
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.083, 1., 1.],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.59, 0.7, 0.75],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
               FontFamily->"Verdana",
               FontSize->8,
               FontColor->GrayLevel[0.4]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
         NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{3.866001269390197*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"477b9230-1f4e-4fd8-92a6-7659d2a66927"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 
  3.8647943165808363`*^9}},ExpressionUUID->"b675450a-34c8-422e-899e-\
e8ac46fc9f8e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"resultsObject", "[", "\"\<RoundMeasurements\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainedNet", "=", 
   RowBox[{"NetExtract", "[", 
    RowBox[{"trainedBNN", ",", "\"\<NeuralLogicNet\>\""}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.861598551906061*^9, 3.8615985567851887`*^9}, {
  3.863178625879333*^9, 3.8631786268708572`*^9}, {3.863240306853362*^9, 
  3.863240307588504*^9}, {3.8647943299915457`*^9, 3.864794330447215*^9}, {
  3.864794373237455*^9, 3.864794410229562*^9}, {3.864825813950893*^9, 
  3.8648258236291018`*^9}, {3.86505446234156*^9, 3.865054476285439*^9}, {
  3.86505502598845*^9, 3.865055037244231*^9}, {3.8650600546900873`*^9, 
  3.8650600574960833`*^9}, {3.865421281430146*^9, 3.865421283958905*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.10340807047223564`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9, 
   3.864824874279098*^9, 3.864825084390379*^9, 3.8648257903081007`*^9, 
   3.8648258243477163`*^9, 3.864826317452064*^9, 3.864826707415752*^9, 
   3.8648268358911123`*^9, 3.864827667008909*^9, 3.8648277980615273`*^9, 
   3.8648279244198427`*^9, 3.864829394605691*^9, 3.864829843115088*^9, 
   3.864829959358408*^9, 3.864830393511653*^9, 3.864830567569335*^9, 
   3.864830919268218*^9, 3.86483103124896*^9, 3.864872789949876*^9, 
   3.864874331638398*^9, 3.864904587128199*^9, 3.86505496881559*^9, 
   3.865059953128607*^9, 3.8650600598500547`*^9, 3.8650654143932*^9, 
   3.8650656502740097`*^9, 3.865067803178391*^9, 3.865068291966251*^9, 
   3.865069495989231*^9, 3.865070283366563*^9, 3.865420137870645*^9, {
   3.865421263164918*^9, 3.865421284465727*^9}, 3.8654214022177753`*^9, 
   3.865421502910253*^9, 3.865428186922727*^9, 3.865428709665769*^9, 
   3.86542939786869*^9, 3.86542949782084*^9, 3.865480182399056*^9, 
   3.8654803415777063`*^9, 3.865480486658537*^9, 3.865480679955553*^9, 
   3.865480828331317*^9, 3.865480899872563*^9, 3.865482018312407*^9, 
   3.865483692120366*^9, 3.865495469127512*^9, 3.8654960874795303`*^9, 
   3.86549660745817*^9, 3.8654975498398027`*^9, 3.865500674284292*^9, {
   3.86550072971033*^9, 3.865500758102573*^9}, 3.865500992144155*^9, {
   3.86550113359969*^9, 3.865501136174686*^9}, 3.86556695279582*^9, 
   3.8655691807971907`*^9, 3.865569386967482*^9, 3.865574642279069*^9, 
   3.865574770198578*^9, 3.865680396755745*^9, 3.865680629582817*^9, 
   3.865785229467081*^9, 3.865829031653427*^9, 3.8658307867488832`*^9, 
   3.8658371602279253`*^9, 3.865838208745584*^9, 3.8658595086403522`*^9, 
   3.865859813634479*^9, 3.8658663063601294`*^9, 3.865866373081395*^9, 
   3.86586670060649*^9, 3.865999391403782*^9, 3.865999693349642*^9, 
   3.866000240512151*^9, 3.866000388628818*^9, 3.866000446655443*^9, 
   3.866001265920271*^9, 3.866002202131413*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"11f274e9-27ba-452b-9a78-5715988c14b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 
  3.865059369384118*^9}},ExpressionUUID->"df1ecdd8-5df6-4b38-bd68-\
b8d64bb8d36e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"randomTestSample", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testData", ",", 
     RowBox[{"UpTo", "[", "10000", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"softPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"trainedNet", "[", 
         RowBox[{"First", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"First", "[", 
         RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
     "randomTestSample"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"softPredictionTargetPairs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Harden", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
    "softPredictionTargetPairs"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Reverse", "[", 
  RowBox[{"Sort", "[", 
   RowBox[{"Counts", "[", "softPredictionTargetPairs", "]"}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}, {
   3.8650544818297043`*^9, 3.865054482561998*^9}, {3.8650591999549913`*^9, 
   3.865059216538383*^9}, {3.865060098170718*^9, 3.865060117548669*^9}, {
   3.8650834367061243`*^9, 3.865083439415501*^9}, {3.8659994041391973`*^9, 
   3.865999405961364*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "False", "}"}], ",", "0.`"}], "}"}], "\[Rule]", "18"}], 
   ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "False", "}"}], ",", "1.`"}], "}"}], "\[Rule]", "11"}], 
   ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "True", "}"}], ",", "0.`"}], "}"}], "\[Rule]", "6"}], ",", 
   
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "True", "}"}], ",", "1.`"}], "}"}], "\[Rule]", "5"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.864794524228527*^9, 3.864794804565859*^9, 3.864797246176762*^9, 
   3.864825835032165*^9, 3.864826323518758*^9, 3.864826710829912*^9, 
   3.864826838724924*^9, 3.864827670232036*^9, 3.864827801553979*^9, 
   3.8648279285250597`*^9, 3.864829397451899*^9, 3.864829847364244*^9, 
   3.864829961745328*^9, 3.864830398122015*^9, 3.864830612853704*^9, 
   3.864830941720092*^9, 3.8648310387491426`*^9, 3.8648727989978437`*^9, 
   3.864874341968503*^9, 3.864904595066966*^9, 3.8650549759742327`*^9, 
   3.865055254520844*^9, 3.865059217551012*^9, 3.8650599560768213`*^9, 
   3.8650601186606207`*^9, 3.865065416735186*^9, 3.865065651809005*^9, 
   3.8650678057546577`*^9, 3.865068294987013*^9, 3.8650694991686773`*^9, 
   3.865070287004575*^9, 3.865420142086281*^9, {3.865421264788857*^9, 
   3.8654212869111137`*^9}, 3.865421403984416*^9, 3.8654215048005543`*^9, 
   3.865428189274774*^9, 3.865429400147333*^9, 3.865429500143385*^9, 
   3.8654803440077877`*^9, 3.8654804937366962`*^9, 3.865480682040885*^9, 
   3.865480830271098*^9, 3.865480901725506*^9, 3.865482020437957*^9, 
   3.865483694598847*^9, 3.8654954708400707`*^9, 3.865496090858357*^9, 
   3.865496609471262*^9, 3.865497551715475*^9, 3.865500676436606*^9, {
   3.865500731510665*^9, 3.865500760632456*^9}, 3.865500993966316*^9, 
   3.865501137464508*^9, 3.865566956993582*^9, 3.8655691831962*^9, {
   3.865574644939413*^9, 3.865574672153305*^9}, 3.865574772781569*^9, 
   3.865680407166209*^9, 3.865680632945911*^9, 3.865785233725366*^9, 
   3.865829034832617*^9, 3.865830794509021*^9, 3.865837177061652*^9, 
   3.8658382195748262`*^9, 3.86585951692307*^9, 3.8658598214690742`*^9, 
   3.865866311764492*^9, 3.86586637884604*^9, 3.865866706390326*^9, {
   3.865999395111559*^9, 3.8659994067759047`*^9}, 3.865999696758368*^9, 
   3.866000244506322*^9, 3.866000393178739*^9, 3.866000450842342*^9, 
   3.866001275900153*^9, 3.866002221015608*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"72579456-4967-4fdb-927e-0c5f5e18de4a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 
  3.865059378776081*^9}},ExpressionUUID->"e4694df7-3ea3-4a9d-9cc3-\
f245d7dd4041"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedBinaryNN", "=", 
   RowBox[{"HardBinaryNN", "[", 
    RowBox[{"hardNet", ",", "trainedNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.865058429611095*^9, 3.8650584430617847`*^9}, {
   3.865058537803178*^9, 3.865058538587184*^9}, {3.865060538228921*^9, 
   3.865060539696113*^9}, {3.86506349126202*^9, 3.865063493622542*^9}, 
   3.865067853583132*^9},
 CellLabel->
  "In[113]:=",ExpressionUUID->"96f13a83-7ea1-42d3-9263-b819f001f2ef"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hardPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"trainedBinaryNN", "@@", 
          RowBox[{"Harden", "[", 
           RowBox[{"First", "[", "#", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"Harden", "[", 
         RowBox[{"First", "[", 
          RowBox[{"Last", "[", "#", "]"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
     "randomTestSample"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sort", "[", 
  RowBox[{"Counts", "[", "hardPredictionTargetPairs", "]"}], "]"}]}], "Input",\

 CellChangeTimes->{{3.865058489671732*^9, 3.865058510689581*^9}, {
  3.8650591346976957`*^9, 3.8650591432500973`*^9}, {3.8650591801380463`*^9, 
  3.8650591902661877`*^9}, {3.865059229711952*^9, 3.8650592320867157`*^9}, {
  3.865059269767497*^9, 3.865059273043046*^9}, {3.865059308311268*^9, 
  3.865059313621923*^9}, {3.865060122322789*^9, 3.86506012815064*^9}, {
  3.865064010371698*^9, 3.865064013322488*^9}, {3.8650640456787148`*^9, 
  3.865064062650298*^9}, {3.86506412906083*^9, 3.865064159507169*^9}, {
  3.865064677690926*^9, 3.865064678625976*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"7950a09c-b667-40c9-ba1b-4fd6d6af5b80"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"False", ",", "False"}], "}"}], "\[Rule]", "44"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}], "\[Rule]", "54"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.865059315032776*^9, 3.8650599737395782`*^9, 3.865060129146494*^9, 
   3.865060356447012*^9, 3.8650638958285713`*^9, {3.865063999139495*^9, 
   3.86506401473055*^9}, {3.8650640504215593`*^9, 3.865064063572337*^9}, {
   3.865064132575581*^9, 3.865064160280686*^9}, 3.865064679596649*^9, 
   3.865065001005705*^9, 3.865065041186687*^9, 3.865065083851123*^9, 
   3.8650654504209337`*^9, 3.8650656685629063`*^9, 3.8650657868219*^9, 
   3.8650678219098597`*^9, 3.865068300737266*^9, 3.86506950358249*^9, 
   3.865070291548985*^9, 3.865420150991274*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"e727694e-ccec-46fb-8a40-6482c9182dc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"weights", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Harden", "[", 
        RowBox[{"ExtractWeights", "[", "trainedNet", "]"}], "]"}], "]"}]}], 
     ",", "bytes", ",", "bits"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bytes", "=", 
     RowBox[{
      RowBox[{"Length", "[", "weights", "]"}], "/", "8.0"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"bits", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"ToString", "/@", 
       RowBox[{"Boole", "/@", "weights"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"bits", ",", 
      RowBox[{"Quantity", "[", 
       RowBox[{"bytes", ",", "\"\<Bytes\>\""}], "]"}], ",", 
      RowBox[{"Quantity", "[", 
       RowBox[{
        RowBox[{"bytes", "/", "1000.0"}], ",", "\"\<Kilobytes\>\""}], "]"}]}],
      "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.8650683965936604`*^9, 3.865068549901691*^9}, {
  3.865070483150701*^9, 3.865070604810329*^9}, {3.8650706583114557`*^9, 
  3.865070669150255*^9}},
 CellLabel->
  "In[298]:=",ExpressionUUID->"e7aca33b-4f42-4ef4-b99e-67bbc602bec1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\
001001010111101100011111001110010001010010000011100101111010011111100001100001\
010010000111000101101010000001100101111011110111100100111011000101101000011000\
110100011100101111100011111100110111100110000001011000001110000000101100111101\
010010110000111010111010101110111010001000111111010000100000111001100111110011\
110100110000011110101011110011010101011000001010010111001111010000010110011010\
001010010000000001001111100001010000111111101001100111010001100111110111000100\
000010111010110001001110111111000011000000111101011111111011000100010011100011\
1111\"\>", ",", 
   TemplateBox[{"68.75`", "\"B\"", "bytes", "\"Bytes\""},
    "Quantity"], ",", 
   TemplateBox[{"0.06875`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{{3.865068405004959*^9, 3.865068438248341*^9}, {
   3.865068491576806*^9, 3.865068512031865*^9}, 3.865068550814891*^9, 
   3.8650695603004627`*^9, 3.8650704699317017`*^9, {3.865070515462304*^9, 
   3.8650706059136543`*^9}, {3.86507066217522*^9, 3.865070669934573*^9}, 
   3.865420155011582*^9},
 CellLabel->
  "Out[298]=",ExpressionUUID->"453e3c0e-5100-455b-9fdd-81a809aef060"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"trainedBinaryNN", ";"}]], "Input",
 CellChangeTimes->{{3.865070795984282*^9, 3.865070805855814*^9}, {
  3.865420161655023*^9, 3.8654201673602867`*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"c80f00c1-bd09-4d21-b3b1-b55ce8439a90"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learn MNIST", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.865071137544158*^9, 
  3.865071139735918*^9}},ExpressionUUID->"ab35440a-cabc-4736-a5ac-\
e07454ebd2a0"],

Cell[CellGroupData[{

Cell["Generate training data", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 
  3.864793759486944*^9}},ExpressionUUID->"7a765571-11e0-47e7-bd2b-\
e5df28d2018f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ConvertBinaryStringToList", "[", "s_String", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{"\"\<{\>\"", "<>", 
    RowBox[{"StringInsert", "[", 
     RowBox[{"s", ",", "\"\<,\>\"", ",", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"StringLength", "[", "s", "]"}], "]"}], ",", "1"}], "]"}]}], 
     "]"}], "<>", "\"\<}\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ConvertBinaryStringToImageData", "[", 
   RowBox[{"s_String", ",", 
    RowBox[{"{", 
     RowBox[{"width_", ",", "height_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"ArrayReshape", "[", 
   RowBox[{
    RowBox[{"ConvertBinaryStringToList", "[", "s", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"width", ",", "height"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MNISTExample", "[", "example_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Soften", "/@", 
     RowBox[{"ConvertBinaryStringToList", "[", 
      RowBox[{"First", "[", "example", "]"}], "]"}]}], ")"}], "->", 
   RowBox[{"Last", "[", "example", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MNISTImageExample", "[", 
   RowBox[{"example_", ",", "w_", ",", "h_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{
     RowBox[{"ConvertBinaryStringToImageData", "[", 
      RowBox[{
       RowBox[{"First", "[", "example", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"w", ",", "h"}], "}"}]}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Tiny"}]}], "]"}], "->", 
   RowBox[{"Last", "[", "example", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TargetClass", "[", 
   RowBox[{"class_", ",", "numClasses_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"i", "==", 
       RowBox[{
        RowBox[{"ToExpression", "[", "class", "]"}], "+", "1"}]}], ",", "1", 
      ",", "0"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "numClasses"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.777544428958893*^9, 3.777544449223729*^9}, {
  3.785053289286406*^9, 3.7850533015825367`*^9}, {3.865071356234124*^9, 
  3.865071368364665*^9}, {3.865072537508193*^9, 3.865072583145698*^9}, {
  3.8650727653223124`*^9, 3.865072769389474*^9}, {3.865072855048724*^9, 
  3.865072873389448*^9}, {3.865074216205205*^9, 3.865074217943268*^9}, {
  3.8650742607422447`*^9, 3.865074263919525*^9}, {3.865074303282633*^9, 
  3.865074304334848*^9}, {3.8655763816838627`*^9, 3.86557638296766*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"32fda3b9-b853-499b-9d93-f6cc5b2d03d6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"first2Digits", "=", "12665"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"first4Digits", "=", "24754"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"StringSplit", "/@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"Import", "[", 
         RowBox[{"FileNameJoin", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"NotebookDirectory", "[", "]"}], ",", 
            "\"\<data/mnist_data.csv\>\""}], "}"}], "]"}], "]"}], ",", 
        "first4Digits"}], "]"}]}], ",", "1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numClasses", "=", 
   RowBox[{"Length", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"Last", "/@", "data"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"First", "[", "#", "]"}], "->", 
       RowBox[{"TargetClass", "[", 
        RowBox[{
         RowBox[{"Last", "[", "#", "]"}], ",", "numClasses"}], "]"}]}], "&"}],
      ",", "data"}], "]"}]}], ";"}]}], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7775425649316273`*^9, 3.7775427188349257`*^9}, 
   3.777542765885343*^9, {3.777542891883361*^9, 3.777542895266905*^9}, {
   3.777548901853368*^9, 3.777548904429871*^9}, 3.777948863055695*^9, {
   3.785053289286778*^9, 3.785053301583352*^9}, {3.8004618114961*^9, 
   3.8004618132862787`*^9}, {3.865071380522399*^9, 3.865071389330105*^9}, {
   3.865071506398736*^9, 3.86507150965482*^9}, {3.865072153294796*^9, 
   3.865072153439651*^9}, {3.8650725203995028`*^9, 3.8650725250999613`*^9}, {
   3.865072598133906*^9, 3.8650726430451927`*^9}, {3.8650730651631327`*^9, 
   3.865073065309772*^9}, {3.8650737788630743`*^9, 3.8650737799185247`*^9}, {
   3.8650741657549047`*^9, 3.865074192750668*^9}, {3.865084557601783*^9, 
   3.865084557727841*^9}, {3.865096614528236*^9, 3.865096614722213*^9}, {
   3.865096960213298*^9, 3.865096961035049*^9}, {3.8654249749431143`*^9, 
   3.865424975283492*^9}, {3.865425652554762*^9, 3.865425654875148*^9}, {
   3.8655942181851254`*^9, 3.865594218683255*^9}, {3.865603687795599*^9, 
   3.8656036911095867`*^9}, {3.865654143595076*^9, 3.865654143741383*^9}, {
   3.8656591261724367`*^9, 3.865659126260923*^9}, {3.86586673745885*^9, 
   3.865866737630937*^9}, {3.865868704726523*^9, 3.865868705092907*^9}, {
   3.865935589729813*^9, 3.8659355902888536`*^9}, {3.8659425359146223`*^9, 
   3.865942536047833*^9}, {3.8660004673198977`*^9, 3.866000467920465*^9}, {
   3.866008550651922*^9, 3.866008550802231*^9}, {3.8662143357376127`*^9, 
   3.8662143358729973`*^9}, {3.866214933669497*^9, 3.866214933766831*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"e694fd5c-31a2-4c80-9a3a-3cbb8af0f0d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MNISTImageExample", "[", 
    RowBox[{"#", ",", "8", ",", "8"}], "]"}], "&"}], "/@", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "8"}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.777543319132126*^9, 3.7775433399263563`*^9}, {
  3.777543441494869*^9, 3.7775434634803457`*^9}, {3.777543498428781*^9, 
  3.777543511470965*^9}, {3.777543585019107*^9, 3.7775436179526777`*^9}, {
  3.77754392590884*^9, 3.777543943146496*^9}, {3.777544227856449*^9, 
  3.777544239080214*^9}, {3.777544492370078*^9, 3.777544497694388*^9}, {
  3.7775489467068253`*^9, 3.777548973388241*^9}, {3.777948786010269*^9, 
  3.777948796326861*^9}, {3.785053289286827*^9, 3.78505330158349*^9}, {
  3.865071727267377*^9, 3.865071727490307*^9}, {3.865072163300022*^9, 
  3.865072163779492*^9}, {3.8650737878134604`*^9, 3.865073795253149*^9}, {
  3.865424992846648*^9, 3.865424993398445*^9}, {3.8654256604637814`*^9, 
  3.865425660711246*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"ec0b1266-533d-40d4-a949-ccce78250c06"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 0., 1., 1., 1.}, {1., 1., 1., 0., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 0., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 1., 0., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 0., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 0., 
        1., 1., 1., 1.}, {1., 1., 1., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 0., 1., 
        0., 1., 1., 1.}, {1., 1., 0., 1., 0., 0., 1., 1.}, {1., 1., 1., 1., 
        0., 0., 1., 1.}, {1., 1., 1., 1., 1., 0., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 0., 0., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 0., 
        0., 1., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 0., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 1., 0., 1., 1.}, {1., 1., 0., 1., 
        1., 0., 0., 1.}, {1., 1., 0., 0., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 1., 0., 0., 1., 1., 1.}, {1., 1., 1., 0., 
        0., 1., 1., 1.}, {1., 1., 0., 0., 1., 0., 1., 1.}, {1., 1., 1., 0., 
        0., 0., 1., 1.}, {1., 1., 1., 1., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 0., 
        1., 0., 1., 1.}, {1., 1., 0., 0., 1., 0., 1., 1.}, {1., 1., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 1., 0., 0., 1., 1., 1.}, {1., 1., 0., 0., 
        1., 0., 0., 1.}, {1., 1., 0., 0., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[
      RasterBox[
       RawArray["Real32",{{1., 1., 1., 1., 1., 1., 1., 1.}, {1., 1., 1., 1., 
        0., 1., 1., 1.}, {1., 1., 0., 0., 1., 0., 1., 1.}, {1., 1., 0., 1., 
        1., 1., 0., 1.}, {1., 1., 1., 1., 1., 1., 0., 1.}, {1., 0., 1., 1., 
        1., 0., 1., 1.}, {1., 1., 0., 0., 0., 1., 1., 1.}, {1., 1., 1., 1., 
        1., 1., 1., 1.}}], {{0, 8.}, {8., 0}}, {0., 1.},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Real32", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Tiny,
     ImageSizeRaw->{8., 8.},
     PlotRange->{{0, 8.}, {0, 8.}}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}]}], "}"}]], "Output",\

 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{
  3.865071516233152*^9, 3.865071727764624*^9, {3.865072157992421*^9, 
   3.865072164263248*^9}, 3.8650726482204933`*^9, {3.8650728081429157`*^9, 
   3.865072815412401*^9}, {3.8650728584132767`*^9, 3.8650728763860283`*^9}, 
   3.865073067508193*^9, {3.865073789904008*^9, 3.865073795522964*^9}, {
   3.865074175245178*^9, 3.8650742213114853`*^9}, 3.8650742663256474`*^9, 
   3.8650743064252872`*^9, 3.865075757486204*^9, 3.865080599940412*^9, 
   3.865083621171164*^9, {3.865084563801412*^9, 3.865084592428769*^9}, 
   3.8650856590126333`*^9, 3.8650875182866573`*^9, 3.865091000291559*^9, 
   3.865093056070513*^9, 3.865094694162876*^9, 3.865096615969627*^9, 
   3.86509696259997*^9, 3.865139954249607*^9, 3.865141786671627*^9, 
   3.8651521367013702`*^9, 3.865423552909775*^9, {3.865424979404682*^9, 
   3.8654249938473787`*^9}, {3.865425656479721*^9, 3.8654256609377003`*^9}, 
   3.8654809208707523`*^9, 3.865482033395006*^9, 3.8655011685646477`*^9, {
   3.865576369155878*^9, 3.8655763849362507`*^9}, 3.8655934591865187`*^9, 
   3.865594225086277*^9, 3.865603693195478*^9, 3.865654145596838*^9, 
   3.8656591284289303`*^9, 3.865663486762136*^9, {3.865675843854004*^9, 
   3.8656758480254383`*^9}, 3.865680692292922*^9, 3.865785373725032*^9, 
   3.865838237420817*^9, 3.8658644284650097`*^9, 3.865866739205634*^9, 
   3.865868706936183*^9, 3.86593559197605*^9, 3.8659425376483192`*^9, 
   3.866000471570891*^9, 3.8660023671723824`*^9, 3.866008552558271*^9, 
   3.866083736145451*^9, 3.866209093677637*^9, 3.866209596724132*^9, 
   3.866214336990232*^9, 3.866214934859021*^9, 3.866257446329878*^9, 
   3.866258666676694*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"233526dd-6dfb-47e3-913b-4f0674735ce0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{"MNISTExample", "/@", "data"}], ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.8", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8650715619235697`*^9, 3.865071567650784*^9}, {
  3.8650716393413363`*^9, 3.865071641123829*^9}, {3.865075763152564*^9, 
  3.865075763445953*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5f23d7f5-27d3-4f48-9a93-1389f19dc351"]
}, Closed]],

Cell[CellGroupData[{

Cell["Create neural-logic net", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 
  3.86626045361831*^9}},ExpressionUUID->"dbaf4b13-bbf1-46b2-a867-\
cbe6ab3057db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softNet", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NeuralAND", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}], ",", "75"}],
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"NeuralNOT", "[", "75", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"NeuralAND", "[", 
       RowBox[{"75", ",", "numClasses"}], "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.8662605516290283`*^9, 
   3.866260577236061*^9}, {3.8662606098420553`*^9, 3.866260614652358*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"282b1129-9bb6-4375-827d-fe1a21de5e52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softNet", "=", 
   RowBox[{"InitializeNeuralLogicNet", "[", "softNet", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866209283643862*^9, 3.866209293055928*^9}, {
   3.866210794191074*^9, 3.8662107965361767`*^9}, {3.866211249974576*^9, 
   3.866211280034959*^9}, 3.86625467208576*^9, 3.86625490177337*^9, {
   3.866257939071712*^9, 3.866257940508713*^9}, {3.866257980743169*^9, 
   3.866257982079924*^9}, {3.866258022031268*^9, 3.866258048836591*^9}, {
   3.866258423802837*^9, 3.86625842536515*^9}, {3.866258586682054*^9, 
   3.866258618845252*^9}, 3.866258678879615*^9},
 CellLabel->
  "In[100]:=",ExpressionUUID->"4dd2a1a1-93c1-4c86-8a53-3799d9a2326a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train neural-logic net", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.866180932479144*^9, 3.866180933335601*^9}, {
  3.866260506971014*^9, 
  3.8662605102109118`*^9}},ExpressionUUID->"79776b36-72e3-45be-ba51-\
f07dffccf849"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedNet", ",", "resultsObject"}], "}"}], "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"softNet", ",", "trainData", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", "\"\<ResultsObject\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"testData", ",", 
          RowBox[{"UpTo", "[", "1000", "]"}]}], "]"}], ",", 
        RowBox[{"\"\<Interval\>\"", "->", "10"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", 
      RowBox[{"CrossEntropyLossLayer", "[", "\"\<Binary\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "2000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"85ad096e-ed5c-44c2-8c3a-979fde4a03c9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 3.8647943165808363`*^9}, {
  3.865509544459216*^9, 
  3.865509545362651*^9}},ExpressionUUID->"be01f422-1c1f-4ec9-a959-\
bf38e8105582"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resultsObject", "[", "\"\<RoundMeasurements\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.861598551906061*^9, 3.8615985567851887`*^9}, {
  3.863178625879333*^9, 3.8631786268708572`*^9}, {3.863240306853362*^9, 
  3.863240307588504*^9}, {3.8647943299915457`*^9, 3.864794330447215*^9}, {
  3.864794373237455*^9, 3.864794410229562*^9}, {3.864825813950893*^9, 
  3.8648258236291018`*^9}, {3.86505446234156*^9, 3.865054476285439*^9}, {
  3.86505502598845*^9, 3.865055037244231*^9}, {3.8650600546900873`*^9, 
  3.8650600574960833`*^9}, {3.865424330606958*^9, 3.865424333182247*^9}, {
  3.865590864349222*^9, 3.865590866486609*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"1fe03ab7-3007-4e7c-b36b-88dfd49533c2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.2548544272713815`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.10957532051282051`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9, 
   3.864824874279098*^9, 3.864825084390379*^9, 3.8648257903081007`*^9, 
   3.8648258243477163`*^9, 3.864826317452064*^9, 3.864826707415752*^9, 
   3.8648268358911123`*^9, 3.864827667008909*^9, 3.8648277980615273`*^9, 
   3.8648279244198427`*^9, 3.864829394605691*^9, 3.864829843115088*^9, 
   3.864829959358408*^9, 3.864830393511653*^9, 3.864830567569335*^9, 
   3.864830919268218*^9, 3.86483103124896*^9, 3.864872789949876*^9, 
   3.864874331638398*^9, 3.864904587128199*^9, 3.86505496881559*^9, 
   3.865059953128607*^9, 3.8650600598500547`*^9, 3.8650654143932*^9, 
   3.8650656502740097`*^9, 3.865067803178391*^9, 3.865068291966251*^9, 
   3.865069495989231*^9, 3.865070283366563*^9, 3.865083279154043*^9, 
   3.8650839062816553`*^9, 3.865084356636775*^9, 3.865093499302258*^9, 
   3.865097650435338*^9, 3.8651414446602592`*^9, 3.865424333606085*^9, 
   3.865424841445877*^9, 3.865425229735964*^9, 3.865427484983204*^9, 
   3.8655059072779627`*^9, 3.865507093510763*^9, 3.865508240612179*^9, 
   3.865508423230506*^9, 3.865508732322257*^9, 3.865509005381804*^9, 
   3.865509546501918*^9, 3.8655096996579227`*^9, 3.86557721081032*^9, 
   3.8655780390495567`*^9, 3.865590830670417*^9, 3.8655908671336946`*^9, 
   3.865610697897925*^9, 3.865652633905154*^9, 3.865655300641062*^9, 
   3.865788012907119*^9, 3.865788771715988*^9, 3.86583933159483*^9, 
   3.86583978515248*^9, 3.865867641184679*^9, 3.8658685884814367`*^9, 
   3.8658714546625*^9, 3.865911704628196*^9, 3.865947229222362*^9, 
   3.8659961521973543`*^9, 3.866000873158622*^9, 3.8660057911972733`*^9, 
   3.866007274901287*^9, 3.866008420062475*^9, 3.866009699493788*^9, 
   3.866011982651112*^9, 3.866019936674967*^9, 3.866084127515397*^9, 
   3.86608662667826*^9, 3.8660896820607147`*^9, 3.866091248584734*^9, 
   3.866117818933078*^9, 3.86616938042334*^9, 3.866214058580371*^9, 
   3.866214619279559*^9, 3.8662148930932426`*^9, 3.866260227594151*^9, 
   3.86626079823901*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"c9321401-6875-420b-a576-bd1a0df2918c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 3.865059369384118*^9}, {
  3.866260515330757*^9, 
  3.866260515514728*^9}},ExpressionUUID->"ed3764d3-e27e-4c41-99c9-\
2e1b2e3f6cc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"randomTestSample", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testData", ",", 
     RowBox[{"UpTo", "[", "200", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"softPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"trainedNet", "[", 
         RowBox[{"First", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
     "randomTestSample"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"softPredictionTargetPairs", ",", "10"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}, {
   3.8650544818297043`*^9, 3.865054482561998*^9}, {3.8650591999549913`*^9, 
   3.865059216538383*^9}, {3.865060098170718*^9, 3.865060117548669*^9}, {
   3.865083374025154*^9, 3.865083380805747*^9}, {3.8650835363762093`*^9, 
   3.865083538071233*^9}, {3.865590907688581*^9, 3.865590907991177*^9}, {
   3.865610944975788*^9, 3.865610947181724*^9}, {3.865655407744947*^9, 
   3.865655408023315*^9}, {3.86626050147324*^9, 3.8662605016737347`*^9}, {
   3.86626089567375*^9, 3.86626089681426*^9}, 3.866260938745146*^9, {
   3.86626264559334*^9, 
   3.866262658221209*^9}},ExpressionUUID->"cc7fdd2c-831f-4bbf-9c2a-\
d697ed7670ea"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.16727976500988007`", ",", "0.1488865613937378`", ",", 
        "0.0032890017610043287`", ",", "0.665646493434906`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.00015108507068362087`", ",", "0.33577385544776917`", ",", 
        "0.0024989070370793343`", ",", "9.99999993922529`*^-9"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.07433931529521942`", ",", "0.14860796928405762`", ",", 
        "0.0037810157518833876`", ",", "0.8421837687492371`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.00015108507068362087`", ",", "0.6121886968612671`", ",", 
        "0.013090071268379688`", ",", "9.99999993922529`*^-9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.00012531234824564308`", ",", "0.6193333268165588`", ",", 
        "0.7971851229667664`", ",", "0.12742149829864502`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.0006672473391517997`", ",", "0.04877583682537079`", ",", 
        "0.0005337647744454443`", ",", "0.9534674286842346`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.037403564900159836`", ",", "0.17091473937034607`", ",", 
        "0.9406201839447021`", ",", "0.2882996201515198`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.00005425877316156402`", ",", "0.6193333268165588`", ",", 
        "0.013090071268379688`", ",", "0.0006725264829583466`"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.006032732781022787`", ",", "0.04877583682537079`", ",", 
        "0.001420162501744926`", ",", "0.9845497608184814`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], "\[Rule]",
     "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "0.00142319081351161`", ",", "0.22285829484462738`", ",", 
        "0.0018841021228581667`", ",", "9.99999993922529`*^-9"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], "\[Rule]",
     "1"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.865083944153455*^9, 3.8650843925870743`*^9, 3.865093531769497*^9, 
   3.865097756341769*^9, 3.865141542376992*^9, 3.865424349715019*^9, 
   3.86542751189223*^9, 3.865505916932631*^9, 3.865508251307014*^9, 
   3.865508433617846*^9, 3.8655090142926064`*^9, 3.865509556017363*^9, 
   3.865509716467205*^9, 3.8655772328758097`*^9, 3.865590884371516*^9, 
   3.8655909461424932`*^9, 3.865610848379921*^9, 3.86561101972335*^9, 
   3.865652662175004*^9, 3.86565533700756*^9, 3.865655432595294*^9, 
   3.865839371310375*^9, 3.865839829589559*^9, 3.865867734412747*^9, 
   3.8658686797777967`*^9, 3.8658715579590683`*^9, 3.8659119433076973`*^9, 
   3.865947389711522*^9, 3.865996464213435*^9, 3.866000902227161*^9, 
   3.866005919373596*^9, 3.866007335306445*^9, 3.866008523003419*^9, 
   3.8660099197969923`*^9, 3.8660122066524353`*^9, 3.866020263301511*^9, 
   3.866084178948759*^9, 3.866086754587434*^9, 3.866089766385713*^9, 
   3.8660915250645237`*^9, 3.866118393832325*^9, 3.8661696699675713`*^9, 
   3.86621463391124*^9, 3.866260254356771*^9, {3.866260882666247*^9, 
   3.8662608976351223`*^9}, 3.866260939218465*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"d89236a3-882b-4ba5-a045-5cf4a07e6a38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.8650834741174192`*^9, 
  3.865083514396649*^9}, {3.8662604478184023`*^9, 3.86626045361831*^9}, {
  3.866260536034795*^9, 
  3.8662605363067417`*^9}},ExpressionUUID->"9ccf4bd6-05a1-49f1-915f-\
95679eedaa4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hardNet", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"HardNeuralAND", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", "trainData", "]"}], "]"}], "]"}], ",", 
        "500"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"NeuralNOT", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralOR", "[", 
       RowBox[{"500", ",", "numClasses"}], "]"}]}], "\[IndentingNewLine]", 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.866020485648757*^9, 3.866020486758964*^9}, {
   3.8660206133758917`*^9, 3.86602061576938*^9}, {3.866021594138579*^9, 
   3.866021622648958*^9}, {3.86602221641733*^9, 3.866022259472351*^9}, {
   3.86602506519114*^9, 3.8660250652828293`*^9}, {3.866027283063545*^9, 
   3.866027305459503*^9}, {3.866027571359556*^9, 3.866027577807056*^9}, {
   3.866028577017147*^9, 3.866028577337102*^9}, {3.866028739939226*^9, 
   3.866028740417481*^9}, {3.866038386270308*^9, 3.866038393509417*^9}, {
   3.866038426793558*^9, 3.866038432549663*^9}, {3.866038541734429*^9, 
   3.866038552581696*^9}, {3.8660399839336977`*^9, 3.8660400476873417`*^9}, {
   3.866040086377454*^9, 3.866040113183221*^9}, {3.8660842202209263`*^9, 
   3.8660842234441147`*^9}, {3.866084729086014*^9, 3.8660847389004602`*^9}, {
   3.866084883181377*^9, 3.866084891034108*^9}, {3.866087944385981*^9, 
   3.866087946377273*^9}, {3.8660898129249763`*^9, 3.866089819116226*^9}, {
   3.8660918927590847`*^9, 3.866091896174137*^9}, {3.866118640249077*^9, 
   3.8661186553525763`*^9}, {3.8661697941751633`*^9, 3.86616982143332*^9}, {
   3.8661700477905827`*^9, 3.866170062053422*^9}, {3.866170430900312*^9, 
   3.866170441150339*^9}, {3.866171085971992*^9, 3.866171092538931*^9}, {
   3.8661713117235622`*^9, 3.866171323794742*^9}, {3.866172075114151*^9, 
   3.866172086385466*^9}, {3.8661726453612757`*^9, 3.8661726565682907`*^9}, {
   3.866172963402001*^9, 3.866172967303824*^9}, {3.866175492855685*^9, 
   3.86617549327916*^9}, {3.8661755786344223`*^9, 3.866175597119087*^9}, {
   3.866176135095639*^9, 3.866176139335493*^9}, {3.866176563216754*^9, 
   3.866176567303925*^9}, {3.866177234452429*^9, 3.866177240033128*^9}, {
   3.866177471626033*^9, 3.866177471849081*^9}, {3.8661781260498943`*^9, 
   3.866178174045168*^9}, {3.866179499382938*^9, 3.866179520538422*^9}, {
   3.866180308892374*^9, 3.866180328231532*^9}, {3.866180620692492*^9, 
   3.866180620811393*^9}, {3.866180727174838*^9, 3.866180728856566*^9}, {
   3.8661809278929253`*^9, 3.866180930764296*^9}, {3.866181239813146*^9, 
   3.866181242692215*^9}, {3.866184773364808*^9, 3.866184773468157*^9}, {
   3.866184929896516*^9, 3.866184931032365*^9}, {3.866185363169696*^9, 
   3.866185363420731*^9}, {3.866185838820908*^9, 3.866185842136413*^9}, {
   3.8661861874248247`*^9, 3.866186188480125*^9}, {3.86618706378515*^9, 
   3.866187066984132*^9}, {3.866209107928833*^9, 3.866209126148491*^9}, {
   3.866209156593391*^9, 3.8662091576123867`*^9}, {3.866209702848567*^9, 
   3.866209710039878*^9}, {3.866209813177039*^9, 3.866209834123746*^9}, {
   3.86621053449234*^9, 3.866210540769287*^9}, {3.866210581043235*^9, 
   3.8662105868693542`*^9}, {3.866210622339385*^9, 3.866210627545692*^9}, {
   3.866210657739574*^9, 3.8662106609137363`*^9}, {3.866210756731784*^9, 
   3.866210768609764*^9}, {3.866211193549685*^9, 3.8662112016988564`*^9}, {
   3.866211352173271*^9, 3.866211355378903*^9}, {3.8662114673335752`*^9, 
   3.866211471635058*^9}, {3.8662116682945633`*^9, 3.86621167888715*^9}, 
   3.8662117763988447`*^9, {3.866211833182128*^9, 3.8662118352832003`*^9}, {
   3.86621193783076*^9, 3.866211943219183*^9}, {3.866214069618958*^9, 
   3.866214085207219*^9}, {3.86621414917101*^9, 3.866214201293022*^9}, {
   3.866214582928615*^9, 3.866214586096209*^9}, {3.8662146462687683`*^9, 
   3.8662146535499763`*^9}, {3.866214940556902*^9, 3.866214945432839*^9}, {
   3.86625367959163*^9, 3.86625368544868*^9}, {3.8662538129344873`*^9, 
   3.866253817785205*^9}, {3.866254549496963*^9, 3.866254555093663*^9}, {
   3.8662546252320347`*^9, 3.866254645248086*^9}, {3.866254759667647*^9, 
   3.8662547607426033`*^9}, {3.866254889744342*^9, 3.8662548909149446`*^9}, {
   3.866254921233653*^9, 3.866254922151456*^9}, {3.866255111823483*^9, 
   3.866255112738577*^9}, 3.8662574558616056`*^9, {3.866257625671372*^9, 
   3.8662576360908813`*^9}, {3.866257668990629*^9, 3.866257673154139*^9}, {
   3.866258160607082*^9, 3.866258163488317*^9}, {3.866258216054822*^9, 
   3.866258216152341*^9}, {3.866258465946023*^9, 3.8662584660890408`*^9}, {
   3.8662587584666643`*^9, 3.866258758714335*^9}, {3.8662591656591253`*^9, 
   3.866259171110828*^9}, {3.8662595439403343`*^9, 3.866259575288472*^9}, {
   3.866260163911601*^9, 3.866260184078418*^9}, {3.86626215222803*^9, 
   3.8662621832516203`*^9}, {3.866263109109415*^9, 3.86626311329671*^9}, {
   3.8662634113702927`*^9, 3.866263445027198*^9}, {3.8662637295611134`*^9, 
   3.8662637341766987`*^9}, {3.8662638454628477`*^9, 3.86626384912811*^9}, {
   3.866264629557499*^9, 3.866264632526574*^9}, {3.866264756302319*^9, 
   3.866264756571878*^9}, {3.86626485570925*^9, 3.8662648604861727`*^9}, {
   3.866264906589533*^9, 3.866264909654014*^9}, {3.8662650173821917`*^9, 
   3.866265024103039*^9}},
 CellLabel->
  "In[275]:=",ExpressionUUID->"ff705697-08c0-41db-8a85-131ecdba22d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hardNet", "=", 
   RowBox[{"InitializeNeuralLogicNet", "[", "hardNet", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.866209283643862*^9, 3.866209293055928*^9}, {
   3.866210794191074*^9, 3.8662107965361767`*^9}, {3.866211249974576*^9, 
   3.866211280034959*^9}, 3.86625467208576*^9, 3.86625490177337*^9, {
   3.866257939071712*^9, 3.866257940508713*^9}, {3.866257980743169*^9, 
   3.866257982079924*^9}, {3.866258022031268*^9, 3.866258048836591*^9}, {
   3.866258423802837*^9, 3.86625842536515*^9}, {3.866258586682054*^9, 
   3.866258618845252*^9}, 3.866258678879615*^9, {3.8662621849859257`*^9, 
   3.866262189739525*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"96efab8b-047f-4880-948f-a2cf8ed0e8e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hardNet", "=", 
  RowBox[{"AppendLoss", "[", "hardNet", "]"}]}]], "Input",
 CellChangeTimes->{{3.8662621701263247`*^9, 3.866262192586781*^9}, {
  3.866262733447508*^9, 3.8662627397979307`*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"935149ae-24d8-4804-bab3-83c06464018f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"NeuralLog..\"", "\"NeuralLogicNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "NeuralLogicNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Catenate\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"BitLoss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"8\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 8\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 8\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"NeuralLogicNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["NeuralLogicNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"BitLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["BitLoss", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    StyleBox["\"\[Sum]\"", Bold, 12, StripOnInput -> False], 
                    GrayLevel[0.33], 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SummationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    SummationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {333.00000147371924`, 103.49999999999999`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "NeuralLogicNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{75, 64}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {75, 64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {75, 64}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{75}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {75}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + Slot["Input"] (2 Slot["Weights"] - 
                    1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Weights" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT], 
                    "Input" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{4, 75}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4, 75}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>|>,
                     "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {4, 75}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>|>,
                     "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT], 
                    "Weights" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>|>,
                     "And1" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "BitLoss" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 4], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -4]}, 
                    Table[
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 
                    0., (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, 
                    neurallogic`Private`n])^2], {
                    neurallogic`Private`n, 1, 4}]]]]], "ErrorFunction" -> 
                    Null, "InitializationName" -> 
                    "Initialization_de783470_7333_4931_9dc9_38a6b6103270", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
eZ3z3GgvwiRDV5jpk4EbbqEi58pJpF/5+t2L2EvoItblXy5itwIH2s71BKRB
hDa1z4GipRgdNMUY3M3FTu3ebssMwd38uqfYW8WkMDj9FSyhF/nTGAoEFmB6
Bjb2UDYhd0wxyJJhdMdnmaJLnq2XyLg7ZlN7Kih15HYplyBi2TW1euxrnQju
krmXuZRdz4q5Fn/KQSBm0gewicsVT2bQFg5ZwMGqWXbZFWIYdjA6TTa/eJPl
nyIJdkZuid88PCEn3Syku8HJk0Hk73zKpUhg5I9lYUdBQI7Fb15AQPYwMVTl
N5XwJqfaT505UXUPrKKGVrmnv06uiCLAgPmgGDPGSZazJOGtOPm4x/lEPLFm
PoUdY7IKJgFxJngSUOxA/tBYcs+j5SRVuuyduJ2oIuV7FMYTv3OgrMoxWQOh
RAaoongDVKGQdimpMukogHqIbseEkTvjiZ+0sBxpWB+w2Q/AWb5eGVRgchPl
oHn5yiZB70UhAT+DBN9TNp0avPjM9VuM8favEHRL43Ra3R+6c6U9MR0R9Pm1
MZd13+rebqfLXEh68e/N/qOXd0ZtM0bN/uBxVWjyRriJy7ShyfziOrqVVzVe
FssrA5z06YRWeHIcVKpsOtRbEH1g39vluEeuH1QC/nvPAH8K9nm9OuSZqx/6
0AxGgKut79M+dy2G9e161TA/G/iGvA5lJf7cIPgEUr4PnLOYEAnC3L3RthDc
VWlAxFp4Sjdm1daSZr17UpJu0aQ9g1Bwte5bkYxZOHkxNvxFR4RdxLHegmeT
pnjvBw7lZpmiqdwuAXwAJ6pyRzKSIqha2VSmKUhbCSiNdihCkz+CLFQrG0ze
LiLaK2MJN9f3NaKI+GzbyQPOq+CpNTR5HZrd3zDz7bLVKykBha6G567Z3+pj
SCyqKjRrM0v7X4MY7IUwDV9X3XmnegmjHiJx/bAI8bcjGiywVvfMdRjpRP1S
iKcf/SBcLkzUNZZ3435/+LrW95RmpHy0zRfXUD8I4q9BTHePMirshg541K8B
6ysUIDxSkPpBMO3DUE0nH2Q46tGLCQooq+r0YsRI4zoYWG+W9YHACnWYrz1T
XgUr1DfzVSNLI/QhrD8XhDBfBOGXqC4ystQPUqbiEnjUPlvelYLg+hvjcdQr
Et5fjVZFF1FUHvcRJKMFAoUZAtkp1Vh5QgrnnbJzQhdcQHUTiKW75gIsr5ph
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
sB4jDMfRjdxXjpT168ocKmElQ1mJS1IPKGc48thQk7n3lKdXqM9fUAYJVbnr
1HnRuty0MSjktouwYOTngSCC4fp+hUQ7pYQbCsmuGYIKDZv1f7z//yeP8J8L
er9+B31zoqa+/KBp4JjANWDNAqtWc0+bF7qZSeNq3bc6jZ8k3HeS13l5mJXu
f8fHQKSvwF48Avfi4cHzwARQBezO0L3E8P/mcE+CHaoZTuv9GG+w42vzSjX+
b3obUWvms+2Caa3vrpe/TtXwHewaeLbjZAIPbs9TfWd+pviAgRwBuh/6O/6t
ULUflsrUV+Gl2hpVfUfCN6h0djwVqFp53gJ3ArD01R3235jjqwFzL9OUJRgF
7oM9SuE68FU/+KrxZP/LZsVYYv9M1Ebrd2PQ94J6/KL629Wo7XhFn+912OQK
l3x2BSTop3F9DOuPa1Q+aX9HTvakKjS5EUbpvJWKGag02b9QaDflnf6f3pfl
fY9hf61iTFAIXcu5U2q8tKtp4p9B8X4F8tAZQXf1NeSclf0FfOhrNyDn1XsO
dW8/O1+KF+Au9DYtRh5uIbwh7Y7Q3zaNCDS6jsN4s1HeShC1NLoLiT8b7yEH
x8qRepeiJX3JdxAilzsIPGpb1r9vIC2I0C/f9J8+DRzKnexm1feQ9nXV6R8p
ASBi+6DNGpqcAMW/r+q7xfg38zpc9LLg/2awww0xC7m4ctR+ffNC35jw3WhS
2n/xVKIUv6i+AeK6euyi6jHyHuOCF8gtHYL3xal44BvHPSyKcEoYRMq7clBq
o2os7zqGYl0fDD7VawwO8zxfB29XU5C+GoQJNWi7KZrKu/6O5mshGiH+bbPq
U/lqWJRFfnOk7UiM/vpzcHhcDSg37qHATp8j6oZDyhB+X1aiAih6ZL3GRzC4
TdgfrOur34U2zDlD0x5w6RdUrws0DVORADlIAL+pyHbOCvqghC/XQb+6BB/b
XmBlpc/J8u7p/PNDFAafd18FQshkXBMwv3roOownMsiR7VhiEtF8MiEdSpWG
Ir5wLgrtsOt8lcG+Til19xNwpSnPlMcdh9MvKmAVGlW97wzzVahPe13f6Q5q
JBhorB5dM4hJoHX7o6sbkD32L4LRzWzvNtPLC1xW1FlPsvUtuOeQBLOKU9pz
uojLJnjtXr0dRKyTumEL/HEwEwgVrWv6A22F8ebD/9Ln3TTee94W9zgXE03s
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
/CcR4gWtiRdA4IVbemr6xfzt/wW1Z43O
                    "]]|>, 
                    "ExternalLibraryPaths" -> {
                    "CompilerCoreRuntime", "CompilerCoreRuntime"}, 
                    "orcInstance" -> 1440760160, "orcModuleId" -> 1429364144, 
                    "targetMachineId" -> 1429961808|>, 139621709173008, 
                    139621709172816, 139621709172944, 139621709164544, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 4], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -4]}, 
                    Table[
                    If[neurallogic`Private`n <= 4, 
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0.5 + 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.5], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0.5 - 0.5, 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.5]], 0., 
                    2 (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, neurallogic`Private`n])], 
                    0.], {neurallogic`Private`n, 1, 2 4}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_9b4c6965_e165_410d_94a1_5f2b8d0c162b", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
c53DairibUUlHzuXs1S+F3Pl79A3RmiPVCutH8wPTNEeqRC+kOyxUtC5wInx
V6B45AorZTrwoE105Ii50cwrX8IjVqitgTazYQ3OAdVA51K3cq6n4BD1FZzd
xnMFqMFprm+VCVmL1zpzIU0XCBiKbNvcnd7WBgKGHa4idwWLZsztl+DZbtSP
w1ClNgnTEBDfQ9sED+ghXcE4VVeJq2cJm11bmtUFYw69R0o7S20r4pGEOLuu
xWV/izoQEM+/zKPtHijgGf0pA4c2izmEqSslriy/LVxqEjg/cHaGRASPKIzJ
kC4s2GTyp1CMnZeZECWpJ9SYG3lMJzh5OogSOp/yaGIYJYTj2DFweIeDw7vZ
AB7eLnraUsmmQsH0BKsZs2EJCR7e5YUB5c4p47GSENIbh2sju3EtWw/GAO9q
Y4BNOjCVhQLLBCs7Fw2Ybrp7ubOwPoat9743XCV+X7tKolvVWYjZJFjNnAMj
B1i/aqWvLXeWVILIIQGinY0qL9N1RSJ7cmp5fHml+kx/LHS6KigT/ubGoJOf
wV4HWfA0Vmj64d7RaEUM2FI3kkZfrkABeQO41fT5vpI/nyNsGfQUBy2e5nZR
FmiqPYOSHL3XLjJtMXQ1/0v1P3mJIWCrQ5faefSDC76PUlVbGgGvLDf2yDVO
ZhBcxLcfVl2ssepw51+OW/N6kvDz0oj1wB2ckteV2hBHjF+FPOtwf25yEfRh
E6Fdj4FDrO5bPOjo5aBzZuOv5LXOcL8PeGUrIgGAw0pwCtyBnComlxH3/8Gd
0f3nc1SLE/cgSCWDJ+AFrLrXMzErGHhHcHiToB/948IzxxNlEMfEgON7t+GM
nQNLTR84ylnaKKEv81X/Wzj90grOqvwpVQi/A8on9z+f0Wkk4q7vf0+e1Th4
acDxajp0/17ZxiyNi/Q5pboAT6qB8/fUh/PAtlWK6W/cZd4BHs7v1GhA7AZA
/IVsJQ0Rr9yehLLpE/cUd9Lg8dKQtBc9VwzDE6S6d/yZY0EhdJb1peUwr3gj
Z/TCuwSGUsXtNzBMtM7naxX3skFVN7Di9UxcQGwKIOFClJwIj3bk9AakMrUs
vGxXnQ+HLIwlTRR9Az+8BAJdAj9kNk4U+diCD57tig+gagbB4Wq9Bl4zA2I/
gdyUDGYQqkhL3va2+vy3WabV/qnh3OxoIk334rCy5rByNDm6mXhc1VtzeHSi
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
Ff1aR+FnkbRF3rrcuue+SPGiJ581MQwPQ3JwdSFiOdPAldqEm69xdHWXbolm
fhaZrwccIO8DdbfvLthK1eMgXMVinm3lVrXQ+J3TqZ2zWy5PT+DBhuvpWm+S
QtLu0HpT4VVXyozjmrpXeqd1tytvxsjPsstXPkClwab1unJXMvW423Up7WN1
dYpnm0/3WFlF4+u16qWTWmj5Fqj7zFK7l3E70kdt7lU8a60HePKg3ayad4S5
RWL5CaRKaqmlKltHVZ9p9VXXPOuLWqqkdls5K4do2e5xOSJLVCPGZmixVNnx
trS5y3g2aixh9Gc32s0uk2rgz57MAPAvEr9msVnXSbeDWuN2Had/omHEpvsn
2zazNtKVQODK4JK2QLTkI90PkOyknne7LqBvY2kquk/oUW1mtwAvJ6RAfgBX
1QwtL6dI2rrumOkYkLDdI81vV6RX2R/l1cNfztjGCTNlZODtTXpVQHj8hajk
3kbTlpBH3uLYnWVmVdHV59gtUhHw2Dy7tBbcsPrGDOhBa0janj9rXa1+Jimr
zX2IZ68up4bRnX+ccZa6o3N20NuPrm6BxcchmrqF3/0uKbn7qqvIXlOl39+6
oM1shBQKDCsZGFY4qmsL6VqiKoMx+7PMXMygiXtF5LmDM83VLYx3tN3uCWUl
c23YR2fpCc1mFAvSn0955VX8I8zA7ZM02CG+XdshflwHqy1YAmAdxQ00DIpK
yltcSS4jP6cY/8mzgwz2axnssdMyKHQU5ba5F5PnaBn0a24zKyJHAqJ3AkQi
PWj30+z7oVZwe61Wnuu0stRsf6tr0JxyzY/wpOOzhrkh4CiVNHOX4cViPQPL
u3Qgo9WoQJuj+x2UA9S57teHDKo0ZmB7aIXnSoHBCNgCU1CLbCqVK92HZ7vX
7crtpqPjHJs5AQlhzdQS4kTWmnqSWWera8scaaDmvOPObnUlzR25ItjPKIKq
kjI0qiqmfCpkECe6dKb2RJ+vg7XNbAQwNbdSC6tz9g1XEYAVVhf8KVHnL9bt
gcPUGPfrVQY/aEvN+W+7r5QZ3AJSdycDqU9DDfqOurN/Nu9Am3u1eJ52M3+T
2m5W15zSclvY5Brkc1krS85cD7eVmOEtA1JqUwnQx18GiFJfslb8x80qf3bN
8zkUxG3chzstoN+cHfTxSHBJGGxJZS095ghVLyBrA5BZSPU4fEtgbtOhNvfW
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
W4Cu1JvCcQy84KhCzIFQAcwvCxYaxqssD4y2e03E95GeNXK4iD6C4ZQmR2Ew
G7VzxI9NESOV1WyscbAUiqqFq6fNSuU+DPHZbbqcr/CK3Y/witJ/I+nlgkX4
nUg0Y6o3oRmzWAXrpDYjVy4MeQSeEmhY5mNrsQS42XN1FOf5ukCV0XZQjXit
7WlYYAj3O6dE75u+0hBIQhchBxZnO+aGJ2lgV5VTkKNwUgWWA/0ZupCJ5itF
yfufRNUrf/bwD01qfvDEs/bi9oPVyDC1b9a4BNsbggHVKmcDNyTPMdzwVSpD
q79/eBXK9oNsvUpfe/jgDMi/hBLlUJ5iPRM/mwQ8PV2G7vJXyw3M9i7RQ/b/
1chBShzSVNxgQ3cAbe8sxqxqH1iIWlI9oSUvQAyytnWDs3aLbnHQPbS5H6Jy
Jlejh0rZYcowDgMrvYEtw2AkrT5EkxZMjx/0YBtC1dVghReXQzZskUw93J7R
4mS04CrQzJUqvsem7NpOFypmsZ628ZZHT7wcIGrJ/K46XaGP2MNpKrKQfk3b
5d7RHPr3nSWLWjrUTds6OqxLaO/ktghsdk3PLdlm3WnndnR8/g/FPWfbNtY+
i3fqYjhVj9uxgXqsSnqgVFuj0d8L7txwwOYo9+ODt7tSKxOGKtMaU833WuX8
lHpc6MQWkb80OVrT1KEIdvPhfJV5olgz2MsIXDaN+ffHqZfSGqNMQckP77bE
O1V7CWfmUKdKzjZtrK3v1z96JxQ1Oqu+a5UmabC+Z+Oe4q0b8s+3dZ+5rSvQ
xw749j0YN8XZ5K0pA/pcVv4j/bO5Q/pdma4/6JdxluRwP3Em6Ygb157J9RrH
aStP2QrtolwZwrv55B0W/IBD1JWNO3Iy/7Hj15fMbjxclf+PyZb5ALMDjzYG
TvadxvxJV1exwOSYydEDxSn3TBB5M1UpTuyHmcdMnAs1KYcrlmVhT/V1rA8h
IU8KmtRDJf31TWkPp5kee8yccKyqa0Jp0t1ifW3Fz4gpnR1twQt3f38i84RG
12ZrucsqZ6DuUvNmyKWSlDlaxh5aJGCT8GxTWmNwi/Nf0mOdnSPjjuqVFqbC
Zxr9cKIG9HZ0uyh4p2/6N59bbM2RDZbqh1+26x3NcQ7YTz9OHou3Y7iabtzB
HayckEv6u1Pco3/ZHU7Lh4z+oe5xbZtwor5nYKZb71/zhaaTg+6MDV7yYW2L
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
1tv/C5KQm7U=
                    "]]|>, 
                    "ExternalLibraryPaths" -> {
                    "CompilerCoreRuntime", "CompilerCoreRuntime"}, 
                    "orcInstance" -> 1443635824, "orcModuleId" -> 1438434688, 
                    "targetMachineId" -> 1441867600|>, 139621709156672, 
                    139621709156480, 139621709156608, 139621709148160, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[1, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[1, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {8}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "77f5dd9e1b61ad4d", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "Summation", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Target" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "NeuralLogicNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "NeuralLogicNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8662621713542557`*^9, 3.8662621928326597`*^9}, 
   3.866262740378108*^9, 3.866262994449193*^9, 3.8662630252676487`*^9, 
   3.866263115456761*^9, 3.866263470360005*^9, {3.866263529587191*^9, 
   3.866263534419078*^9}},
 CellLabel->
  "Out[205]=",ExpressionUUID->"105d1967-60ad-4b1e-8cf9-1a67da9f54d4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.866180932479144*^9, 3.866180933335601*^9}, {
  3.866260506971014*^9, 3.8662605102109118`*^9}, {3.866262223194878*^9, 
  3.866262223474766*^9}},ExpressionUUID->"22d0189b-d6a7-44ad-b35a-\
70f7e8d0dd81"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedNet", ",", "resultsObject"}], "}"}], "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"hardNet", ",", "trainData", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", "\"\<ResultsObject\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"testData", ",", 
          RowBox[{"UpTo", "[", "1000", "]"}]}], "]"}], ",", 
        RowBox[{"\"\<Interval\>\"", "->", "10"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ","}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", 
      RowBox[{"CrossEntropyLossLayer", "[", "\"\<Binary\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "2000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}, {3.865054457509366*^9, 3.8650544578686247`*^9}, {
   3.86505477772941*^9, 3.865054778082748*^9}, {3.865068653838964*^9, 
   3.865068654609194*^9}, {3.865080627414422*^9, 3.8650806283184032`*^9}, {
   3.865083708681526*^9, 3.865083708825326*^9}, {3.865083821079447*^9, 
   3.865083834942741*^9}, {3.865083963691033*^9, 3.865083963798675*^9}, {
   3.865084052031911*^9, 3.86508405604659*^9}, {3.865084712458816*^9, 
   3.865084714779253*^9}, {3.8650850318199787`*^9, 3.865085042375606*^9}, {
   3.865085347092472*^9, 3.8650853492436037`*^9}, {3.865087177268942*^9, 
   3.8650871774987164`*^9}, {3.8650875295432863`*^9, 3.86508753004692*^9}, {
   3.8650910391528397`*^9, 3.865091039680594*^9}, {3.865092465235463*^9, 
   3.86509246561416*^9}, {3.865093077156846*^9, 3.8650930777408447`*^9}, {
   3.865093563590226*^9, 3.8650935665811462`*^9}, {3.865093604509932*^9, 
   3.865093606613147*^9}, {3.865094711282296*^9, 3.8650947154901857`*^9}, {
   3.865095636817848*^9, 3.8650956465365458`*^9}, {3.865096640966447*^9, 
   3.865096641349704*^9}, {3.865096841405044*^9, 3.865096845450448*^9}, {
   3.865096978238997*^9, 3.8650969783420362`*^9}, {3.8650978859209423`*^9, 
   3.8650978879502153`*^9}, {3.8651521462428493`*^9, 3.865152151624899*^9}, {
   3.8654237453279037`*^9, 3.865423761191227*^9}, {3.865425094569989*^9, 
   3.8654250949273663`*^9}, 3.865426407631672*^9, {3.865427268299314*^9, 
   3.8654272687216043`*^9}, {3.865427312071782*^9, 3.865427338236537*^9}, {
   3.865480943115551*^9, 3.8654809615709352`*^9}, {3.865481127404986*^9, 
   3.865481127963303*^9}, 3.865481611043377*^9, {3.865481767251525*^9, 
   3.86548177979108*^9}, 3.865482045247164*^9, 3.865501190993976*^9, {
   3.865501226812446*^9, 3.865501227285406*^9}, {3.86550125951196*^9, 
   3.865501261192251*^9}, 3.8655018022002287`*^9, {3.8655027038867693`*^9, 
   3.865502705656213*^9}, {3.865502868555921*^9, 3.865502868657743*^9}, {
   3.865504196722334*^9, 3.865504242725172*^9}, {3.865504328367261*^9, 
   3.8655043284768267`*^9}, {3.86550676499557*^9, 3.865506785593732*^9}, {
   3.865507111985943*^9, 3.865507113081835*^9}, {3.865508282529696*^9, 
   3.865508288970006*^9}, {3.865508459308895*^9, 3.8655084672501917`*^9}, {
   3.865508616831658*^9, 3.865508617456334*^9}, {3.865508753514429*^9, 
   3.865508754689973*^9}, 3.8655090265308237`*^9, {3.8655093577005377`*^9, 
   3.865509361259615*^9}, {3.865509406175308*^9, 3.865509406480921*^9}, {
   3.865509566540971*^9, 3.865509566797229*^9}, {3.865509801781477*^9, 
   3.865509806869198*^9}, {3.865510364828817*^9, 3.865510364984823*^9}, {
   3.865511892763131*^9, 3.865511899248225*^9}, 3.865512183735215*^9, {
   3.865576817028904*^9, 3.865576827768445*^9}, {3.865576940005062*^9, 
   3.865576944416757*^9}, 3.865577256166149*^9, {3.865581257661825*^9, 
   3.865581260646195*^9}, {3.865581380175387*^9, 3.865581389569625*^9}, 
   3.8655814425356083`*^9, {3.865581702235195*^9, 3.865581703944759*^9}, {
   3.865581754832677*^9, 3.865581760065102*^9}, 3.865581805068038*^9, 
   3.865581849095172*^9, 3.86558189879091*^9, {3.8655819661420727`*^9, 
   3.8655819675929527`*^9}, 3.865582095860794*^9, {3.865583743222515*^9, 
   3.865583772696185*^9}, 3.865583831452342*^9, {3.865584080798609*^9, 
   3.8655840820932693`*^9}, {3.865584186450605*^9, 3.865584222885951*^9}, {
   3.8655842856232557`*^9, 3.865584303781209*^9}, {3.865584337940879*^9, 
   3.865584338117053*^9}, {3.8655855488998632`*^9, 3.8655855568312683`*^9}, {
   3.865585680889308*^9, 3.865585681005665*^9}, {3.8655862452812977`*^9, 
   3.865586247610465*^9}, {3.865586360932333*^9, 3.865586361032501*^9}, {
   3.865586798800089*^9, 3.865586823072701*^9}, {3.865587092591731*^9, 
   3.8655871007506332`*^9}, {3.865587141673348*^9, 3.865587157874174*^9}, {
   3.865588726668622*^9, 3.865588729424287*^9}, 3.865588761896544*^9, 
   3.865588841508543*^9, {3.8655891085364428`*^9, 3.8655891086489573`*^9}, {
   3.865589984183222*^9, 3.8655899844488497`*^9}, {3.865603709429957*^9, 
   3.86560371174704*^9}, {3.865605271864118*^9, 3.8656052731299133`*^9}, 
   3.865605330719324*^9, {3.865605443927062*^9, 3.8656054440635033`*^9}, {
   3.865605614265745*^9, 3.865605618539999*^9}, {3.865605816150147*^9, 
   3.865605816332803*^9}, {3.865606265557193*^9, 3.865606272049069*^9}, {
   3.865606327091432*^9, 3.8656063273223667`*^9}, {3.865611040542164*^9, 
   3.8656110408409224`*^9}, {3.86561116212323*^9, 3.865611166641942*^9}, {
   3.8656549028483057`*^9, 3.865654906333233*^9}, 3.865680761391651*^9, 
   3.8656811483450813`*^9, 3.8656829062398977`*^9, 3.865683115764473*^9, 
   3.86578561075629*^9, {3.865785661867104*^9, 3.865785668865432*^9}, {
   3.865785726995323*^9, 3.8657857292651587`*^9}, 3.865838257738958*^9, {
   3.865838364183861*^9, 3.86583836573066*^9}, {3.865838530611968*^9, 
   3.86583854995222*^9}, {3.8658396342012157`*^9, 3.865839638792821*^9}, {
   3.8658397023405647`*^9, 3.865839718293825*^9}, 3.865864968666602*^9, 
   3.865866763740403*^9, {3.865868027575666*^9, 3.8658680277180977`*^9}, {
   3.8658681686608667`*^9, 3.865868171064867*^9}, {3.86586843683401*^9, 
   3.865868436993589*^9}, {3.865912066537798*^9, 3.86591207452584*^9}, {
   3.865912437888954*^9, 3.865912443081304*^9}, {3.865935613934861*^9, 
   3.865935620516629*^9}, 3.865935723596953*^9, {3.865936198781383*^9, 
   3.865936198919567*^9}, {3.865937462692774*^9, 3.865937465098215*^9}, 
   3.865937675009396*^9, {3.865938076169652*^9, 3.8659380788303537`*^9}, {
   3.865938264161339*^9, 3.8659382856316338`*^9}, {3.865938346816244*^9, 
   3.865938346995491*^9}, {3.8659402354700937`*^9, 3.8659402355749483`*^9}, {
   3.8659417869015293`*^9, 3.8659417907552633`*^9}, {3.865941822901186*^9, 
   3.86594184197126*^9}, 3.865943618614884*^9, 3.865944576270194*^9, {
   3.865944785446289*^9, 3.8659447855898933`*^9}, {3.866003246716501*^9, 
   3.866003249338025*^9}, {3.866003345918395*^9, 3.866003346802381*^9}, {
   3.866004153500367*^9, 3.866004153612595*^9}, {3.866006456771926*^9, 
   3.866006459991156*^9}, 3.8660064967175922`*^9, {3.866006667277667*^9, 
   3.8660066694796553`*^9}, {3.866006907306169*^9, 3.866006907735796*^9}, 
   3.8660070948661203`*^9, 3.866007922187111*^9, 3.866008126424575*^9, 
   3.866022478356038*^9, {3.8660227773998528`*^9, 3.866022785633342*^9}, 
   3.866028086831442*^9, 3.866028189948174*^9, {3.866169904740741*^9, 
   3.866169909566701*^9}, {3.86617007030836*^9, 3.866170070761507*^9}, {
   3.8661701842474957`*^9, 3.866170188549567*^9}, {3.866170225131812*^9, 
   3.866170225241187*^9}, {3.866171364152894*^9, 3.866171377370982*^9}, {
   3.866171422283556*^9, 3.866171423291066*^9}, {3.866171465017973*^9, 
   3.8661714663629837`*^9}, {3.86617152859019*^9, 3.866171536859111*^9}, {
   3.866171592410349*^9, 3.86617162393864*^9}, 3.866172071808412*^9, {
   3.866172664340991*^9, 3.866172665516221*^9}, {3.8661756288733797`*^9, 
   3.8661756318478518`*^9}, {3.8661757469204397`*^9, 3.86617578836042*^9}, {
   3.866176182548183*^9, 3.866176183139518*^9}, {3.866177251342409*^9, 
   3.866177251909031*^9}, {3.866178181556961*^9, 3.866178183130048*^9}, {
   3.8661847410258703`*^9, 3.866184743289184*^9}, {3.866184820283268*^9, 
   3.8661848203806543`*^9}, {3.866185850555801*^9, 3.866185850716692*^9}, {
   3.866209361509819*^9, 3.866209367713132*^9}, {3.866210145850836*^9, 
   3.8662101579444437`*^9}, {3.866211403272949*^9, 3.866211406923521*^9}, 
   3.866211495134623*^9, {3.866211537983692*^9, 3.866211572497748*^9}, {
   3.866214748241581*^9, 3.866214760229577*^9}, {3.866214809876875*^9, 
   3.8662148485175447`*^9}, {3.866214898846077*^9, 3.866214911205903*^9}, {
   3.866259873211958*^9, 3.866259875000155*^9}, {3.866259906986361*^9, 
   3.8662599259831533`*^9}, {3.8662600952629633`*^9, 3.86626009599518*^9}, {
   3.8662604682691298`*^9, 3.866260485284494*^9}, {3.866260718542985*^9, 
   3.8662607188938417`*^9}, {3.866262230733412*^9, 3.866262232700974*^9}, {
   3.866262747191399*^9, 3.866262755095587*^9}, {3.866263687522623*^9, 
   3.866263691522341*^9}},
 CellLabel->
  "In[278]:=",ExpressionUUID->"fbdac8c7-4549-4743-864d-e467d909f319"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedHardNet", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"trainedNet", ",", "\"\<NeuralLogicNet\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866262883598037*^9, 3.866262913813736*^9}},
 CellLabel->
  "In[207]:=",ExpressionUUID->"c3a89cf2-7844-4806-bca2-4513232e25d6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{75, 64}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {75, 64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {75, 64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Weights" -> 
                    NeuralNetworks`TensorT[{75, 64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{75}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {75}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + 
                    Slot["Input"] (2 Slot["Weights"] - 1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT], "Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {75}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{4, 75}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4, 75}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {4, 75}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{75}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{4, 75}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 75}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 75\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 75\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8662628854701767`*^9, 3.86626291478244*^9}, 
   3.866263333811677*^9, 3.866263626951891*^9},
 CellLabel->
  "Out[207]=",ExpressionUUID->"003e5a18-974d-49fc-bb8c-59814e6eda5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedHardNet", "=", "trainedNet"}]], "Input",
 CellChangeTimes->{{3.866264005501539*^9, 3.866264009598818*^9}},
 CellLabel->
  "In[279]:=",ExpressionUUID->"3a2ff587-745f-41b1-baac-89a85935254f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{500, 64}]|>,
                     "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{500, 64}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {500, 64}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {500, 64}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Weights" -> 
                    NeuralNetworks`TensorT[{500, 64}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500, 64}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500, 64}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {500}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {500}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {500}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + 
                    Slot["Input"] (2 Slot["Weights"] - 1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT], "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {500}|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{4, 500}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{4, 500}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4, 500}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {4, 500}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 500}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{500}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{4, 500}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 500}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 500}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8662640101713343`*^9, 3.866265569202435*^9},
 CellLabel->
  "Out[279]=",ExpressionUUID->"67dfadff-78df-4715-bc71-9b6ca1b046d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 3.8647943165808363`*^9}, {
  3.865509544459216*^9, 
  3.865509545362651*^9}},ExpressionUUID->"e2a69d6c-fddf-4ce0-9a60-\
6b136e91fb12"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"resultsObject", "[", "\"\<RoundMeasurements\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.861598551906061*^9, 3.8615985567851887`*^9}, {
  3.863178625879333*^9, 3.8631786268708572`*^9}, {3.863240306853362*^9, 
  3.863240307588504*^9}, {3.8647943299915457`*^9, 3.864794330447215*^9}, {
  3.864794373237455*^9, 3.864794410229562*^9}, {3.864825813950893*^9, 
  3.8648258236291018`*^9}, {3.86505446234156*^9, 3.865054476285439*^9}, {
  3.86505502598845*^9, 3.865055037244231*^9}, {3.8650600546900873`*^9, 
  3.8650600574960833`*^9}, {3.865424330606958*^9, 3.865424333182247*^9}, {
  3.865590864349222*^9, 3.865590866486609*^9}},
 CellLabel->
  "In[280]:=",ExpressionUUID->"7fc77f76-3601-40ba-afe5-9f8f5741f7ab"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.4482591368074421`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.21489383012820512`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9, 
   3.864824874279098*^9, 3.864825084390379*^9, 3.8648257903081007`*^9, 
   3.8648258243477163`*^9, 3.864826317452064*^9, 3.864826707415752*^9, 
   3.8648268358911123`*^9, 3.864827667008909*^9, 3.8648277980615273`*^9, 
   3.8648279244198427`*^9, 3.864829394605691*^9, 3.864829843115088*^9, 
   3.864829959358408*^9, 3.864830393511653*^9, 3.864830567569335*^9, 
   3.864830919268218*^9, 3.86483103124896*^9, 3.864872789949876*^9, 
   3.864874331638398*^9, 3.864904587128199*^9, 3.86505496881559*^9, 
   3.865059953128607*^9, 3.8650600598500547`*^9, 3.8650654143932*^9, 
   3.8650656502740097`*^9, 3.865067803178391*^9, 3.865068291966251*^9, 
   3.865069495989231*^9, 3.865070283366563*^9, 3.865083279154043*^9, 
   3.8650839062816553`*^9, 3.865084356636775*^9, 3.865093499302258*^9, 
   3.865097650435338*^9, 3.8651414446602592`*^9, 3.865424333606085*^9, 
   3.865424841445877*^9, 3.865425229735964*^9, 3.865427484983204*^9, 
   3.8655059072779627`*^9, 3.865507093510763*^9, 3.865508240612179*^9, 
   3.865508423230506*^9, 3.865508732322257*^9, 3.865509005381804*^9, 
   3.865509546501918*^9, 3.8655096996579227`*^9, 3.86557721081032*^9, 
   3.8655780390495567`*^9, 3.865590830670417*^9, 3.8655908671336946`*^9, 
   3.865610697897925*^9, 3.865652633905154*^9, 3.865655300641062*^9, 
   3.865788012907119*^9, 3.865788771715988*^9, 3.86583933159483*^9, 
   3.86583978515248*^9, 3.865867641184679*^9, 3.8658685884814367`*^9, 
   3.8658714546625*^9, 3.865911704628196*^9, 3.865947229222362*^9, 
   3.8659961521973543`*^9, 3.866000873158622*^9, 3.8660057911972733`*^9, 
   3.866007274901287*^9, 3.866008420062475*^9, 3.866009699493788*^9, 
   3.866011982651112*^9, 3.866019936674967*^9, 3.866084127515397*^9, 
   3.86608662667826*^9, 3.8660896820607147`*^9, 3.866091248584734*^9, 
   3.866117818933078*^9, 3.86616938042334*^9, 3.866214058580371*^9, 
   3.866214619279559*^9, 3.8662148930932426`*^9, 3.866260227594151*^9, 
   3.86626079823901*^9, 3.8662624027750263`*^9, 3.866262859083837*^9, 
   3.866263335273055*^9, 3.866263628944993*^9, 3.866264013159096*^9, 
   3.86626557226152*^9},
 CellLabel->
  "Out[280]=",ExpressionUUID->"2d2317a2-3198-4e2a-bd9b-bdfe128e0d11"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 3.865059369384118*^9}, {
  3.866260515330757*^9, 
  3.866260515514728*^9}},ExpressionUUID->"e1e18ea5-01ca-48fa-ad1a-\
51b05520e9c0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"randomTestSample", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"testData", ",", 
     RowBox[{"UpTo", "[", "2000", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"softPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"trainedHardNet", "[", 
         RowBox[{"First", "[", "#", "]"}], "]"}], ",", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
     "randomTestSample"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"RandomSample", "[", 
  RowBox[{"softPredictionTargetPairs", ",", "10"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}, {
   3.8650544818297043`*^9, 3.865054482561998*^9}, {3.8650591999549913`*^9, 
   3.865059216538383*^9}, {3.865060098170718*^9, 3.865060117548669*^9}, {
   3.865083374025154*^9, 3.865083380805747*^9}, {3.8650835363762093`*^9, 
   3.865083538071233*^9}, {3.865590907688581*^9, 3.865590907991177*^9}, {
   3.865610944975788*^9, 3.865610947181724*^9}, {3.865655407744947*^9, 
   3.865655408023315*^9}, {3.86626050147324*^9, 3.8662605016737347`*^9}, {
   3.86626089567375*^9, 3.86626089681426*^9}, 3.866260938745146*^9, {
   3.866262482360608*^9, 3.866262529517881*^9}, {3.866262922944813*^9, 
   3.866262923422676*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"a637f3cb-d7f7-4492-ad2f-108fbd4b3b99"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.12455379962921143`", ",", "0.4329773187637329`", ",", 
       "0.2305324673652649`", ",", "0.6307268738746643`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1.1920928955078125`*^-7", ",", "0.4329773187637329`", ",", 
       "0.006023526191711426`", ",", "0.24409151077270508`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.010914623737335205`", ",", "0.4329773187637329`", ",", 
       "0.020647108554840088`", ",", "0.3481177091598511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.2904740571975708`", ",", "0.4329773187637329`", ",", 
       "0.2305324673652649`", ",", "0.09912395477294922`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.2904740571975708`", ",", "0.4329773187637329`", ",", 
       "0.5341644883155823`", ",", "0.19804614782333374`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.2904740571975708`", ",", "0.138358473777771`", ",", 
       "0.5341644883155823`", ",", "0.24409151077270508`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.12455379962921143`", ",", "0.4329773187637329`", ",", 
       "0.4497859477996826`", ",", "0.3481177091598511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.12455379962921143`", ",", "0.4329773187637329`", ",", 
       "0.0858297348022461`", ",", "0.3481177091598511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.010914623737335205`", ",", "0.4329773187637329`", ",", 
       "0.020647108554840088`", ",", "0.24409151077270508`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.2904740571975708`", ",", "0.09684675931930542`", ",", 
       "0.2544757127761841`", ",", "0.3481177091598511`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.865083944153455*^9, 3.8650843925870743`*^9, 3.865093531769497*^9, 
   3.865097756341769*^9, 3.865141542376992*^9, 3.865424349715019*^9, 
   3.86542751189223*^9, 3.865505916932631*^9, 3.865508251307014*^9, 
   3.865508433617846*^9, 3.8655090142926064`*^9, 3.865509556017363*^9, 
   3.865509716467205*^9, 3.8655772328758097`*^9, 3.865590884371516*^9, 
   3.8655909461424932`*^9, 3.865610848379921*^9, 3.86561101972335*^9, 
   3.865652662175004*^9, 3.86565533700756*^9, 3.865655432595294*^9, 
   3.865839371310375*^9, 3.865839829589559*^9, 3.865867734412747*^9, 
   3.8658686797777967`*^9, 3.8658715579590683`*^9, 3.8659119433076973`*^9, 
   3.865947389711522*^9, 3.865996464213435*^9, 3.866000902227161*^9, 
   3.866005919373596*^9, 3.866007335306445*^9, 3.866008523003419*^9, 
   3.8660099197969923`*^9, 3.8660122066524353`*^9, 3.866020263301511*^9, 
   3.866084178948759*^9, 3.866086754587434*^9, 3.866089766385713*^9, 
   3.8660915250645237`*^9, 3.866118393832325*^9, 3.8661696699675713`*^9, 
   3.86621463391124*^9, 3.866260254356771*^9, {3.866260882666247*^9, 
   3.8662608976351223`*^9}, 3.866260939218465*^9, 3.866262436607922*^9, 
   3.8662625325408573`*^9, 3.866262576730279*^9, 3.8662628626292152`*^9, 
   3.866262926156415*^9, 3.866263340699325*^9, 3.866263634432796*^9, 
   3.866264023919882*^9, 3.8662655791232643`*^9},
 CellLabel->
  "Out[283]=",ExpressionUUID->"322776ca-6fcd-4cf6-8e75-6fd635aea76a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hardPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{"Harden", ",", "softPredictionTargetPairs"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Reverse", "[", 
  RowBox[{"Sort", "[", 
   RowBox[{"Counts", "[", "hardPredictionTargetPairs", "]"}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.866262545581931*^9, 3.8662625852221003`*^9}},
 CellLabel->
  "In[284]:=",ExpressionUUID->"869b250c-74b8-401f-aaf8-aeabb227840e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "517"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "456"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "311"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "237"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "183"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "127"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "48"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "21"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "21"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "18"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "18"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "9"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "6"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "3"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.86626255716794*^9, 3.8662625856612177`*^9}, 
   3.866262947134226*^9, 3.866263363781433*^9, 3.8662636432366753`*^9, 
   3.866264045183586*^9, 3.866265598220498*^9},
 CellLabel->
  "Out[285]=",ExpressionUUID->"b4bcbfbb-0006-4cf1-ba81-63981b4013ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"391", "+", "300", "+", "244", "+", "222"}], "2000"], "//", 
  "N"}]], "Input",
 CellChangeTimes->{{3.866264060255272*^9, 3.866264077214407*^9}},
 CellLabel->
  "In[230]:=",ExpressionUUID->"7daed51c-7055-470b-b9c5-52ca091caea0"],

Cell[BoxData["0.5785`"], "Output",
 CellChangeTimes->{3.8662640777971992`*^9},
 CellLabel->
  "Out[230]=",ExpressionUUID->"045ecab3-bff0-4f2f-b8a3-c1121465dfff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Subsection",
 CellChangeTimes->{{3.8650593677216454`*^9, 
  3.865059378776081*^9}},ExpressionUUID->"76d42d52-0573-4522-b5b7-\
498e3dde144e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedBinaryNN", "=", 
   RowBox[{"HardBinaryNN", "[", 
    RowBox[{"hardNet", ",", "trainedNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.865058429611095*^9, 3.8650584430617847`*^9}, {
   3.865058537803178*^9, 3.865058538587184*^9}, {3.865060538228921*^9, 
   3.865060539696113*^9}, {3.86506349126202*^9, 3.865063493622542*^9}, 
   3.865067853583132*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"4d21d466-27c3-4874-b3dc-7266285e8228"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hardPredictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"trainedBinaryNN", "@@", 
         RowBox[{"Harden", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}]}], ",", 
        RowBox[{"Harden", "[", 
         RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
     "randomTestSample"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sort", "[", 
  RowBox[{"Counts", "[", "hardPredictionTargetPairs", "]"}], "]"}]}], "Input",\

 CellChangeTimes->{{3.865058489671732*^9, 3.865058510689581*^9}, {
  3.8650591346976957`*^9, 3.8650591432500973`*^9}, {3.8650591801380463`*^9, 
  3.8650591902661877`*^9}, {3.865059229711952*^9, 3.8650592320867157`*^9}, {
  3.865059269767497*^9, 3.865059273043046*^9}, {3.865059308311268*^9, 
  3.865059313621923*^9}, {3.865060122322789*^9, 3.86506012815064*^9}, {
  3.865064010371698*^9, 3.865064013322488*^9}, {3.8650640456787148`*^9, 
  3.865064062650298*^9}, {3.86506412906083*^9, 3.865064159507169*^9}, {
  3.865064677690926*^9, 3.865064678625976*^9}, {3.865084417360098*^9, 
  3.865084426783647*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"fe313b72-7655-48b2-bd87-c4b77f574373"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "3"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "7"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "7"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "7"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "8"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "8"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "9"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "15"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "17"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "18"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "19"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "21"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "23"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "23"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "23"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "24"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "29"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "33"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "54"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "55"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "108"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "111"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "True", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "257"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]}], 
     "}"}], "\[Rule]", "289"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "354"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True", ",", "False", ",", "False"}], "}"}]}], 
     "}"}], "\[Rule]", "427"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.865059315032776*^9, 3.8650599737395782`*^9, 3.865060129146494*^9, 
   3.865060356447012*^9, 3.8650638958285713`*^9, {3.865063999139495*^9, 
   3.86506401473055*^9}, {3.8650640504215593`*^9, 3.865064063572337*^9}, {
   3.865064132575581*^9, 3.865064160280686*^9}, 3.865064679596649*^9, 
   3.865065001005705*^9, 3.865065041186687*^9, 3.865065083851123*^9, 
   3.8650654504209337`*^9, 3.8650656685629063`*^9, 3.8650657868219*^9, 
   3.8650678219098597`*^9, 3.865068300737266*^9, 3.86506950358249*^9, 
   3.865070291548985*^9, 3.865084432567347*^9, 3.865093547060911*^9, 
   3.865097840652648*^9, 3.865141592508157*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"62edc5cf-378b-45dc-a9c3-291e5ebe224a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"weights", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Harden", "[", 
        RowBox[{"ExtractWeights", "[", "trainedNet", "]"}], "]"}], "]"}]}], 
     ",", "bytes", ",", "bits"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"bytes", "=", 
     RowBox[{
      RowBox[{"Length", "[", "weights", "]"}], "/", "8.0"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"bits", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"ToString", "/@", 
       RowBox[{"Boole", "/@", "weights"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Iconize", "[", "bits", "]"}], ",", 
      RowBox[{"Quantity", "[", 
       RowBox[{"bytes", ",", "\"\<Bytes\>\""}], "]"}], ",", 
      RowBox[{"Quantity", "[", 
       RowBox[{
        RowBox[{"bytes", "/", "1000.0"}], ",", "\"\<Kilobytes\>\""}], "]"}]}],
      "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.8650683965936604`*^9, 3.865068549901691*^9}, {
  3.865070483150701*^9, 3.865070604810329*^9}, {3.8650706583114557`*^9, 
  3.865070669150255*^9}, {3.865084489201025*^9, 3.865084491831086*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"f1a57f52-0581-436f-88be-233d5aefa82c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    DynamicModuleBox[{Typeset`open = False}, 
     TemplateBox[{"String", "StringIcon", 
       GridBox[{{
          RowBox[{
            TagBox["\"Head: \"", "IconizedLabel"], "\[InvisibleSpace]", 
            TagBox["String", "IconizedItem"]}]}, {
          RowBox[{
            TagBox["\"String length: \"", "IconizedLabel"], 
            "\[InvisibleSpace]", 
            TagBox["20400", "IconizedItem"]}]}, {
          RowBox[{
            TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
            
            TagBox["20480", "IconizedItem"]}]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
       Dynamic[Typeset`open]},
      "IconizedObject"]],
    "1000011001011001111011011011001000001111011011000111000101011010100100101\
110010001100001010011001001110000100100111010011101000101011110101101101110001\
110010011011110111000101010110111101110101101001011100011110111000000001101111\
000000001110111110010110010001011000001010010010010010010110011101111101001100\
011011011100011100000010000010100000110101010100001101010100010101000111010001\
000010000101111011000010001111000110110001111110000100011101010000011110000110\
111001001100101111001101000100101001110000001000100001011000111100101000010010\
110010011010010011101100001111111100000010010011111100010011001100000101010010\
111011101101011010110011110101000010100101011110111110000001100000101001010001\
010111000100100010010110010110000010011100011101110001101100101110010011110011\
111101000010000111111000011011110100000100101110010011001101001011010011011110\
111011001101000111101101010101101001001101010100011000001001111110100101011011\
000000111100011110010011000111100010001010000011101111011100000110101011100011\
001110000011100010011101100100101100000011100010011001011010101000100100100110\
001100110001000000000001111001100101000011110000000100010001001010111011010010\
000000100100110110111111110010100100001001011000011011111000001110100001000000\
100001010011001010101111101100111111010110111100001000100001011111001100010000\
111001110010011111110101001011110000000000101001001111100100011100100111000011\
001010110000100100111110110001001101010010010101101000000110101000100101010001\
011001010010110010110100100010110100011110010101111010101011000111101100001101\
000100000110110111011000100110010001100100001001001111111100100111110101011001\
110011110101100000000110101011010101100010011101010000010101010010001100010101\
101111101001111110110110011110110101110110110011010101101011011001000011111101\
111101100100011110110101000100010001001011001001101011100000010100011100110110\
100010010011111000011101001101000010100011100011101101001011110011011101110111\
001111111110011001100000001001100111111100011100101010000011001111010100111100\
100010110010001101100100111000111110100111111100010001100100000111100000110011\
001001010111110000100110111000000000010011001100100000100101011110110010011010\
011001001000011110100010101110100011101000000101011101110001100100100100100111\
100011000101010011001110011111010100011110001011011011100110110001000001101001\
101110101011111100101110010100010010111100000000000110011101100100100000111101\
011100011010001101100100011000001100111010011111000001001010010101110101011100\
110001001110110110110010111110101111011000101000001011100001111101110001001110\
010001001111111101010100100111001000101110111100000110011110100101001111111110\
001010011100110111101101011100000111101101100100000010101101001110101110101100\
111101110111101101011110010001011011001000001101010101111110101111011101011010\
001101011001010010000101001011010101001101011110000000001011011000101100111111\
000000110000110001001000000000001011011101010010001011110000111111001010110011\
010010100010000011011001010000011101100011010010000001010100111011000000101100\
000000101101101100010000100111101101111001001101100010000100001011010010100001\
100111100100110101100001010001111010100100111010011100110010101011110111100101\
011111011010000100001100001010001011011010100110011001101011001101010010011110\
101100110000110011010010001011001100100100001110110111101000000100110110001001\
111011101000000110010011110100111001011100000001011110101000001000001011001110\
111000100100101111111001000111000000110001010001111000110001100000000001001011\
110011001000011111100000010111110101100110110000011001010001010110001110000111\
000001000111011101100101000110010010110010011001101011110110010010101101100101\
010100011011111100110011111000010000010110001110111100101110001011000100001111\
110001001110110011001101110000111101001101011100000101011110001011101100001001\
000010001110110100111011010110101100100001111001101111100100010001100000010010\
101001111000011101000111000011010101001101111011101000110110111000011011011111\
010001001110011001011000000000001011111011110101000100100000100001000001100001\
001010101010111111010111011001111000111110110111100001100000111110101010110101\
000101100010000010111010001110001011101000011100111001001100001011111111001111\
010011001101011111000101101111000010000100100000010100100110000000111100011010\
110101011000000101001010111111111100010010100110100000101111111110111010101110\
011111000101011100101000101111010111100000100100011111101011110111100100001010\
110011011101100111100111101010001111101100010111011010101110101011111011010111\
111011010100001011010011111001100111111110111010001110110001010000100101010001\
100000001100110110011001001111111001011110010000011000110000010011010101111111\
100101111010100110000111111010011110010111101010110010001000010100111001111011\
000000111010110001100111111110100001001001000110111010100010100101000011010011\
001000001110111100000001101001001110000010100101101010100101111011000101011010\
001000111001010011001100101011011100100100011010101101110010101100101010011010\
011111101110000000011000011011100001000000011101100001100011000000011010111000\
101011001110110110111101100110011001101001100111000011100110101101001111000110\
000001010010001001010110001110110001110000011100100001101001001101100110110101\
001110101001101010101100011101010001101101010111000111000101111010000101011011\
011111111100011000111111001111111010111001001111101010100110011100011100100101\
100110011110001111111001111001111011101011101111001110011000010111111101111101\
000110011011111000000001111010011001001000000000110101101100011010000100111001\
101010110011101111100011000000101110001000101010011110110001000100011010101010\
000001111111110110000111010100001010111101001010111000101010101001111001011101\
001010111100001110011111000001111100101000111101111010010110000000001010000110\
100101100000001011000100011010010000100101001000110011011110111101010001001111\
011001011011010111111100101110111100111101111010011011111110001100010000001111\
110100111111001000111101100011111110110001010100001111110001001010101110100010\
010101011100001110101001010011000011011100001110010011001011011001000101000001\
111011101101011110111110101011000111001111010000000000100101110101000100110111\
101111011000010110000010001001010111101001110101101011110100111101001111101001\
110010010000110100111101001101001111101101100110010000001101011110011111100000\
011111000011011100010101101000100011000000111110101010011101001000101100100111\
000100000000001010101011011101101010001010001010000001001110001101000100101101\
111011110001100011100001100101000001101010111100100100111011011010001100011111\
011010011111001001011000110011101100000001010010000100011110010101010111100011\
100010110001110110000110101110110111111101000110011110111000101010111111011010\
110100110110000111110011011011001100111000011011110000001000101110011101000000\
100010100110011011100101011111101001100101111110110001011001011101001000011010\
011001000010110101110010101100101111100000110110110000000100000011100101010100\
001101001100011110101001101000100110100111111100101110110110011010010000100011\
001100101001010011001001110101001001101100110011001100010111110001100000011101\
001011100101010110110011001110010001111000010100110000101110110111011010110110\
101110001000100011010001110100010111010100101111111000011100000000011110010101\
010011100000001011101101100101010111101111011001100010111100000011111010100100\
001011011010101000010100001010011011001101010010110110100101101100111111010000\
101101010000010001110100001010111010000010001010100110100111110110100101100110\
111111110011010110010100010010100011000101110000001101100001101101010110110111\
110011010111110001111101100101011011100110111111000110011010111100110110010000\
100110011101010000110011000001001010100100001011111011011010101111101100010001\
011110010001000010000110000010100111001000001001001000110001111001100001110010\
101001101111100011000010100100000010100110000110110110101111111001001101011010\
100111011101111001100011110110000010101101100010010111000001100010001101001000\
011011111110010011111100110001101000110101110110011010110011000011100101110000\
101001010011110001110101010110011100000101111001000100010111101000111000001101\
110100111111111100101000110101100011010000000010101010100111001111111000111011\
011100010110001111110101110010100001011101000011111101110010010010010011000001\
100011011111101010001001110011110010001111001110010110011001111110111011110101\
000011000001001100000010111110111010001000110001110100011011101001110010001101\
010111001011110000111111101101011101100101100011001010011110101000100110111100\
000001100011110011000011010011100000110100101000101001000000011011001101011011\
000010111001000101101001000000000001011110010101100110111011110010101100011001\
100100100101111100000010000000001100111000000010011000010011010000101101011101\
001100100000010010010110011110111001011011101001100000100010001001010110111001\
110010001100000010001010000101000111100101010001010111001111100010100001011101\
010110011111111011111101000110010111101001110110110100100100111111101001000001\
010110101100100000110100011110011110011000101000111100000111100111010000101101\
001100101100110100011000111110010001010010101101001011000010111101001111101101\
000011110110011100010110010110101111101110001111001110011011011110100000110001\
111011000000101001011010011010100010111000000011000000011111011111101110010110\
101101111011100100010001001000000010011000111001011100011011011101011101111000\
111101111110010110111001001111111101110110011000110101111100101010111001111110\
000101111110011000000101101101011000101101111001011000010000010000111010001101\
011011000000100111010110110000011101111101011011100000111110011110011011001011\
110101011101011011110111110000101111100011110000111110100101110010100010011000\
111010000010011100000011011100101000100101011110110000010001001110111110110111\
100010001011001111110001010001000011010010010010111101100011011101110110011110\
000010000011001111001010010001010000011011111010011110011000001000100000010000\
101111011110100110110111001111001000010001100101101010100010101111010011111101\
111011100111000111110110110001110000101010010111101101110101001011001100001010\
100110010110001110000110110100000001000010101000011101010001100001001001000010\
000010101101101011100010111110100011110001111011001111001001010110111010110111\
001011000111111000010111011011101010011100000111001101001111000100101000111001\
001111011010101110111001110011100110101001110011100111100000101111110011011010\
101101000111111000111100110101100010011010111000110000111010000000111011010101\
000111101011111111010110111100010010100000001000000101101001101011010100000011\
100000011110100111010111001010110000100111100111110101011000000000111000011010\
001110001100001110001100010101001111010110100110110001111010001010011111000000\
011100111011110010110001110010001011101001001101100110111100100001011101111111\
100100011101011100011001101110001110111101101010000011101110100110111000001011\
010101100001100000001000001010001011001111100000001100000001010101100001010110\
010111011110010101010101000101111101000001000000001110011100001101000101100001\
001010110001011000001101010110100010110011100100110110101100001001110011110111\
010001110101001111000111101100101010011011101010111011011111001101010011100001\
001011111010111101011101111110010001111010011110101001000000001000000100101010\
101111100110110101000111111101011011111010000010001110011101001111111101001110\
111011000101111111011000101010110011010011001111110101001001100110111100010010\
110101100000000011001011011100000000110001001011111100111001000010011110110110\
101111000101100111110101010010011000111100011011010000101110111010001001011100\
001101011001000101000110011111110011000100010100101100011100110110000010000000\
011100100001101100010001101010010111000000011100011111000010111010100001001110\
000000011011001100110101000111001111101010111100111001100010011001101000001110\
101101011111110111110000101110000100011101101001110111111111100000101110001001\
000111111000000110001101000110110111111010000111010110111010000101010101000011\
011100010011011101011011100000011100100000010000011000101000101101011101110100\
010001001010010101101011100110001100001011101011011101100100011000001011010111\
010000011011111100011111001101011111010101000011010100110110111000101110111101\
111000001100011101110110111010011110100111001111111101110011010000000100010111\
001101011101101100000000000001111101110000111000001101111100000010111110111011\
001001110100011110011100011010001111101100101011110101110111001011010011010001\
001110010101000011001001100100111011110101100001100001001001000011010101110101\
000000011111111111110111101010100010100111011001101111010111010101101110101000\
010001110110010100010100000001011000001101111010001010010000110110010100000110\
111001111100001100010101001001111111000000101001111011101110000011100111100001\
101001110010001010001110000110101111100001111010010011101011010011101000111110\
001011010111001100010010011111010101011000110001011100110000110101010100001101\
100000110001111101110010010111100101010001111001010010111000010110000011110001\
111010011110111000001101100110111110010010011001011101010011101100010110101110\
001100101010101111011110001010110110010010110001011000100010110010101111101000\
100011100010011010111101110101110011000001000101000101000100101110110111001110\
011100001001000101100111000001001000011110111111011111101001100010111101111010\
010001011010111100101001110001001010000001010100000001100111100100111011111110\
011111001011101001010000000101110111110110110001110110111101111000111011001100\
000010100111011100101001011010101100101101001110000000010000101111100011000110\
100001000000111000110100011110011110010001011001001001110001100110100000001011\
001001100010010111111111000001110000010100010100000010111100010111111011100101\
000001110101010010100000010001110011011001110001100100100010110001110011011110\
011000011110000111110100011101010011111011000001101011011111101110110101010111\
111100101100111010011010010011111110000000001110000101100010100111011100110111\
101110100111100111101010110011101011001101000001011010011111101110011010101010\
001001100000110000011011100100111111110011001110001011100010000000101111000001\
111011011100000100000101110010110000001110110011000101000101111011100011001101\
111011111010111110001100011000100000001111110100000001001100000001100001111111\
001000001100101000100110011111000110010110111110101111110100101000101001101000\
110100000000111011101100101010100101111110111010011000100110001101010110001001\
010011001011001101011110100110010111110001101100110001101110111100100110111110\
011110100000011000010011111101000110110100100010000001011011001011011100100011\
101111111011100001111001111101100110000101010001101100100111100111110110010110\
111000010011011010110000101111111101101011101000100100101101001010001111001010\
011000011101001011111000000110100011000011000100100101110101010000000000101010\
010010000110111000101001010010011000001100011011011010100010011001010111011000\
111110010001011110101001101110011010111001101101100101110011010011110001010110\
000011011000100101011011110010000100111101010001000010111000101010011010010000\
000100101110001000100100100111101111111011101010001111001101011111000110010101\
101000011111000100001001001111011100100110000101011111110111100100011101101100\
110110011011001001000101101000101011110001101000110000010011010101010100100011\
000000001101110111111110000100001111100001101001001101100100111001101010101010\
100011011101011010001010100110011100100100011111000100110101010001000101110111\
011101110001111010111000010010010011100100111101110001100000110000001110011101\
110011001101010100011000101000101001101010110100001111001010001110101000100000\
110001001101111101011011001011001011110010100010010010010011110100000100111110\
000100111110000111010010001000000011111110000111010110000011110100110011001001\
101111001110110111001110001011100011001100100011111101110000110110011110001010\
011101100111110000111000000011110000100111110101001111010010011011011000111000\
100101010010001010111110011110101110010110111101110001110011000100000100110011\
001101111010001011101000100101010100101101000000001011000100110010101111000110\
100010111100110010101001011101010011110001000100100011100000010000101101100010\
000001011111101001010010010001001000010101100010111110111100111111111110111000\
010101110100110111011101101101110001010000100001100101110001001101001100100001\
100001001010101100101101001111110101110000100011111001010100010101111001010001\
001110010110101001001110111100101011010000101000010001111111000100011010011111\
011101001110011000001110110001001101001000010110111100011111111001010010000000\
000001111110110011011110011011001011010001010011011100010011011000111010001001\
111001101111110001100111101010010101010101111111111010111100000000101010100110\
100111010000001000111110110110101000000000110111101001111000001011011001100111\
110001101010100000111101111101110011100110111001011000110010000000111011110100\
100111010000001010010111010000101110100001010010010010110000001100101110011000\
000000010001001001110110011001001011000010010010001100111101101110110110001011\
100001100010011111101011000011100101011011000110111011000110101011110100011001\
000011000100010011110001110011000111000110010010100001111101100111010000111111\
110110110010111100000101001100011110010000100100100111101010000101101011110100\
111000000101100001000101101000110100111000111000111110010000101101001101000110\
001000000101101100011001010111011010011100010001100100100001100010110010101000\
000111101000100010010010000001110110011001110000001111010011110010100011011110\
100000000100010001001101000101001110100011110000001010100111011011000011001000\
000000001111100101001011001010010101001100100011110000100111000101100111110001\
001111011011101100100001001111000000101001010001111111011001110011101100101100\
100111110101011111010011101010100000100011010011100010010101100100011110110110\
011111010011001101010100110111000000110100011101000100000111001110101011110011\
100101100101100101100000001111000011101100100011001111101101110000101001110101\
100001100010011010100000001000100110001001100100101110101110110001001100100111\
110101101011110111010010100000111111011110001110010100010000001110010010111101\
000100000101100010001000000000010100001011100000000001111101000011101001111000\
011111001000010001101010011101110010110110011001001010001000110110111011000111\
011000011111110101011000001010000101001001100011111110101001000100101100110101\
110011000110011010001110111011010110100010111110001010010110111111110100110101\
000100101101100110000101101001101110011011010110001011010101011000010011000111\
011111110111101111010011001110001000111110000001000101111100100010110011111010\
000010000000111011000010110010100011010101010011001000000010100001001011111000\
000100100100010001110100001000101110010110100010100110110101111111000110110011\
110111111010110000101001100101111111100010100001100011110000111001110000011000\
000010111110111100100011101001110011011100101101110010101111110010011011010101\
111011000100011010101000100110111010100001110000100000111011100100010101011011\
001011111111110011110010101100001011100000111011011100101000011000111111001100\
110000010001011001111011101000000110111011001001100001001001110100011101011011\
000101010111101110100000101111110001110011101001011111111110001000011000101110\
011111000000010010011100011001110100000100010011100011111000000000110001000111\
111111011010110000100101111010100011110001010000101100001011010101010111011100\
010001100011101111111010111101110001000011100110000011101001010101110010000100\
110011100100010110111011010111010010110111101001100000010101100001000101110101\
111001000000000001101001100111000100100001001101101010000111101001001011011111\
111011101110011000101101100011111100101111101001011000100111010010111010110010\
001001111010100110010010011000111001101011111111000010011111010110000101001111\
001001100011000111011111110000110010110011000100010110001000000111111101111110\
110010000000100111010011101111110110100111000010110010001111110000110111011110\
101100111101110101001111011111110110111100011000111111110010010100001001010110\
101011101100101101111010101000110001100101101000010010101001000001110100110010\
100001010101110011001011111011100101110001001010001011110111000010101111000100\
101111011101001110001010011010001111101101011110100001110000111111001010010111\
111011101101111011100110111101011101000010010010100011010011101100101010110011\
010000010011010001100010000011110100010101011010110011000111000011000110001100\
101010010000011011000010010011110000110011100000000111010111011111100011010101\
10101000100011001011101001000101000111101101110",
    SelectWithContents->True,
    Selectable->False], ",", 
   TemplateBox[{"2550.`", "\"B\"", "bytes", "\"Bytes\""},
    "Quantity"], ",", 
   TemplateBox[{"2.5500000000000003`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{3.865084510563562*^9, 3.865093550569639*^9, 
  3.86509784714373*^9, 3.865141606481255*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"71792a47-04c6-49f3-a931-44d32758998a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.865418895304618*^9, 
  3.865418895944718*^9}},ExpressionUUID->"c33fd357-ab86-4dac-a5dc-\
fb8a483872d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"\"\<neural-logic.m\>\"", ",", 
    RowBox[{"Path", "->", 
     RowBox[{"NotebookDirectory", "[", "]"}]}]}], "]"}], ";"}]], "Input",
 CellLabel->
  "In[242]:=",ExpressionUUID->"de7ef9f2-bf67-4869-9b14-c25b89d18d50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8661929465609503`*^9, 3.866192951398875*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"bd286b26-9519-4a19-aaf1-dc16a2f0b69a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.8661929518057213`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"04156c36-198c-480e-ac3c-b166f2f2ba54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"1", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.8662053271081877`*^9, 3.866205329724587*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"09ff4b66-701e-4a22-9342-52d4f46cab16"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.866205330346697*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2074283c-8420-4675-9289-fdfc1b640be7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"input_", ",", "weights_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"1", "-", 
      RowBox[{"#", 
       RowBox[{"(", 
        RowBox[{"1", "-", "input"}], ")"}]}]}], "&"}], ",", "weights"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{"input_", ",", "weights_"}], "]"}], ":=", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"1", "-", 
      RowBox[{"#2", "#1"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"1", "-", "input"}], ",", 
        RowBox[{"Length", "[", "weights", "]"}]}], "]"}], ",", "weights"}], 
     " ", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fl", "=", 
  RowBox[{"ThreadingLayer", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"1", "-", 
      RowBox[{"#Weights", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "#Input"}], ")"}]}]}], "&"}], ",", "1"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.866203455756501*^9, 3.866203455757184*^9}, {
   3.866204257888383*^9, 3.866204311206588*^9}, {3.866204352268944*^9, 
   3.866204460642564*^9}, {3.866204494270095*^9, 3.86620451827563*^9}, {
   3.8662046381961107`*^9, 3.866204671004511*^9}, {3.8662047079513474`*^9, 
   3.8662047293006783`*^9}, {3.866204763783149*^9, 3.866204775884285*^9}, {
   3.8662048220757847`*^9, 3.8662048304602003`*^9}, {3.866204912949448*^9, 
   3.866204917276347*^9}, {3.8662050519014606`*^9, 3.866205159741651*^9}, 
   3.86620531295723*^9, {3.8662053958725863`*^9, 3.86620544929578*^9}, {
   3.86620548858785*^9, 3.8662055433925743`*^9}, {3.8662056757608023`*^9, 
   3.866205752478593*^9}, {3.866205784176201*^9, 3.866205954277626*^9}, {
   3.8662060828953342`*^9, 3.8662062984773073`*^9}, {3.866206420236142*^9, 
   3.8662064243167887`*^9}, {3.866206555454442*^9, 3.866206655795371*^9}, 
   3.866206806631114*^9, {3.866206921812503*^9, 3.866207321578724*^9}, {
   3.866207402574772*^9, 3.866207419434704*^9}, {3.8662075000930643`*^9, 
   3.866207501071012*^9}, {3.866207532025144*^9, 3.866207668433436*^9}, {
   3.866207721014208*^9, 3.866207736201704*^9}, {3.8662077711071672`*^9, 
   3.8662077897274323`*^9}, {3.866207845274898*^9, 3.866208032416829*^9}, {
   3.86620810216577*^9, 3.866208128481179*^9}, {3.866208243466799*^9, 
   3.866208344101902*^9}, {3.866208434409431*^9, 3.8662084383813953`*^9}, {
   3.866208550162126*^9, 3.866208572488497*^9}, {3.8662086480994797`*^9, 
   3.866208655189555*^9}, {3.8662087111793423`*^9, 3.86620873604919*^9}},
 CellLabel->
  "In[586]:=",ExpressionUUID->"9f328ff1-4143-42af-a8c2-3be21e4f625c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ThreadingLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Weights\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.557, 0.557, 0.557], 
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Function\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Function\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Function"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Function\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Function"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   StyleBox[
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{"#Weights", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", "#Input"}], ")"}]}]}], "&"}], 
                    FontFamily -> "Source Code Pro", StripOnInput -> False], 
                   Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Broadcasting\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Broadcasting\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Broadcasting"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Broadcasting\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Broadcasting"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox["1", Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Input Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Weights\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Output Port", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ThreadingLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866204702069751*^9, 3.866204729876711*^9}, {
   3.866204764775198*^9, 3.866204776556181*^9}, {3.8662049030508413`*^9, 
   3.866204917880124*^9}, {3.866205108432445*^9, 3.866205160533162*^9}, {
   3.866205313813998*^9, 3.86620533923673*^9}, 3.86620540381746*^9, {
   3.866205439607127*^9, 3.8662054500103817`*^9}, {3.8662055062916737`*^9, 
   3.866205545218993*^9}, {3.866205684452015*^9, 3.866205753028406*^9}, 
   3.866205785091934*^9, {3.866205817256858*^9, 3.866205837892462*^9}, {
   3.8662058679819098`*^9, 3.866205889619138*^9}, {3.866205936419058*^9, 
   3.866205954864352*^9}, {3.866206098435143*^9, 3.8662062240804577`*^9}, {
   3.866206264631209*^9, 3.8662062988877697`*^9}, 3.866206425371891*^9, {
   3.866206569162614*^9, 3.8662065758770103`*^9}, 3.866206656473344*^9, 
   3.866206807234704*^9, {3.866207015123809*^9, 3.8662070689000387`*^9}, {
   3.866207105667776*^9, 3.866207118534905*^9}, {3.8662071906522827`*^9, 
   3.8662073220374823`*^9}, 3.8662074200190897`*^9, {3.866207563881942*^9, 
   3.866207598772758*^9}, {3.866207630591896*^9, 3.8662076689372396`*^9}, {
   3.866207729155264*^9, 3.866207736750033*^9}, {3.8662077758770247`*^9, 
   3.866207790067339*^9}, {3.8662078475559807`*^9, 3.866207896301559*^9}, {
   3.8662079425941467`*^9, 3.86620803313743*^9}, {3.866208102900572*^9, 
   3.866208129084133*^9}, {3.8662082513334227`*^9, 3.866208283511335*^9}, {
   3.8662083209847727`*^9, 3.866208344778516*^9}, 3.866208427401041*^9, 
   3.866208573309951*^9, 3.866208671494483*^9, {3.866208712044537*^9, 
   3.866208736584671*^9}},
 CellLabel->
  "Out[588]=",ExpressionUUID->"5aa4f00e-bb9d-42d5-b7c5-976b99f9d035"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"input", "=", 
   RowBox[{"{", 
    RowBox[{"0.9", ",", "0.1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"weights", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"f", "[", 
  RowBox[{"input", ",", "weights"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"g", "[", 
  RowBox[{"input", ",", "weights"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"fl", "[", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "->", "input"}], ",", 
    RowBox[{"\"\<Weights\>\"", "->", "weights"}]}], "\[RightAssociation]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8662047818592854`*^9, 3.866204787541985*^9}, {
  3.866205178433497*^9, 3.8662052197585783`*^9}, {3.866205258822996*^9, 
  3.866205260332995*^9}, {3.866205550446813*^9, 3.866205562031516*^9}, {
  3.866206268756686*^9, 3.866206269948958*^9}, {3.866206580988946*^9, 
  3.866206581102086*^9}, {3.86620666156708*^9, 3.8662066666618433`*^9}, {
  3.8662067322541313`*^9, 3.866206775922756*^9}, {3.866206815446083*^9, 
  3.866206874442219*^9}, {3.86620702281423*^9, 3.866207024052094*^9}, {
  3.86620767546846*^9, 3.866207678441731*^9}, {3.866208579316576*^9, 
  3.866208584649029*^9}, {3.866208738884389*^9, 3.866208740390779*^9}},
 CellLabel->
  "In[589]:=",ExpressionUUID->"a1b271c7-645a-4862-a653-483ffeeb0124"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.9`", ",", "0.09999999999999998`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.09999999999999998`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.866205193102873*^9, 3.86620522046772*^9}, 
   3.866205260684453*^9, {3.8662053148610077`*^9, 3.866205340592984*^9}, 
   3.866205404762458*^9, {3.8662055075122538`*^9, 3.866205518424734*^9}, 
   3.8662055628860817`*^9, {3.866205686302124*^9, 3.8662057539238853`*^9}, 
   3.866205786034603*^9, 3.8662058389688463`*^9, {3.866205869089888*^9, 
   3.866205890633408*^9}, 3.866206139111957*^9, {3.8662062703185863`*^9, 
   3.866206299764226*^9}, 3.866206426300334*^9, {3.86620657112768*^9, 
   3.866206581556534*^9}, {3.866206657520054*^9, 3.866206666913424*^9}, 
   3.866206776312727*^9, {3.8662068082164583`*^9, 3.866206875003524*^9}, {
   3.866207016481715*^9, 3.866207024733141*^9}, {3.866207233701846*^9, 
   3.866207322715825*^9}, 3.8662074208823442`*^9, {3.866207564878085*^9, 
   3.866207599418371*^9}, {3.8662076313284893`*^9, 3.8662076787964*^9}, {
   3.8662077300763187`*^9, 3.866207737524984*^9}, {3.866207777054414*^9, 
   3.866207790781528*^9}, {3.8662078482735367`*^9, 3.8662078970373383`*^9}, {
   3.8662079433698483`*^9, 3.866208033842033*^9}, {3.8662081036019*^9, 
   3.8662081298947563`*^9}, {3.866208252311804*^9, 3.8662082629351997`*^9}, 
   3.866208429078642*^9, 3.866208585249802*^9, {3.8662087183579693`*^9, 
   3.866208740818475*^9}},
 CellLabel->
  "Out[591]=",ExpressionUUID->"f4035ed4-8c8f-4459-9f22-e8327e6dcb85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.9`", ",", "0.09999999999999998`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.09999999999999998`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.866205193102873*^9, 3.86620522046772*^9}, 
   3.866205260684453*^9, {3.8662053148610077`*^9, 3.866205340592984*^9}, 
   3.866205404762458*^9, {3.8662055075122538`*^9, 3.866205518424734*^9}, 
   3.8662055628860817`*^9, {3.866205686302124*^9, 3.8662057539238853`*^9}, 
   3.866205786034603*^9, 3.8662058389688463`*^9, {3.866205869089888*^9, 
   3.866205890633408*^9}, 3.866206139111957*^9, {3.8662062703185863`*^9, 
   3.866206299764226*^9}, 3.866206426300334*^9, {3.86620657112768*^9, 
   3.866206581556534*^9}, {3.866206657520054*^9, 3.866206666913424*^9}, 
   3.866206776312727*^9, {3.8662068082164583`*^9, 3.866206875003524*^9}, {
   3.866207016481715*^9, 3.866207024733141*^9}, {3.866207233701846*^9, 
   3.866207322715825*^9}, 3.8662074208823442`*^9, {3.866207564878085*^9, 
   3.866207599418371*^9}, {3.8662076313284893`*^9, 3.8662076787964*^9}, {
   3.8662077300763187`*^9, 3.866207737524984*^9}, {3.866207777054414*^9, 
   3.866207790781528*^9}, {3.8662078482735367`*^9, 3.8662078970373383`*^9}, {
   3.8662079433698483`*^9, 3.866208033842033*^9}, {3.8662081036019*^9, 
   3.8662081298947563`*^9}, {3.866208252311804*^9, 3.8662082629351997`*^9}, 
   3.866208429078642*^9, 3.866208585249802*^9, {3.8662087183579693`*^9, 
   3.866208740827283*^9}},
 CellLabel->
  "Out[592]=",ExpressionUUID->"550433e5-4701-4264-82d8-8ad30df3d4d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.8999999761581421`", ",", "0.10000002384185791`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"1.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.10000002384185791`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.866205193102873*^9, 3.86620522046772*^9}, 
   3.866205260684453*^9, {3.8662053148610077`*^9, 3.866205340592984*^9}, 
   3.866205404762458*^9, {3.8662055075122538`*^9, 3.866205518424734*^9}, 
   3.8662055628860817`*^9, {3.866205686302124*^9, 3.8662057539238853`*^9}, 
   3.866205786034603*^9, 3.8662058389688463`*^9, {3.866205869089888*^9, 
   3.866205890633408*^9}, 3.866206139111957*^9, {3.8662062703185863`*^9, 
   3.866206299764226*^9}, 3.866206426300334*^9, {3.86620657112768*^9, 
   3.866206581556534*^9}, {3.866206657520054*^9, 3.866206666913424*^9}, 
   3.866206776312727*^9, {3.8662068082164583`*^9, 3.866206875003524*^9}, {
   3.866207016481715*^9, 3.866207024733141*^9}, {3.866207233701846*^9, 
   3.866207322715825*^9}, 3.8662074208823442`*^9, {3.866207564878085*^9, 
   3.866207599418371*^9}, {3.8662076313284893`*^9, 3.8662076787964*^9}, {
   3.8662077300763187`*^9, 3.866207737524984*^9}, {3.866207777054414*^9, 
   3.866207790781528*^9}, {3.8662078482735367`*^9, 3.8662078970373383`*^9}, {
   3.8662079433698483`*^9, 3.866208033842033*^9}, {3.8662081036019*^9, 
   3.8662081298947563`*^9}, {3.866208252311804*^9, 3.8662082629351997`*^9}, 
   3.866208429078642*^9, 3.866208585249802*^9, {3.8662087183579693`*^9, 
   3.86620874083643*^9}},
 CellLabel->
  "Out[593]=",ExpressionUUID->"291d0b14-785d-43d3-b657-4287d7b7b6ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8662026467886753`*^9, 3.866202648991271*^9}, {
  3.866202759883663*^9, 3.866202799825829*^9}, {3.86620324379723*^9, 
  3.866203249338135*^9}, {3.866203545842188*^9, 3.866203547514468*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"4587e0bf-fcd9-4433-b489-07b8e1ae3040"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "+", "a"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "b"}]}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"3", " ", "c"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "+", "d"}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "e"}]}], ",", 
     RowBox[{"1", "+", 
      RowBox[{"3", " ", "f"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.86620264945291*^9, {3.866202773572764*^9, 3.866202810244828*^9}, 
   3.866202958471575*^9, 3.866203196262293*^9, {3.8662032334776907`*^9, 
   3.866203250196712*^9}, 3.8662033355416613`*^9, {3.866203373633319*^9, 
   3.8662034420106907`*^9}, {3.8662034727865047`*^9, 3.866203560668726*^9}},
 CellLabel->
  "Out[234]=",ExpressionUUID->"b6935cb5-d0f4-400c-847b-0ba81f7f6120"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866202828738406*^9, 3.866202833129921*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"c64f8736-74fb-4ee2-9458-6e1c84a22181"],

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}], " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "2"}]}], "}"}]}]}]], "Output",
 CellChangeTimes->{3.86620283346931*^9, 3.866202955653081*^9},
 CellLabel->
  "Out[205]=",ExpressionUUID->"2f9e639e-aa96-42ff-920c-716b6f969c56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dot", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "8", ",", "9"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8662026506515303`*^9, 3.866202735177678*^9}, {
  3.8662028441803017`*^9, 3.866202857809308*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"7e6f2947-7806-4196-8138-e66fc19aed43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"32.`", ",", "50.`"}], "}"}]], "Output",
 CellChangeTimes->{3.866202735577856*^9, 3.866202858567361*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"6fa9c31b-30e0-4564-9950-6c9eb5d255e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn", "=", 
  RowBox[{"NeuralNOT", "[", "4", "]"}]}]], "Input",
 CellChangeTimes->{{3.8661931887049417`*^9, 3.866193206584778*^9}, {
   3.866193808497251*^9, 3.8661938153159513`*^9}, {3.866194886132872*^9, 
   3.866194886688011*^9}, {3.8661954022774*^9, 3.866195403163805*^9}, 
   3.8661959410307198`*^9, 3.866197825257297*^9, 3.8662544540018187`*^9, {
   3.866256897939242*^9, 3.8662569043630733`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"36cf5718-04df-40b4-bbde-befb0011ad6d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Not\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-2.4499999852628056`, 
                    0.5500000656474976}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999852628056`, 
                    0.5500000656474976}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Not\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Not", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {275.9999999999999, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.499999999999986`, 26.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {4}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + 
                    Slot["Input"] (2 Slot["Weights"] - 1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Not"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "Not"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866193190902203*^9, 3.866193206829892*^9}, 
   3.866193819645918*^9, 3.866194707340961*^9, 3.866194857097871*^9, 
   3.8661948872615337`*^9, 3.866195246843165*^9, {3.866195392832786*^9, 
   3.866195423823015*^9}, 3.866195941454911*^9, 3.866196771119005*^9, 
   3.866196913493338*^9, 3.8661978256078253`*^9, 3.86625355042941*^9, 
   3.866253887284721*^9, 3.866254013801*^9, 3.866254454667984*^9, {
   3.866256901574436*^9, 3.866256905067389*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"9c019e28-2567-435a-8cf8-ae31fe73e068"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"na", "=", 
  RowBox[{"NeuralAND", "[", 
   RowBox[{"2", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866193665761758*^9, 3.866193672407508*^9}, {
  3.866195870886396*^9, 3.866195873476802*^9}, {3.866197744065624*^9, 
  3.866197744383892*^9}, {3.866199184113944*^9, 3.866199184240049*^9}, {
  3.866256906351633*^9, 3.8662569072029533`*^9}, {3.866256948254567*^9, 
  3.866256948612113*^9}, {3.8662577271517897`*^9, 3.866257727293882*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"2d2dedcf-d735-44d7-9b95-ba222cefee9c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"SoftInclu..\"", "\"SoftInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "SoftInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-5.449999985262805, 
                    0.5500001460321887}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999985262805, 
                    0.5500001460321887}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5.999999999999998, 1.6076938217470707`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"SoftInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["SoftInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmntoFEccxy8mPuoDFIlYaEiFgn8oaNSCSlJMBEXoYVGiggZzdzOzd6dJ
TGKoInLQBxRRKFZEEfpHmrizKygqiLbgC5Ggoqj4qhaK/uGjFILaSqTJ9fe7
nOFuspvbe+3O5u4Lk+NCdvc7n/x+M/Ob2Vn+ljVsjMfjaZ8AP9b4vq5ta/Pt
XDsVvtQ3t4eUZkpWNW+nCm1b7C+FXy6E9hW0Mk9MXk9RBoqWBALdlZTyLxnj
OxjlnYyqN+DzH2jRhD8seH7hsD6ZUnUpcAoBm0OMqFfh8zVyMmsJlxcUv8bG
E1MVRV3OCO8AZkeB2UPgMTASq0Llx9jhsZB/nwOjrYP5xx+ky8mk/Z3wmFHD
LxTqnobjFaXaDwrll6Gf77Lk9CaWy4QfhPuGg0Rd5vPp5cJjXcsPeSmErwZW
P0Jfb2WSh/GG1/0OnHSI1V34Pwj71AqcQyzYcA0/zEdF0b6Afn4H/e2B1p8B
q35gdBfzGTi14LyB80cWtqTmFwx2zoA+NkJOHks1Jxo2wp/D5wm4x3bGtNos
WRlJOn7BoPop9hfi40raOYmxBeOVQrRNeB+LOZiNpOBHSNcnMI61Qd+vpxlj
94DzfojPtQZjux1yjF9rq/4Rxgkw+C2NOPsLOHfFrmO/fOyU9wTZzo/So3OA
w0/Qei3m5E1GtG9g3bsoEomMsdtvCtnCD/uNaw3gcd4Ks9jYR/g2rEHt8JeF
8sqvvl4fB2OTP14npY4zprXjWJhPTzlWXvhFIhfKIN58wOXPFNxeQaztCwb4
3Hz4sEE55hctiefp/RTceoDbhqamM+Nz+3zblTN+Ib8+G7icS7Ge7cZ5IFfP
lEBZ88O6ijF1N/DpM+E2ANyOuGAuyETfegYZZtQqKuaH6+qanqxc2RE1aAM1
NeRSeflngWyeIWn7oIzjD+bKzRBb/5rE3PlRlqdmSpsfzq3A7oAJt16oXRts
qDtlUVr8/P6TU2A996vJ3KDjfkm+jEoqy/y2bDk+HThdM2D3HzClBRRzibLE
D89d2OAer1gzPMUzhnyblFgp+TU0dE6Kn+mJcfcoHNZn2mFSYo3ID+v++N6v
yO4OjoV2mZRYI/KLr4vFeeISY6cm2mVQcpnyUxR9CRPPaBj/A8+97DQouQz5
YW4iKzH2CNFn2W1QchnyA3Z7DPY0V9ltzgUaxi++j/JeyNufnTDnAg3jp1B+
Ojn2tGfFudZUSfwUhc8T81Yh6nqnzLlAyfwo7xL4vSjQusyqhvjheT3Wskmx
F9CkOF+XWEN8GNO+F2LvgYTnrbIpzi9aArweJ69XtJ3OWnOFYvyCAbVKiL0+
3HNx2pwLFOOH72wK671TThtzibyx3BVqNag1NjptzCXy4ruq4pqvuF62LC++
O5e0ZqH8stOmXCTvsL0Cwvc6bcpF8jKqXhTWLeucNuUWlZaW4rs+bxP5jdL3
LPKiysoFW4W9lpfFete6quat3i/MHaed9uQmVVf7zyavm9XdTntyk4DZbaHu
WOG0p6KKKsqa/geMAYpw
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And1", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And2\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And2", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm0loFEEUQCfGDRHRixA3FEUwLmgimKiI+3IIuBAvok4yXVWd6Iwwbijo
oII3EVFQERU1pqv7IkQN4sWLOy4gChEUPYiipwQ1cUHH/zsjxE5PZtJTXdWR
flCBJGTqz8uvX1VdNRNqt62l/SKRyPbB8GVtze5FyWTNnnXD4ZvqxPY6liDa
qsQOwkiyorYYflgObTW0/pHAU6U6ACdUMyglPK06jjwJmL90Ebh7HvrzBiHm
UnQX+vMGeGsO/XlDj/Fpf92F/noPIfxC6M8blFrjwNnP0J83qMbPdHVHKW9R
HVOeKPdXX2OMBWffu/pjmhFTHVeeKPdHiHHyn9wj/G11tTVQdVx5otQfjNOJ
DndpWAMSlTH1EqX+GDFMh783fSj3EGX+NI1XdM89Y6OqeDyixF8qleoHY/eJ
w99T/LmKeApAiT+m8U0udW+pilgKRLq/urrLI8DXF8d6r0l2HIKQ7g9cnXPk
XoemWRNkxyEIqf4Ya1zZfdzy/TJjEIw0f9HoleGUmB8d/l70sfWKE2n+GOEN
Dne/GbMqZfXvE1L8uc+3/IiMvn3Gd3+QY6Xg66vD37No9Pxgv/uWgK/+Omse
f9d9vm2c4We/EvHNH6WnB0DNu+Ect7B+0fzqUwE++bPPIY+71LwL+Dt/+lSC
L/4g7w64PBt48J/UvK4I9wc5Vt9tzEINrK01RonuKwAI9Qe1bauLu1Y8mxTZ
T4AQ5o9SY5+Luw5dMxaK6iOAFOwP9l/FkHdHXdx9x/2uiCADTEH+4vGGYTBX
XHVx9w3q4CpRQQYYz/4IaZxKifnexd1nxowlIoMMMB78wdqOcubiLU01/kGP
GbPEhxlYeuVP163RMC5vuboj/DGehfsVaEDJy18qdas/zK8JcPQji7uLlDYN
8TvYAJLDX7oo88z4VRZvXzvvWvxXe7LekMVfugjPw2Cs3s7iDWqdcTcWsybJ
DTdw/OMPxyl4W0+J8SirN5xfCY/juk9V0AHC9ofnX5n9w6cevNnPTyi9VKI6
6CCg6xdHzpy55gR4udOTs05v5k1Ys5SpjlklmTsTZZSau/BZEnpZsWJnj96g
Nesxc57q2FWAtQz2AbNhzG2Dda2FdcvpJ4u/DvB8mlJruur3IAs8Z4CcmpvZ
F5zK1P/2XOPS4e8hzKlb8LVUvx/R4FyHa388L4V82gDvc699DwLWELhnyuUp
W1uyOPEa5w14zcmq32P+pIvq662hGR+lME7ms5hZBXVpM6wLkowYhyF/zsLe
/Frmjpfz/KqQ1oZ3dfAZsa4b4yMBuL+bC3tcEP4y46EN2i+BPnI17PMK5OhO
yLM5eCbmCK8v+JPhCT878dyeJ2A8Yj5rWsOYPMILvD+s0SLa8mXJ1sVQrxYs
YPcrK6NN5eXrz0yZsuxgSUkpKy4eiB+XrfLQDnn8OxnNJku+tNt3kShvgZp3
D+rRdft+jWYes/OHmDrMp2twTsU6FY83DxL1/wwJCcmfP3x2bfg=
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{-10.5, -10.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{10.5, 10.5}, {-6.9999999732051, 
                    1.0000001875642788`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {440.99999999999983`, 95.00000147371931}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] (1 - Slot["Input"])& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "And2"], 
                    NeuralNetworks`NetPath["Nodes", "And3"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "And2"], 
                    NeuralNetworks`NetPath["Nodes", "And3"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8661936729235067`*^9, 3.866193719522315*^9, 3.866193854653054*^9, 
   3.8661939701567783`*^9, 3.866194193203162*^9, {3.86619426437245*^9, 
   3.8661942853855553`*^9}, 3.866194422064487*^9, {3.866194510477776*^9, 
   3.866194533365034*^9}, 3.866195580467773*^9, 3.866195666326882*^9, 
   3.866195874042478*^9, 3.866195962363015*^9, 3.8661960723532343`*^9, 
   3.866196916346361*^9, 3.866197745000691*^9, 3.866197831548813*^9, 
   3.866197966449315*^9, 3.866198325803348*^9, 3.866198357338242*^9, 
   3.866198402343198*^9, 3.866198437438129*^9, 3.866198731300597*^9, 
   3.866198837507328*^9, 3.8661990030781393`*^9, {3.8661991711354923`*^9, 
   3.866199184612659*^9}, 3.866199263780757*^9, 3.8661994559635687`*^9, 
   3.8661994881664333`*^9, 3.8661996046868963`*^9, {3.8661996605033693`*^9, 
   3.866199705523334*^9}, 3.866199740661742*^9, {3.8661997865960007`*^9, 
   3.866199804961875*^9}, 3.866199836376853*^9, 3.8661999003697557`*^9, {
   3.866199961180541*^9, 3.8661999668393087`*^9}, 3.8662000216035624`*^9, 
   3.866200122744585*^9, 3.866200190282877*^9, 3.8662003468838997`*^9, {
   3.8662004110705833`*^9, 3.866200428421989*^9}, 3.866200489189749*^9, {
   3.866200545891322*^9, 3.866200550726336*^9}, {3.866200601470172*^9, 
   3.866200606450169*^9}, 3.866200651360591*^9, {3.866200992791257*^9, 
   3.866200997582202*^9}, {3.866201059649849*^9, 3.866201086344496*^9}, {
   3.8662011325558243`*^9, 3.86620114915915*^9}, 3.866201195583305*^9, 
   3.866201521937921*^9, 3.86620156156693*^9, {3.866201597800407*^9, 
   3.866201615850822*^9}, {3.866201668589609*^9, 3.866201702240821*^9}, {
   3.866201786473341*^9, 3.866201813457296*^9}, {3.866201845645986*^9, 
   3.866201867547359*^9}, {3.866201897637299*^9, 3.866201940042804*^9}, 
   3.8662019865208597`*^9, {3.866202029183531*^9, 3.866202077032968*^9}, 
   3.866202166585845*^9, {3.866202242542129*^9, 3.8662022668579817`*^9}, {
   3.86620229746747*^9, 3.866202314853365*^9}, 3.866202415528615*^9, 
   3.866203610059395*^9, 3.866203657128476*^9, {3.866203694675993*^9, 
   3.866203710816649*^9}, 3.866203979251251*^9, {3.8662040375052032`*^9, 
   3.866204042992087*^9}, 3.8662041317218533`*^9, {3.866204185833433*^9, 
   3.866204190730879*^9}, {3.866204226176591*^9, 3.866204246904665*^9}, 
   3.8662088007040997`*^9, {3.866208844067833*^9, 3.866208867501924*^9}, {
   3.8662089108821907`*^9, 3.866208940359971*^9}, 3.8662089750157003`*^9, 
   3.866253893123464*^9, 3.866254020267384*^9, 3.8662544559911613`*^9, 
   3.866256907943182*^9, 3.866256949546817*^9, {3.86625719987166*^9, 
   3.866257212327379*^9}, 3.8662573454457006`*^9, 3.866257728122118*^9, 
   3.8662619368623543`*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"3cfb66f9-06f2-48b9-bfb2-c729d5a8fa51"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hna", "=", 
  RowBox[{"HardNeuralAND", "[", 
   RowBox[{"2", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8662619380720997`*^9, 3.866261941526264*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"5917a765-5922-48a4-9974-d699554bb0ff"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"HardInclu..\"", "\"HardInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "HardInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"HardInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["HardInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Min\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And1\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Min", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And1", Bold], 
                    HoldForm[
                    AggregationLayer[Min]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{-10.5, -10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{10.5, 10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {330.9999999999999, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8662619420083923`*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"8b8b16bc-98c2-4150-a2ba-b59c0d220dac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"nai", "=", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"na", ",", 
    RowBox[{"Method", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Random\>\"", ",", 
       RowBox[{"\"\<Weights\>\"", "->", 
        RowBox[{"DiscreteUniformDistribution", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "]"}]}]}], "}"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"hnai", "=", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"hna", ",", 
    RowBox[{"Method", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Random\>\"", ",", 
       RowBox[{"\"\<Weights\>\"", "->", 
        RowBox[{"DiscreteUniformDistribution", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "]"}]}]}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.866257003205008*^9, 3.866257041942666*^9}, {
   3.866257169480234*^9, 3.866257209352158*^9}, 3.8662573475198307`*^9, {
   3.866257394879364*^9, 3.866257403620302*^9}, {3.866261988765354*^9, 
   3.866261995381384*^9}, 3.866262034885824*^9, {3.866262094990986*^9, 
   3.86626211569951*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"98d9df60-b6f8-4a49-8572-30ebeb35b78a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-5.999999999999998, 
                    1.6076938217470707`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"SoftInclu..\"", "\"SoftInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "SoftInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-5.449999985262805, 
                    0.5500001460321887}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999985262805, 
                    0.5500001460321887}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}
                    , {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-5.999999999999998, 1.6076938217470707`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"SoftInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["SoftInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmntoFEccxy8mPuoDFIlYaEiFgn8oaNSCSlJMBEXoYVGiggZzdzOzd6dJ
TGKoInLQBxRRKFZEEfpHmrizKygqiLbgC5Ggoqj4qhaK/uGjFILaSqTJ9fe7
nOFuspvbe+3O5u4Lk+NCdvc7n/x+M/Ob2Vn+ljVsjMfjaZ8AP9b4vq5ta/Pt
XDsVvtQ3t4eUZkpWNW+nCm1b7C+FXy6E9hW0Mk9MXk9RBoqWBALdlZTyLxnj
OxjlnYyqN+DzH2jRhD8seH7hsD6ZUnUpcAoBm0OMqFfh8zVyMmsJlxcUv8bG
E1MVRV3OCO8AZkeB2UPgMTASq0Llx9jhsZB/nwOjrYP5xx+ky8mk/Z3wmFHD
LxTqnobjFaXaDwrll6Gf77Lk9CaWy4QfhPuGg0Rd5vPp5cJjXcsPeSmErwZW
P0Jfb2WSh/GG1/0OnHSI1V34Pwj71AqcQyzYcA0/zEdF0b6Afn4H/e2B1p8B
q35gdBfzGTi14LyB80cWtqTmFwx2zoA+NkJOHks1Jxo2wp/D5wm4x3bGtNos
WRlJOn7BoPop9hfi40raOYmxBeOVQrRNeB+LOZiNpOBHSNcnMI61Qd+vpxlj
94DzfojPtQZjux1yjF9rq/4Rxgkw+C2NOPsLOHfFrmO/fOyU9wTZzo/So3OA
w0/Qei3m5E1GtG9g3bsoEomMsdtvCtnCD/uNaw3gcd4Ks9jYR/g2rEHt8JeF
8sqvvl4fB2OTP14npY4zprXjWJhPTzlWXvhFIhfKIN58wOXPFNxeQaztCwb4
3Hz4sEE55hctiefp/RTceoDbhqamM+Nz+3zblTN+Ib8+G7icS7Ge7cZ5IFfP
lEBZ88O6ijF1N/DpM+E2ANyOuGAuyETfegYZZtQqKuaH6+qanqxc2RE1aAM1
NeRSeflngWyeIWn7oIzjD+bKzRBb/5rE3PlRlqdmSpsfzq3A7oAJt16oXRts
qDtlUVr8/P6TU2A996vJ3KDjfkm+jEoqy/y2bDk+HThdM2D3HzClBRRzibLE
D89d2OAer1gzPMUzhnyblFgp+TU0dE6Kn+mJcfcoHNZn2mFSYo3ID+v++N6v
yO4OjoV2mZRYI/KLr4vFeeISY6cm2mVQcpnyUxR9CRPPaBj/A8+97DQouQz5
YW4iKzH2CNFn2W1QchnyA3Z7DPY0V9ltzgUaxi++j/JeyNufnTDnAg3jp1B+
Ojn2tGfFudZUSfwUhc8T81Yh6nqnzLlAyfwo7xL4vSjQusyqhvjheT3Wskmx
F9CkOF+XWEN8GNO+F2LvgYTnrbIpzi9aArweJ69XtJ3OWnOFYvyCAbVKiL0+
3HNx2pwLFOOH72wK671TThtzibyx3BVqNag1NjptzCXy4ruq4pqvuF62LC++
O5e0ZqH8stOmXCTvsL0Cwvc6bcpF8jKqXhTWLeucNuUWlZaW4rs+bxP5jdL3
LPKiysoFW4W9lpfFete6quat3i/MHaed9uQmVVf7zyavm9XdTntyk4DZbaHu
WOG0p6KKKsqa/geMAYpw
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And1", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And2\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And2", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm0loFEEUQCfGDRHRixA3FEUwLmgimKiI+3IIuBAvok4yXVWd6Iwwbijo
oII3EVFQERU1pqv7IkQN4sWLOy4gChEUPYiipwQ1cUHH/zsjxE5PZtJTXdWR
flCBJGTqz8uvX1VdNRNqt62l/SKRyPbB8GVtze5FyWTNnnXD4ZvqxPY6liDa
qsQOwkiyorYYflgObTW0/pHAU6U6ACdUMyglPK06jjwJmL90Ebh7HvrzBiHm
UnQX+vMGeGsO/XlDj/Fpf92F/noPIfxC6M8blFrjwNnP0J83qMbPdHVHKW9R
HVOeKPdXX2OMBWffu/pjmhFTHVeeKPdHiHHyn9wj/G11tTVQdVx5otQfjNOJ
DndpWAMSlTH1EqX+GDFMh783fSj3EGX+NI1XdM89Y6OqeDyixF8qleoHY/eJ
w99T/LmKeApAiT+m8U0udW+pilgKRLq/urrLI8DXF8d6r0l2HIKQ7g9cnXPk
XoemWRNkxyEIqf4Ya1zZfdzy/TJjEIw0f9HoleGUmB8d/l70sfWKE2n+GOEN
Dne/GbMqZfXvE1L8uc+3/IiMvn3Gd3+QY6Xg66vD37No9Pxgv/uWgK/+Omse
f9d9vm2c4We/EvHNH6WnB0DNu+Ect7B+0fzqUwE++bPPIY+71LwL+Dt/+lSC
L/4g7w64PBt48J/UvK4I9wc5Vt9tzEINrK01RonuKwAI9Qe1bauLu1Y8mxTZ
T4AQ5o9SY5+Luw5dMxaK6iOAFOwP9l/FkHdHXdx9x/2uiCADTEH+4vGGYTBX
XHVx9w3q4CpRQQYYz/4IaZxKifnexd1nxowlIoMMMB78wdqOcubiLU01/kGP
GbPEhxlYeuVP163RMC5vuboj/DGehfsVaEDJy18qdas/zK8JcPQji7uLlDYN
8TvYAJLDX7oo88z4VRZvXzvvWvxXe7LekMVfugjPw2Cs3s7iDWqdcTcWsybJ
DTdw/OMPxyl4W0+J8SirN5xfCY/juk9V0AHC9ofnX5n9w6cevNnPTyi9VKI6
6CCg6xdHzpy55gR4udOTs05v5k1Ys5SpjlklmTsTZZSau/BZEnpZsWJnj96g
Nesxc57q2FWAtQz2AbNhzG2Dda2FdcvpJ4u/DvB8mlJruur3IAs8Z4CcmpvZ
F5zK1P/2XOPS4e8hzKlb8LVUvx/R4FyHa388L4V82gDvc699DwLWELhnyuUp
W1uyOPEa5w14zcmq32P+pIvq662hGR+lME7ms5hZBXVpM6wLkowYhyF/zsLe
/Frmjpfz/KqQ1oZ3dfAZsa4b4yMBuL+bC3tcEP4y46EN2i+BPnI17PMK5OhO
yLM5eCbmCK8v+JPhCT878dyeJ2A8Yj5rWsOYPMILvD+s0SLa8mXJ1sVQrxYs
YPcrK6NN5eXrz0yZsuxgSUkpKy4eiB+XrfLQDnn8OxnNJku+tNt3kShvgZp3
D+rRdft+jWYes/OHmDrMp2twTsU6FY83DxL1/wwJCcmfP3x2bfg=
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{-10.5, -10.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{10.5, 10.5}, {-6.9999999732051, 
                    1.0000001875642788`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-5.999999999999998, 
                    1.6076938217470707`*^-7}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {440.99999999999983`, 95.00000147371931}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 2}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] (1 - Slot["Input"])& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "And2"], 
                    NeuralNetworks`NetPath["Nodes", "And3"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "And2"], 
                    NeuralNetworks`NetPath["Nodes", "And3"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866257180376417*^9, 3.866257213334092*^9}, 
   3.866257348114056*^9, {3.866257395821082*^9, 3.8662574041094007`*^9}, 
   3.866257729398719*^9, 3.8662619987608643`*^9, 3.866262035728986*^9, {
   3.8662620864518347`*^9, 3.8662621166867723`*^9}},
 CellLabel->
  "Out[137]=",ExpressionUUID->"787a74ff-f32e-4cd7-bca7-a1d0645d56f5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"HardInclu..\"", "\"HardInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "HardInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"And1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"HardInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["HardInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Min\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"And1\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Min", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["And1", Bold], 
                    HoldForm[
                    AggregationLayer[Min]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{-10.5, -10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{10.5, 10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {330.9999999999999, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 2}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "And1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866257180376417*^9, 3.866257213334092*^9}, 
   3.866257348114056*^9, {3.866257395821082*^9, 3.8662574041094007`*^9}, 
   3.866257729398719*^9, 3.8662619987608643`*^9, 3.866262035728986*^9, {
   3.8662620864518347`*^9, 3.8662621168115673`*^9}},
 CellLabel->
  "Out[138]=",ExpressionUUID->"d4a16e25-b9b3-4b5d-8687-8cf62bf68dd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"nai", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"nai", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"nai", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"nai", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"hnai", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"hnai", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"hnai", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"hnai", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.866257249129908*^9, 3.866257297390627*^9}, {
  3.866257349887294*^9, 3.866257354578413*^9}, {3.866262005357366*^9, 
  3.866262013514595*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"dafdf46d-356b-4d7b-9a8c-dcc84bddc4f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9.99999993922529`*^-9", ",", "1.192093463942001`*^-7", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.192093463942001`*^-7", ",", "1.192093463942001`*^-7", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.192093463942001`*^-7", ",", "0.9999998807907104`", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "0.9999998807907104`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.866257251883191*^9, 3.866257297802621*^9}, 
   3.866257355337201*^9, {3.866257396710289*^9, 3.866257404997169*^9}, 
   3.866257731123135*^9, {3.866262018073142*^9, 3.866262039397167*^9}, {
   3.866262087614431*^9, 3.866262117617956*^9}},
 CellLabel->
  "Out[139]=",ExpressionUUID->"b776bf21-e2cc-422e-a2b5-750efd4db0bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1.1920928955078125`*^-7", ",", "1.1920928955078125`*^-7", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.1920928955078125`*^-7", ",", "1.1920928955078125`*^-7", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1.1920928955078125`*^-7", ",", "0.9999998807907104`", ",", 
     "0.9999998807907104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "0.9999998807907104`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.866257251883191*^9, 3.866257297802621*^9}, 
   3.866257355337201*^9, {3.866257396710289*^9, 3.866257404997169*^9}, 
   3.866257731123135*^9, {3.866262018073142*^9, 3.866262039397167*^9}, {
   3.866262087614431*^9, 3.8662621177007504`*^9}},
 CellLabel->
  "Out[140]=",ExpressionUUID->"867f2720-f93d-4b24-a38e-15c6fb778bbd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"no", "=", 
  RowBox[{"NeuralOR", "[", 
   RowBox[{"2", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8662544570315437`*^9, 3.8662544599342737`*^9}, {
  3.8662569092034893`*^9, 3.8662569104428473`*^9}, {3.866256953004019*^9, 
  3.866256953155908*^9}, {3.866257737595278*^9, 3.866257737726213*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"e3aa3aeb-5ff0-4b6f-8781-892de7a748a8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-6.999999999999997, 
                    1.875642792038249*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"SoftInclu..\"", "\"SoftInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "SoftInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -13.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.8890871923183172`, 
                    3.889087400733702}, {-6.449999985262805, 
                    0.5500001728270857}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334004,
                     0.707106762239694}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.449999985262805, 
                    0.5500001728270857}, {-0.25, 0}, 
                    Offset[8], {1.000000026794896, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.999999999999997, 1.875642792038249*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"SoftInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["SoftInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmntoFEccxy8mPuoDFIlYaEiFgn8oaNSCSlJMBEXoYVGiggZzdzOzd6dJ
TGKoInLQBxRRKFZEEfpHmrizKygqiLbgC5Ggoqj4qhaK/uGjFILaSqTJ9fe7
nOFuspvbe+3O5u4Lk+NCdvc7n/x+M/Ob2Vn+ljVsjMfjaZ8AP9b4vq5ta/Pt
XDsVvtQ3t4eUZkpWNW+nCm1b7C+FXy6E9hW0Mk9MXk9RBoqWBALdlZTyLxnj
OxjlnYyqN+DzH2jRhD8seH7hsD6ZUnUpcAoBm0OMqFfh8zVyMmsJlxcUv8bG
E1MVRV3OCO8AZkeB2UPgMTASq0Llx9jhsZB/nwOjrYP5xx+ky8mk/Z3wmFHD
LxTqnobjFaXaDwrll6Gf77Lk9CaWy4QfhPuGg0Rd5vPp5cJjXcsPeSmErwZW
P0Jfb2WSh/GG1/0OnHSI1V34Pwj71AqcQyzYcA0/zEdF0b6Afn4H/e2B1p8B
q35gdBfzGTi14LyB80cWtqTmFwx2zoA+NkJOHks1Jxo2wp/D5wm4x3bGtNos
WRlJOn7BoPop9hfi40raOYmxBeOVQrRNeB+LOZiNpOBHSNcnMI61Qd+vpxlj
94DzfojPtQZjux1yjF9rq/4Rxgkw+C2NOPsLOHfFrmO/fOyU9wTZzo/So3OA
w0/Qei3m5E1GtG9g3bsoEomMsdtvCtnCD/uNaw3gcd4Ks9jYR/g2rEHt8JeF
8sqvvl4fB2OTP14npY4zprXjWJhPTzlWXvhFIhfKIN58wOXPFNxeQaztCwb4
3Hz4sEE55hctiefp/RTceoDbhqamM+Nz+3zblTN+Ib8+G7icS7Ge7cZ5IFfP
lEBZ88O6ijF1N/DpM+E2ANyOuGAuyETfegYZZtQqKuaH6+qanqxc2RE1aAM1
NeRSeflngWyeIWn7oIzjD+bKzRBb/5rE3PlRlqdmSpsfzq3A7oAJt16oXRts
qDtlUVr8/P6TU2A996vJ3KDjfkm+jEoqy/y2bDk+HThdM2D3HzClBRRzibLE
D89d2OAer1gzPMUzhnyblFgp+TU0dE6Kn+mJcfcoHNZn2mFSYo3ID+v++N6v
yO4OjoV2mZRYI/KLr4vFeeISY6cm2mVQcpnyUxR9CRPPaBj/A8+97DQouQz5
YW4iKzH2CNFn2W1QchnyA3Z7DPY0V9ltzgUaxi++j/JeyNufnTDnAg3jp1B+
Ojn2tGfFudZUSfwUhc8T81Yh6nqnzLlAyfwo7xL4vSjQusyqhvjheT3Wskmx
F9CkOF+XWEN8GNO+F2LvgYTnrbIpzi9aArweJ69XtJ3OWnOFYvyCAbVKiL0+
3HNx2pwLFOOH72wK671TThtzibyx3BVqNag1NjptzCXy4ruq4pqvuF62LC++
O5e0ZqH8stOmXCTvsL0Cwvc6bcpF8jKqXhTWLeucNuUWlZaW4rs+bxP5jdL3
LPKiysoFW4W9lpfFete6quat3i/MHaed9uQmVVf7zyavm9XdTntyk4DZbaHu
WOG0p6KKKsqa/geMAYpw
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or1", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or2\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or2", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm0loFEEUQCfGDRHRixA3FEUwLmgimKiI+3IIuBAvok4yXVWd6Iwwbijo
oII3EVFQERU1pqv7IkQN4sWLOy4gChEUPYiipwQ1cUHH/zsjxE5PZtJTXdWR
flCBJGTqz8uvX1VdNRNqt62l/SKRyPbB8GVtze5FyWTNnnXD4ZvqxPY6liDa
qsQOwkiyorYYflgObTW0/pHAU6U6ACdUMyglPK06jjwJmL90Ebh7HvrzBiHm
UnQX+vMGeGsO/XlDj/Fpf92F/noPIfxC6M8blFrjwNnP0J83qMbPdHVHKW9R
HVOeKPdXX2OMBWffu/pjmhFTHVeeKPdHiHHyn9wj/G11tTVQdVx5otQfjNOJ
DndpWAMSlTH1EqX+GDFMh783fSj3EGX+NI1XdM89Y6OqeDyixF8qleoHY/eJ
w99T/LmKeApAiT+m8U0udW+pilgKRLq/urrLI8DXF8d6r0l2HIKQ7g9cnXPk
XoemWRNkxyEIqf4Ya1zZfdzy/TJjEIw0f9HoleGUmB8d/l70sfWKE2n+GOEN
Dne/GbMqZfXvE1L8uc+3/IiMvn3Gd3+QY6Xg66vD37No9Pxgv/uWgK/+Omse
f9d9vm2c4We/EvHNH6WnB0DNu+Ect7B+0fzqUwE++bPPIY+71LwL+Dt/+lSC
L/4g7w64PBt48J/UvK4I9wc5Vt9tzEINrK01RonuKwAI9Qe1bauLu1Y8mxTZ
T4AQ5o9SY5+Luw5dMxaK6iOAFOwP9l/FkHdHXdx9x/2uiCADTEH+4vGGYTBX
XHVx9w3q4CpRQQYYz/4IaZxKifnexd1nxowlIoMMMB78wdqOcubiLU01/kGP
GbPEhxlYeuVP163RMC5vuboj/DGehfsVaEDJy18qdas/zK8JcPQji7uLlDYN
8TvYAJLDX7oo88z4VRZvXzvvWvxXe7LekMVfugjPw2Cs3s7iDWqdcTcWsybJ
DTdw/OMPxyl4W0+J8SirN5xfCY/juk9V0AHC9ofnX5n9w6cevNnPTyi9VKI6
6CCg6xdHzpy55gR4udOTs05v5k1Ys5SpjlklmTsTZZSau/BZEnpZsWJnj96g
Nesxc57q2FWAtQz2AbNhzG2Dda2FdcvpJ4u/DvB8mlJruur3IAs8Z4CcmpvZ
F5zK1P/2XOPS4e8hzKlb8LVUvx/R4FyHa388L4V82gDvc699DwLWELhnyuUp
W1uyOPEa5w14zcmq32P+pIvq662hGR+lME7ms5hZBXVpM6wLkowYhyF/zsLe
/Frmjpfz/KqQ1oZ3dfAZsa4b4yMBuL+bC3tcEP4y46EN2i+BPnI17PMK5OhO
yLM5eCbmCK8v+JPhCT878dyeJ2A8Yj5rWsOYPMILvD+s0SLa8mXJ1sVQrxYs
YPcrK6NN5eXrz0yZsuxgSUkpKy4eiB+XrfLQDnn8OxnNJku+tNt3kShvgZp3
D+rRdft+jWYes/OHmDrMp2twTsU6FY83DxL1/wwJCcmfP3x2bfg=
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmn2IFVUYxu+6mm5ZaqhU5KJQoqFEqGhE2kVjUzJiY1H/MO7H+bh7dVd3
1woputIHIQSV+I8mKLbunJkIS0H/UBEkKCghxQ/EAqMiP4qo/P5oe869d5at
nTO7e3fuzJk794GzsLvMnYffznve9zmzU1JrGtmwWCzWMQpfGpOvxdvbk+tf
Gotvmlo7mnkrJYtb11FO2+elavHDWVgvYg3HYlR0Y11jzNjQ1mbVxfTS0qAN
9KciP3ud40Q0xmLdNUH7Kips/AqLiIOcW48F7S0WDn4XHRlScZsx8QFj1pgA
7WnPL5HYPZZT8SF43XLmaF5ATSdzudywAOxpz88WIWI6eB1QPItyfU2pmOOz
rdDwK6i7RvYPsPpRwfAfMNyWyeyc6JOhkPEriLE9dzNivgVe1xUc/0SPWcvY
lhFlthJKfrYIsaagh3zmUtMnGDPjZbQQan62KDUXgdUpJUciLPTp+jLcuiL4
SclaRUZpy9euM8er2Bvf9DjDVAw/W9ms9QDmne0uNe1lhqk4frbwLM5F3X7j
wvGAnImGeJuK5SclZ2pOjLRLhrkFxu+3tHTeV+ItKpqfLZlhMO98lM98zhzP
U2okSsgwkeBnK5MWMzg1D6lqGvvmV5wbswfxkZHiV1BPhjmnyjCo6Y+TSWvC
AD4sgvwKymcYZmzIn806c/wDv2/tJ8NElp8tmWEwF37u0qdPoqYXKi6PPD9b
nHc9B1ZnVByRcT51yDBVfr3U1GTdhbzcAV5/KTheQd5+PZHYPqp4SZWfg2SG
YcTYoaxpJn7gaRPsal8I2qvO4tx6klHjWxXHBfMzRxnrmha0T52Fmq7F3kfB
69L/+TU0vOJFhomEmpt3jUOf3tQ7wxT52Wdkv2KufFmjd6taCj14Jjge7sOv
p0+LLzNp44mgfeotmWGMZc8uau9T03aG4dTYOsAME1nV1Y1pQt2+w9TvYZBh
xOpc7vDwoL1qqvz8l38PQ8VulwxznFJrQdBmNdR/5mf06Qa3DINnUWSTxqSg
zGqoPvmjmGFeBa/LCo5XOTXf6JVhoixlfkuljIc4FZ0uNf09evXzfprVUP3m
30zafAqsjrpw3Mf5rkf9MKuhBnR+0JNhiPGbguFNrI0RzDCDOn+RGQZ742aw
uuPIsZhhPP5fsqUar7dLua6+ftaaeHzVSZlfnFb8mdWnJ0+evXaI3sKgIfjs
rkH/WM6o+ZPyPQwTWxjrGu+dXe005L/zypU770FNvwteNxQcfwfHZrmHemFY
M3lWJ+m09Qjmnb0uffoY5+Z8r+6niTzfZzgxl7hmGCoMQjof9vq+Aaks+7TM
MJQa68DqbwXDy5iH1re07BtZjvv7qLL2OcY+ebCfDHO28B4mtGe2vswJhBhP
g9V3So7E3I9ePtUPLx7LtzlL9l/0Ye6aYYh4L5u1RvvlyQP5PqeiT9/vmmGo
+Bk9aIXfvkpUYHM+5+Jx7I1HVDUdlK9BKuCcJN/DmCvA65cqv9KVSn1xrzy/
KZ7jhImfVpLniHaGCdpLVVVJ/QsPvUMI
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or4", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{-10.5, -10.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    
                    Offset[{10.5, 10.5}, {-7.9999999732051, 
                    1.000000214359176}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {495.99999999999983`, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] Slot["Input"]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract[1, #]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "Or2"], 
                    NeuralNetworks`NetPath["Nodes", "Or3"], 
                    NeuralNetworks`NetPath["Nodes", "Or4"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "Or2"], 
                    NeuralNetworks`NetPath["Nodes", "Or3"], 
                    NeuralNetworks`NetPath["Nodes", "Or4"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.86625446265337*^9, 3.8662569535868797`*^9, 
  3.866257227229979*^9, 3.866257358157352*^9, 3.866257413485396*^9, 
  3.8662577381645412`*^9, 3.866264372546954*^9},
 CellLabel->
  "Out[232]=",ExpressionUUID->"2cc494ae-e666-45d4-83e7-44f354b8d816"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hno", "=", 
  RowBox[{"HardNeuralOR", "[", 
   RowBox[{"2", ",", "3"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866264375423761*^9, 3.8662643813021517`*^9}},
 CellLabel->
  "In[243]:=",ExpressionUUID->"79d90c74-a424-4552-8676-094eb26b65d2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"HardInclu..\"", "\"HardInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "HardInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"HardInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["HardInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Max\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or1\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Max", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or1", Bold], 
                    HoldForm[
                    AggregationLayer[Max]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{-10.5, -10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{10.5, 10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {330.9999999999999, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.866264381804102*^9, {3.8662644173428698`*^9, 3.866264444128418*^9}, 
   3.866264547867168*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"912142d0-d10b-4893-8d7b-bedc158488b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"noi", "=", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"no", ",", 
    RowBox[{"Method", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Random\>\"", ",", 
       RowBox[{"\"\<Weights\>\"", "->", 
        RowBox[{"DiscreteUniformDistribution", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "]"}]}]}], "}"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"hnoi", "=", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"hno", ",", 
    RowBox[{"Method", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Random\>\"", ",", 
       RowBox[{"\"\<Weights\>\"", "->", 
        RowBox[{"DiscreteUniformDistribution", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "]"}]}]}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.866257229168396*^9, 3.8662572332483683`*^9}, {
  3.866257359580824*^9, 3.866257382181706*^9}, {3.866257415263549*^9, 
  3.866257415413451*^9}, {3.866264473128107*^9, 3.866264479438737*^9}, {
  3.866264565265526*^9, 3.866264584158683*^9}},
 CellLabel->
  "In[256]:=",ExpressionUUID->"0943e589-ee27-4747-b56e-a491d9ea4069"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-6.999999999999997, 
                    1.875642792038249*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"SoftInclu..\"", "\"SoftInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "SoftInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -13.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.8890871923183172`, 
                    3.889087400733702}, {-6.449999985262805, 
                    0.5500001728270857}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334004,
                     0.707106762239694}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.449999985262805, 
                    0.5500001728270857}, {-0.25, 0}, 
                    Offset[8], {1.000000026794896, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-6.999999999999997, 1.875642792038249*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"SoftInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["SoftInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmntoFEccxy8mPuoDFIlYaEiFgn8oaNSCSlJMBEXoYVGiggZzdzOzd6dJ
TGKoInLQBxRRKFZEEfpHmrizKygqiLbgC5Ggoqj4qhaK/uGjFILaSqTJ9fe7
nOFuspvbe+3O5u4Lk+NCdvc7n/x+M/Ob2Vn+ljVsjMfjaZ8AP9b4vq5ta/Pt
XDsVvtQ3t4eUZkpWNW+nCm1b7C+FXy6E9hW0Mk9MXk9RBoqWBALdlZTyLxnj
OxjlnYyqN+DzH2jRhD8seH7hsD6ZUnUpcAoBm0OMqFfh8zVyMmsJlxcUv8bG
E1MVRV3OCO8AZkeB2UPgMTASq0Llx9jhsZB/nwOjrYP5xx+ky8mk/Z3wmFHD
LxTqnobjFaXaDwrll6Gf77Lk9CaWy4QfhPuGg0Rd5vPp5cJjXcsPeSmErwZW
P0Jfb2WSh/GG1/0OnHSI1V34Pwj71AqcQyzYcA0/zEdF0b6Afn4H/e2B1p8B
q35gdBfzGTi14LyB80cWtqTmFwx2zoA+NkJOHks1Jxo2wp/D5wm4x3bGtNos
WRlJOn7BoPop9hfi40raOYmxBeOVQrRNeB+LOZiNpOBHSNcnMI61Qd+vpxlj
94DzfojPtQZjux1yjF9rq/4Rxgkw+C2NOPsLOHfFrmO/fOyU9wTZzo/So3OA
w0/Qei3m5E1GtG9g3bsoEomMsdtvCtnCD/uNaw3gcd4Ks9jYR/g2rEHt8JeF
8sqvvl4fB2OTP14npY4zprXjWJhPTzlWXvhFIhfKIN58wOXPFNxeQaztCwb4
3Hz4sEE55hctiefp/RTceoDbhqamM+Nz+3zblTN+Ib8+G7icS7Ge7cZ5IFfP
lEBZ88O6ijF1N/DpM+E2ANyOuGAuyETfegYZZtQqKuaH6+qanqxc2RE1aAM1
NeRSeflngWyeIWn7oIzjD+bKzRBb/5rE3PlRlqdmSpsfzq3A7oAJt16oXRts
qDtlUVr8/P6TU2A996vJ3KDjfkm+jEoqy/y2bDk+HThdM2D3HzClBRRzibLE
D89d2OAer1gzPMUzhnyblFgp+TU0dE6Kn+mJcfcoHNZn2mFSYo3ID+v++N6v
yO4OjoV2mZRYI/KLr4vFeeISY6cm2mVQcpnyUxR9CRPPaBj/A8+97DQouQz5
YW4iKzH2CNFn2W1QchnyA3Z7DPY0V9ltzgUaxi++j/JeyNufnTDnAg3jp1B+
Ojn2tGfFudZUSfwUhc8T81Yh6nqnzLlAyfwo7xL4vSjQusyqhvjheT3Wskmx
F9CkOF+XWEN8GNO+F2LvgYTnrbIpzi9aArweJ69XtJ3OWnOFYvyCAbVKiL0+
3HNx2pwLFOOH72wK671TThtzibyx3BVqNag1NjptzCXy4ruq4pqvuF62LC++
O5e0ZqH8stOmXCTvsL0Cwvc6bcpF8jKqXhTWLeucNuUWlZaW4rs+bxP5jdL3
LPKiysoFW4W9lpfFete6quat3i/MHaed9uQmVVf7zyavm9XdTntyk4DZbaHu
WOG0p6KKKsqa/geMAYpw
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or1", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or2\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or2", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm0loFEEUQCfGDRHRixA3FEUwLmgimKiI+3IIuBAvok4yXVWd6Iwwbijo
oII3EVFQERU1pqv7IkQN4sWLOy4gChEUPYiipwQ1cUHH/zsjxE5PZtJTXdWR
flCBJGTqz8uvX1VdNRNqt62l/SKRyPbB8GVtze5FyWTNnnXD4ZvqxPY6liDa
qsQOwkiyorYYflgObTW0/pHAU6U6ACdUMyglPK06jjwJmL90Ebh7HvrzBiHm
UnQX+vMGeGsO/XlDj/Fpf92F/noPIfxC6M8blFrjwNnP0J83qMbPdHVHKW9R
HVOeKPdXX2OMBWffu/pjmhFTHVeeKPdHiHHyn9wj/G11tTVQdVx5otQfjNOJ
DndpWAMSlTH1EqX+GDFMh783fSj3EGX+NI1XdM89Y6OqeDyixF8qleoHY/eJ
w99T/LmKeApAiT+m8U0udW+pilgKRLq/urrLI8DXF8d6r0l2HIKQ7g9cnXPk
XoemWRNkxyEIqf4Ya1zZfdzy/TJjEIw0f9HoleGUmB8d/l70sfWKE2n+GOEN
Dne/GbMqZfXvE1L8uc+3/IiMvn3Gd3+QY6Xg66vD37No9Pxgv/uWgK/+Omse
f9d9vm2c4We/EvHNH6WnB0DNu+Ect7B+0fzqUwE++bPPIY+71LwL+Dt/+lSC
L/4g7w64PBt48J/UvK4I9wc5Vt9tzEINrK01RonuKwAI9Qe1bauLu1Y8mxTZ
T4AQ5o9SY5+Luw5dMxaK6iOAFOwP9l/FkHdHXdx9x/2uiCADTEH+4vGGYTBX
XHVx9w3q4CpRQQYYz/4IaZxKifnexd1nxowlIoMMMB78wdqOcubiLU01/kGP
GbPEhxlYeuVP163RMC5vuboj/DGehfsVaEDJy18qdas/zK8JcPQji7uLlDYN
8TvYAJLDX7oo88z4VRZvXzvvWvxXe7LekMVfugjPw2Cs3s7iDWqdcTcWsybJ
DTdw/OMPxyl4W0+J8SirN5xfCY/juk9V0AHC9ofnX5n9w6cevNnPTyi9VKI6
6CCg6xdHzpy55gR4udOTs05v5k1Ys5SpjlklmTsTZZSau/BZEnpZsWJnj96g
Nesxc57q2FWAtQz2AbNhzG2Dda2FdcvpJ4u/DvB8mlJruur3IAs8Z4CcmpvZ
F5zK1P/2XOPS4e8hzKlb8LVUvx/R4FyHa388L4V82gDvc699DwLWELhnyuUp
W1uyOPEa5w14zcmq32P+pIvq662hGR+lME7ms5hZBXVpM6wLkowYhyF/zsLe
/Frmjpfz/KqQ1oZ3dfAZsa4b4yMBuL+bC3tcEP4y46EN2i+BPnI17PMK5OhO
yLM5eCbmCK8v+JPhCT878dyeJ2A8Yj5rWsOYPMILvD+s0SLa8mXJ1sVQrxYs
YPcrK6NN5eXrz0yZsuxgSUkpKy4eiB+XrfLQDnn8OxnNJku+tNt3kShvgZp3
D+rRdft+jWYes/OHmDrMp2twTsU6FY83DxL1/wwJCcmfP3x2bfg=
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztmn2IFVUYxu+6mm5ZaqhU5KJQoqFEqGhE2kVjUzJiY1H/MO7H+bh7dVd3
1woputIHIQSV+I8mKLbunJkIS0H/UBEkKCghxQ/EAqMiP4qo/P5oe869d5at
nTO7e3fuzJk794GzsLvMnYffznve9zmzU1JrGtmwWCzWMQpfGpOvxdvbk+tf
Gotvmlo7mnkrJYtb11FO2+elavHDWVgvYg3HYlR0Y11jzNjQ1mbVxfTS0qAN
9KciP3ud40Q0xmLdNUH7Kips/AqLiIOcW48F7S0WDn4XHRlScZsx8QFj1pgA
7WnPL5HYPZZT8SF43XLmaF5ATSdzudywAOxpz88WIWI6eB1QPItyfU2pmOOz
rdDwK6i7RvYPsPpRwfAfMNyWyeyc6JOhkPEriLE9dzNivgVe1xUc/0SPWcvY
lhFlthJKfrYIsaagh3zmUtMnGDPjZbQQan62KDUXgdUpJUciLPTp+jLcuiL4
SclaRUZpy9euM8er2Bvf9DjDVAw/W9ms9QDmne0uNe1lhqk4frbwLM5F3X7j
wvGAnImGeJuK5SclZ2pOjLRLhrkFxu+3tHTeV+ItKpqfLZlhMO98lM98zhzP
U2okSsgwkeBnK5MWMzg1D6lqGvvmV5wbswfxkZHiV1BPhjmnyjCo6Y+TSWvC
AD4sgvwKymcYZmzIn806c/wDv2/tJ8NElp8tmWEwF37u0qdPoqYXKi6PPD9b
nHc9B1ZnVByRcT51yDBVfr3U1GTdhbzcAV5/KTheQd5+PZHYPqp4SZWfg2SG
YcTYoaxpJn7gaRPsal8I2qvO4tx6klHjWxXHBfMzRxnrmha0T52Fmq7F3kfB
69L/+TU0vOJFhomEmpt3jUOf3tQ7wxT52Wdkv2KufFmjd6taCj14Jjge7sOv
p0+LLzNp44mgfeotmWGMZc8uau9T03aG4dTYOsAME1nV1Y1pQt2+w9TvYZBh
xOpc7vDwoL1qqvz8l38PQ8VulwxznFJrQdBmNdR/5mf06Qa3DINnUWSTxqSg
zGqoPvmjmGFeBa/LCo5XOTXf6JVhoixlfkuljIc4FZ0uNf09evXzfprVUP3m
30zafAqsjrpw3Mf5rkf9MKuhBnR+0JNhiPGbguFNrI0RzDCDOn+RGQZ742aw
uuPIsZhhPP5fsqUar7dLua6+ftaaeHzVSZlfnFb8mdWnJ0+evXaI3sKgIfjs
rkH/WM6o+ZPyPQwTWxjrGu+dXe005L/zypU770FNvwteNxQcfwfHZrmHemFY
M3lWJ+m09Qjmnb0uffoY5+Z8r+6niTzfZzgxl7hmGCoMQjof9vq+Aaks+7TM
MJQa68DqbwXDy5iH1re07BtZjvv7qLL2OcY+ebCfDHO28B4mtGe2vswJhBhP
g9V3So7E3I9ePtUPLx7LtzlL9l/0Ye6aYYh4L5u1RvvlyQP5PqeiT9/vmmGo
+Bk9aIXfvkpUYHM+5+Jx7I1HVDUdlK9BKuCcJN/DmCvA65cqv9KVSn1xrzy/
KZ7jhImfVpLniHaGCdpLVVVJ/QsPvUMI
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or4", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{-10.5, -10.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    
                    Offset[{10.5, 10.5}, {-7.9999999732051, 
                    1.000000214359176}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-6.999999999999997, 
                    1.875642792038249*^-7}, {-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {495.99999999999983`, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 0\
, ContentPadding -> False, BaselinePosition -> 0, StripOnInput -> False], 
                    True -> FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 2}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] Slot["Input"]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract[1, #]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "Or2"], 
                    NeuralNetworks`NetPath["Nodes", "Or3"], 
                    NeuralNetworks`NetPath["Nodes", "Or4"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "SoftInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "Or2"], 
                    NeuralNetworks`NetPath["Nodes", "Or3"], 
                    NeuralNetworks`NetPath["Nodes", "Or4"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.866257234115361*^9, {3.866257360822538*^9, 3.866257382680305*^9}, 
   3.866257415771297*^9, 3.86625773935391*^9, 3.866264480088043*^9, {
   3.866264554457769*^9, 3.8662645848238783`*^9}},
 CellLabel->
  "Out[256]=",ExpressionUUID->"32503158-3e92-4c53-95de-26a338db7c6d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"HardInclu..\"", "\"HardInclude\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "HardInclude", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Or1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"OutputClip\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Weights\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"WeightsCl..\"", "\"WeightsClip\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "WeightsClip", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"2\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 3\[Times]2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"HardInclude\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["HardInclude", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Max\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Or1\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Max", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Or1", Bold], 
                    HoldForm[
                    AggregationLayer[Max]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"OutputClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["OutputClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{-10.5, -10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{10.5, 10.5}, {-4.999999973205101, 
                    1.0000001339744848`}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Weights\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Weights", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"WeightsClip\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["WeightsClip", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}, {-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 21, 21, 8, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {330.9999999999999, 95.00000147371932}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29.50000000000001, 26.5}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{3, 2}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {3, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {3, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "HardInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`Private`HardOR[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{3, 2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {3}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`AtomT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "HardInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "HardInclude"], 
                    NeuralNetworks`NetPath["Nodes", "Or1"], 
                    NeuralNetworks`NetPath["Nodes", "OutputClip"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Weights"], 
                    NeuralNetworks`NetPath["Nodes", "WeightsClip"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.866257234115361*^9, {3.866257360822538*^9, 3.866257382680305*^9}, 
   3.866257415771297*^9, 3.86625773935391*^9, 3.866264480088043*^9, {
   3.866264554457769*^9, 3.8662645849528637`*^9}},
 CellLabel->
  "Out[257]=",ExpressionUUID->"23c2ac7e-5d7c-46dc-bedf-219a2b9b788a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"noi", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"noi", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"noi", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"noi", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"hnoi", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"hnoi", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"hnoi", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"hnoi", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.866257312958334*^9, 3.866257319918173*^9}, {
  3.866257362319368*^9, 3.866257366373416*^9}, {3.8662644844404716`*^9, 
  3.866264492230301*^9}},
 CellLabel->
  "In[258]:=",ExpressionUUID->"77616312-21f2-420d-99d8-8255abc0d0bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9.99999993922529`*^-9", ",", "9.99999993922529`*^-9", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "9.99999993922529`*^-9", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "9.99999993922529`*^-9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8662573212770777`*^9, {3.866257366709992*^9, 3.866257383923696*^9}, 
   3.8662574164868927`*^9, 3.866257740547805*^9, 3.866264492697507*^9, {
   3.866264555596389*^9, 3.8662645856925383`*^9}},
 CellLabel->
  "Out[258]=",ExpressionUUID->"88de38ce-1c4d-4224-af58-94b2d3c168d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "9.99999993922529`*^-9", ",", "9.99999993922529`*^-9", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "9.99999993922529`*^-9", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "9.99999993922529`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.9999998807907104`", ",", "0.9999998807907104`", ",", 
     "9.99999993922529`*^-9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8662573212770777`*^9, {3.866257366709992*^9, 3.866257383923696*^9}, 
   3.8662574164868927`*^9, 3.866257740547805*^9, 3.866264492697507*^9, {
   3.866264555596389*^9, 3.86626458577728*^9}},
 CellLabel->
  "Out[259]=",ExpressionUUID->"1f5fdd13-a841-42e2-a2d4-3aaea2fe91d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nc", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NeuralAND", "[", 
      RowBox[{"2", ",", "5"}], "]"}], ",", 
     RowBox[{"NeuralNOT", "[", "5", "]"}], ",", 
     RowBox[{"NeuralOR", "[", 
      RowBox[{"5", ",", "2"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866193761711919*^9, 3.866193796351534*^9}, {
   3.866195584751376*^9, 3.866195585612679*^9}, {3.866195884413136*^9, 
   3.866195886517124*^9}, {3.866195970413229*^9, 3.8661959719491777`*^9}, {
   3.866196631027403*^9, 3.8661966341140947`*^9}, {3.866197116265538*^9, 
   3.866197151174675*^9}, {3.866197841482168*^9, 3.866197861964314*^9}, {
   3.866197906513908*^9, 3.866197912212264*^9}, {3.866198651076044*^9, 
   3.86619865467419*^9}, 3.866198857225202*^9, {3.866198927354841*^9, 
   3.8661989412581472`*^9}, {3.866199287890168*^9, 3.866199304792837*^9}, {
   3.866199336018935*^9, 3.866199376896884*^9}, {3.8662000405568457`*^9, 
   3.866200043587715*^9}, {3.8662090230901213`*^9, 3.8662090307731113`*^9}, {
   3.8662539227548637`*^9, 3.866253936379541*^9}, {3.866254031261208*^9, 
   3.866254044501729*^9}, {3.8662544871816673`*^9, 3.866254489823534*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"74191181-2eac-4da2-b49f-d3ecc9b686f6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {5, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] (1 - Slot["Input"])& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "And2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + 
                    Slot["Input"] (2 Slot["Weights"] - 1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT], "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2, 5}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2, 5}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {2, 5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Input"] Slot["Weights"]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{2, 5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {2, 5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract[1, #]& ], "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866193783327035*^9, 3.8661937970189543`*^9}, 
   3.866194452178722*^9, 3.866194559283293*^9, 3.8661946720358047`*^9, 
   3.866195972342383*^9, 3.866196080518572*^9, 3.86619663696775*^9, 
   3.866196943293044*^9, 3.866197117328504*^9, 3.866197151996231*^9, {
   3.8661978511190557`*^9, 3.866197862798052*^9}, 3.866197914174943*^9, 
   3.8661984720919228`*^9, 3.8661986550594063`*^9, {3.8661988485847282`*^9, 
   3.86619885765973*^9}, {3.86619893441411*^9, 3.866198941973524*^9}, 
   3.866199216205172*^9, {3.866199273775622*^9, 3.8661993773567057`*^9}, 
   3.866200044542045*^9, 3.8662020851299686`*^9, 3.8662021807147207`*^9, 
   3.86620898681768*^9, 3.866209031440731*^9, 3.866253573159274*^9, {
   3.866253903263445*^9, 3.866253936849839*^9}, {3.866254031860095*^9, 
   3.8662540454076767`*^9}, 3.866254490455283*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"5a2d126a-5e81-4d96-8321-692abe44b35c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetInitialize", "[", 
  RowBox[{"nc", ",", 
   RowBox[{"Method", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Random\>\"", ",", 
      RowBox[{"\"\<Weights\>\"", "->", 
       RowBox[{"UniformDistribution", "[", 
        RowBox[{"{", 
         RowBox[{"0.4", ",", "0.6"}], "}"}], "]"}]}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.866194891534843*^9, 3.866194966354525*^9}, {
   3.866195008035324*^9, 3.866195029999481*^9}, {3.866195099568722*^9, 
   3.866195119012136*^9}, 3.8661952612559347`*^9, {3.866195950039175*^9, 
   3.86619595218085*^9}, {3.8661971285597973`*^9, 3.8661971328073*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"250ca548-91df-4421-933c-c929a71f52fe"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{5, 2}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5, 2}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {5, 2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] (1 - Slot["Input"])& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5, 2}, 
                    NeuralNetworks`AtomT], "Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                    "And1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "And2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "And3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "And3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "2" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Not" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Weights"] + 
                    Slot["Input"] (2 Slot["Weights"] - 1)& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT], "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "Not", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Not", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>, 
                    "3" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|
                    "Weights" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{2, 5}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2, 5}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2, 5}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightsClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {2, 5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "SoftInclude" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    1 - Slot["Input"] Slot["Weights"]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5}, 
                    NeuralNetworks`AtomT], "Weights" -> 
                    NeuralNetworks`TensorT[{2, 5}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or1" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Log], 
                    "$Dimensions" -> {2, 5}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or2" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2, 5}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Exp], 
                    "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Or4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Subtract[1, #]& ], "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "OutputClip" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], "$Dimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightsClip", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "SoftInclude", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "Or4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Or4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "OutputClip", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.866197133362402*^9, 3.866197161812274*^9}, 
   3.866198517517473*^9, 3.866209040585647*^9, 3.866253915282928*^9, 
   3.866254061061184*^9, 3.866254515159128*^9},
 CellLabel->
  "Out[216]=",ExpressionUUID->"62a4a2a6-0381-4ae0-ae57-66d0daa6694c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Sigma]", "=", "5"}], ";"}]], "Input",
 CellChangeTimes->{{3.866087555464102*^9, 3.866087559087605*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"4aa755d8-3124-457b-b7c7-bc94995c991d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"LogisticSigmoid", "[", 
   RowBox[{"x", "+", "\[Sigma]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8660871072823067`*^9, 3.866087184835682*^9}, {
  3.866087402395151*^9, 3.866087402847766*^9}, {3.866087508003879*^9, 
  3.866087563248781*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"d4f1803c-fd5c-419d-8840-6ba01233da76"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"y", "=", 
      RowBox[{
       RowBox[{"2", "x"}], "-", "1"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"\[Sigma]", " ", "y"}], "-", "\[Sigma]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.866087263196965*^9, 3.866087329058784*^9}, {
  3.866087363475045*^9, 3.866087430323679*^9}, {3.866087469804036*^9, 
  3.866087486096569*^9}, {3.86608756713374*^9, 3.866087570640089*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"71fb29f5-bae2-4130-96df-c8c71471f088"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsRow", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"g", "[", "x", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
      RowBox[{"PlotRange", "->", "All"}], ",", 
      RowBox[{"GridLines", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", "/", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"g", "[", "x", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"GridLines", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", "/", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8660871135634747`*^9, 3.866087170118956*^9}, {
  3.8660872100798197`*^9, 3.866087237752391*^9}, {3.866087305227271*^9, 
  3.866087313328679*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"212e9eb4-7a06-41df-8dfb-07b43f581103"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{{{}, {}, 
        TagBox[
         {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
          Opacity[1.], LineBox[CompressedData["
1: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
yVWSH2C3AT1KgIZkJDN6td+pLVl/A8rfPdJG58+CjlissbUJbkC1j94r0Q8O
oGdP5Z+Zo9uALOqdlwQi2VCPZXsNutl1uE7/k3immx39UyT1mL95HVaa+/Wf
ljqI8rgvvpYtWIeK77VOxaZwog8u537SiluHyeee9NCdPIzmM9j8svJch2tF
vz1ONHGhWm9n6d9dW4elU8afp2140USDT8cLTq9De9wfntc2fOjcUSvFxoPr
8Mp7xm77Wn4UP3LCbHJzDf74vuEtOSuABqZPeFMOrEGi21JD3jEhtNP6QzJP
9Rp0UYseMnlyDBU5Z15+LmMN0ndzI6mtwmh52fCuuf0adO9Mw4uMiqIsPsm8
HgZrkNdC2+dHuBhqpHwXH42uwTeWrpw/7kmgGSz8N78IrcFWzSYNIU1JdL2l
z+kX/Rq0iOWM3T11GlWMjo8amV2FLzQNTK8rn0Hf3jYq2GlehVHRN2u+OZxF
T092LZ+KX4U5p3uusO+TRu3nT5445LMKI4sEJKPvyqCFa563di1XYYGgxP2U
X+fR7d22kFHNVei+VLD3WlUWvUgrVlN/YRVaqH6j/jUqh/ruc9v8yrcKB45R
jw5H4dE6jmbJWNpV+Ol6ybTzfRTVEnKOtGhdgQwX56W5Tl1EI8T+/NIoWYHm
oaIyB65cQnvOCOIuJK/AgSM+qdEPFVB+WcdzfAErEEfpk/wn7TJqSqh7QGuz
AsNyw0Hf8hX0o9LR+FndFRhU5pzKoK+EzqjZNrUiK1Bdk/FqWtNV1OEWt1wK
0wo8P6uosbpPFS02tbYOXFyGYl2O9DUt19Fdq4rkJ13LsEV1IuFSvjp6yY6z
Qx9bhhE3H63H92igvs6WTIQPy/Bz7cNQ9RlNtM6zDBwPWoZjVI+U8Cza6P4A
NnsWh2WoOZnW5HxJB42KLP7799IyzPh1yCVpTBf9+47lQNWJZdgU8jeF3UAf
5U8zuZLJugyrREeF54YMUNOsfKfQtSU4spuRmvniJpr+jTHbqW8JeqxFfOu7
dAudK7k9ZFy9BEEkrY7UkTvo2covnFc/LUG2JpOrhQHGaHGToTun8xJsNfe+
kZ5rgu52Zn/dMV6CVqaXTFkG7qGXBignRpSWoGhwzV6QgBnqO657pF5yCVbI
rCHGT83RX3MZGl8PLsG8U96ldUP3UdbVXZ+Y7UXIZ/H7r7iZBaqzo1XkObwI
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
7AqacYS4wuvVZFdc9vSX68cR9C7+/Em2Ta58/PdpHIGSiqWebN6jq7mEdRzB
4KhgA9l1gTk1ldQUhGQfumayn61Z9igeoCB4bGKtZLc29lNfF6MgMOoXd5Ht
hcRwNcpQEH7j9nrIPp2hI6mtQEEYAAJ9ZPdx7ldoV6cg3OYTGiD7pXetnoER
BcE+kHbov/5GqOcdBwqCDL/T6H+9Zb5mmAVREJLO+k7813e/aKvVBwpCnrXs
9H99J+J2nmAUhM8n4mf/61lx4PizLgqCj38x8b9+sb4abosUhJnk6AWyjzz3
+VQlSklobl9aJtvfyIue6Q4lIQj4rpG9jPcw1QynJFgZu2+QbczrhkX+oiSk
TlBu/Tdf+pyeHbtARXijybpDNmuCw+nc91SE5JAru2Rj/I8S61ypCTVF5ntk
P042ZR3RpSHYjtX9Z3PfvQjpGVqCbfr6f75tGcPr50lPMN3e/c/Lt/zFe1kY
CV+69/5zgKajrFQcE+H95v+65gvNG4Nr+wj6e/9rao7wMfdNFsLM/3lGbOKJ
iSIrYff/3PHrxbzP/gME3H/LPIgQsg8Lnvx/33AxkYmpZPvnh0zTgn8MOf6Z
L7Mmgnbq4D+7FCpo74899M82aQ/zZU5x/TMz5XkTyVHuf77ySCdcLOzIPx8u
4n185djRfw619Q853cH3z1q+6ifj8/n/Weymz433rgL/3D7GkBx2Q/Cf/5iM
XmTjE/pnkVQu7oDg//f/vc/+z/8D5fryuA==
           "]]},
         Annotation[#, "Charting`Private`Tag$3939079#1"]& ]}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->NCache[{{
          Rational[1, 2]}, {
          Rational[1, 2]}}, {{0.5}, {0.5}}],
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{1.0965872033483777`, 0.5}, {15.374999999999972`, 
       6.187500000000014}},
      Method->{
       "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> 
        None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{All, All},
      PlotRangeClipping->True,
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{Automatic, Automatic}], {153.21185495276382, -103.79260146892385},
      ImageScaled[{0.5, 0.5}], {286.59336162091176, 197.70019327414067}], 
    InsetBox[
     GraphicsBox[{{{}, {}, 
        TagBox[
         {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
          Opacity[1.], LineBox[CompressedData["
1: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
           "]]},
         Annotation[#, "Charting`Private`Tag$3939132#1"]& ]}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{True, True},
      AxesLabel->{None, None},
      AxesOrigin->{0, 0},
      DisplayFunction->Identity,
      Frame->{{False, False}, {False, False}},
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->NCache[{{
          Rational[1, 2]}, {
          Rational[1, 2]}}, {{0.5}, {0.5}}],
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{16.546875, 6.7734375}, {15.374999999999972`, 
       6.187500000000014}},
      Method->{
       "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> 
        None, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            (Identity[#]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& )}},
      PlotRange->{{0., 1.}, {0., 1.}},
      PlotRangeClipping->True,
      PlotRangePadding->{{0, 0}, {0, 0}},
      Ticks->{Automatic, Automatic}], {470.49742750661727, -103.79260146892385},
      ImageScaled[{0.5, 0.5}], {308.3170869175634, 197.70019327414067}]}, {}},
  
  ImageSize->{
    UpTo[600], 
    UpTo[223]},
  PlotRange->{{0, 634.5711451077069}, {-207.5852029378477, 0}},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.866087120685684*^9, 3.866087185908266*^9}, {
   3.866087217550487*^9, 3.86608723820617*^9}, {3.866087307141303*^9, 
   3.866087330338353*^9}, {3.866087368933367*^9, 3.866087431573003*^9}, {
   3.8660874874692783`*^9, 3.866087542020906*^9}, 3.866087572060011*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"67cce015-53ec-4e34-b44d-aecf94758284"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"g", "[", "x", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.86608758728528*^9, 3.866087588079118*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"4b25d253-a774-469d-89ce-b77d9c2452ff"],

Cell[BoxData[
 RowBox[{"LogisticSigmoid", "[", 
  RowBox[{"5", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", "x"}]}], ")"}]}], "]"}]], "Output",
 CellChangeTimes->{3.8660875885256968`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"6f3aa6d2-4d74-47a0-b770-4c82267fea11"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"na", "=", 
         RowBox[{"HardNeuralAND", "[", 
          RowBox[{"{", "w", "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"no", "=", 
         RowBox[{"HardNeuralOR", "[", 
          RowBox[{"{", "w", "}"}], "]"}]}]}], "\[IndentingNewLine]", "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"GraphicsRow", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{"na", "[", 
            RowBox[{"{", "b", "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"PlotRange", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Frame", "->", "True"}], ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", "/", "2"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{"na", "[", 
            RowBox[{"{", "b", "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
           RowBox[{"PlotRange", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Frame", "->", "True"}], ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", "/", "2"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"w", ",", "0", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"SynchronousUpdating", "->", "False"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"SynchronousInitialization", "->", "False"}]}], 
   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.866003452828184*^9, 3.866003597412594*^9}, {
  3.8660036865677958`*^9, 3.86600369090141*^9}, {3.8660037422135353`*^9, 
  3.866003815741333*^9}, {3.8660043161499367`*^9, 
  3.866004320868092*^9}},ExpressionUUID->"cee126e5-be8c-4ef9-b535-\
18744f1362af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"HardIncludeAND", "[", 
         RowBox[{"b", ",", "w"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"Frame", "->", "True"}], ",", 
        RowBox[{"GridLines", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"HardIncludeOR", "[", 
         RowBox[{"b", ",", "w"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"Frame", "->", "True"}], ",", 
        RowBox[{"GridLines", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"w", ",", "0", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.86600428053726*^9, 3.866004325271632*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"8630c5ae-d1aa-4149-b49e-e1f92fdb40cd"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`w$$ = 0.312, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`w$$], 0, 1}}, Typeset`size$$ = {
    600., {95., 100.33341837886866`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`w$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> GraphicsRow[{
         Plot[
          
          neurallogic`HardIncludeAND[$CellContext`b, $CellContext`w$$], \
{$CellContext`b, 0, 1}, PlotRange -> {{0, 1}, {0, 1}}, Frame -> True, 
          GridLines -> {{1/2}, {1/2}}], 
         Plot[
          
          neurallogic`HardIncludeOR[$CellContext`b, $CellContext`w$$], \
{$CellContext`b, 0, 1}, PlotRange -> {{0, 1}, {0, 1}}, Frame -> True, 
          GridLines -> {{1/2}, {1/2}}]}], 
      "Specifications" :> {{$CellContext`w$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{646., {139.6875, 145.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8660043039332323`*^9, 3.8660043257904797`*^9}, 
   3.866007565400546*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"cf9e1048-2f62-4faf-9d6c-5a8ffea4d7d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"GraphicsRow", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"HardIncludeAND", "[", 
         RowBox[{"b", ",", "w"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"w", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"Frame", "->", "True"}], ",", 
        RowBox[{"GridLines", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"HardIncludeOR", "[", 
         RowBox[{"b", ",", "w"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"w", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"Frame", "->", "True"}], ",", 
        RowBox[{"GridLines", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.865853847459693*^9, 3.86585385440273*^9}},
 CellLabel->
  "In[780]:=",ExpressionUUID->"69cbbe48-d352-4eb7-be16-784dc97341ea"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`b$$ = 0.852, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`b$$], 0, 1}}, Typeset`size$$ = {
    600., {95., 100.33341837886866`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`b$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> GraphicsRow[{
         Plot[
          
          neurallogic`HardIncludeAND[$CellContext`b$$, $CellContext`w], \
{$CellContext`w, 0, 1}, PlotRange -> {{0, 1}, {0, 1}}, Frame -> True, 
          GridLines -> {{1/2}, {1/2}}], 
         Plot[
          
          neurallogic`HardIncludeOR[$CellContext`b$$, $CellContext`w], \
{$CellContext`w, 0, 1}, PlotRange -> {{0, 1}, {0, 1}}, Frame -> True, 
          GridLines -> {{1/2}, {1/2}}]}], 
      "Specifications" :> {{$CellContext`b$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{646., {139.6875, 145.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.86585385491765*^9, 3.865853932347497*^9, 
  3.865934175499876*^9},
 CellLabel->
  "Out[780]=",ExpressionUUID->"16665bf9-b12c-4aee-9026-5c519f6975b1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNeuralNOT", "[", 
   RowBox[{"b_", ",", "w_"}], "]"}], ":=", 
  RowBox[{"1", "-", "w", "+", 
   RowBox[{"b", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "w"}], "-", "1"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.865779012001347*^9, 3.865779026545923*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"4ba37be7-81c8-4625-993a-0bc6fa75f1c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"HardNeuralNOT", "[", 
      RowBox[{"b", ",", "w"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Frame", "->", "True"}], ",", 
     RowBox[{"GridLines", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", "/", "2"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.865779039402556*^9, 3.865779047379161*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7fcc669a-c31d-4436-b456-8089643ee32c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`w$$ = 0.502, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`w$$], 0, 1}}, Typeset`size$$ = {
    360., {113., 116.64199019669311`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`w$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`HardNeuralNOT[$CellContext`b, $CellContext`w$$], \
{$CellContext`b, 0, 1}, PlotRange -> {{0, 1}, {0, 1}}, Frame -> True, 
        GridLines -> {{1/2}, {1/2}}], 
      "Specifications" :> {{$CellContext`w$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{406., {156.6875, 162.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.865779040154563*^9, 3.865779048085246*^9}, {
  3.865934918750469*^9, 3.865934921731851*^9}},
 CellLabel->"Out[3]=",ExpressionUUID->"711bfd1e-82c9-4b43-b319-d925af3871cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HardIncludeAND", "[", 
  RowBox[{"b", ",", "w"}], "]"}]], "Input",
 CellChangeTimes->{{3.866006065638547*^9, 3.866006075354393*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"0f60d169-a8a3-4c73-a8b8-ca50a5977fe9"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"w", ">", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"b", ">", 
      FractionBox["1", "2"]}], ",", "b", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "w"}], "-", "1"}], ")"}], " ", "b"}], "+", "1", 
      "-", "w"}]}], "]"}], ",", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"b", ">", 
      FractionBox["1", "2"]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "w", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "b"}], ")"}]}], "+", "1"}], ",", 
     RowBox[{"1", "-", "w"}]}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.866006075651229*^9, 3.866006097789176*^9}, 
   3.8660062525018377`*^9, 3.8660063223359737`*^9, 3.866007415091898*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"eeec7702-3f57-4601-96ad-a31796cfd24b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "input_List", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"min", "=", 
       RowBox[{"Min", "[", "input", "]"}]}], ",", 
      RowBox[{"mean", "=", 
       RowBox[{"Mean", "[", "input", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"min", ">", 
       RowBox[{"1", "/", "2"}]}], ",", "\[IndentingNewLine]", "min", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"min", "+", 
       RowBox[{"mean", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "-", "min"}], ")"}]}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8661815322409077`*^9, 3.866181547525282*^9}, {
   3.866181662761265*^9, 3.866181697893449*^9}, 3.8661817358547163`*^9, {
   3.8661819204018707`*^9, 3.866182036471779*^9}, {3.866182167195558*^9, 
   3.8661821719439373`*^9}, {3.866182596963336*^9, 3.8661826109841213`*^9}, {
   3.866182644744371*^9, 3.8661826450163383`*^9}, {3.866182762660385*^9, 
   3.866182763544578*^9}, {3.8661829152536373`*^9, 3.8661829190568247`*^9}, {
   3.866183458306346*^9, 3.86618348106089*^9}, {3.8661835268318987`*^9, 
   3.8661835599733*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"e826cfad-8128-4495-a6df-a04b0c0f982b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"{", 
       RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x1", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"GridLines", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", "/", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", "/", "2"}], "}"}]}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x2", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x3", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x4", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x5", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.866181557439907*^9, 3.866181587757483*^9}, {
  3.866183223714478*^9, 3.866183271016858*^9}},
 CellLabel->
  "In[320]:=",ExpressionUUID->"4f1ed3c5-5e33-4a33-955b-18851651320f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x2$$ = 0.68, $CellContext`x3$$ = 
    0.6960000000000001, $CellContext`x4$$ = 0.762, $CellContext`x5$$ = 0.748, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x2$$], 0, 1}, {
      Hold[$CellContext`x3$$], 0, 1}, {
      Hold[$CellContext`x4$$], 0, 1}, {
      Hold[$CellContext`x5$$], 0, 1}}, Typeset`size$$ = {
    360., {113., 116.64199019669311`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`x2$$ = 0, $CellContext`x3$$ = 
        0, $CellContext`x4$$ = 0, $CellContext`x5$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        $CellContext`f[{$CellContext`x1, $CellContext`x2$$, \
$CellContext`x3$$, $CellContext`x4$$, $CellContext`x5$$}], {$CellContext`x1, 
         0, 1}, PlotRange -> {{0, 1}, {0, 1}}, GridLines -> {{1/2}, {1/2}}], 
      "Specifications" :> {{$CellContext`x2$$, 0, 1}, {$CellContext`x3$$, 0, 
         1}, {$CellContext`x4$$, 0, 1}, {$CellContext`x5$$, 0, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{406., {237.1875, 242.8125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8661815882040443`*^9, 3.86618159752428*^9}, {
  3.866183250422492*^9, 3.866183279202375*^9}},
 CellLabel->
  "Out[320]=",ExpressionUUID->"47a03ab6-8358-42b6-9f87-2e00f21451ea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b749efe-4de6-4ef5-81a5-e56ac96807ba"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 3, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[738, 27, 487, 10, 85, "Input",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],
Cell[CellGroupData[{
Cell[1250, 41, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1455, 46, 17024, 393, 203, "Output",ExpressionUUID->"821832b2-386b-4db1-9efb-08ccc4c36efb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18516, 444, 156, 3, 69, "Chapter",ExpressionUUID->"e172cf77-104a-417b-9e8b-0895cfdd6efc"],
Cell[CellGroupData[{
Cell[18697, 451, 167, 3, 67, "Section",ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-0201cecf95d8"],
Cell[CellGroupData[{
Cell[18889, 458, 12771, 284, 141, "Input",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],
Cell[31663, 744, 133, 3, 26, "Echo",ExpressionUUID->"ee80eed0-093d-4a56-87e7-61a610bfc3d3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[31845, 753, 206, 4, 67, "Section",ExpressionUUID->"efe91894-6841-49a9-ab9d-fd0123575c7c"],
Cell[32054, 759, 8941, 128, 29, "Input",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],
Cell[CellGroupData[{
Cell[41020, 891, 292, 6, 29, "Input",ExpressionUUID->"838c2fb9-4256-4be2-930f-6b7047b4641e"],
Cell[41315, 899, 1910404, 31221, 68, "Output",ExpressionUUID->"309c1112-c2f7-4b9a-b5bc-fbc7cac61584"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1951768, 32126, 250, 4, 67, "Section",ExpressionUUID->"ad8f60ad-b03c-4795-b29f-2120bea29aab"],
Cell[1952021, 32132, 11050, 159, 133, "Input",ExpressionUUID->"eaa3d115-a086-4307-a3c4-028cf226a277"],
Cell[CellGroupData[{
Cell[1963096, 32295, 188, 3, 29, "Input",ExpressionUUID->"fb6ed126-9351-44fd-bf08-f3a57c6a1fd1"],
Cell[1963287, 32300, 22923, 489, 467, "Output",ExpressionUUID->"c208605c-e909-47bc-ab6f-da3aaf1d9234"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1986247, 32794, 187, 3, 29, "Input",ExpressionUUID->"bfc2b0a0-1ee5-4d7b-b16f-4308145fada7"],
Cell[1986437, 32799, 24431, 511, 467, "Output",ExpressionUUID->"477b9230-1f4e-4fd8-92a6-7659d2a66927"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2010917, 33316, 300, 5, 67, "Section",ExpressionUUID->"b675450a-34c8-422e-899e-e8ac46fc9f8e"],
Cell[CellGroupData[{
Cell[2011242, 33325, 859, 16, 51, "Input",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],
Cell[2012104, 33343, 5568, 81, 33, "Output",ExpressionUUID->"11f274e9-27ba-452b-9a78-5715988c14b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2017709, 33429, 167, 3, 54, "Subsection",ExpressionUUID->"df1ecdd8-5df6-4b38-bd68-b8d64bb8d36e"],
Cell[CellGroupData[{
Cell[2017901, 33436, 9590, 232, 99, "Input",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],
Cell[2027494, 33670, 2605, 52, 33, "Output",ExpressionUUID->"72579456-4967-4fdb-927e-0c5f5e18de4a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2030148, 33728, 167, 3, 54, "Subsection",ExpressionUUID->"e4694df7-3ea3-4a9d-9cc3-f245d7dd4041"],
Cell[2030318, 33733, 483, 10, 29, "Input",ExpressionUUID->"96f13a83-7ea1-42d3-9263-b819f001f2ef"],
Cell[CellGroupData[{
Cell[2030826, 33747, 9262, 218, 58, "Input",ExpressionUUID->"7950a09c-b667-40c9-ba1b-4fd6d6af5b80"],
Cell[2040091, 33967, 1041, 23, 33, "Output",ExpressionUUID->"e727694e-ccec-46fb-8a40-6482c9182dc9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2041169, 33995, 1220, 32, 117, "Input",ExpressionUUID->"e7aca33b-4f42-4ef4-b99e-67bbc602bec1"],
Cell[2042392, 34029, 1205, 21, 112, "Output",ExpressionUUID->"453e3c0e-5100-455b-9fdd-81a809aef060"]
}, Open  ]],
Cell[2043612, 34053, 258, 5, 29, "Input",ExpressionUUID->"c80f00c1-bd09-4d21-b3b1-b55ce8439a90"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2043931, 34065, 207, 4, 58, "Chapter",ExpressionUUID->"ab35440a-cabc-4736-a5ac-e07454ebd2a0"],
Cell[CellGroupData[{
Cell[2044163, 34073, 167, 3, 67, "Section",ExpressionUUID->"7a765571-11e0-47e7-bd2b-e5df28d2018f"],
Cell[2044333, 34078, 2637, 64, 113, "Input",ExpressionUUID->"32fda3b9-b853-499b-9d93-f6cc5b2d03d6"],
Cell[CellGroupData[{
Cell[2046995, 34146, 2881, 59, 113, "Input",ExpressionUUID->"e694fd5c-31a2-4c80-9a3a-3cbb8af0f0d2",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[2049879, 34207, 1098, 19, 29, "Input",ExpressionUUID->"ec0b1266-533d-40d4-a949-ccce78250c06",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[2050980, 34228, 8202, 181, 244, "Output",ExpressionUUID->"233526dd-6dfb-47e3-913b-4f0674735ce0",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[2059197, 34412, 8658, 205, 37, "Input",ExpressionUUID->"5f23d7f5-27d3-4f48-9a93-1389f19dc351"]
}, Closed]],
Cell[CellGroupData[{
Cell[2067892, 34622, 317, 5, 53, "Section",ExpressionUUID->"dbaf4b13-bbf1-46b2-a867-cbe6ab3057db"],
Cell[2068212, 34629, 5037, 75, 113, "Input",ExpressionUUID->"282b1129-9bb6-4375-827d-fe1a21de5e52"],
Cell[2073252, 34706, 694, 13, 29, "Input",ExpressionUUID->"4dd2a1a1-93c1-4c86-8a53-3799d9a2326a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2073983, 34724, 363, 6, 67, "Section",ExpressionUUID->"79776b36-72e3-45be-ba51-f07dffccf849"],
Cell[2074349, 34732, 13894, 202, 133, "Input",ExpressionUUID->"85ad096e-ed5c-44c2-8c3a-979fde4a03c9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2088280, 34939, 349, 6, 67, "Section",ExpressionUUID->"be01f422-1c1f-4ec9-a959-bf38e8105582"],
Cell[CellGroupData[{
Cell[2088654, 34949, 730, 11, 29, "Input",ExpressionUUID->"1fe03ab7-3007-4e7c-b36b-88dfd49533c2"],
Cell[2089387, 34962, 5701, 84, 33, "Output",ExpressionUUID->"c9321401-6875-420b-a576-bd1a0df2918c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2095125, 35051, 211, 4, 54, "Subsection",ExpressionUUID->"ed3764d3-e27e-4c41-99c9-2e1b2e3f6cc2"],
Cell[CellGroupData[{
Cell[2095361, 35059, 9415, 221, 78, "Input",ExpressionUUID->"cc7fdd2c-831f-4bbf-9c2a-d697ed7670ea"],
Cell[2104779, 35282, 4743, 124, 122, "Output",ExpressionUUID->"d89236a3-882b-4ba5-a045-5cf4a07e6a38"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2109583, 35413, 355, 6, 67, "Section",ExpressionUUID->"9ccf4bd6-05a1-49f1-915f-95679eedaa4f"],
Cell[2109941, 35421, 5450, 82, 113, "Input",ExpressionUUID->"ff705697-08c0-41db-8a85-131ecdba22d6"],
Cell[2115394, 35505, 746, 14, 29, "Input",ExpressionUUID->"96efab8b-047f-4880-948f-a2cf8ed0e8e0"],
Cell[CellGroupData[{
Cell[2116165, 35523, 300, 6, 29, "Input",ExpressionUUID->"935149ae-24d8-4804-bab3-83c06464018f"],
Cell[2116468, 35531, 221485, 4187, 68, "Output",ExpressionUUID->"105d1967-60ad-4b1e-8cf9-1a67da9f54d4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2338002, 39724, 396, 6, 67, "Section",ExpressionUUID->"22d0189b-d6a7-44ad-b35a-70f7e8d0dd81"],
Cell[2338401, 39732, 14175, 208, 154, "Input",ExpressionUUID->"fbdac8c7-4549-4743-864d-e467d909f319"],
Cell[CellGroupData[{
Cell[2352601, 39944, 302, 6, 29, "Input",ExpressionUUID->"c3a89cf2-7844-4806-bca2-4513232e25d6"],
Cell[2352906, 39952, 34487, 682, 68, "Output",ExpressionUUID->"003e5a18-974d-49fc-bb8c-59814e6eda5b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2387430, 40639, 220, 4, 29, "Input",ExpressionUUID->"3a2ff587-745f-41b1-baac-89a85935254f"],
Cell[2387653, 40645, 34499, 682, 68, "Output",ExpressionUUID->"67dfadff-78df-4715-bc71-9b6ca1b046d8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2422201, 41333, 349, 6, 67, "Section",ExpressionUUID->"e2a69d6c-fddf-4ce0-9a60-6b136e91fb12"],
Cell[CellGroupData[{
Cell[2422575, 41343, 730, 11, 29, "Input",ExpressionUUID->"7fc77f76-3601-40ba-afe5-9f8f5741f7ab"],
Cell[2423308, 41356, 5842, 86, 33, "Output",ExpressionUUID->"2d2317a2-3198-4e2a-bd9b-bdfe128e0d11"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2429187, 41447, 211, 4, 54, "Subsection",ExpressionUUID->"e1e18ea5-01ca-48fa-ad1a-51b05520e9c0"],
Cell[CellGroupData[{
Cell[2429423, 41455, 9493, 222, 78, "Input",ExpressionUUID->"a637f3cb-d7f7-4492-ad2f-108fbd4b3b99"],
Cell[2438919, 41679, 4436, 105, 148, "Output",ExpressionUUID->"322776ca-6fcd-4cf6-8e75-6fd635aea76a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2443392, 41789, 8462, 202, 58, "Input",ExpressionUUID->"869b250c-74b8-401f-aaf8-aeabb227840e"],
Cell[2451857, 41993, 5982, 177, 220, "Output",ExpressionUUID->"b4bcbfbb-0006-4cf1-ba81-63981b4013ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2457876, 42175, 278, 7, 46, "Input",ExpressionUUID->"7daed51c-7055-470b-b9c5-52ca091caea0"],
Cell[2458157, 42184, 161, 3, 33, "Output",ExpressionUUID->"045ecab3-bff0-4f2f-b8a3-c1121465dfff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2458367, 42193, 167, 3, 54, "Subsection",ExpressionUUID->"76d42d52-0573-4522-b5b7-498e3dde144e"],
Cell[2458537, 42198, 479, 9, 29, "Input",ExpressionUUID->"4d21d466-27c3-4874-b3dc-7266285e8228"],
Cell[CellGroupData[{
Cell[2459041, 42211, 9226, 216, 58, "Input",ExpressionUUID->"fe313b72-7655-48b2-bd87-c4b77f574373"],
Cell[2468270, 42429, 10933, 321, 385, "Output",ExpressionUUID->"62edc5cf-378b-45dc-a9c3-291e5ebe224a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2479240, 42755, 1300, 32, 117, "Input",ExpressionUUID->"f1a57f52-0581-436f-88be-233d5aefa82c"],
Cell[2480543, 42789, 22257, 294, 44, "Output",ExpressionUUID->"71792a47-04c6-49f3-a931-44d32758998a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2502873, 43091, 201, 4, 69, "Chapter",ExpressionUUID->"c33fd357-ab86-4dac-a5dc-fb8a483872d5"],
Cell[2503077, 43097, 273, 7, 29, "Input",ExpressionUUID->"de7ef9f2-bf67-4869-9b14-c25b89d18d50"],
Cell[CellGroupData[{
Cell[2503375, 43108, 358, 9, 29, "Input",ExpressionUUID->"bd286b26-9519-4a19-aaf1-dc16a2f0b69a"],
Cell[2503736, 43119, 195, 4, 33, "Output",ExpressionUUID->"04156c36-198c-480e-ac3c-b166f2f2ba54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2503968, 43128, 228, 4, 29, "Input",ExpressionUUID->"09ff4b66-701e-4a22-9342-52d4f46cab16"],
Cell[2504199, 43134, 204, 4, 33, "Output",ExpressionUUID->"2074283c-8420-4675-9289-fdfc1b640be7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2504440, 43143, 2663, 58, 79, "Input",ExpressionUUID->"9f328ff1-4143-42af-a8c2-3be21e4f625c"],
Cell[2507106, 43203, 67321, 1226, 81, "Output",ExpressionUUID->"5aa4f00e-bb9d-42d5-b7c5-976b99f9d035"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2574464, 44434, 1553, 35, 114, "Input",ExpressionUUID->"a1b271c7-645a-4862-a653-483ffeeb0124"],
Cell[2576020, 44471, 1636, 28, 33, "Output",ExpressionUUID->"f4035ed4-8c8f-4459-9f22-e8327e6dcb85"],
Cell[2577659, 44501, 1636, 28, 33, "Output",ExpressionUUID->"550433e5-4701-4264-82d8-8ad30df3d4d1"],
Cell[2579298, 44531, 1654, 29, 33, "Output",ExpressionUUID->"291d0b14-785d-43d3-b657-4287d7b7b6ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2580989, 44565, 605, 15, 29, "Input",ExpressionUUID->"4587e0bf-fcd9-4433-b489-07b8e1ae3040"],
Cell[2581597, 44582, 852, 23, 37, "Output",ExpressionUUID->"b6935cb5-d0f4-400c-847b-0ba81f7f6120"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2582486, 44610, 460, 13, 29, "Input",ExpressionUUID->"c64f8736-74fb-4ee2-9458-6e1c84a22181"],
Cell[2582949, 44625, 495, 15, 36, "Output",ExpressionUUID->"2f9e639e-aa96-42ff-920c-716b6f969c56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2583481, 44645, 547, 15, 29, "Input",ExpressionUUID->"7e6f2947-7806-4196-8138-e66fc19aed43"],
Cell[2584031, 44662, 226, 5, 33, "Output",ExpressionUUID->"6fa9c31b-30e0-4564-9950-6c9eb5d255e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2584294, 44672, 504, 8, 29, "Input",ExpressionUUID->"36cf5718-04df-40b4-bbde-befb0011ad6d"],
Cell[2584801, 44682, 108716, 2237, 68, "Output",ExpressionUUID->"9c019e28-2567-435a-8cf8-ae31fe73e068"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2693554, 46924, 551, 10, 29, "Input",ExpressionUUID->"2d2dedcf-d735-44d7-9b95-ba222cefee9c"],
Cell[2694108, 46936, 163732, 3383, 219, "Output",ExpressionUUID->"3cfb66f9-06f2-48b9-bfb2-c729d5a8fa51"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2857877, 50324, 266, 6, 29, "Input",ExpressionUUID->"5917a765-5922-48a4-9974-d699554bb0ff"],
Cell[2858146, 50332, 126404, 2625, 335, "Output",ExpressionUUID->"8b8b16bc-98c2-4150-a2ba-b59c0d220dac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2984587, 52962, 1161, 29, 51, "Input",ExpressionUUID->"98d9df60-b6f8-4a49-8572-30ebeb35b78a"],
Cell[2985751, 52993, 160472, 3324, 68, "Output",ExpressionUUID->"787a74ff-f32e-4cd7-bca7-a1d0645d56f5"],
Cell[3146226, 56319, 125726, 2601, 68, "Output",ExpressionUUID->"d4a16e25-b9b3-4b5d-8687-8cf62bf68dd6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3271989, 58925, 1094, 33, 51, "Input",ExpressionUUID->"dafdf46d-356b-4d7b-9a8c-dcc84bddc4f0"],
Cell[3273086, 58960, 946, 24, 36, "Output",ExpressionUUID->"b776bf21-e2cc-422e-a2b5-750efd4db0bf"],
Cell[3274035, 58986, 954, 24, 36, "Output",ExpressionUUID->"867f2720-f93d-4b24-a38e-15c6fb778bbd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3275026, 59015, 410, 8, 29, "Input",ExpressionUUID->"e3aa3aeb-5ff0-4b6f-8781-892de7a748a8"],
Cell[3275439, 59025, 178324, 3700, 219, "Output",ExpressionUUID->"2cc494ae-e666-45d4-83e7-44f354b8d816"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3453800, 62730, 265, 6, 29, "Input",ExpressionUUID->"79d90c74-a424-4552-8676-094eb26b65d2"],
Cell[3454068, 62738, 126448, 2626, 219, "Output",ExpressionUUID->"912142d0-d10b-4893-8d7b-bedc158488b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3580553, 65369, 1111, 28, 51, "Input",ExpressionUUID->"0943e589-ee27-4747-b56e-a491d9ea4069"],
Cell[3581667, 65399, 177455, 3675, 68, "Output",ExpressionUUID->"32503158-3e92-4c53-95de-26a338db7c6d"],
Cell[3759125, 69076, 125662, 2601, 68, "Output",ExpressionUUID->"23c2ac7e-5d7c-46dc-bedf-219a2b9b788a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3884824, 71682, 1096, 33, 51, "Input",ExpressionUUID->"77616312-21f2-420d-99d8-8255abc0d0bf"],
Cell[3885923, 71717, 903, 24, 36, "Output",ExpressionUUID->"88de38ce-1c4d-4224-af58-94b2d3c168d4"],
Cell[3886829, 71743, 900, 24, 36, "Output",ExpressionUUID->"1f5fdd13-a841-42e2-a2d4-3aaea2fe91d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3887766, 71772, 1280, 23, 29, "Input",ExpressionUUID->"74191181-2eac-4da2-b49f-d3ecc9b686f6"],
Cell[3889049, 71797, 40429, 801, 65, "Output",ExpressionUUID->"5a2d126a-5e81-4d96-8321-692abe44b35c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3929515, 72603, 711, 16, 29, "Input",ExpressionUUID->"250ca548-91df-4421-933c-c929a71f52fe"],
Cell[3930229, 72621, 38567, 759, 65, "Output",ExpressionUUID->"62a4a2a6-0381-4ae0-ae57-66d0daa6694c"]
}, Open  ]],
Cell[3968811, 73383, 223, 5, 29, "Input",ExpressionUUID->"4aa755d8-3124-457b-b7c7-bc94995c991d"],
Cell[3969037, 73390, 401, 9, 29, "Input",ExpressionUUID->"d4f1803c-fd5c-419d-8840-6ba01233da76"],
Cell[3969441, 73401, 592, 15, 33, "Input",ExpressionUUID->"71fb29f5-bae2-4130-96df-c8c71471f088"],
Cell[CellGroupData[{
Cell[3970058, 73420, 1492, 44, 29, "Input",ExpressionUUID->"212e9eb4-7a06-41df-8dfb-07b43f581103"],
Cell[3971553, 73466, 24146, 430, 218, "Output",ExpressionUUID->"67cce015-53ec-4e34-b44d-aecf94758284"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3995736, 73901, 230, 5, 29, "Input",ExpressionUUID->"4b25d253-a774-469d-89ce-b77d9c2452ff"],
Cell[3995969, 73908, 315, 9, 37, "Output",ExpressionUUID->"6f3aa6d2-4d74-47a0-b770-4c82267fea11"]
}, Open  ]],
Cell[3996299, 73920, 2912, 73, 307, "Input",ExpressionUUID->"cee126e5-be8c-4ef9-b535-18744f1362af"],
Cell[CellGroupData[{
Cell[3999236, 73997, 2009, 55, 163, "Input",ExpressionUUID->"8630c5ae-d1aa-4149-b49e-e1f92fdb40cd"],
Cell[4001248, 74054, 2040, 44, 304, "Output",ExpressionUUID->"cf9e1048-2f62-4faf-9d6c-5a8ffea4d7d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4003325, 74103, 1986, 55, 141, "Input",ExpressionUUID->"69cbbe48-d352-4eb7-be16-784dc97341ea"],
Cell[4005314, 74160, 2032, 44, 304, "Output",ExpressionUUID->"16665bf9-b12c-4aee-9026-5c519f6975b1"]
}, Open  ]],
Cell[4007361, 74207, 395, 10, 33, "Input",ExpressionUUID->"4ba37be7-81c8-4625-993a-0bc6fa75f1c7"],
Cell[CellGroupData[{
Cell[4007781, 74221, 964, 27, 33, "Input",ExpressionUUID->"7fcc669a-c31d-4436-b456-8089643ee32c"],
Cell[4008748, 74250, 1804, 36, 338, "Output",ExpressionUUID->"711bfd1e-82c9-4b43-b319-d925af3871cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4010589, 74291, 239, 5, 29, "Input",ExpressionUUID->"0f60d169-a8a3-4c73-a8b8-ca50a5977fe9"],
Cell[4010831, 74298, 917, 28, 47, "Output",ExpressionUUID->"eeec7702-3f57-4601-96ad-a31796cfd24b"]
}, Open  ]],
Cell[4011763, 74329, 1340, 32, 150, "Input",ExpressionUUID->"e826cfad-8128-4495-a6df-a04b0c0f982b"],
Cell[CellGroupData[{
Cell[4013128, 74365, 1239, 36, 29, "Input",ExpressionUUID->"4f1ed3c5-5e33-4a33-955b-18851651320f"],
Cell[4014370, 74403, 2244, 44, 499, "Output",ExpressionUUID->"47a03ab6-8358-42b6-9f87-2e00f21451ea"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

