(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2216590,      37307]
NotebookOptionsPosition[   2213974,      37251]
NotebookOutlinePosition[   2214415,      37268]
CellTagsIndexPosition[   2214372,      37265]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Logic", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 
  3.864793591864854*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"\"\<neural-logic.m\>\"", ",", 
    RowBox[{"Path", "->", 
     RowBox[{"NotebookDirectory", "[", "]"}]}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.864789316910233*^9, 3.864789318413851*^9}, 
   3.8647909759269857`*^9, 3.864791161343305*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["BinaryNN", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "BinaryNN", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BitLossBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "BitLossBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityBackward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "NeuralMajorityBackward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "NeuralMajorityLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["WeightedNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "WeightedNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BitLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "BitLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["BitLossForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "BitLossForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "NeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralMajorityForward", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "NeuralMajorityForward", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-70cdc2c9-9924-4d3a-879a-e520343c3ef6", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.15833333333333333`]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{3.86479111604138*^9, 3.8647911657240562`*^9, 
  3.864791620800887*^9, 3.86479194597997*^9, 3.86479198092934*^9, 
  3.864792204697258*^9, 3.864792687703233*^9, 3.864793105592959*^9, 
  3.864793526801218*^9, 3.864793732850697*^9, 3.864794507927494*^9, 
  3.864796071752219*^9, 3.864825438485825*^9, 3.864825531891514*^9, 
  3.8648260962141314`*^9, 3.864830162877289*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"b1271ee8-4349-41d8-b61b-2fc788a68ff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Learn XOR", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 
  3.864793644095471*^9}},ExpressionUUID->"e172cf77-104a-417b-9e8b-\
0895cfdd6efc"],

Cell[CellGroupData[{

Cell["Generate training data", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 
  3.864793759486944*^9}},ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-\
0201cecf95d8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numBooleanVariables", "=", "15"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Echo", "[", 
   SuperscriptBox["2", "numBooleanVariables"], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"BooleanConvert", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
       "#1", ",", "#2", ",", "#3", ",", "#4", ",", "#5", ",", "#6", ",", "#7",
         ",", "#8", ",", "#9", ",", "#10", ",", "#11", ",", "#12", ",", "#13",
         ",", "#14", ",", "#15"}], "]"}], "&"}], ",", 
     "\"\<BooleanFunction\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"maxExamples", "=", "5000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examples", "=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", "=", 
          RowBox[{"RandomChoice", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}], ",", "numBooleanVariables"}], 
           "]"}]}], "}"}], ",", 
        RowBox[{
         RowBox[{"Soften", "/@", "x"}], "->", 
         RowBox[{"{", 
          RowBox[{"Soften", "[", 
           RowBox[{"Boole", "[", 
            RowBox[{"bf", "@@", "x"}], "]"}], "]"}], "}"}]}]}], "]"}], "&"}], 
     ",", 
     RowBox[{"Range", "[", "maxExamples", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"examples", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8631507903678637`*^9, 3.8631507905196667`*^9}, {
   3.863151242837092*^9, 3.863151247696003*^9}, 3.863158542401339*^9, 
   3.863163212116626*^9, 3.8631766947235193`*^9, 3.863176797755232*^9, {
   3.863179909310301*^9, 3.863179923837204*^9}, {3.863243605533627*^9, 
   3.863243620585451*^9}, {3.86324880283392*^9, 3.863248807664549*^9}, 
   3.863261133634419*^9, {3.86326137325694*^9, 3.8632614056637583`*^9}, {
   3.863261437377194*^9, 3.863261502775928*^9}, {3.8632617677613983`*^9, 
   3.863261767960438*^9}, {3.8632618648892*^9, 3.8632618650156393`*^9}, {
   3.863263609082129*^9, 3.863263612112956*^9}, {3.8632641205013657`*^9, 
   3.8632641216097193`*^9}, {3.8632646726440353`*^9, 
   3.8632646847617817`*^9}, {3.863265794153249*^9, 3.863265797374902*^9}, {
   3.86326617446527*^9, 3.8632661766776447`*^9}, {3.8632663950099487`*^9, 
   3.863266397423538*^9}, {3.863266602290083*^9, 3.863266603667367*^9}, {
   3.863267749709738*^9, 3.8632677506435137`*^9}, {3.863268331863552*^9, 
   3.863268332996944*^9}, {3.864793623697935*^9, 3.864793626168922*^9}, {
   3.864793718272374*^9, 3.864793728328333*^9}, {3.8647937905288*^9, 
   3.864793839705696*^9}, {3.8648255889830313`*^9, 3.864825592504498*^9}, {
   3.864825624917417*^9, 3.864825626880946*^9}, {3.864829407265236*^9, 
   3.8648294087742167`*^9}, {3.864829443456806*^9, 3.864829444846697*^9}, {
   3.864829792396603*^9, 3.8648297927316837`*^9}, {3.864830032545388*^9, 
   3.8648300662967587`*^9}, 3.86483040909219*^9, {3.864830633132044*^9, 
   3.8648306348014383`*^9}, {3.8648309522842607`*^9, 
   3.8648309524254227`*^9}, {3.864831241412085*^9, 3.8648312465735483`*^9}, {
   3.864831361588151*^9, 3.864831427353725*^9}, {3.864831467589365*^9, 
   3.864831467738257*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],

Cell[BoxData["32768"], "Echo",
 CellChangeTimes->{
  3.864872324398036*^9},ExpressionUUID->"51d6417b-81b6-407b-b258-\
d62fd4897c74"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 
  3.8647940005418167`*^9}},ExpressionUUID->"efe91894-6841-49a9-ab9d-\
fd0123575c7c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NeuralMajorityLayer", "[", 
       RowBox[{"numBooleanVariables", ",", "40"}], "]"}], ",", 
      RowBox[{"NeuralMajorityLayer", "[", 
       RowBox[{"40", ",", "1"}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"bnn", "=", 
  RowBox[{"BinaryNN", "[", "net", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8632419379972563`*^9, 3.8632419530902557`*^9}, {
   3.863242016852003*^9, 3.863242016954556*^9}, {3.863242114731778*^9, 
   3.863242116511199*^9}, {3.8632425778512383`*^9, 3.863242578023574*^9}, {
   3.863242694378633*^9, 3.863242700041648*^9}, {3.863242823054079*^9, 
   3.863242825001767*^9}, {3.863243281805369*^9, 3.863243296105442*^9}, {
   3.863243344813389*^9, 3.86324334881746*^9}, {3.86324542198872*^9, 
   3.8632454248519697`*^9}, {3.863247013631166*^9, 3.8632470334948177`*^9}, {
   3.863248829969164*^9, 3.863248837552525*^9}, {3.863248975956862*^9, 
   3.8632489810980988`*^9}, {3.863249034093567*^9, 3.863249035816573*^9}, {
   3.863249118209298*^9, 3.863249119936665*^9}, {3.863249176433206*^9, 
   3.863249178608775*^9}, {3.863249255953167*^9, 3.863249259400838*^9}, {
   3.863249317769299*^9, 3.8632493194487257`*^9}, {3.8632494276013317`*^9, 
   3.863249430808964*^9}, {3.863249547870276*^9, 3.8632495499207163`*^9}, {
   3.86326070757487*^9, 3.863260713814412*^9}, {3.863261285184248*^9, 
   3.86326128955131*^9}, {3.863261670585479*^9, 3.863261672743452*^9}, {
   3.8632619665523157`*^9, 3.863262009944212*^9}, {3.863262184327989*^9, 
   3.863262195943681*^9}, {3.863262679270957*^9, 3.863262684091329*^9}, {
   3.863262941416381*^9, 3.863262948679788*^9}, {3.863263791169449*^9, 
   3.8632637935097647`*^9}, {3.863264236522559*^9, 3.8632642385373077`*^9}, {
   3.863264739345749*^9, 3.863264741641567*^9}, {3.863265060997054*^9, 
   3.863265077722269*^9}, {3.8632657532290382`*^9, 3.863265757380649*^9}, {
   3.863266075449151*^9, 3.863266076916868*^9}, {3.863266503645965*^9, 
   3.863266507525423*^9}, {3.863266720694066*^9, 3.863266722885908*^9}, {
   3.86326700633547*^9, 3.86326701072333*^9}, {3.863267435632831*^9, 
   3.8632674383443003`*^9}, {3.863267530432967*^9, 3.863267540032316*^9}, {
   3.863267828905903*^9, 3.863267833697029*^9}, {3.8632678966094522`*^9, 
   3.8632679216013536`*^9}, {3.864794014235001*^9, 3.8647940213073177`*^9}, {
   3.864794579263083*^9, 3.864794582125517*^9}, {3.864794682982588*^9, 
   3.86479468552535*^9}, {3.864794815286722*^9, 3.8647948257578917`*^9}, {
   3.864794905319006*^9, 3.864794911345727*^9}, {3.864794968574999*^9, 
   3.864794975365551*^9}, {3.864795059598652*^9, 3.864795101917604*^9}, {
   3.864795176886681*^9, 3.8647951794938307`*^9}, {3.8647953499990253`*^9, 
   3.864795352461677*^9}, {3.8647958599272413`*^9, 3.864795867358115*^9}, {
   3.864796080808188*^9, 3.864796089430326*^9}, {3.8647964361830683`*^9, 
   3.8647964413259087`*^9}, {3.864796688559135*^9, 3.864796691954176*^9}, {
   3.864797117975442*^9, 3.864797120678393*^9}, {3.864826111862607*^9, 
   3.8648261150051203`*^9}, {3.864826725117402*^9, 3.864826727363949*^9}, {
   3.864826847101227*^9, 3.864826858500071*^9}, {3.8648270681741257`*^9, 
   3.86482707018915*^9}, 3.864827425001938*^9, {3.864827680321042*^9, 
   3.864827682351656*^9}, {3.86482781394549*^9, 3.864827845840191*^9}, {
   3.864827883489957*^9, 3.864827886096278*^9}, {3.864827940781341*^9, 
   3.864827942872632*^9}, {3.864828391480813*^9, 3.864828397088695*^9}, {
   3.8648293065587587`*^9, 3.86482931137199*^9}, {3.8648294855503187`*^9, 
   3.864829492068088*^9}, {3.864829632032124*^9, 3.864829649853505*^9}, {
   3.864829729363516*^9, 3.8648297312826347`*^9}, {3.8648298530341988`*^9, 
   3.864829896781884*^9}, {3.86483009905539*^9, 3.864830100854253*^9}, {
   3.864830459056789*^9, 3.8648304611396923`*^9}, {3.864831049105101*^9, 
   3.8648310514158287`*^9}, {3.8648310817206783`*^9, 3.864831084088099*^9}, {
   3.864831234984818*^9, 3.8648312373753557`*^9}, {3.8648315017002277`*^9, 
   3.864831518455496*^9}, {3.864871523401445*^9, 3.864871525742118*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-4.999999999999998, 
                    1.339744851455892*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"MajorityN..\"", "\"MajorityNet\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MajorityNet", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{0, -15.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Catenate\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"BitLoss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-4.449999999999998, 
                    1.192372917795744*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"2\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-3.4499999852628056`, 
                    0.5500000924423946}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999999999998, 
                    1.192372917795744*^-7}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"array\""}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"array", 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 2\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499999852628056`, 
                    0.5500000924423946}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948965`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 1\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.999999999999998, 1.339744851455892*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], {
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-12.5, -12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{12.5, 12.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, {
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MajorityNet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MajorityNet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Catenate\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"BitLoss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["BitLoss", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    StyleBox["\"\[Sum]\"", Bold, 12, StripOnInput -> False], 
                    GrayLevel[0.33], 14, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SummationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    SummationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4.999999999999998, 
                    1.339744851455892*^-7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 21, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {333.00000147371924`, 103.49999999999999`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"array\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "MajorityNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"majority1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[NeuralNetworks`NaturalT, 
                    NeuralNetworks`SizeT], NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQMAgASegbVRkh4AhCNaERI2KFhArrrUkQChYHiFE
Hlpl8pCgRReV5dJVt6G11t27u5dWtD5qDY9aarGLYldbVKAg2q0PrFatj7pn
JkSpd/eP++fN75f5zvnme5/vfN+cI80uSc9GAAAqCQDJGvelmSIAWHCezSMm
L1zxaV7Rw9aX/dLIFIpGygPgJnzpx5ACBpwHwz/HGrlN3cVcwMbkCdsRB28K
ixsSznwrm5TMZSRv90sexuQiJVe8yFdurtWZOqWR2gBnHabezsjt4n4owjXz
avEvELnZIZ4mm1Yf82bLq9vwz7ug3E04AGoI5RFdPnjuRuaOyD0O+BhyNNeL
AlK21vk5hlOw2nbMLUFkqfqtgDfCxSIuTFksnJLyadzjkQUxWgf3tyJEvBDY
3HqCK2LkujokatWmZAnfic7YDEDqe1w7Mns14dKFBGxiLvYtFTOZGSGIrP2y
SjxNZHA1L57K3kjuVe2Wv8qe+MAj+aUrhOAjbNuEuUvuLAoMYKO+p4Sq+QuW
an16X3715Tt+S2KFpyY346btcXMbiJ87f9IepwbN2UQEpsuIWBqi3RvYfBKf
yNMtc3xJZr6va2IjzMMQkc99hdlrzZ2ixIpwksnEL4hIoS+ajE318x2OxBAk
TQzAtzAWobUDT+CPg/MUeDKY7GZkhNarQYAe+bM/Nwb4tICv2R/cpyiQUXRA
AHxc5CzwQI++JKZwc4BB1aJJ6O5IakWSujQJdZpZ3ZqEVmuCW5PoQBPACMa/
RgguA+zGKL+onn9Dz7/dwx4BgqIe/qBKcBU0aZQtHUkNqOpQR2KrddZZTaJb
E9qjUdaiiQ0dSb9mH+APDvwn9rP2xG6NsmlMdWirRtmDznrKXohvBS0Koouy
WEBOAtVAB1h32tjrdb9ATDVoBwTLFnbSED7S7D+gDj9pkJwxhJ9s9u9Gwr+V
SroQwmnSO6tkHNLkrMi3W0ycsianguBU5tvLuZy1Ko5b0m4NG2mWgPawS83+
Z5vDv4WMZHi7WnK+WTLya3a0gsup+A/s74ZfMIS3t0nGVLvC2q3hPU/Z9fZm
HrU6DZfp9XILgBJMdgkUeAq1aqmhdS+AYPJblZLZUoiHA51CXA/xH1knv0uR
TwJzwACoJwnwALhQt4hbLnNWQTNITpXMWaqD8j0mOU34c+6caQvrNoR/65YM
NPvDaFxFwkAZl1Pe5DQDbkWlU5HqXJsPGdG1XE6p3mlueo79glRy4T+w1641
Oau4nDLZv40G6R8hfUyZDtwIjgRhbNUksPf/RbLtRZR2f2YQeL3Fuo87wFNg
jWAXAhbA/eYP91tgrUpc66OOURNbfRC5Wtfgo5arM5t8NO8pA22G9lFujwP/
A6YLdLz+Byw10LY6WY+AwPA33WjifVaiy64gnaX5aLmOU7GP8+Z5ve/lHvZ1
Fwc+R3FOBeCsJThmF6cM5xQBgdnEKaXHFNJDAMd6jsXFKVdxYITgk5pCL0mO
ycUpxTmVPewbJGctxin3MNJv92McM8lZKOAKA5Jr6hoAEpfctOtB24GENz8e
LChfwd986lViOS93w5fq7tajWzmDpQrs5Lw3NvXeEXHf5x39wVAVPvnLD1Xy
ppRG88VvEie7lY5CGAcu/DPQ89KQ9IhMFLYKOMXE7nrfSNgAqD6AYACgABWn
l6ajTBJ4f3qgmRa/LxwHbIqGRkGaLYwgBHlKA6Ccfwbv8uHSguifG9RkXHYt
UwERAGNYNrHngZOLMtyUZhpDkNKglO42Nsw4AHCaDKr782lY8WgKBBtTd2re
HUS1HY6ZVJOj1G1OeiEODhGKEPGI+nq9djVgkrQor+WiTecBl2R53PVYlfDj
IY9cj48kwvtTzx4bigPeeAd/WjCZ4+F5arz596znjF/2N60FmoQ+0xgQyvTt
mABArhX4UH0vvEkUIkypr/N5Yf4JpmaiiDFlHlhN+h7czphVB+qzKXc+hHm6
G8JYLinpHJTkiZDZtRqlo6MuGdaKSlj6SnlwU1zH+HdIfiwvGdarsK+aJXkE
iyazh3ajs7s0s+vQ2d2VdbBUruNyqnROk4mz1oSWV8Ly4gzpFvKv1fMHCUEx
IRga5Y+m8mOxzrBLUsl5aVi7ITyP2JT4iT2xB+4vNOkTe5IDTeweFZXrOevy
OfH5TjN8kk5TPayKnHIZp/w+C4qtIJ1ZXGepGNYfWNasUXAL3xjg/+SGWxLN
7mqWDDdLuunnBYPkpFTSaYXVnv2Pek0CLCNN9PNQh7JhrBT8Bip9ZEs8iya2
dPA+L3CaMp1mk90Cq5zeaRE7LS5nyFdLBTeA4MdU/nA9f0glGMT516AXuCzs
Qhss++FnYNGzhl8YkAwPhv0TCc8TpylbNLN2wbqROnnMEb2zopJT2ZSWcqde
QEUgfDXVd65Kwy61hW1AwimDpWGjBnbGRruyuyOxRTMbBuRRe9KwJrEWTjvq
PvOlCngFtAeWTRnH3GR9dQiWIDf/cir/NhHZdkYdPjw44fxg2CVogC4kscU+
u9Ue6uhQ1tEl9FBbQlcH9DGpW9daCguynlMKA5jpDOk7wb+mF1wfgPVCcBkW
NFxwN5VfjPGHCD6c3h5gfz/AH07l3yciv7tmoGr1+cEJ16RhI9KwTmkYXMGr
0kl5+O7ETzSzD6EJDfaE7sxP4OpDZ2GDWKtzVphg9Jz8yxh/lLb2JsG/Xc+/
k8qnErYK5q0cQnO4DtfU8kJ8zHIdHmmt27bttNaFyXKTYuTJW+ul7ymx4yBQ
ogfLSwrzzIYiXFNSZCooNJpxeXRMbDQRHYPnlZjxlILiNZV4pVKByxRxM7IL
LFNx2UJD8RqDuQqXJ0ThckIun7rcmIvL5fjCNcX0HCeUs2JiZxFyEMts41kJ
DdGl09vSDTn73yhbEDm97L3QKeIfD6/Lid3h90bZh9N37Fy0rix0Cp5+ZAwl
/O9FOZEP3130xvTQKTLwJ7iXQqA/fr5mGcxRztpMUxOMSwfMhoSeDtuI5ESz
/1U1tYVGqMBRax8cN6TnX0mFKSUYphJLcCWVf6eFtFJ9msr4SmepZ70zTbs6
lK1I4h777Aa448FpWAaomsjpTtpjT9wFExmd7bInwaSu76DKiAHG9ms4CGT+
NoqqGNT3uEhmFZITXWp1gypBNPcLTA8LwC0CgEnwXcT8rvo0viOKWpffHkRA
YWF5UXRhSYkputyYYykxF6w1RhuLDdmFxn/3pqIg15L/7EVuQZnFXJC9xuLl
gXY4Ov+A88762krD81mnlYJWtbLBn/FRIRbAArlsjjxQyDOofC8SxEm1lUzF
8AlEjz86LAsZbmRIvgdSXAbqhXYGV03kX8C7cNVFQr+sQV081S30BXtCa6L3
yzDMl5F7SHrVrT+kvtqtP2IYtX3PJrg1gzWA59Y3qrm2wZp5cHRE/Y3NgCZH
cvWdA/kqjDdt9miX6ocaayQa48JV0TJUrMBrSFATyowDdiGKQpVNKmmtfUUN
6rM3AWBa9nchG2MGquwGAcMVWhOTaY+j+PRP+RzxT/mWSN2Qr507j+f7IrMN
xLLiXBGqPJ8662aVDPvOpiQNKMOHCw12oYQ4hiAxpn1TkO2lJqOuQd/pMiVj
vJZl+ehmRm4jCNnHdaA8m981UOPPnYaTg2ypwK3vdANItDeTqzU0Ggw2ob3d
R0249Wr+VZ/6FQyjKwIL+OKQXqA/T9YzGOJi7BHgzePxcGab/qONA6K8kIkv
imNkuzAm+pfgG/pG8vsa60P7S9AdAmNxPf4cMdzXtgnkXTNYSnmhipmjAh3+
eXrfPOKiif0B1h2QFMneGGjTkz+1T+oOUJax1fGppfdRu+8Z1Vw8sHvymg58
T/tUaj33MXihmIZiT55OttVaEQcuTrmMnW+PQkWsMSHbOmIWYacDcbGbwYTU
aRR1LYO9n7dDpI/ww4gL2H1EnBJ/DZnODMNV3S2IkMskFo3WicUqrq3tLP/T
Ab/9vIygOrFoCdeGnOCXqZaT3QEZaJBVpe5lfQw62I5gzG2yu/z0RLYeSLns
HUnMIeJL/aq2WvUgNEh/i+R0srqi2mamCrnB6avcfkSh6k0E4cVzjwN2JJuN
2fTERQ3J38/LDB5TkydYTyyqL5rkQKl99yP8T7iFnSJFVb87p6h+El8ydR5L
W35p56Y0ZNsf793Ny1A13HwckqSNxVlfnTvw1/7ji/s/08Sh6cPKVX2PHw8d
/b00CPv+yPXekT0Zqtbew0+0jsMxnRtTbL28DUMpr9gzVLm3q4p2bobS/joU
b6UUzVnSR0/vvZILWYbuJ1DC527tPXDs3JOivvo05PTWPsXrGarOvtaQkCDs
+v0NwT0WzD99uCKr79jjoSPXF6BSLVMT1ztJuLEnZWbRRC1Le6AIC8K+OaHO
UFlCd6cjwuq+XwKF8+bpeKZvfpeGCDcM3cNWcD7CdvXyuhzKU9VX2DnQsJuH
PxNDrnXV/k/lJz7u/ylI1auO01lvW4p+uJt1r4aypP8oAi35ek2JCQYnIWsS
My5MaxdVVZ9TlDy5V1wBkY+2rNydRul9gZJ8+0AaZfnaIgV8pejfuR36+9Xt
ciP094cHQt2lKdjfoRkLUzLOPppZ/AqkObqhb1sakrbhXB4MeEb/kcuUYcfW
o8EPo7pakYCIwrciZQd291evD90KRV0cOgFDt+deK4vS8rBoMZSwtnol9PT0
sXsjlJabP7Pwzgih7tbNF0nsLS3+2d9XvgPNe+eHE5Q7Vz4+jFOOrzq3l57+
JKWX4I+3Dxy7cnx31omn6/vL0GNEcoap7c3aCfWeXnxuOZ0qyqxziv4nyuJS
qHfm3/p2wFdLrgRTenuPboL5MJj0Wn8NdKT19pE/URYmlSzqUXGFbdipO/O1
0rgdt6LOaLifaqMcRBibjuTPF8+V/88TZTVPcJqn23avsujm4+reFyiB51p3
w1AMrit6A+pal/VOu9e2B7/0HTVMhcIVN+YIDUXCM+PkFy9dCEP62sOXtU3U
6i/pPwGN6extvS4Lwi5abkYuNq6gYr6lb4IjLllLaGMfC9O4p3K1p8cZubRI
B2lmfRqaEYeNo1m5bPzUsvOV8VNHXyMMRfEPjcH+DkzIO51SrRUlx14+QTnS
9ziMzqttV9YV3bxfMjQfWcw5DfdU74FTt+ds2LlqvJyzWQxvWA7+7cnBDQF1
a3C/DxPQu/2PZ3iE3Ksouvmo5F7jB9TyHXiipT6NARJDnUkAWMk21zfO6EjU
8TynC6q3SqizHVND91bqGz1OjMio/d85pT1KgzOnw+IAaxISquqoRahS19Mm
91SSUOy1ALCILha+kP5FUuSOEM7ZkOWOmSu6NXQXkfDIuDmvrXQ64rocwG87
Evhd3O5e7KneSbReNa0X9fT0CFcbl36/YrSRwWweUK1Vq+p4lYsQW6oJP4YT
C9ifvA/UMiVsoFRXyjyLT7U5sERYzRnIXwL5TPqs8I93uWTc48C72MdbRKrc
R627qeeBv1JPj03Vp1CvDeHjbGCM2SCzJ4NjuEjr1fUatj0SvZRO4iKJ7jfc
LduRkqkqzJef2zlAdazgmbrNrgnML74gPxbhXbCOY0zXoIoDZR1MB9tu9Suo
57ly6tnHMRHgzKM1gmex/wetfxmtn/JcBGNvnSizyWWOdBl7YoMqRNTJVaWJ
kE3zaJ497E3El7DpeZrOvjanKNS7PG/Om+6/tGHmGSyJw0LkFzCVnvhSxfNS
IiF4NztWuIGoR6Za+rFXl0f6fN7QVjCV2PZ2bQ6Opl/9tG3gIK+SCiWK1Ilx
AddmDf0LIl3TEWVPY8J2AWx6F7tYvyo0tRTfMlm1kv3B+25tXsRWK0/X/LDm
A14njl7ih2JtKhDJ7kJt+gG2RVWYR3TL8flUg8K57NUmTv9BJIhzRpesYIfs
amQEvr1JyZbjG2+EEvGp9ueV30HU7BLIL1vg5Qe++SSb0h8r/FzF3tOz3j6f
U1KPlDj9a/U4+TaXEHeRIjnP5skHmJ7J0zA39N8KuzAy9RO1mBfPfAPAHuwX
2FOKR7JZ0CecsxezdOCjVgnV2UcRb2e3TSLbojRDzIsEicjOIyzEjMjcLUgM
k0lcwGsZ4m55UiqRnaqEdjVNl+1nftWCpPn6IN0BBPwAgO6Thxkh3QHw465w
j4sjYnax9sCW3YlRLVvvC1cGW0D1aRL26Y9GTwXoLhKZ+wZoun1P6VwUHZHm
pTvoOhWQumgjiuhgHrxyMEl4i65F1b6fi9I6q3s/NqUI5z6qWO9PT/s9qaZY
L6CnVxrfH6PvnStZqhU+OTaJlQ7e0j5Srg+kCe59Tm/eJ0XvoDQ+fgOmQ6IC
bvU/WICzWnSd1bcVmvsBQbvord13V0gJOb7lnTZ6+kBKT09lAZq3vGh6wBk8
kBGlY6fU9lqWaC548HeLssdX0cBqFq2i7+cwWkXJzZGg8bXx+/+iTTp+cWfw
r8ps3pnxpXjxynM/ajvpdn9444yXtY8omlZ6f5finnOFnI9FOBjfsZrqd5K+
53wOke+QvCZfzx40wjq4DcIAtKGSOVYDVsN69hsIU8auMTI9pDSkLmGUY3cz
b8OX1FbeB+FLwKMLjHsPxuipHzxO0VcuXkhfD0721N4A8AxSeC48uUTDcRB4
Bmk8pNeMyfRCL345HFMHUS/0yoHHFTARPINe+mo4FoJn0Iuvh+NY8Ax67ewA
ntsaL/TiR6hzGZz3jpMDlAAMAw/eC73098bo7j2nl4t45l7oxYeMxdgLvXiq
QVFx8UIvfvYY/+zn5CyBcz/wDHrxK8boVjxHD8atJ9tr/9g5NQA8g1489VsF
c8nmyaWfqQQsN5gV8YqC4gJLgaGwYK3BUlBSrC0pNi42FBTTB8xio8GcXVVQ
bInOU8RZ8s0lFWPXAnMrc4wmijwr6/XKyiyT0VxWUgxlWKqyygma1VhpgifW
6IKY9DXFloIiY5bGbDRYjEvWFBnNBTlqs9lQNc9sNC4ej1jwK0uy8mKVeUZj
bkyWPJ4gsuLiY2OzlHlyZVZsfGyMIifXkGDMmUmZmqVZUFxekkMz0fPlZoMJ
mpSlMRQW0oi5lSbzM5olxoos77XGXLO5xFxmtDx1aKmlqtCYYSyzzDdashZn
GIvLSsyQLSf/KYXOUJwLOT3+jFFQCmh3PNPXoUCL0QwjMoaIkUcT0QRuzMvO
nanIic2VKxQ58Tk5sdkJ8vi4bEKRIFfCsUERZ5DHxeYlVCoVWYq4GaacGYXU
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority12" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority13" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
zbvrro0/uBMP1sQbS3hgLDBoFHFJAqZuMdkg6pJ2XEMtxmGo+pHUbzA9vi9i
UalYCm9QebcXlTs/zdCSjTEUhP/Joiyle897I0pG8ypvGORys9YErFJVxRTq
ume+KlBN2aTsGMjDmHRqoRctjHHOu02TQsG47ARFRy8h89sbR3R1MXpK3YIO
7myF5Q5O4c3UIBXaQzU3g8pkXS8mU1vBI1I1yyCrroik+YhEGr7JuJesN3yT
+YALf7N/5+q98IIFz5G5bK+0jXQnh0FhAMWVTefl1bty5+ga+V1cqaqMUeuY
z9OcXqUH/Ca0LWByFjdTdG2Z6QIsXT/VGRMS9FxMNGGm+aY/p79Uo26hC3zJ
gQW9DArvfvT2+xzWkRhX1QNc1TVc1aLkU0JVgV9jph+W6dd80G8wzc8iza+W
uk99KRZnsiyOZB3HnRtXp3O3QPsupv/KvhlLuNaRYNMcysrnUPw5Qm8OZVdB
rxeluyq6p4rzXWaMq9oBrtoarhpaWE0w87fMmaTMmQ8OznybNnOeoi1aeBm2
cv6ylcrWK9fM7ajV6SjQ7kALd2Oi0x0i42aRcb6A4i8QegvQwlmU7tPRPYc5
PYdjXNUPcNXXcNXRwuqC442Zx7HMpQ+VHAYVHSwUHdDCjtiIxbIRuvWIx9w3
tTpvCrTfoIUHMaawg0lpZlLymRR/ptCbiRZupjCDo1nBHFZwjGnwAa7GGq4G
WlhDUHon05KcaflQyXlQ0dlC0Rkt7IJ5my7zJlt7u871vqHjfVb7A1qYQxJl
d4g0m0Wa+SJNf1G2N6YICzMUeYujty/mbF8cE7j4QMDiNVztor3CullkXo5A
96LdFx5MYUDB80ZKsmp68qEedQUrXer8I9pajTx46U28tNMgXqYSL//QxF+u
JF7qmhAv0/GX6psY+MvbK/CXY8b4y+8MiJkjxEs/V/TyxiwvLlN4Rp8aZhCR
nIKVCwx4bQJdMlk3gtFEUl2JW3jBmoO1hiF6unNzXxZxGJYDbm5Ky3PN7JDN
wcuZL+t06Obq5/TT7TxoWxt5Fdp0uiLpa1LtStXDJGod79BBR3pFgN3TAAML
epZKNyldTWTCFDyjBhjV8hpqdcH1fsijDwfkkFanaAqfg4k3h6YcN/OoCGC/
IhnClGfptf+MPEn/EJDD9Z0aGeV63MznlQb5BfmAIIBiqo3TPSKn+6+DnDkh
enPm43SHDbj1HLTJNYuqCIhSTBTQlMkvUhJhViCdzivjYkpsXcLX1yxM+SY3
OOEsOBeZq1ChsWhhSEAO86/0Z2quZ40QC+7kKRbOzEGEoejxwy90n8CcMxUp
YeoqCtmvna1/qU3zJe8oOzNrPVktRK9oIU7C1QE3x68ccs3KKgIKhN+0IRLI
R+Uk+MhJ+GER+XhucFsFLw98tkHf6VpRRgCFbJCQjFUEjH1BnmPByDIyfP7M
jJeSiunZMlMF2PnVbIZ7sZQhLBnM+JZJu52GlXPMQZNtabj/58n9f8C0+6Bv
+hJVnFDNAWfr67ppvilX9Kkbi5S+RVGjTGkqaijky2eNmdK/8qVaMoWCC/YL
Ge613c7FVaE0rQzsuBldmHyIg1FWXxfMhf0sMvD9TstnurLYX/mmW9kJcXEG
qQ64UdQ255oxhRG6m0kLQ1PA5JgL5SbXSJ5SnVUmb1GIXlutGkHo0jKNy9YD
ATndqiC626ZzLegM1WYyoQgsJZPyOt3E46tTiH4vFXnUK0FUbEdU+LEKgH5r
DyGvoaAM1GXdyr5Iz/JNsda9SFew5jR1p5SBGshK9Ck7e1yrUpkb7CW0oa9U
PaSiUMf5Ri04h6dmYQwaK0caM8bp/UtOb0WmYEmI3lOmOmEBtmUa92xvBOTU
qlUEYLTrXirI2q7LVd2sMqXqQ8tSmnODsygO9PNIst0g2c7Qg74pdrqWFuj9
ZrZambyZWQpNK4YCxaZAraIRuz6PGdcmoD8RYA5c3TFTSoO6PoO0EstnavOz
k3kZaiLBEnrBjFS3JVaMN5BYjlJJMSlZgpXUx4a2zJRrTMF6Rk51I+d6PdW9
dpZCcyFFOHsfty7Za51Co+IPpHpqwzoFBXYHs5iqexjPXtx3RqTwu1aP6gwV
Wgxm0U33RBnn7e+uX0gyjKmP0rhiMlsbJhaiiQxGbZSQqc9jEylxJl+h3PJO
LS2RsW6PD1PUVscPHdo46xeF+GY1oZX+BS5XwOPpM9i7OKokUlaSgccy1brw
n6iKpGhSRG0RyRKn4g1OBQWo+N04OeGuVTfXSIFF/VUxhVfwNoO7QnBX60Ud
ZwWzmxRN0/lAVdVneHAwFvUmpHKvNNHe3FsLhUZvuOxAr61Az2yRxS8K+zlf
ajJ1BDQYGqaJ6GUbTdH7+UGFvyzvDNLOEPQOA71zHmr9opDYrEZZm0WL8GIw
dY6iiW4crF6NvE9QR+CCTfO1KmEjiyxX9r2AZCZZefTM941+d7VSXWvUw7OM
KoDR4b5Bat9Vfcj3Neq7m43ecZMPDvexaZIH+ton5agkSXRL3kyFZnYyU/di
8qGLq6gdnqSroK4iqkKz0g2msR6u/1qkf4uXLEod6D/ZDfRvMEjov9YEdKwl
bWQiHXczOHPpdw4EFXRCpIyiF0TSbro8FaZgerghUjaFZne7rJyRwss5o73O
BA9XemnS5gb3RSFKHmf004sZmlLkX7qa8vgwgzTl5c1zQrN90z/zSMMjlvtM
auG64e3WJBTrzZiCasMr2gc1ldcFAbHj27HxuMbNc1ysXi1W/MxqF6fh1lcM
0LJmA4003F9bThd5RTFj9EH3h6E3W59EUl1GX0qmErDM6/fVBay9J+NyAmZ+
wcVp5AKNf6UuCVHyBhqrLmZrnwEai+Q0phrIaRyZg33jS/2PII2IYT7PnK2X
B4h9UzYDYnqgqQPz2K806cREkRO4q1FyAOWGE+7ntQpTfq71bfe6EL3AgFmE
n/+nTGPRpvXbc7BZFQGMTPYlTRTSLZOn/NxixpSf/7WJbHs8uEBxC+HnQbD7
Z3Wwuy/TnMPmzED7nhSAaIoo1nWwSOpzFoSyGdD7koVnGk95pvmP0qugnGez
ogkdXQL+t/5pE6K0C3J4W9QMS8R/wgy5juzl/IeaNX7jm77tVRqR2HQG3E58
q3XcrDEtQnfN9vVNqSlYXe16JhGKc9MfcBgP0qQcio895VGUMF2tgVdm4jGD
nRs8puhPsJAALGx9kOmb4vcq/cyywVRPlBv/VpjKjckbpiie76+0MjjnjEET
UAzP3Iy69m+tTfbYZ0Xoprgcn4Ek5iWXmO5MJDEqSoJbyZ8fD8YyoqZCMEtH
eAglnAyUcGgvdBbbzQQ2swQYAhoIpej8Z/e3vtTduhlTUT5mY4jSzWS/OZzF
HDQ0cA6OOz6XizJOKSg4x8Sw0QRQQQaeZ/aUaWRue749p9ugIiBBYzNpJorb
m+XUCWbKUYJfypbjwT4ZcfQEJE53wwG3r45ZHjdjEuvEgV34vdqeU2BYEXBR
7DMPrUP2la9zUb7OX35kv+PBCRkJdOr8lELbjkMGgNBmXlLzNQU2t6/bIcxp
RPAu80mRWTSAtugztlEHYYh63iW1bWjIdz+o+eH/Bu+oP9aY/GgOx8OTHFTG
pTfzcrhGLwkjSc6QNruedw9Rep78A+TbraDkMiLfKsrz7XHethC9V3VGKfvv
Kk5WE97HC/TT/9walwZJGtsmT9J/yCftOM7xC9EbMDEm530D0BENufgN7nbx
crMLNC865kvld2fgZnfOaMBNeFzvuFkRTQswCuYHU5gERtkrn7LDvPmYb3ri
GDFFwXjA7Tu9XTlMYzA7bXeOa0L0ys24BY48cy7Os//Wl5zIbAM80K0IeID+
mE4v0Keyy47FIk+o1ZFHAr58/X3mjOO+6V/bHcTXb4D1e/SMj5uN0Z4ASQJ/
IOkVQVKSfMoNc/ZxX+pRr4NgWsh0vggIfpTW/JJTEdDmSvWzyl2sSHblCoKw
IgAcAi479+FKZcC860P8kVN4UeWYN1iOZEuUgkJyTOa4m0JKXwzxNzM815ec
/Sq9jqeXBZSn65OPkabgy3PzIiA4m3lwyrDLwLA9zupTHQV6XyM2RXpyh8+T
0/zGvA1m5eZOsjlnwO1HfRfA7UopYqy8IATYzBLjU07Kpwybj8GUb0OJKXPM
Btzu6C8/buZ1MEL37zlffpEOhsD5Um4I+6hThjB+QrArRG8r2ZxAazmAfiK/
CMopMAs1BLs/DXZ/1hCfckM+ZXY+Fh6iF3qDmJJ9rEzDM8Y9OAczrwigz7x6
VQ853lW5w7D1pxxGOTal5Hhw2cGTk4H0uXNxSxhA2OOwuuJ+S6EvNb+NIP+c
OVQqhsvP7AOkRz4BSC81r+CL5ynFsCiZgG9tcmqi83kRIXoJN+YSDJwEuBnr
E5zDnBuiNLgd5bQXc6mRsbvO66f7RulfxWOsvlzk5f/E2LmNJ3ypRYyvCALm
QozN9z5uNgjyiwuIaELyE0TI5Tcg3/52fm1kiF6T6SLyKeSvSl9Jm6Mu6IQo
NaSEzOGwm/VRetgxh4lpnUZIt+1EKaKgW05Bao3cVG7MZef7pl9lfjVlKoOW
COmSf0b8X+U0PE95kDwN6f690fD348EWKr/Iw6xxcE7twooAH9rDOn2khYdy
LXAM5eGPn9J6PNhLpYTQQjNoYfhghm9K8at0kpH3hUhk9pto8jopVh5yR5VC
v8w5s+ipKR6YfIHRjgtGIUptgZN+ZRI/ECJvvoFmIzQfdR9YP5fy5rygDaAL
NpP8SiEgIV+V4biLo6AHmNardj01BWHaVoR3jvzxG6cI8I7AEUCSq5WjXlA8
4I7hdABJPry5lH4ASXVPGZwa9bsDxeqKtIdqwtXD698gTDemPoXpXMfkmI6l
XXB/IWVr4woc0z2fNXrmoNeau1qVilUegq1MZ0CtDR74lPfyKXO1i+4vrN/2
gpiipTN65njz2rtajSuWqR56/0pdkZTCHecQyJZjGcPsZCv81eOIwHMfZQo8
dzsjMKqKwLOq4ruld9g6MZqHdbV16CnJI67UmSSrtRwdysxkto5o61amCxDB
JJEm8fEKt/ffuPyiGhugUyfi7gboGLr03F2tNtjc0dKl140r2MpxIbA2IKtR
yhSy+tOrG2btq9Ops85QTKH7dWSku0Varc3S6WSPKXws0gA4zv0oh+ODGlNF
wZ9udfR7VsO/+hNFwf7dxl9ofPvrQpL/cF83daLHGYe6UYMuEjeEfpk0k6Ou
2rnQFcN2fetWdxCYQqssqM0alze9UFMPWJ09liULqu3UxjW9iwPIVtX8KCkQ
kC1TFVU2z1OJysYOwWGuqx4dwWEDMA+TjWdUf0aT1ME8ik56UZ+AeZAzAF/x
gkJTwTgJf+WksZVDQq1N6CF6HJY14fo1ELuOjAXmdC+pCKhV0/c2QS6gnyKv
3EzklZs4hZ0XzFB7CC6AMdzXbB/8uzFt5QwGuLcPmfyq/dlfZ6zO1rqDDzDT
qQWRGW8yvrAQDnizzcA26e8USWBrXLomp0v9pO4DBrLD+rAsTfWNqLbQlNcW
s5OnjOoH7cqNphfyg9lqjxi4z63scbb+PFDsS37ItAdve0SH5OeA0xjKkqOL
b8kOecEemb8TKOWF9YDbnu/bcs04mRG6s5ZpsZTJCkK7FKIsFeQBNDgC1Cfg
wekVfSo4/fw9Txyi51NvQwjod4iNOXHbc3g2FQHNmQ5rWAjaOMoF1CjffMcx
sldecEJmGxEjvgB6t/2V6UtuRZC3m/UJ5HUOhEVSO0w5iwdZ0NttioKGyVF5
0Nit7BWWw7UNZRFoJhPKktdOIUqBwn3mnMUMM5iSaI7HmX+m7FH2Ccups40i
phyHKXcPLg9RCv1On9rMNlt+FtC+h9kk2j8fYMtw39Hj3Mw7eZdn/UTgS2Hr
RtDH6Koheh0my4j81F6mEZ4/HJKDLasIiBJ/Po5zvVnOdYLZFNfzT5G35AU3
qz0lzGLf9sGOg2JcAHE9zsUJZ0FhTwEwOwdeOoqCZJCSPEjmyInfr5wAxC+r
ZXXje3eBSZ4ahiLDSbQBdt0Cu97YgCspWmlKSU8uYCdD9G5sdyKU9BbS6enN
wTk8J6hLWNuizZAVb5OTOygnV/lcSnReMFNjiFDSbaAxyeE7X/JQgbdSlkoi
ou4zJTSFMVdu+OdSYvKC7cTDk7EfpmSf/dY3ZZi5EMrDuSDTYjwt7iFPpUWv
+aEXfKnveGLiEGj5gJvjvJnHzXgaWvlYefdJhAHz8Smx8ik+80UXfNNHEogp
DTBly7zO42YJ4gjdHSH5iQdRJs2XZ9KncjkculR7KkSv282ZUNtYmYba+ZiQ
HI5zRQDHMMF0LpJDglwOBXKmbp9P4ecF54rHCaZeAVN5O/J9U8Y9ts2XH/u7
/PpZVsUm+dF+1g8XmLGX5DcGJsEbuH95y28F3G+fSnn0vfzk//Cm5YqX1sov
FJiXDih7H/vn0sB7XPvc4plTdxF15/6el2tWBMxGXzr9HDFbe1rOrKsyYpaJ
MNSP2Pchen+7uaQkr3/OqGE8u1PQfUfw7E73szuc53cKnt9h9tzh9dzp7rnD
UR2zsqBUq7YJlgiXdd/hqI9ZXYTHMXh0gUftMSs7xWrVzclLKP/pvsOcNWZV
AI8RyUuEW7vv8HRgLq1a9SE8xnbf6TaEt/A4AIP53XcKjOGtUrWqV8oS4bfd
d2rNxqxE8BgKjyeAmLljVphKtWpTyhLKNRi8aMxKAI8D8FgFj0vGrBhq1arr
hEuEj2CwzZhVAjwGCZdQnsBStmNWzfB4AN4OwlsnIFKjWvURPI5038Gcx6xy
xZNn6JgLlETPnTlLGw8mK29hDtRrC0++Suey5/HB0RfbzZNDtW9xA6ODgbXN
F13yTZ/oFgNQKnJlqBZfc5gbTQ7K4cBSZBMXaynMeTTvPL2bnAPmYqqMe/k8
ZC4C5OVXyCfygl9pyAA1KS8A1CRcEJIjcKkI4M3NNZ2HjCz3HyOTz7p9JSU/
L3hMg6E0OevHHxPyzAZBzR4Xz3sfggocuzBZgcOMhVAVDFz563Vqun4K0O1L
1VTKniTWuurnud5ALOYOxD5zmfOxjHcB5oXi9nFAbh/kywU/heitTHUHZ8AU
srXKNQoL1x8af80RqQKFRSiOqBJ1oHyK1WXe5RC9dS/cUzSFN5S57OY1C85B
rZFaDSXDT7AFXYjLsVgux00LEn70pWqvzhasInhae/lrU1t0uDpD7yJdYUay
+wvyNdjpuRq+0xP5TvsuC66E6G0KWjG109a1aiFK3qmVYOyXYScM3ym1TL5T
yIJa2GlWmFwIj6Mv+abMfJ3O/XrBLyigX1wwGdArAsp+rHBdoKyQmoL9hvF0
PhwFQMGhp5B0OzZncQUVAd1jf122slukqPiQ7tr8H8ANDd3dsGJDQWnHmmLy
fHR6Xgwk2BFl4EM5CU0LeJd9qTp75SQMaS34WYgdNwvNTj7E4WnaeWSrrFeB
mOmEa95r0ZTmD1WltOUFC7J1pzS/pfAX0/8gKekgKelkb35B/gPZ2SxcSn4q
U1I6VFhbEqIXFLRySkrdX11GP0qRw1wJqietPDernFmCTAYnVeGJnNQ3C9qA
1NmXpkgtHj/0o2+K3uv05B8uP0LSql30j7SidhZDMorQHeaUen+VQn6dHtBz
+fezBZwI1dC+xQWLylhZKxmHu7U6KjQp51S4bCZFZpXKqfp7cLHiJleSwGu2
tgeLzt0bzGzTFArhPUOo9cuid8oXUfH3DumeKP6eyLnad1VQHaK364Wcq63r
rjXqAFcFiKvklcPMlYsTlgB5N/DUyK3GUyNwMX+2yt87c0iroudA2fwTOEj4
Tb+v3phwQpQiggpMGbvc87JVXiEFHMAVULZE7rC3yDJIy9mGUwqot3xiGoMU
YIAUYJC940XKB+SyBKljclL/vsprgMrw3KopUvctLA1RijunT/2h5vlXyGUb
Jl32Vfoz8tV3IFq6mjK8Dm94AaK0v6F6TlPB1O67mogG7DVw0Mi7SzdJuBqh
66zdvgS30HLOr8wZEm+OmSFTgaKIWUFKsKRTW05e5nKsNZk6DbqABm3xI2rO
dvyI2oRO/TZf0dH2TjfLRQssezNA5c1fvrVZ28zaQyWt+7RnkNXJ1rbJCdRW
oFPtqMTZPJbpLtgq2A41wFF3BDJvHMFBZiqATP4s0eOFlNzU1exALx/YZvbp
y48WcnObdZg6g4iMALw4GZST8flFxRDbO0zz7VNkUHfEs9eyzYuVSdGk3Loi
0gNlvMzYTkVlBgPKjG+/KAj5RTXI2xyKk4A0KE7O2ar/ohDsugQ4zdKDLSxx
TqNC5Fv8oBhhe4dn/uXUFuk7ltmsjTIP0oAt8mCLZA18i53yLa59wfzyF9XQ
r+Vb/HRT65wGlExZ5lAyCcwbj29tDgHuhwmIfVLO/c+zOh4vFOb9NMX9Fz/9
2rCwLo9hCKXZbmo9NdUQr32a9VDtA+GEG7yz7tQ9q6LVJxRY1LSZKbyC32cv
uKtVrJTsJtjq9SVsISK2OCXfomLWB9jiRKV8iyvP6hfWnWDowRZ70RZ6RHkl
3+LPnXUX71nVrj45tcW7L/TvajX8VsK1Q58cN6lg2Cqy5j2Btv16ifRje6nY
50rdRpLmlb5Ky9lzZjIeO63vquRqeXmw3BXcrFuMNdOa15X3s0o8szZxzvUs
l7CoO4o2cVK7bPpdNHd3knSlCxuLSVqmu75iWYxGyN5VSUXPdBbOZDwbiZBu
cNet4XiTNl5pLRXrnvyMtHF9V9kG6f1nrD+c8cWKB1g6RkxP2gOm4tMh/hWZ
zXqpKHwW0PB6WYS00cSjhWvtcaa9tLq1pp/lHHhY8RGHrlnHuDe8yt3EugXG
pukbwEYftrUTDEiKM4kO/pYfoSP73mjx29moYzxRvxyNaOqqKEcdjw8kbTlT
9xkpu6pvPLPr/eUu6bfuaK/sPsfTQzWZUlHmjGns7+tnbV4MFAe1L+tnrZyH
Wi3LBli2jt0giKHxAVbpPWljLNd9KfAx6tQpKx9gjXy7ibNp1KGfFbcIhh/t
tR1gxR1FXSXQ6IVpo8X9LR/3jInOUIHfP2EBUYCGF8Xkn00TBlghrjDjxONf
nGq7lxwZYuhYvRdtVEfDlz8FKeOsOYhPFOLMD1WUa9kBa/GJ0sbLvc6Bpyja
Dz+R1mWpiK+BJBtTLRXZoEUe2/hJRYtmoJZtvlR0Wd1pJqMz9ki7c3T7NXGu
M9eblB3RWiX2OY9tImXzu4rFY42efc6Bp0lrFd3tunqcn7NyjBFrPfEDrHSc
W2iM6jMIyxqNk7XGDrCo65GiWx0GWDmOqNUFEgnxQa32CpCNL94HIjn/BbRi
+vb3t5iv4ailMjRVH6xLctd2XfpnmVi3CGdwtFQJ1+6+06cv1i41dBdq223o
G/3Y834RFVde8uiBDT0up6UiNWLY/dNbgwwbXXc1CR5bf+yrEuc+A1PM3tZa
Ic7NBpvsHKrqZ31pwEbWt+KKxMazJym81Tn6JUnzgapHXevewtakzC7nwDTE
boK4zxk8YP00yl6XinOrMBuGqzvbfemE5kb6vaBR58Bb5NWK7vaF0CpWXKXo
Hl8zekwRSaQscejDRG+Z2CcP3MCv9RruBua4dHrBDUYIh7CWsMyNcKHGSlg0
feYkcfxCmQ0YyOezphnI9X7WhXfIFCf6WYk9jGO87ynTHARscuY/omlx2SBt
zKS5E0bKr5Yh9T+eBaLqXO7fHg4iftA5VMbVsAYbGc4H1x0TvSfedp0oqAXJ
NfWVgwlY0tbhK/bFebZ88G8vF+v6IGH2lYgNtlkTShlaNiEBC7JHFnSqtVzc
dqDOm6R5qq9S5p6aP4vzKQu2DojZ0QPgS/qo1QWGEjKb/amYHztH78mOZao8
29YY1Dpc0+IceIh0+29MKDMQidskSKXrW66JDdTcrSne3fyaofdJrc6BF5AW
bDPBDf5UgFaJp8Q5MIcKmizrbP04Q/OP+biM9/ezbtqhVt9oPyt9NTjzuSHp
ACu+SSraqI9CmPQIyMFnM2Kw67rYpwTFslPtFeK2AbRvIjCdu5T0qQUcBQfp
wC2gC1p/k6D1/umQc+BLRWiNJEri+d+Q1cG+skfL/Fpknl2bcZEl3B+ylvWW
i33GsDTrfxZLBaJTkPnZ83vA/KgL8LhjP8BaNr+bASZl59+3TNZTcdAMAoKt
WCr6fcY089g3wHq5qGjSPvYnHSLfj2Goeb8YPzU0Gtn6pTHn6v2UdfpMkxsl
dinRfcORXT8K3ECEL+wu942cHgrRQzF+yFHCco5+R/ow+EuuteZd2Ylali1l
t2a9bMJlVLaAtNDh4wVBAUM4awU28tU9d133cz1JE/KeQoWiV2P+snlMi4aC
FZqCCXx8a5IyXdkydKMCT7YG++qIrGTD1saYX6cnET/ZNU9p429UZKorrgzx
a2Q2nVLRcRWIbq8PQHRDyjxPAYGWXwFryESiregEpb9Cqt7nB28zUcuhE9Qv
xN/mS5yjfydtAEMAF3++TH23UvxMPOtcaXeKlL2HQOQCyg/qugbKh7Ry71+B
WMLajMQR0249AGnoR1LLJ142A1KYAYPaYKrpsbG98nJv6eUuJ39J3L1e28uy
WMiFr/HwLuVLRZqgp98ngP73NGvkhFe6xk7JJnyVnfDM03vdr0vGPwFJUvOp
pAqPDsfm4Wq2X99rJ+uq+G0GeObjEr40c+l7UbkK71MKS8QdEGtfzs5CUbgS
UlQOGHV7JYTjWM2v3JkrtrXE5rfGR7aAYp0DZQqfRolvqkHUk0HiQ1OPzBPy
0PTkZy9hpa9Bptc63s8qtcBpKm/qdfrYPuJL85gML+KeJD6ooA63/afQysJb
p0AZRbgX5ENE7McVdK/POfowYYzdTvkt45FdtoZRn3r8+0bPLudo0we4ucbX
SMYjISdhGdakB8OtK3FFtAJNzoFHqMjJT/fGJz0lPUSDB22e9o74d1WKDXZz
3HFb7uwa9YccdnKfYDI2jTrIWssgGRFubyth/fESGi3jA3gunoljj7in0sbH
1Oa6SK3DMwJkLjOyh8gqKz50yf5l2dKGtHWliVLRcprHp+Jyjr44xdzlnonT
rTdLYYNW634w1evTLOebAdateYPrUIRPHN3rJ4uPfElZD2a7AZjvqhLrPoOg
uxFim79UVI4DqneZEI3afkShJ7ynXNxRh/z1zfuqXikkvbeEnUEiT1NBrfeJ
Uo9rs9jBxV+paXyz5fky+8gYWDwhqde53yVD3LHe4IN5nZ3miGyppv2SIq8G
2cS/HPMaOOYLFk03alqY+FADaqxRZHyKLLYp2yFHPTW0L1O2LNGhhVCbf8vy
CYQRRvyZJpn/6Pb3MhsdlJ1tPNv3oKzu11KSP3ua/GIjm1HiTPDs3eyEK8mp
n/XHOjw7SsGyPfBWvIS1Si47+0RZfLhoGjj8BvCRGg0c5s/9EXgqm5i+SVz4
byiAOIRDhk/GQyzkin5Wq3H3OiIsjB2RVSbTpoWB2H7WLZombvxD/I+SCrHP
ApIcGV3ucY4O4vEAb0StX8qc8dzali+rGACAzKjluDsH/oGztE1ii1z0qASS
e/q2KAiwrbGRv+HuAbEqupGkhVJD3wHPlvf+7ZBQ4zhEUuvqee/fVSLeutJ9
oVay9rvMdusJQDFbv8MDdveB/BZpZM9cQ/ZkRLPZ1p4UDmo6puANHNZIIN85
R/cCuWyUkP2A3LbFqLVNAmgkDldCe0m+PcjK5oi0WGYAQZMMEnEoHELqW43L
+/0A6w+H7skQWMqXNiYTQMK/l58oe9cpbbxKPDe1Vj2V2UBI0ZsKa/uvtCZV
bbksgA09+2AZHRISYUKXZN/H1mKxz+5a60/SZwNESRyQ2iRJRTOVwehffwC4
Km57gTLv065Scdt+nOCuskzCyk9JRb/iBvXu8olxzPZTMAZopwdyMC55/uio
3jRLlgx3jTpHN+EST+6L92yZ8Ie8rnt1WgIOAp+9hnzS7n4L+GSx+GSrDQoj
Np2t1/y6KjyHkoC4bC0UM2KhaHimjEhyOgIhATHxegyIe4/32RVCXYMDdwfA
FvPwKDMCJnoJz2mVp6SN22CD1QxEzNC7pxIXyBL5VDy2Znfx/fuSPNudAz+g
6FkBCSxQhvSzN7MnESx2snxqapmIkNnA4ml4VRDv2X5dAPVN02iVuAOymu0O
ZG1d18JzkNnvPQ2LnKOCYMa29Z5fjmNwSBYlBjgEmwA4bzwN6f5eKj7Jw1aA
sb2yvSIZSZI28rucvRN09Y3Mr7dJllUe3tCybY+do2fk1WdXhn8lwsGRloor
MofwHSC9vZ4teNBp+3k6WgaevsKzRCRkpW5E2Dhyg6zJ8Ln8dOtwpEQHr1T3
Ng3t/Qhlie5ehET5YP1jja9XTJZsXT0ykLSnFi5LJDlIF6VERuhe3tU+5o8M
7Rccu0Frqxzn9H443RdP5LO9Tb0VE62VnbjeUDU0T32a78f3s3R0vZCk0yK6
xv1kkHDjJKxZdkUoeRyQQN0QqvMJhCmtlkHJaE7Er/0DrF4iVsHciipZQvha
kHzcqaFjsyYXdCqUQTHUOztrLNNtq6tni47+ZKs1Y6rVXjrV6sqwwBeDitk+
XBabVE862GXXYPYoJtEZ2U92z3DTqAw46F8E5ha7TVoszo3B4Tug5LHGS4Rf
Jo9WnupKSjwdzcHRkE3V6cjJVqZxzGSrc4sNHjB6QXphSHqJ7VDFj+KIuxeQ
71u81Vop7tg9OeOyfwhGRKz7PVKoEAPrpxUkMwBaxdKQFzhGAjAivOWKVETC
XdnuPrSQKz8uP9U1SUOsZ1fsZCvcf8/kLve64ib7+F3xk63M0wmTrXz/vZOt
y/pvwAU0m/qQsiBqGREC3DaUMdWS9E61RlcSlWgclITzp8TrcEqWENlF9gSQ
0dmb2LPOOfAn5IJxlyG4HiR/ytlnIO9MlG4ejwJ+Eo+JDHE290N4MMRZeh9x
4gw6kajqel81FSknEmU2EAPM8PAVX90ejSJbYu/Er7Q5qJrzai/mE3Ofnr4J
NWN1X5kYEZvyvcrWT03TOboFfDxUgEem8urW4QhknWX9rFXGBHPhrTl609z5
vUh88keign7f2bdvovf6QQ3kO/v9wbGhbBHgCTEflbwZmngFypfYdsoAYdJm
T1Wky+/LbIBVT5VpbmI7wLq5FY80FeFPUeCNa2odQaEnaHQ4cdUDAhVVjY6L
wfWb8Lx3BfbrRSNHjoyeP4fgqx1AZS4eK6ug5FWbDUng8fWIrhG+/zki3/FP
t76LHLqJH0f1xvSzRgzxYs5mgDVrDX7YEAN43X4ax52l4q0RU8m0/b1/K0SS
fbg+eq8F0DZNh9JjIk10UPLnOGhPET8t2t90+jwhr71Jfe8+dkn5eIxLi+ip
uCcr4+9Ffne1d1lXqwxi/2pk14+Ht0kbyzlEre3oLxsZYLUqTGKH/R97oIKc
9Khyce6kR5WJO36YZLCwd+x0T5zTNBaelYh1X+FZcAgSOGFMfcN84tiq1/F0
Tw3UTMf/H1FrJEKtyyBPXMZr+4RI/avI7KpbKn1pTqi+Iip/8dazU8JuGY1s
yfgHa1XL4iNyieoaUtbXk0XlxOWWicjRuSGexCibzhYXKKXQkQXgit8hCFe7
K0IFjoqxcYS5VkMjNgmsII2yFkelkMpCdiHLkdiEfzWtQPnMTyq6qjzNzN4N
sOKIwe/4eSTcrB59iGh91wUF3+9E9Q0JToQS3Eh1e/oS/AAO0lpOKDJFyf71
XxTl3XjYUX34r46brx4+7fAI3Hp78OGrrQ/VrTDTPNK86JMv30p79xqX3xGE
Ooio8wZP9e6ekEQaX31HukA2za+JNy5/27FqnS/zksDi/uuOVQObak1g2mB1
6+6J+2H7VT3mM29HVoxm71fPOi8MzSJL3htdkD15ym+oVrqYzDBNMcl7LRa5
hprnj2i62drNZ96Il9oGC78jmx4oHZqhJhKFcA5t7d1fLdtZMaK5hRhwYtl4
Cgxwat37mTV0/Bxfvcwz+XuyqbQp0vitppsBbPnzzvaR7AUCtGPg/f7lrUkd
q1QdeJcEHl3SJ6sONJBVvlYWxejX8BtuUKAVXfkHv+GcErSGZ9/nN3SchC6H
Vv6TJHVjSym+VVdYizriZJQ/qslS9QEqpFWjYcZXJ99K9LUTcO56wypLZbNd
PmB3ris8P8644Hvw4KE82Qjly9rFVCTNqI6X76Sl+42vRpCUw1JFPFHIOOss
I+832P8iJQdoOlXNb1i10BJIpUvC2i/wG4IQgX9vKeS/CKXMP6uXZSp5m/dy
SDaSjbpsFQ3wrt1VL2Unlq1IOQcaGQgztnxN2sH8Z3WlW/wGdxpa5lQpv8FK
qehTubevGqgc1Vy7BEl2zynbEFz0t8KGiI6nJQ6g5crS3adHTtevevO4+6KA
3vW246TaEWXRoGHpvWLoePVy6Gkg6njjJ7l8oHs23cRU9+zxjyKL1JC/s6Uv
+Q3DwNjfT0r4T1YNaOBCqH4p+dAFJvUCC0MmFXVqIHKisL991a7dyIpaI5+s
+ukbwafr3AZ785/G06UBfoOXCmwa4Vfo+RCRdV86PnD2NXP2ubY9JySvk0C3
3sT7W5mT79uDcCoTb10mOvZ3nsP5WC5Re4IzNtQZQoyQRM7LUz/LPbS1672h
DMz7iBl6VK7sjT/1Mbxz1cLPgc7G80NPVjXRVUUrTLPOluzdcj9yS83e6iuS
8abwio9v4dWU/wy8/igJN7b8EZRTWQg2447UZFgDXSHJ58hnnS6AC2kfDKWe
a4ytPj8qBcJXvTk5jf2H4cZXE6ax/9tL/ouzFFNQPlkiNSqUPQExn8eZ2Vba
/wcw0zjwvmOTGgh+16kLu2cXbuDi/HwYeMeX7TZ+m92ilovs1bVUknf+dc0V
oMU1GblzV7zsIB2caK25FzhRn1Evv+E57iHV5/kNRshDYgwK+Q0fYeHoL7pA
oz9tRCq7tad91eE8aHkUvu1ctS4fb71/smrdz6hV8/rpKtWfp3H0ZKfx1eZp
HL2GkHBSEW2V2MVvKMOtni/hN/yAc8W/JSET0nz67mPhbuOrO3E77Yqtx0PC
aJWLKykDRFj7frZEUtOUmY32vbC/fdVP+6fteyPW2DIMSf1kb6zx1ZuCsE9N
aiSb8guSiqlEkvfybddI9vVq/osE3KYaJYm972U3+Q27aBAcoqrB96qBhTOw
UkVXmHH5nwIRvntFzWhNyW7j8mN4rIyqfBkrLd1rfNUNhad8yX6QLMW8gOoq
oqeHnncxVT5z/O+OVYd/7wZrernXoPSt/i3wLeSp0VXA+s8461U14e24dUo7
yoiO3vvKpniI7X394X64sb1P8pdot7+vt777cH//jxooUO0dH9GcgYesyOoR
zZ1qeOvAqOaPxtB6+HrbqObQXNTqPzGq6WacBa33DqOnRYPZ+oX8VHfdLJu0
78v5er+XZz74vqo8u6Hs6LPvH9y7+6js3DZ/+cn2R8l1se5fOK4EDNxhC2mL
OBtz6GdRiTPTcnRXdQSVM3HhgG4+IJxj7w+5rgBHPH6Ai8XE4Ri0JlCr3A/G
vSEOxyA5nsTTJDq8zpt+45UI9eS/6hIJ6xh+4VKR2Xd9ogsK9lUKkzd7ExPo
EMmJ9GlBe67HOfqnyZQdX9grPd27Uh+/1hoFPohrrVFAKrOnruSqPGU2l6Wi
3XiJmxAhFZmgM8yqTqmofPoRqZ2EtRK/5xpygrJo+gF+p3N0NpGkX410Do3d
h7r7En7Jkt0T4y9J8gSOr+BFds2Qc3R7mbhtCL+n6SkT+5glf0bcO3TYQw1r
Ph3EmlDRoRifjyqcM/8u/T1BehJcohHQSsfPgyMkzoHjuDYSoeB8hr+9DH31
+BVBJmioZTryAACopg6b/DmcKb0mbpu8P6oSGxwgjhPfd45e/9hq389Kt8cr
vbF+Vhxxt+UICEW/AMkzBl2t6Xh8Kiyb8EHFh5/us20LP/nTY5BN7ef9mdML
cM/Z05aIjcilTlvi8pYL05eQmO+YvsQHe+IuKLtrubjdpQYKxOnXBRVQ9qOC
9VwLGLUOftB1IH9o5GNfpTh3spACiApA9qY9bvC2EpYtjqxGrwHbxCHCASh6
iROuawOsZStpNavZ61MnZOvcm1QWar9Nkp0mp7iqfqFNaqvRqj3bk9Q/Q8eq
M1bCOr9zGqmPhzeuIIpUpw09SQD/FPWnMV8S/us05r/hb/l5GvNBPX/smr5i
+Yp/LZE4SsqOV2pYarL+F60ZM21k4X9MX7LqRMn0JYd0pm4MPjTJEiSsm/hx
GDqILg2XivZOXz4uso+8njhCi0a1RggU4HghOib6nIZOtZzAq8S5XeiAV1K5
AfwKL4YrofTZS/gaFBJheFlc3iltrKJO3tpVbZPZVIE9ocM66y7isO75NMJb
PP0Z7vhBTZPkXRIYtxAv5jxboZibpT/NL/90DsxWQFSe7nKO7gUql+NXvi3F
Yt1B4loNfDEWPzpoLQfK32nhJ3NA7Wq8PJuAgmMjzYO4yrDZ1pXEbwFPxiNb
NUS2GjzaVUFkExHeB1VzJX7Ic7nXOfqJ/Hym54N/V7nYx4kErh7efk38KDa8
ThFojrsigZpbhzft/Hk0Uto4QSOOMIasm4aSPE/YTr+Ag+hyiEQcpNkkjbok
SRvt5UeRTZKa/HYL/FADtOLzJa6VIXR8S6Kl1uFlhG1k7/vwPtuaVum2ocpt
7UnbgP48/K7pCMSRg/htEvAUbY8f1Y4meA69TwJVnrz1q7OKVbggld7+nH77
cm8SaM2Gicr4LAktGS/Dm7oU8HOJvRtmWwhNK69a2VUUL1t2yarCwb60UE+n
pHRZmVWltcMxe7sS64pZtnbHrFkLp6XNmKerjlgxJzHN/jwZoPp1ZQg0Xxhq
TzJ9vo9yjsja1aXva64AXOjHpoHH8/wXCxk1u0Vrm8NYBK7vGNG8Y4QSYuRH
gAHcDzdNFnNrxJS3+hllCp3OGTi2kCa29iWNZusTb28VehUEnlY8bstxTQ3f
rfDnH301fxQq4hO2ueg2RBo81xqeWEfsskdFu+xT8g+8OA8gQQ8fFPNxFzFI
+pkaUSLd6qsuleUB2MjFoddJoDaBMgewnmvp27zzfTVXIo3L7wlEPnPI83YY
lb7+IAEos+wCYJqbewiYfg3hhQv97YEIAEc9aSq0rp3Erzv39UIpFAFAYM9C
PP0bjWp+swhBqLATLsvuOGSldZ8M4Zg3hO0a/xjbueoIDrpi9HuHxgsBaHwU
pBMYq3coyWUOTv2IdB9OfdtriisSS0BhoemkWuLzZX1QXSzCt66+uXeL7B2s
qIQklGpYM5eY/uEcMT32M20ctjiOZtcTC/WqRYFCLQrDngDgFFDOf1K0nO9c
dUUZX4df2oLQ3NZWEIktDsGkp0ol/lDEXUQwKmY2VFBvcNh6ooT/Ip3Yq78H
3yH5wn1VXF3Vto6oyCmMxKW3Xg3vfFpyFgd3INsOVOSdrH5/R70W6efseem+
+zv9Snd+KJS0r1pohwBwTfzTVVfU8YnOLrY4a2PSbny77rdDbvh2vRoa+AC/
0qeI5kqAg/YDBG6UVt+S1lTHGpcvJ6ZOqFKIudITqgIogZU7b+53lu1/skrd
C6+uo6pvvv9Y2OeoQRhM72u/W7LZUOUFIQC9ywGwYxyu+tkX+tl4KRnecYH/
woioFu+/P9mbtGXZU5yrm5FCHST4/ftGs6UHiZogMvGCbMuo5oK10B9ePZr9
WUXbl9zzalmMgC0G3PLYiVtguw0YTum+cQ+iKm19n/dUAlWpfivsQxD/qv8b
VQ7i/ExNoRWGq8vI5SYxb3zcYXLQOxU1YlCXhg0x6JTL3clBHzZPDtrfbo1q
7nd5I6dFdkfxojGaX/i682M4IOqdOlEIvvJHs6+Dz/yNik2QBQQE3H4uvO0A
+9mEbODNF0DcMGU2qppuhRu0yjpeUj49gzj/ZERTfzFyhtcfbHsEoKMD9yF2
PMcF1bTnR1xQQ09HNJcSg066NBBnIlGnXkZ+7IUi7QshlHbXe3duXRaDn44g
swx7umphEyLk9ZMLE72DmtuJI5HZo5ot+EHCXsNRTWNLa/DfypJwwn834+Xl
aOeqn/ahVonk6aq7PtPqmJ93GttzSekoBLyp/Ngn9SFqwVv91TWyvCZ+w2a8
ktoq4b9InapfJP0yKBKbUP0Sc+oP/oubYcbz/kj5zSjn/q7SXJWXgfX1L3LG
PJu6tPGjwfF7konTkMNuT7um/UzCSt+Ag2QAuSVLpp8rFos7KJOfcEgcPkKG
46Nse28Usm2IC/Y5J6hrGVQD0T1VYp9IdHhXjS6nL8m/XkqY6JF+i2OdulY7
/6Gkp9LGWA5xOixNlNlIWHM1J68IDqyXxfazSifvJ5ta7MSyit9wgLAcUs33
8tu3UzKbU9LGyw3/O8eAzoHd6OS1JGK0dNYk4K8MlzkMsOIpk0eV4x+7SsW5
RJ4cvQYYIA0/kR7f1l6FX6eMlol1X+Mf+PUCSkxAh5KXu8oX4fdbtl1SUSYx
vMr4kw+2JnpKd+u4f3oZO7GXOsk0ny9bLmGZ47e9rVCTvNTFb6SKB1izcIDZ
Ej/AOk98p8MH4LVeKlqhgp+2guAUldlIkAG9w/7tfxhzpl86i7dOnq0euNw7
fLr92KQcj7TanZKN3aP64ABhNN5zCCTTmA+wSYBn+kywho8IQCGM9Jw1goP7
LmvAtsZTJdLyDbJYKIxWTK/LSqEmWIjXQ9f7WTn+6Kyy/Xr4CwSO9lZD8SFF
gi+r6rlJvJJGXKW0fgo/xR0lA6yRhdO4eFwq3nppioueEfEQ1QW/mwW7mGvA
nDx5nQiXxd6Til5PJycBilPi801HQK4xAFx7yyNKEGOxXV1lAyyaInEpOxQz
0VMp9nHBgSCUYrkBSPVPu8oB9O3GLxb3ebabTAdcIKJT6KS1zK/dHL/T7tkb
foy4ZQQU+AgxaneqKy4MZ5Qffhwf29m1mRhbnkg++SkO75/6zjEM3y6usP0C
/vFfa7n99DNgVGAQN3LA9Xi1DGqTZQOsUs3J21BphAydEhNMfxhg5TjjVhML
sxKljWn4+T0Y3HimzC6iFK8+u6A27oKSXgn/csThfu9EJCC+Ozj2ewqc/IDj
WVQl/o1/OlDVCvUi3uKDvZQjYb6/0uN8tjV9EWd67SH2OYfz0F4SS9xrQB1/
HGevIlMfv/U50ldqg980OB1pjyM63v8+9UVqYZ8MKoyNWv+69ektFeu+x+94
W66JO6BszyGYrQIXweuyPjCMl0vYn3M2je73l3q/wJwHQFfZ+OEC+pDzOHHM
0OIcHTDzEzDbuA3YuYlfdN0DS/2GtE7RPT6/B9UuwdOtCuR9E/96xlGCfz1z
Cb/JGjti/CVn6mubaxOj18W6+J39EUnFVRUP4kZ/g/tY4zaQZD9uHdWjVIsi
pJ1xFCszCfQ+yt/Q61IobfwND20rjrRMVMti/aSNl9ZNfnHkKfkgBuStOzTt
Ujm1yznwOl6DiCEa71k/+e2mS4Z464XJe9/83hFxywh+FTA0HpGF7NG2cDSe
Olnxxsr6isUGTdbEdU+rtViGWF+Bf4GT4AekG/wT8SdAjK+JUwYQ7WM8UkDR
9ZwVR3wZCyFsZC0ezKBafonrp7Win/UfBSpiYmN7ZX5v6eX2D36tCfyhOL7M
rp/1Rzhyi6Fr4eXTLxjBp23wW6l9hVIRH//A9UCmfhn+UXOr9POpO3f7I7LS
8Es4SzV9tkQEghI1XhcjHHw0ZmLomnhrOHFb+L6zNWYD8hygadXkhwT+PVXr
ZTYQ0epmuU/zt9+nP5e8nv5cqqkz7bnsAX4F6uQpFdlPf1PhOf35+gP8u+Rh
8Apf4g6/CWIw+F6r4oNPb4+TqOnoorttspi+DlqZN32l8oPTryNHBlir2HuP
cZxmPLdeYLlx4xAYx6/E97lg47+gKjO+ZvTjDM1e7clo7uQpGxtgfYmffkBC
jp+QlIh1d+JXdT1lYgwjWWIY/INtoaofFC4SxjfU5Txze867w6B6GOzSu4tB
Z70ec3dRMIPmrl6i+mdUY11OnQHDvs2qgGJK20KN5bzg3alVF8HgblI2DHZi
RhcFl+GDXZJhteSFWXZtVj9RtWhb0v/gwMpsYw/DXXpvKFeFi9wSmXFFwd0a
DTBYltxWl8N1Zzi2WR2lB8LgGVxExnxExkpFIMPtEiLDbuYcGPxDyou6nDOf
M5a3WdUqn4XBvtxh3h3eApHRLr1oxQfCRZRC5r6i4EF8cH8KYmobIuOuCpBB
3YdWjlqCVm6kopVlaOVBYzQ4YA5/S7qVKxqwEg0YpL8FpowME4FOVoNGiWpi
6lhdDukow6XNSqT1HFb7zPUD707WGpHxLr0vlGAwZbEJrNZshlZ7P+dgXU7A
hXOWbVaD2mjr02hl5hdaerv01qgopS2i7DA5WxTss8hdu0T1SproRo5JCWNj
m1XzLFPlLentru4Bd7K2IDIerXUF7RxeHVYUXGCJVrZNB6ZItxBTr3SRbI3c
1gTcwUJE83bp3VS1TFskPG5yvijYY2kDrLwrPfdGzrN7jM/arBr0EBleSMXM
HWjldWpIxZcQzV42aOUq82ugiKdzlrVZdeijwVn44Gg0eP36fUDGndVRRcHs
5WjwxYwG4lfso9/PfBZDv5957UL0Mxno91Nq65IskmcXcLnaXD3tZjrHHvoU
aLSH+vVndfFf9qi2x4vBrFdzE1B/UXVlrNuDMUWqqbeoqyNVNY96RTE72XMe
oh/VZ9ZN/cS919QPxPxuqNCx0C1AwSmS3eaKxdQP8maiX5VFnfrVAQX//DQP
Q1S3sD556idH3pJs1vJi6mtjZiuSUpJpxA8DcZapaujy9BKOkee/xkxqLTDG
o0ZMIV2NvpiJrSG/SLFCPxyO/wCwHWXqZ6nWzExZlhvscXTqJ8s20YW+5KAm
Zu7kj1atTduVw/FlGdDBt4Dvm3vQ5X5CElnlqoeCd9u7j13HsKm75fC+JM8T
vwHUDO8t+Q0lzbhEY4GpJ8f6cezH1pd7ELixjbBGwDa/D2GdoHZp+HJ4/F+1
XX1QU9kVf+8RkqCACcRp+LBE7U7ZDqYhJCG4qyQQFJWgAn50aAwxedF082V4
fFkFApRlt7rLto4fpSrOdGd3uq3DzIJfuyhUt9pVdtW4o7uZNbi2oy27pa5t
ERXp/cgNibV/+EedwfPOefece++5v3tz8/LuOdsPBRvIz9hqV7CwRZiMH0Ib
gxOhjEvA4KHQB/Q8sABNbqoOQHaiPwmxR7P0fzYx98q6Ar87ZygZOdxzGd4d
P34L1P7Xpps94o6oZ+wcfRE+Sbox8CS4Bb9b9OZ17svpRy++jJdotWu8xRSi
op8XDd4udOuj17pK14pS0P7fjx9fAhvQ5OmpjHkYGbwKuz8+8Dns/rFNGddQ
a09+E/Nu/XoO+nC7S70KumKi+XbZBtz9myG16f4Z92LokzfGI3g8gPC4AuGR
F4kX3qsvkBhQGoJrfIEyVZzo1M2CkTJEQ13Dt/wyadewVFJ6OelsqwRGo0iI
RCGII0erTuoVI0peEYyjBg8vZciqeBdy/Io1YiHN/Hh0qI/2I6waIljN5N3I
OauDkdogAv+kz1ul4872lc6BMTDiIwgsV7MK0ywejA+mYmQLdZ0ZbYnk/N1X
7bJEe9qshdLc7KPwvN+c7JWMbe8QDGfCzJeP1txorUEn9pZGTvpJmLz9rLYb
BkCBRzTXXLAndI/8wU9Vgn7zoR/HTzQLwm/1mgKnntzfCwE6Xt/CT8anRYxj
E2eCF8EwnL79QIxG2ni7znjn0eHgHPi67kS9uxgMw8PTQXj6wAd0x+pcuWAA
TjUHBL2lqSJj/cj0wAjE00OXeRh9Wdqx+3q/e/rUFSQ8iBE/PiiGgHjkDlFo
E6LeHVAfHCtsxocK7uwwhiZbgp/AZoQ+jIclf3o6Y04MOhHo/ffrjGOPQkFj
zE8G1Wuj2Y7gFWhn/IM0VOMb1SOgI6eDJ6YNHSch7DSrexKjy3M0/l1pclMg
/0nQjvyjcReBPj48GuhE7LFkgrVDz8RaNpMOsCYpKYDrHsSaC2HNG8GaP020
EmCtNxNibTbBWlsEax/pa6Kwlp4ZgzVqmGCtLHIkch4vGIW1z8JYWyMGWBue
wdonc9lR06x3IdYWM3ep+Tc6k7p6F1KLGduJ+aORY6ZrhB/X7D2igHFG4ZnP
J70LXtDZE3b5X9dli75qmwN0UMAJfSLR+G2F8FrN3ls6olGq73lBt362gKGo
dcAny8nqod45PRlPnmEbJx57strwt0DT9X9NTcAV7zcTD90lcDp/OlbfX6Xr
D3DfFIoty5BkopNDEtdKwL5kDHW+D8tPwsN7ceGXd0zX+6du47URfHWqMwUL
PatQ4TE+Ml7XzA8vlabA1JmeEYCLm6FTf4HA3NkcxOwgwunU7oxPIXvnwyld
9Ff8DWThrTPClSd2rTPAdp65cwzV1TSD5YmpluqKGEj2iCroK6ZAo1uJVEJ4
6hw3TQ8cgG8zcauDYJZcMU4MfIRYT3VStHo4cQrEXybCXzHCH0y7ogKfvfCT
uYP/muKiSDg8ayE/HgDqsuAzxWYdRMrbVFKG6BURDDt4hL+CyhEn82DSle+3
SoYWiFsGzUO5JZJ71x/SmYmtqpaD1a93qC50ULN/QYOd58GAKFKvBNWrR/XS
uF6qYMc+hndkVAc+CcHiVWNplyXBqJx+HfVKRxwdzvNQo6CuPu4fkOhsj/sH
sxmZcbpjiSEpYndulF0Gz6cF8N6gLLGIH3qb0mdru8XtjFCv2HhDdjeezlU+
kMcLlU4dj0dv1YrQHMR1DKA61NSMr9qQbSOyLSD7lAXv+ot69Qm7KIlBLClJ
u+zEzlUJgP9AL/Bu4mu9VHaeT1xpaVUFqYL17yXpf4n2MTQP7GPOifCh1eHv
7vdfdSpSxcnFGd1F7yXw99DuF0+8daDLujWu4u6tI0NHE0/D4Dxx9C6pLAuU
z+qjxezZnPa1PBxLo0/gEf0o45//6PZmpoG1YxtcO5a8rDDvG254NamrRtZ6
oEsr/aJV8u38caAp5CmcOmETjPfJl7bKpB3MvMbz3uJuP9r8cCTa9662ebwv
FcItFB8uOHaK7Je6+TWKi93ZerA0pHfTYCvlT4+EOeqnpZeUOWXwsK5MyP9V
Vvb7vI/7aFqQQF9KkYFtFQw/OulXrRrKSU3m/QD47DteiKHpnfHL6ZyUe+P7
vGXiksd1O2efl6w9Zw4tMzxImSvd863hHJpIr2LAGavXxUyMw0wF9XPD4wGX
KuWqLJXJKeWDzQpXXpwZh+TqZuaPwNqbWX4I0zE80v9Ok1YaxIUtAngrVC2J
2WFUXUwV40ec+ah5LWjpprYBPKAcQsmiBR3MzwTay0vbeW+pNw79pF10KV96
pLk9pVWr3fZaXBg/bCJFfQ5oStyeE/wwNhlw84eAloXnwMZwWUhlkIaVc+Nw
3hIdoEvD2KOi7lMUydCE867woihKPvg9imqOw2vpPPBXSeRaigoAOdxfe8Ff
fpQ8ESi/BPh3KHyfyEfBNfQAoVAuzKGov1N4ThOK5KBeBnRMTM1QIk8FfDo1
Q4l8EY3nMKFEXgR4OMsJJfWuDuuvfsqOg8Y+IJSUb6Nx3k9CSfn9NPYxoUT+
DuDzqBlK/PkFjdNWEUrky4HfUgH/t6j+Qr89orGcUFI+mcHlCCX1ZoX5rKfk
Cga3j1AiL2Swvwgl8qqwftVTdljAz6ZmKJF7w+W8T5X3Az6DmqHEn79m8HgT
SuR9gAdqEUrk1xicsIxQIv+aweNBKJFTUXgXEL+J8HUKNUOJHP4zgbmWTqO5
dgrWUW/xaQqUuQ63g3NYnI7tFpiQxuBxsyhDTTlg61mzuZLzsRbXcpYrZxs5
g4WzoCQYZjO8rGAtNnz/mUkqcslFmBCTZY5abp3b4muCpmZyY/yvPDzRakUO
ohdr+lm1oxwXbKOXtXJyR67ZvKWx0exlfbUeN+gt12SuVyzzsayxvM7F+hxW
pFtR5+YcLtYcIzRXenwct9XnaQhnmCpptLJe6CxUg5V1OOV2jYroFgN/cGy0
AVTMxbqs3ia5V+HQ4v8cGlVsNbUsB3N+1IYN6Z1OjxVYWhEzPma1QlmQZ8/P
Nau0KqtZpcpTm7X5No15s9qmUivs2lwFm48GsHiFux4aAEqI3+CzeEH3zcUW
pxMJShq9vpky5WwDyX/iK/H5PD7QnEhHK7kmJ1vF1nIAB2ZjFeuu9fiAmnVr
pAROXuLDnQ+XgBUgF2N2CzDIsT7g/bAA+aXWYrPJGxzcVrmnnvXZnZ4G6Bni
MtCIiLci4+kD3nFzFqfc7QF+sdTKa60eLyu3sVYnzmvisLPQg/JaDvgT6cfK
WbcNSXOVcoVcIWPtm21qjTXPptRorPlWa97mAmW+arMCzA4tuLZoVBalKs9e
0KjVmDWqRV7rIidMJrbBGMk09rx5xuQNTnnZ/2GKRRl9vkn2lOLzTDN52X/B
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority14" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority15" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority16" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority17" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority18" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority19" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority20" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
9TdsjT8xxsCgeniW+gBPfaiZ+hLTCG9Wf8bReIXlutkVAY8UTlm9Y3GywyM3
x1o3/WY3OxEFyWH69G71Z93/0/RHQqDcLndya30QVzPFQT59F/NrrMjW7jai
WENgjCVhHpjiI1IzTf9wMDar4Ektm+AlHBsjDdIECsN11HNKAgUfzKFNYEfO
wlS8wplG5G6hGlUbtdmmJB/BDqHJzFryJv3Dv6EVCryIFRKxWhKTxC8iXSIz
SbMET3g+pCLsEfW5qSCYkkzi/Ez6DfUXPOGFwrJ3qF+3fYRpSdgHTEDhkG9g
rygCdewzZtsZg5cBRk8woxdnDG6aGL48Y/Ck1qD7jOGNZANsD50Wl5sRjdHj
EzJsPWjx7Iy9oZQ9ggzb0IyoAloMdtfEoC3A6DaJ2fHM8AnH8K8zht1n1F6Z
GDQkG94OMJo+PSojKup/mv5XneFLE4O7k1urPTExeEUylE+3FSmM4vaMgbg2
cXQxPpZLrlP/k60BChpkavzJVn8NkseVBdb1YrqiuQ5lQvu7/9W6COP8y0uj
H7TM0XjGVH/jpT70LztxTEXq/q/TN2qAVT/jqf/5X+2kqO41IfAn2CClWwNT
QgK31fXDFmKGu3jVuGMK7EAdY6COcR6FRCXV0vRFbIYgWGhKJUVRuQKFMCyc
eZOJNfEoXColiqovsmIIlrZxcrmkk3XU56qq3aq22qEMBdLPZzwoJvQstdTZ
jFo9bDXEBmOI9TNSOblMhfpUQS5DewZ5+w2e6i0F0mpzhdsKdT7mjHU9TjOU
KYfOhaVwPp9B3VlurtCUSrpTrFRna9Jtrpo/uo5erUShUAPYJgyhUp3uOobI
MpfJC2JzmUVKDbpHk/VO1qUGqN7tVjVXaFMgqT3k3eDAWxMvoRJXD/Y2OlBL
cRxTdCwQ2goydodS4sB+LtIOtPGUQVz9BbQ/ke5o8RhtH5sWXUDbw6SFYxrR
UbTdeBt1EgOgzaPFFNDiODRwavgbPYLABTSwod1MWgKEFwFtH4MWR0zE3/7C
oEULaGs06JparumHj2Ika9fck+N11+wPlD4Li/NVP3RvK/s/qkGJd7h3i68f
oT3bbcu4vXLnwZZhbfr3qtf7AvYazblzlWOVuy4nuvOx45xuu1QrkClK0oJu
LM4j4yg9kA3PCvB/HUn1khWkfMivGAMjYZBs1Xkev9+7IcQO4l0YlsXFDGqz
lI0GmK6CIHimw/8CzE5g8rvvi7pU7LfJYRgpCnObPxg1n4mPwP8IKLre5bRY
EgmT/4Gl1ribqtEFQA0H7+nG0jctPbubg03SiGAE+9yOb25TyN1Ta6Ptvr1o
zQOayVMrwXY//OdBA0YXKHy61Ouvs0kMTHlqVC0w6H7TlcLE8Qlpiqpnd7+j
cjDtT3d0OGHPo2A4FSTG5LDX6i+oGGaNhjEnh3mfpqtjzN2TM5lIXNdcPjPC
sEEkG8Ekj7fTzi7HyAWf0v+7xgo+0K+A4cLG6Z9vt+8jIa1/6E/alEZmINAl
kNMfOm+2IjFHTv+3LWdJJK9JbeA7Kp866w1Ukj/Z8XOP8Iv/ktj8U2c3keiY
0lQX2jFqBfUyplCr8OmwJzf8YJjyp8PeBFcBYdr/CNZjF8Oi8jcSlqVIRutZ
GeXq6mmuyzqsZL7qpoLbbG2y2Upsh0C5JJficBjLCkTrXwXpHoN/l9IFBg3P
DEK0SctFbnap9YddBbS9CbQ9ubtViTAISXapqqvRjTrDpjMGIWxFfJhQ/y5l
eaPb8sOU5XcTDsdE0fbTaXs9IDLT9kVR4hIyopgZenc11d9kqT9ja0SwNXoG
1Qe91JcyGgyfQqw2MbwRYBTCPuhYKXRshvRHcaoUOqE8Pqgdx6PtD6UtC82I
hr8FGVFZGVE8WpwFLW5MEZaNF2T40zN262ZE52bszU1eCBl2oFv9XS1kTEpg
4xkDSD138b87AgxuT6YP6h9ZbvaQ5XPxv8vq7Y5OZuolsOmHFMdHFMeietVb
YRlRPhnRUcKYUFoCLyNGNyOmIEOv6TONAUzjby/1F1nqPVOBfSnTwrCjzugG
1+ihiUFHslFHt8GLZ4Z/kYxCdDcCaHE4CXHea84kI7yM+ARaQu7GdcNZGkgC
RjuMbgcYvDIxfFpnmEhCufKuieFgAHVTmtDubr1jkdtyEMiHG04v3BxF8Fh/
+Fdl4DQjHuih0/ZZ0KJzk7f2AEKoVf8TUgybVfeQa/TimU7bM8OnQICHnmOR
cHmxUD+13u4wjnDK6uwb64FHp7sexbshD/Jou0GAPhl67TfV3/A0+ruJxKfx
J1NjxEs9gqHew8YTYjeCai+81MfYrOdvAgxuJBu2PdN5A2ndxLDBxBA0+MrE
OISZD5hteRnF/ihkRp9K0D4wuw/o9MiIj6Jh2F5wFSuwsWgjD6abSFVPKdrK
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority21" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
9TdsjT8xxsCgeniW+gBPfaiZ+hLTCG9Wf8bReIXlutkVAY8UTlm9Y3GywyM3
x1o3/WY3OxEFyWH69G71Z93/0/RHQqDcLndya30QVzPFQT59F/NrrMjW7jai
WENgjCVhHpjiI1IzTf9wMDar4Ektm+AlHBsjDdIECsN11HNKAgUfzKFNYEfO
wlS8wplG5G6hGlUbtdmmJB/BDqHJzFryJv3Dv6EVCryIFRKxWhKTxC8iXSIz
SbMET3g+pCLsEfW5qSCYkkzi/Ez6DfUXPOGFwrJ3qF+3fYRpSdgHTEDhkG9g
rygCdewzZtsZg5cBRk8woxdnDG6aGL48Y/Ck1qD7jOGNZANsD50Wl5sRjdHj
EzJsPWjx7Iy9oZQ9ggzb0IyoAloMdtfEoC3A6DaJ2fHM8AnH8K8zht1n1F6Z
GDQkG94OMJo+PSojKup/mv5XneFLE4O7k1urPTExeEUylE+3FSmM4vaMgbg2
cXQxPpZLrlP/k60BChpkavzJVn8NkseVBdb1YrqiuQ5lQvu7/9W6COP8y0uj
H7TM0XjGVH/jpT70LztxTEXq/q/TN2qAVT/jqf/5X+2kqO41IfAn2CClWwNT
QgK31fXDFmKGu3jVuGMK7EAdY6COcR6FRCXV0vRFbIYgWGhKJUVRuQKFMCyc
eZOJNfEoXColiqovsmIIlrZxcrmkk3XU56qq3aq22qEMBdLPZzwoJvQstdTZ
jFo9bDXEBmOI9TNSOblMhfpUQS5DewZ5+w2e6i0F0mpzhdsKdT7mjHU9TjOU
KYfOhaVwPp9B3VlurtCUSrpTrFRna9Jtrpo/uo5erUShUAPYJgyhUp3uOobI
MpfJC2JzmUVKDbpHk/VO1qUGqN7tVjVXaFMgqT3k3eDAWxMvoRJXD/Y2OlBL
cRxTdCwQ2goydodS4sB+LtIOtPGUQVz9BbQ/ke5o8RhtH5sWXUDbw6SFYxrR
UbTdeBt1EgOgzaPFFNDiODRwavgbPYLABTSwod1MWgKEFwFtH4MWR0zE3/7C
oEULaGs06JparumHj2Ika9fck+N11+wPlD4Li/NVP3RvK/s/qkGJd7h3i68f
oT3bbcu4vXLnwZZhbfr3qtf7AvYazblzlWOVuy4nuvOx45xuu1QrkClK0oJu
LM4j4yg9kA3PCvB/HUn1khWkfMivGAMjYZBs1Xkev9+7IcQO4l0YlsXFDGqz
lI0GmK6CIHimw/8CzE5g8rvvi7pU7LfJYRgpCnObPxg1n4mPwP8IKLre5bRY
EgmT/4Gl1ribqtEFQA0H7+nG0jctPbubg03SiGAE+9yOb25TyN1Ta6Ptvr1o
zQOayVMrwXY//OdBA0YXKHy61Ouvs0kMTHlqVC0w6H7TlcLE8Qlpiqpnd7+j
cjDtT3d0OGHPo2A4FSTG5LDX6i+oGGaNhjEnh3mfpqtjzN2TM5lIXNdcPjPC
sEEkG8Ekj7fTzi7HyAWf0v+7xgo+0K+A4cLG6Z9vt+8jIa1/6E/alEZmINAl
kNMfOm+2IjFHTv+3LWdJJK9JbeA7Kp866w1Ukj/Z8XOP8Iv/ktj8U2c3keiY
0lQX2jFqBfUyplCr8OmwJzf8YJjyp8PeBFcBYdr/CNZjF8Oi8jcSlqVIRutZ
GeXq6mmuyzqsZL7qpoLbbG2y2Upsh0C5JJficBjLCkTrXwXpHoN/l9IFBg3P
DEK0SctFbnap9YddBbS9CbQ9ubtViTAISXapqqvRjTrDpjMGIWxFfJhQ/y5l
eaPb8sOU5XcTDsdE0fbTaXs9IDLT9kVR4hIyopgZenc11d9kqT9ja0SwNXoG
1Qe91JcyGgyfQqw2MbwRYBTCPuhYKXRshvRHcaoUOqE8Pqgdx6PtD6UtC82I
hr8FGVFZGVE8WpwFLW5MEZaNF2T40zN262ZE52bszU1eCBl2oFv9XS1kTEpg
4xkDSD138b87AgxuT6YP6h9ZbvaQ5XPxv8vq7Y5OZuolsOmHFMdHFMeietVb
YRlRPhnRUcKYUFoCLyNGNyOmIEOv6TONAUzjby/1F1nqPVOBfSnTwrCjzugG
1+ihiUFHslFHt8GLZ4Z/kYxCdDcCaHE4CXHea84kI7yM+ARaQu7GdcNZGkgC
RjuMbgcYvDIxfFpnmEhCufKuieFgAHVTmtDubr1jkdtyEMiHG04v3BxF8Fh/
+Fdl4DQjHuih0/ZZ0KJzk7f2AEKoVf8TUgybVfeQa/TimU7bM8OnQICHnmOR
cHmxUD+13u4wjnDK6uwb64FHp7sexbshD/Jou0GAPhl67TfV3/A0+ruJxKfx
J1NjxEs9gqHew8YTYjeCai+81MfYrOdvAgxuJBu2PdN5A2ndxLDBxBA0+MrE
OISZD5hteRnF/ihkRp9K0D4wuw/o9MiIj6Jh2F5wFSuwsWgjD6abSFVPKdrK
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority22" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority23" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority24" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority25" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority26" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority27" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQMAgASegbVRkh4AhCNaERI2KFhArrrUkQChYHiFE
Hlpl8pCgRReV5dJVt6G11t27u5dWtD5qDY9aarGLYldbVKAg2q0PrFatj7pn
JkSpd/eP++fN75f5zvnme5/vfN+cI80uSc9GAAAqCQDJGvelmSIAWHCezSMm
L1zxaV7Rw9aX/dLIFIpGygPgJnzpx5ACBpwHwz/HGrlN3cVcwMbkCdsRB28K
ixsSznwrm5TMZSRv90sexuQiJVe8yFdurtWZOqWR2gBnHabezsjt4n4owjXz
avEvELnZIZ4mm1Yf82bLq9vwz7ug3E04AGoI5RFdPnjuRuaOyD0O+BhyNNeL
AlK21vk5hlOw2nbMLUFkqfqtgDfCxSIuTFksnJLyadzjkQUxWgf3tyJEvBDY
3HqCK2LkujokatWmZAnfic7YDEDqe1w7Mns14dKFBGxiLvYtFTOZGSGIrP2y
SjxNZHA1L57K3kjuVe2Wv8qe+MAj+aUrhOAjbNuEuUvuLAoMYKO+p4Sq+QuW
an16X3715Tt+S2KFpyY346btcXMbiJ87f9IepwbN2UQEpsuIWBqi3RvYfBKf
yNMtc3xJZr6va2IjzMMQkc99hdlrzZ2ixIpwksnEL4hIoS+ajE318x2OxBAk
TQzAtzAWobUDT+CPg/MUeDKY7GZkhNarQYAe+bM/Nwb4tICv2R/cpyiQUXRA
AHxc5CzwQI++JKZwc4BB1aJJ6O5IakWSujQJdZpZ3ZqEVmuCW5PoQBPACMa/
RgguA+zGKL+onn9Dz7/dwx4BgqIe/qBKcBU0aZQtHUkNqOpQR2KrddZZTaJb
E9qjUdaiiQ0dSb9mH+APDvwn9rP2xG6NsmlMdWirRtmDznrKXohvBS0Koouy
WEBOAtVAB1h32tjrdb9ATDVoBwTLFnbSED7S7D+gDj9pkJwxhJ9s9u9Gwr+V
SroQwmnSO6tkHNLkrMi3W0ycsianguBU5tvLuZy1Ko5b0m4NG2mWgPawS83+
Z5vDv4WMZHi7WnK+WTLya3a0gsup+A/s74ZfMIS3t0nGVLvC2q3hPU/Z9fZm
HrU6DZfp9XILgBJMdgkUeAq1aqmhdS+AYPJblZLZUoiHA51CXA/xH1knv0uR
TwJzwACoJwnwALhQt4hbLnNWQTNITpXMWaqD8j0mOU34c+6caQvrNoR/65YM
NPvDaFxFwkAZl1Pe5DQDbkWlU5HqXJsPGdG1XE6p3mlueo79glRy4T+w1641
Oau4nDLZv40G6R8hfUyZDtwIjgRhbNUksPf/RbLtRZR2f2YQeL3Fuo87wFNg
jWAXAhbA/eYP91tgrUpc66OOURNbfRC5Wtfgo5arM5t8NO8pA22G9lFujwP/
A6YLdLz+Byw10LY6WY+AwPA33WjifVaiy64gnaX5aLmOU7GP8+Z5ve/lHvZ1
Fwc+R3FOBeCsJThmF6cM5xQBgdnEKaXHFNJDAMd6jsXFKVdxYITgk5pCL0mO
ycUpxTmVPewbJGctxin3MNJv92McM8lZKOAKA5Jr6hoAEpfctOtB24GENz8e
LChfwd986lViOS93w5fq7tajWzmDpQrs5Lw3NvXeEXHf5x39wVAVPvnLD1Xy
ppRG88VvEie7lY5CGAcu/DPQ89KQ9IhMFLYKOMXE7nrfSNgAqD6AYACgABWn
l6ajTBJ4f3qgmRa/LxwHbIqGRkGaLYwgBHlKA6Ccfwbv8uHSguifG9RkXHYt
UwERAGNYNrHngZOLMtyUZhpDkNKglO42Nsw4AHCaDKr782lY8WgKBBtTd2re
HUS1HY6ZVJOj1G1OeiEODhGKEPGI+nq9djVgkrQor+WiTecBl2R53PVYlfDj
IY9cj48kwvtTzx4bigPeeAd/WjCZ4+F5arz596znjF/2N60FmoQ+0xgQyvTt
mABArhX4UH0vvEkUIkypr/N5Yf4JpmaiiDFlHlhN+h7czphVB+qzKXc+hHm6
G8JYLinpHJTkiZDZtRqlo6MuGdaKSlj6SnlwU1zH+HdIfiwvGdarsK+aJXkE
iyazh3ajs7s0s+vQ2d2VdbBUruNyqnROk4mz1oSWV8Ly4gzpFvKv1fMHCUEx
IRga5Y+m8mOxzrBLUsl5aVi7ITyP2JT4iT2xB+4vNOkTe5IDTeweFZXrOevy
OfH5TjN8kk5TPayKnHIZp/w+C4qtIJ1ZXGepGNYfWNasUXAL3xjg/+SGWxLN
7mqWDDdLuunnBYPkpFTSaYXVnv2Pek0CLCNN9PNQh7JhrBT8Bip9ZEs8iya2
dPA+L3CaMp1mk90Cq5zeaRE7LS5nyFdLBTeA4MdU/nA9f0glGMT516AXuCzs
Qhss++FnYNGzhl8YkAwPhv0TCc8TpylbNLN2wbqROnnMEb2zopJT2ZSWcqde
QEUgfDXVd65Kwy61hW1AwimDpWGjBnbGRruyuyOxRTMbBuRRe9KwJrEWTjvq
PvOlCngFtAeWTRnH3GR9dQiWIDf/cir/NhHZdkYdPjw44fxg2CVogC4kscU+
u9Ue6uhQ1tEl9FBbQlcH9DGpW9daCguynlMKA5jpDOk7wb+mF1wfgPVCcBkW
NFxwN5VfjPGHCD6c3h5gfz/AH07l3yciv7tmoGr1+cEJ16RhI9KwTmkYXMGr
0kl5+O7ETzSzD6EJDfaE7sxP4OpDZ2GDWKtzVphg9Jz8yxh/lLb2JsG/Xc+/
k8qnErYK5q0cQnO4DtfU8kJ8zHIdHmmt27bttNaFyXKTYuTJW+ul7ymx4yBQ
ogfLSwrzzIYiXFNSZCooNJpxeXRMbDQRHYPnlZjxlILiNZV4pVKByxRxM7IL
LFNx2UJD8RqDuQqXJ0ThckIun7rcmIvL5fjCNcX0HCeUs2JiZxFyEMts41kJ
DdGl09vSDTn73yhbEDm97L3QKeIfD6/Lid3h90bZh9N37Fy0rix0Cp5+ZAwl
/O9FOZEP3130xvTQKTLwJ7iXQqA/fr5mGcxRztpMUxOMSwfMhoSeDtuI5ESz
/1U1tYVGqMBRax8cN6TnX0mFKSUYphJLcCWVf6eFtFJ9msr4SmepZ70zTbs6
lK1I4h777Aa448FpWAaomsjpTtpjT9wFExmd7bInwaSu76DKiAHG9ms4CGT+
NoqqGNT3uEhmFZITXWp1gypBNPcLTA8LwC0CgEnwXcT8rvo0viOKWpffHkRA
YWF5UXRhSYkputyYYykxF6w1RhuLDdmFxn/3pqIg15L/7EVuQZnFXJC9xuLl
gXY4Ov+A88762krD81mnlYJWtbLBn/FRIRbAArlsjjxQyDOofC8SxEm1lUzF
8AlEjz86LAsZbmRIvgdSXAbqhXYGV03kX8C7cNVFQr+sQV081S30BXtCa6L3
yzDMl5F7SHrVrT+kvtqtP2IYtX3PJrg1gzWA59Y3qrm2wZp5cHRE/Y3NgCZH
cvWdA/kqjDdt9miX6ocaayQa48JV0TJUrMBrSFATyowDdiGKQpVNKmmtfUUN
6rM3AWBa9nchG2MGquwGAcMVWhOTaY+j+PRP+RzxT/mWSN2Qr507j+f7IrMN
xLLiXBGqPJ8662aVDPvOpiQNKMOHCw12oYQ4hiAxpn1TkO2lJqOuQd/pMiVj
vJZl+ehmRm4jCNnHdaA8m981UOPPnYaTg2ypwK3vdANItDeTqzU0Ggw2ob3d
R0249Wr+VZ/6FQyjKwIL+OKQXqA/T9YzGOJi7BHgzePxcGab/qONA6K8kIkv
imNkuzAm+pfgG/pG8vsa60P7S9AdAmNxPf4cMdzXtgnkXTNYSnmhipmjAh3+
eXrfPOKiif0B1h2QFMneGGjTkz+1T+oOUJax1fGppfdRu+8Z1Vw8sHvymg58
T/tUaj33MXihmIZiT55OttVaEQcuTrmMnW+PQkWsMSHbOmIWYacDcbGbwYTU
aRR1LYO9n7dDpI/ww4gL2H1EnBJ/DZnODMNV3S2IkMskFo3WicUqrq3tLP/T
Ab/9vIygOrFoCdeGnOCXqZaT3QEZaJBVpe5lfQw62I5gzG2yu/z0RLYeSLns
HUnMIeJL/aq2WvUgNEh/i+R0srqi2mamCrnB6avcfkSh6k0E4cVzjwN2JJuN
2fTERQ3J38/LDB5TkydYTyyqL5rkQKl99yP8T7iFnSJFVb87p6h+El8ydR5L
W35p56Y0ZNsf793Ny1A13HwckqSNxVlfnTvw1/7ji/s/08Sh6cPKVX2PHw8d
/b00CPv+yPXekT0Zqtbew0+0jsMxnRtTbL28DUMpr9gzVLm3q4p2bobS/joU
b6UUzVnSR0/vvZILWYbuJ1DC527tPXDs3JOivvo05PTWPsXrGarOvtaQkCDs
+v0NwT0WzD99uCKr79jjoSPXF6BSLVMT1ztJuLEnZWbRRC1Le6AIC8K+OaHO
UFlCd6cjwuq+XwKF8+bpeKZvfpeGCDcM3cNWcD7CdvXyuhzKU9VX2DnQsJuH
PxNDrnXV/k/lJz7u/ylI1auO01lvW4p+uJt1r4aypP8oAi35ek2JCQYnIWsS
My5MaxdVVZ9TlDy5V1wBkY+2rNydRul9gZJ8+0AaZfnaIgV8pejfuR36+9Xt
ciP094cHQt2lKdjfoRkLUzLOPppZ/AqkObqhb1sakrbhXB4MeEb/kcuUYcfW
o8EPo7pakYCIwrciZQd291evD90KRV0cOgFDt+deK4vS8rBoMZSwtnol9PT0
sXsjlJabP7Pwzgih7tbNF0nsLS3+2d9XvgPNe+eHE5Q7Vz4+jFOOrzq3l57+
JKWX4I+3Dxy7cnx31omn6/vL0GNEcoap7c3aCfWeXnxuOZ0qyqxziv4nyuJS
qHfm3/p2wFdLrgRTenuPboL5MJj0Wn8NdKT19pE/URYmlSzqUXGFbdipO/O1
0rgdt6LOaLifaqMcRBibjuTPF8+V/88TZTVPcJqn23avsujm4+reFyiB51p3
w1AMrit6A+pal/VOu9e2B7/0HTVMhcIVN+YIDUXCM+PkFy9dCEP62sOXtU3U
6i/pPwGN6extvS4Lwi5abkYuNq6gYr6lb4IjLllLaGMfC9O4p3K1p8cZubRI
B2lmfRqaEYeNo1m5bPzUsvOV8VNHXyMMRfEPjcH+DkzIO51SrRUlx14+QTnS
9ziMzqttV9YV3bxfMjQfWcw5DfdU74FTt+ds2LlqvJyzWQxvWA7+7cnBDQF1
a3C/DxPQu/2PZ3iE3Ksouvmo5F7jB9TyHXiipT6NARJDnUkAWMk21zfO6EjU
8TynC6q3SqizHVND91bqGz1OjMio/d85pT1KgzOnw+IAaxISquqoRahS19Mm
91SSUOy1ALCILha+kP5FUuSOEM7ZkOWOmSu6NXQXkfDIuDmvrXQ64rocwG87
Evhd3O5e7KneSbReNa0X9fT0CFcbl36/YrSRwWweUK1Vq+p4lYsQW6oJP4YT
C9ifvA/UMiVsoFRXyjyLT7U5sERYzRnIXwL5TPqs8I93uWTc48C72MdbRKrc
R627qeeBv1JPj03Vp1CvDeHjbGCM2SCzJ4NjuEjr1fUatj0SvZRO4iKJ7jfc
LduRkqkqzJef2zlAdazgmbrNrgnML74gPxbhXbCOY0zXoIoDZR1MB9tu9Suo
57ly6tnHMRHgzKM1gmex/wetfxmtn/JcBGNvnSizyWWOdBl7YoMqRNTJVaWJ
kE3zaJ497E3El7DpeZrOvjanKNS7PG/Om+6/tGHmGSyJw0LkFzCVnvhSxfNS
IiF4NztWuIGoR6Za+rFXl0f6fN7QVjCV2PZ2bQ6Opl/9tG3gIK+SCiWK1Ilx
AddmDf0LIl3TEWVPY8J2AWx6F7tYvyo0tRTfMlm1kv3B+25tXsRWK0/X/LDm
A14njl7ih2JtKhDJ7kJt+gG2RVWYR3TL8flUg8K57NUmTv9BJIhzRpesYIfs
amQEvr1JyZbjG2+EEvGp9ueV30HU7BLIL1vg5Qe++SSb0h8r/FzF3tOz3j6f
U1KPlDj9a/U4+TaXEHeRIjnP5skHmJ7J0zA39N8KuzAy9RO1mBfPfAPAHuwX
2FOKR7JZ0CecsxezdOCjVgnV2UcRb2e3TSLbojRDzIsEicjOIyzEjMjcLUgM
k0lcwGsZ4m55UiqRnaqEdjVNl+1nftWCpPn6IN0BBPwAgO6Thxkh3QHw465w
j4sjYnax9sCW3YlRLVvvC1cGW0D1aRL26Y9GTwXoLhKZ+wZoun1P6VwUHZHm
pTvoOhWQumgjiuhgHrxyMEl4i65F1b6fi9I6q3s/NqUI5z6qWO9PT/s9qaZY
L6CnVxrfH6PvnStZqhU+OTaJlQ7e0j5Srg+kCe59Tm/eJ0XvoDQ+fgOmQ6IC
bvU/WICzWnSd1bcVmvsBQbvord13V0gJOb7lnTZ6+kBKT09lAZq3vGh6wBk8
kBGlY6fU9lqWaC548HeLssdX0cBqFq2i7+cwWkXJzZGg8bXx+/+iTTp+cWfw
r8ps3pnxpXjxynM/ajvpdn9444yXtY8omlZ6f5finnOFnI9FOBjfsZrqd5K+
53wOke+QvCZfzx40wjq4DcIAtKGSOVYDVsN69hsIU8auMTI9pDSkLmGUY3cz
b8OX1FbeB+FLwKMLjHsPxuipHzxO0VcuXkhfD0721N4A8AxSeC48uUTDcRB4
Bmk8pNeMyfRCL345HFMHUS/0yoHHFTARPINe+mo4FoJn0Iuvh+NY8Ax67ewA
ntsaL/TiR6hzGZz3jpMDlAAMAw/eC73098bo7j2nl4t45l7oxYeMxdgLvXiq
QVFx8UIvfvYY/+zn5CyBcz/wDHrxK8boVjxHD8atJ9tr/9g5NQA8g1489VsF
c8nmyaWfqQQsN5gV8YqC4gJLgaGwYK3BUlBSrC0pNi42FBTTB8xio8GcXVVQ
bInOU8RZ8s0lFWPXAnMrc4wmijwr6/XKyiyT0VxWUgxlWKqyygma1VhpgifW
6IKY9DXFloIiY5bGbDRYjEvWFBnNBTlqs9lQNc9sNC4ej1jwK0uy8mKVeUZj
bkyWPJ4gsuLiY2OzlHlyZVZsfGyMIifXkGDMmUmZmqVZUFxekkMz0fPlZoMJ
mpSlMRQW0oi5lSbzM5olxoos77XGXLO5xFxmtDx1aKmlqtCYYSyzzDdashZn
GIvLSsyQLSf/KYXOUJwLOT3+jFFQCmh3PNPXoUCL0QwjMoaIkUcT0QRuzMvO
nanIic2VKxQ58Tk5sdkJ8vi4bEKRIFfCsUERZ5DHxeYlVCoVWYq4GaacGYXU
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority28" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority29" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
9TdsjT8xxsCgeniW+gBPfaiZ+hLTCG9Wf8bReIXlutkVAY8UTlm9Y3GywyM3
x1o3/WY3OxEFyWH69G71Z93/0/RHQqDcLndya30QVzPFQT59F/NrrMjW7jai
WENgjCVhHpjiI1IzTf9wMDar4Ektm+AlHBsjDdIECsN11HNKAgUfzKFNYEfO
wlS8wplG5G6hGlUbtdmmJB/BDqHJzFryJv3Dv6EVCryIFRKxWhKTxC8iXSIz
SbMET3g+pCLsEfW5qSCYkkzi/Ez6DfUXPOGFwrJ3qF+3fYRpSdgHTEDhkG9g
rygCdewzZtsZg5cBRk8woxdnDG6aGL48Y/Ck1qD7jOGNZANsD50Wl5sRjdHj
EzJsPWjx7Iy9oZQ9ggzb0IyoAloMdtfEoC3A6DaJ2fHM8AnH8K8zht1n1F6Z
GDQkG94OMJo+PSojKup/mv5XneFLE4O7k1urPTExeEUylE+3FSmM4vaMgbg2
cXQxPpZLrlP/k60BChpkavzJVn8NkseVBdb1YrqiuQ5lQvu7/9W6COP8y0uj
H7TM0XjGVH/jpT70LztxTEXq/q/TN2qAVT/jqf/5X+2kqO41IfAn2CClWwNT
QgK31fXDFmKGu3jVuGMK7EAdY6COcR6FRCXV0vRFbIYgWGhKJUVRuQKFMCyc
eZOJNfEoXColiqovsmIIlrZxcrmkk3XU56qq3aq22qEMBdLPZzwoJvQstdTZ
jFo9bDXEBmOI9TNSOblMhfpUQS5DewZ5+w2e6i0F0mpzhdsKdT7mjHU9TjOU
KYfOhaVwPp9B3VlurtCUSrpTrFRna9Jtrpo/uo5erUShUAPYJgyhUp3uOobI
MpfJC2JzmUVKDbpHk/VO1qUGqN7tVjVXaFMgqT3k3eDAWxMvoRJXD/Y2OlBL
cRxTdCwQ2goydodS4sB+LtIOtPGUQVz9BbQ/ke5o8RhtH5sWXUDbw6SFYxrR
UbTdeBt1EgOgzaPFFNDiODRwavgbPYLABTSwod1MWgKEFwFtH4MWR0zE3/7C
oEULaGs06JparumHj2Ika9fck+N11+wPlD4Li/NVP3RvK/s/qkGJd7h3i68f
oT3bbcu4vXLnwZZhbfr3qtf7AvYazblzlWOVuy4nuvOx45xuu1QrkClK0oJu
LM4j4yg9kA3PCvB/HUn1khWkfMivGAMjYZBs1Xkev9+7IcQO4l0YlsXFDGqz
lI0GmK6CIHimw/8CzE5g8rvvi7pU7LfJYRgpCnObPxg1n4mPwP8IKLre5bRY
EgmT/4Gl1ribqtEFQA0H7+nG0jctPbubg03SiGAE+9yOb25TyN1Ta6Ptvr1o
zQOayVMrwXY//OdBA0YXKHy61Ouvs0kMTHlqVC0w6H7TlcLE8Qlpiqpnd7+j
cjDtT3d0OGHPo2A4FSTG5LDX6i+oGGaNhjEnh3mfpqtjzN2TM5lIXNdcPjPC
sEEkG8Ekj7fTzi7HyAWf0v+7xgo+0K+A4cLG6Z9vt+8jIa1/6E/alEZmINAl
kNMfOm+2IjFHTv+3LWdJJK9JbeA7Kp866w1Ukj/Z8XOP8Iv/ktj8U2c3keiY
0lQX2jFqBfUyplCr8OmwJzf8YJjyp8PeBFcBYdr/CNZjF8Oi8jcSlqVIRutZ
GeXq6mmuyzqsZL7qpoLbbG2y2Upsh0C5JJficBjLCkTrXwXpHoN/l9IFBg3P
DEK0SctFbnap9YddBbS9CbQ9ubtViTAISXapqqvRjTrDpjMGIWxFfJhQ/y5l
eaPb8sOU5XcTDsdE0fbTaXs9IDLT9kVR4hIyopgZenc11d9kqT9ja0SwNXoG
1Qe91JcyGgyfQqw2MbwRYBTCPuhYKXRshvRHcaoUOqE8Pqgdx6PtD6UtC82I
hr8FGVFZGVE8WpwFLW5MEZaNF2T40zN262ZE52bszU1eCBl2oFv9XS1kTEpg
4xkDSD138b87AgxuT6YP6h9ZbvaQ5XPxv8vq7Y5OZuolsOmHFMdHFMeietVb
YRlRPhnRUcKYUFoCLyNGNyOmIEOv6TONAUzjby/1F1nqPVOBfSnTwrCjzugG
1+ihiUFHslFHt8GLZ4Z/kYxCdDcCaHE4CXHea84kI7yM+ARaQu7GdcNZGkgC
RjuMbgcYvDIxfFpnmEhCufKuieFgAHVTmtDubr1jkdtyEMiHG04v3BxF8Fh/
+Fdl4DQjHuih0/ZZ0KJzk7f2AEKoVf8TUgybVfeQa/TimU7bM8OnQICHnmOR
cHmxUD+13u4wjnDK6uwb64FHp7sexbshD/Jou0GAPhl67TfV3/A0+ruJxKfx
J1NjxEs9gqHew8YTYjeCai+81MfYrOdvAgxuJBu2PdN5A2ndxLDBxBA0+MrE
OISZD5hteRnF/ihkRp9K0D4wuw/o9MiIj6Jh2F5wFSuwsWgjD6abSFVPKdrK
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority30" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority31" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority32" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority33" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
9TdsjT8xxsCgeniW+gBPfaiZ+hLTCG9Wf8bReIXlutkVAY8UTlm9Y3GywyM3
x1o3/WY3OxEFyWH69G71Z93/0/RHQqDcLndya30QVzPFQT59F/NrrMjW7jai
WENgjCVhHpjiI1IzTf9wMDar4Ektm+AlHBsjDdIECsN11HNKAgUfzKFNYEfO
wlS8wplG5G6hGlUbtdmmJB/BDqHJzFryJv3Dv6EVCryIFRKxWhKTxC8iXSIz
SbMET3g+pCLsEfW5qSCYkkzi/Ez6DfUXPOGFwrJ3qF+3fYRpSdgHTEDhkG9g
rygCdewzZtsZg5cBRk8woxdnDG6aGL48Y/Ck1qD7jOGNZANsD50Wl5sRjdHj
EzJsPWjx7Iy9oZQ9ggzb0IyoAloMdtfEoC3A6DaJ2fHM8AnH8K8zht1n1F6Z
GDQkG94OMJo+PSojKup/mv5XneFLE4O7k1urPTExeEUylE+3FSmM4vaMgbg2
cXQxPpZLrlP/k60BChpkavzJVn8NkseVBdb1YrqiuQ5lQvu7/9W6COP8y0uj
H7TM0XjGVH/jpT70LztxTEXq/q/TN2qAVT/jqf/5X+2kqO41IfAn2CClWwNT
QgK31fXDFmKGu3jVuGMK7EAdY6COcR6FRCXV0vRFbIYgWGhKJUVRuQKFMCyc
eZOJNfEoXColiqovsmIIlrZxcrmkk3XU56qq3aq22qEMBdLPZzwoJvQstdTZ
jFo9bDXEBmOI9TNSOblMhfpUQS5DewZ5+w2e6i0F0mpzhdsKdT7mjHU9TjOU
KYfOhaVwPp9B3VlurtCUSrpTrFRna9Jtrpo/uo5erUShUAPYJgyhUp3uOobI
MpfJC2JzmUVKDbpHk/VO1qUGqN7tVjVXaFMgqT3k3eDAWxMvoRJXD/Y2OlBL
cRxTdCwQ2goydodS4sB+LtIOtPGUQVz9BbQ/ke5o8RhtH5sWXUDbw6SFYxrR
UbTdeBt1EgOgzaPFFNDiODRwavgbPYLABTSwod1MWgKEFwFtH4MWR0zE3/7C
oEULaGs06JparumHj2Ika9fck+N11+wPlD4Li/NVP3RvK/s/qkGJd7h3i68f
oT3bbcu4vXLnwZZhbfr3qtf7AvYazblzlWOVuy4nuvOx45xuu1QrkClK0oJu
LM4j4yg9kA3PCvB/HUn1khWkfMivGAMjYZBs1Xkev9+7IcQO4l0YlsXFDGqz
lI0GmK6CIHimw/8CzE5g8rvvi7pU7LfJYRgpCnObPxg1n4mPwP8IKLre5bRY
EgmT/4Gl1ribqtEFQA0H7+nG0jctPbubg03SiGAE+9yOb25TyN1Ta6Ptvr1o
zQOayVMrwXY//OdBA0YXKHy61Ouvs0kMTHlqVC0w6H7TlcLE8Qlpiqpnd7+j
cjDtT3d0OGHPo2A4FSTG5LDX6i+oGGaNhjEnh3mfpqtjzN2TM5lIXNdcPjPC
sEEkG8Ekj7fTzi7HyAWf0v+7xgo+0K+A4cLG6Z9vt+8jIa1/6E/alEZmINAl
kNMfOm+2IjFHTv+3LWdJJK9JbeA7Kp866w1Ukj/Z8XOP8Iv/ktj8U2c3keiY
0lQX2jFqBfUyplCr8OmwJzf8YJjyp8PeBFcBYdr/CNZjF8Oi8jcSlqVIRutZ
GeXq6mmuyzqsZL7qpoLbbG2y2Upsh0C5JJficBjLCkTrXwXpHoN/l9IFBg3P
DEK0SctFbnap9YddBbS9CbQ9ubtViTAISXapqqvRjTrDpjMGIWxFfJhQ/y5l
eaPb8sOU5XcTDsdE0fbTaXs9IDLT9kVR4hIyopgZenc11d9kqT9ja0SwNXoG
1Qe91JcyGgyfQqw2MbwRYBTCPuhYKXRshvRHcaoUOqE8Pqgdx6PtD6UtC82I
hr8FGVFZGVE8WpwFLW5MEZaNF2T40zN262ZE52bszU1eCBl2oFv9XS1kTEpg
4xkDSD138b87AgxuT6YP6h9ZbvaQ5XPxv8vq7Y5OZuolsOmHFMdHFMeietVb
YRlRPhnRUcKYUFoCLyNGNyOmIEOv6TONAUzjby/1F1nqPVOBfSnTwrCjzugG
1+ihiUFHslFHt8GLZ4Z/kYxCdDcCaHE4CXHea84kI7yM+ARaQu7GdcNZGkgC
RjuMbgcYvDIxfFpnmEhCufKuieFgAHVTmtDubr1jkdtyEMiHG04v3BxF8Fh/
+Fdl4DQjHuih0/ZZ0KJzk7f2AEKoVf8TUgybVfeQa/TimU7bM8OnQICHnmOR
cHmxUD+13u4wjnDK6uwb64FHp7sexbshD/Jou0GAPhl67TfV3/A0+ruJxKfx
J1NjxEs9gqHew8YTYjeCai+81MfYrOdvAgxuJBu2PdN5A2ndxLDBxBA0+MrE
OISZD5hteRnF/ihkRp9K0D4wuw/o9MiIj6Jh2F5wFSuwsWgjD6abSFVPKdrK
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority34" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority35" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority36" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority37" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority38" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
9TdsjT8xxsCgeniW+gBPfaiZ+hLTCG9Wf8bReIXlutkVAY8UTlm9Y3GywyM3
x1o3/WY3OxEFyWH69G71Z93/0/RHQqDcLndya30QVzPFQT59F/NrrMjW7jai
WENgjCVhHpjiI1IzTf9wMDar4Ektm+AlHBsjDdIECsN11HNKAgUfzKFNYEfO
wlS8wplG5G6hGlUbtdmmJB/BDqHJzFryJv3Dv6EVCryIFRKxWhKTxC8iXSIz
SbMET3g+pCLsEfW5qSCYkkzi/Ez6DfUXPOGFwrJ3qF+3fYRpSdgHTEDhkG9g
rygCdewzZtsZg5cBRk8woxdnDG6aGL48Y/Ck1qD7jOGNZANsD50Wl5sRjdHj
EzJsPWjx7Iy9oZQ9ggzb0IyoAloMdtfEoC3A6DaJ2fHM8AnH8K8zht1n1F6Z
GDQkG94OMJo+PSojKup/mv5XneFLE4O7k1urPTExeEUylE+3FSmM4vaMgbg2
cXQxPpZLrlP/k60BChpkavzJVn8NkseVBdb1YrqiuQ5lQvu7/9W6COP8y0uj
H7TM0XjGVH/jpT70LztxTEXq/q/TN2qAVT/jqf/5X+2kqO41IfAn2CClWwNT
QgK31fXDFmKGu3jVuGMK7EAdY6COcR6FRCXV0vRFbIYgWGhKJUVRuQKFMCyc
eZOJNfEoXColiqovsmIIlrZxcrmkk3XU56qq3aq22qEMBdLPZzwoJvQstdTZ
jFo9bDXEBmOI9TNSOblMhfpUQS5DewZ5+w2e6i0F0mpzhdsKdT7mjHU9TjOU
KYfOhaVwPp9B3VlurtCUSrpTrFRna9Jtrpo/uo5erUShUAPYJgyhUp3uOobI
MpfJC2JzmUVKDbpHk/VO1qUGqN7tVjVXaFMgqT3k3eDAWxMvoRJXD/Y2OlBL
cRxTdCwQ2goydodS4sB+LtIOtPGUQVz9BbQ/ke5o8RhtH5sWXUDbw6SFYxrR
UbTdeBt1EgOgzaPFFNDiODRwavgbPYLABTSwod1MWgKEFwFtH4MWR0zE3/7C
oEULaGs06JparumHj2Ika9fck+N11+wPlD4Li/NVP3RvK/s/qkGJd7h3i68f
oT3bbcu4vXLnwZZhbfr3qtf7AvYazblzlWOVuy4nuvOx45xuu1QrkClK0oJu
LM4j4yg9kA3PCvB/HUn1khWkfMivGAMjYZBs1Xkev9+7IcQO4l0YlsXFDGqz
lI0GmK6CIHimw/8CzE5g8rvvi7pU7LfJYRgpCnObPxg1n4mPwP8IKLre5bRY
EgmT/4Gl1ribqtEFQA0H7+nG0jctPbubg03SiGAE+9yOb25TyN1Ta6Ptvr1o
zQOayVMrwXY//OdBA0YXKHy61Ouvs0kMTHlqVC0w6H7TlcLE8Qlpiqpnd7+j
cjDtT3d0OGHPo2A4FSTG5LDX6i+oGGaNhjEnh3mfpqtjzN2TM5lIXNdcPjPC
sEEkG8Ekj7fTzi7HyAWf0v+7xgo+0K+A4cLG6Z9vt+8jIa1/6E/alEZmINAl
kNMfOm+2IjFHTv+3LWdJJK9JbeA7Kp866w1Ukj/Z8XOP8Iv/ktj8U2c3keiY
0lQX2jFqBfUyplCr8OmwJzf8YJjyp8PeBFcBYdr/CNZjF8Oi8jcSlqVIRutZ
GeXq6mmuyzqsZL7qpoLbbG2y2Upsh0C5JJficBjLCkTrXwXpHoN/l9IFBg3P
DEK0SctFbnap9YddBbS9CbQ9ubtViTAISXapqqvRjTrDpjMGIWxFfJhQ/y5l
eaPb8sOU5XcTDsdE0fbTaXs9IDLT9kVR4hIyopgZenc11d9kqT9ja0SwNXoG
1Qe91JcyGgyfQqw2MbwRYBTCPuhYKXRshvRHcaoUOqE8Pqgdx6PtD6UtC82I
hr8FGVFZGVE8WpwFLW5MEZaNF2T40zN262ZE52bszU1eCBl2oFv9XS1kTEpg
4xkDSD138b87AgxuT6YP6h9ZbvaQ5XPxv8vq7Y5OZuolsOmHFMdHFMeietVb
YRlRPhnRUcKYUFoCLyNGNyOmIEOv6TONAUzjby/1F1nqPVOBfSnTwrCjzugG
1+ihiUFHslFHt8GLZ4Z/kYxCdDcCaHE4CXHea84kI7yM+ARaQu7GdcNZGkgC
RjuMbgcYvDIxfFpnmEhCufKuieFgAHVTmtDubr1jkdtyEMiHG04v3BxF8Fh/
+Fdl4DQjHuih0/ZZ0KJzk7f2AEKoVf8TUgybVfeQa/TimU7bM8OnQICHnmOR
cHmxUD+13u4wjnDK6uwb64FHp7sexbshD/Jou0GAPhl67TfV3/A0+ruJxKfx
J1NjxEs9gqHew8YTYjeCai+81MfYrOdvAgxuJBu2PdN5A2ndxLDBxBA0+MrE
OISZD5hteRnF/ihkRp9K0D4wuw/o9MiIj6Jh2F5wFSuwsWgjD6abSFVPKdrK
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzVOHtcE1e6ZzJ5ASGZQMAgASegbVRkh4AhCNaERI2KFhArrrUkQChYHiFE
Hlpl8pCgRReV5dJVt6G11t27u5dWtD5qDY9aarGLYldbVKAg2q0PrFatj7pn
JkSpd/eP++fN75f5zvnme5/vfN+cI80uSc9GAAAqCQDJGvelmSIAWHCezSMm
L1zxaV7Rw9aX/dLIFIpGygPgJnzpx5ACBpwHwz/HGrlN3cVcwMbkCdsRB28K
ixsSznwrm5TMZSRv90sexuQiJVe8yFdurtWZOqWR2gBnHabezsjt4n4owjXz
avEvELnZIZ4mm1Yf82bLq9vwz7ug3E04AGoI5RFdPnjuRuaOyD0O+BhyNNeL
AlK21vk5hlOw2nbMLUFkqfqtgDfCxSIuTFksnJLyadzjkQUxWgf3tyJEvBDY
3HqCK2LkujokatWmZAnfic7YDEDqe1w7Mns14dKFBGxiLvYtFTOZGSGIrP2y
SjxNZHA1L57K3kjuVe2Wv8qe+MAj+aUrhOAjbNuEuUvuLAoMYKO+p4Sq+QuW
an16X3715Tt+S2KFpyY346btcXMbiJ87f9IepwbN2UQEpsuIWBqi3RvYfBKf
yNMtc3xJZr6va2IjzMMQkc99hdlrzZ2ixIpwksnEL4hIoS+ajE318x2OxBAk
TQzAtzAWobUDT+CPg/MUeDKY7GZkhNarQYAe+bM/Nwb4tICv2R/cpyiQUXRA
AHxc5CzwQI++JKZwc4BB1aJJ6O5IakWSujQJdZpZ3ZqEVmuCW5PoQBPACMa/
RgguA+zGKL+onn9Dz7/dwx4BgqIe/qBKcBU0aZQtHUkNqOpQR2KrddZZTaJb
E9qjUdaiiQ0dSb9mH+APDvwn9rP2xG6NsmlMdWirRtmDznrKXohvBS0Koouy
WEBOAtVAB1h32tjrdb9ATDVoBwTLFnbSED7S7D+gDj9pkJwxhJ9s9u9Gwr+V
SroQwmnSO6tkHNLkrMi3W0ycsianguBU5tvLuZy1Ko5b0m4NG2mWgPawS83+
Z5vDv4WMZHi7WnK+WTLya3a0gsup+A/s74ZfMIS3t0nGVLvC2q3hPU/Z9fZm
HrU6DZfp9XILgBJMdgkUeAq1aqmhdS+AYPJblZLZUoiHA51CXA/xH1knv0uR
TwJzwACoJwnwALhQt4hbLnNWQTNITpXMWaqD8j0mOU34c+6caQvrNoR/65YM
NPvDaFxFwkAZl1Pe5DQDbkWlU5HqXJsPGdG1XE6p3mlueo79glRy4T+w1641
Oau4nDLZv40G6R8hfUyZDtwIjgRhbNUksPf/RbLtRZR2f2YQeL3Fuo87wFNg
jWAXAhbA/eYP91tgrUpc66OOURNbfRC5Wtfgo5arM5t8NO8pA22G9lFujwP/
A6YLdLz+Byw10LY6WY+AwPA33WjifVaiy64gnaX5aLmOU7GP8+Z5ve/lHvZ1
Fwc+R3FOBeCsJThmF6cM5xQBgdnEKaXHFNJDAMd6jsXFKVdxYITgk5pCL0mO
ycUpxTmVPewbJGctxin3MNJv92McM8lZKOAKA5Jr6hoAEpfctOtB24GENz8e
LChfwd986lViOS93w5fq7tajWzmDpQrs5Lw3NvXeEXHf5x39wVAVPvnLD1Xy
ppRG88VvEie7lY5CGAcu/DPQ89KQ9IhMFLYKOMXE7nrfSNgAqD6AYACgABWn
l6ajTBJ4f3qgmRa/LxwHbIqGRkGaLYwgBHlKA6Ccfwbv8uHSguifG9RkXHYt
UwERAGNYNrHngZOLMtyUZhpDkNKglO42Nsw4AHCaDKr782lY8WgKBBtTd2re
HUS1HY6ZVJOj1G1OeiEODhGKEPGI+nq9djVgkrQor+WiTecBl2R53PVYlfDj
IY9cj48kwvtTzx4bigPeeAd/WjCZ4+F5arz596znjF/2N60FmoQ+0xgQyvTt
mABArhX4UH0vvEkUIkypr/N5Yf4JpmaiiDFlHlhN+h7czphVB+qzKXc+hHm6
G8JYLinpHJTkiZDZtRqlo6MuGdaKSlj6SnlwU1zH+HdIfiwvGdarsK+aJXkE
iyazh3ajs7s0s+vQ2d2VdbBUruNyqnROk4mz1oSWV8Ly4gzpFvKv1fMHCUEx
IRga5Y+m8mOxzrBLUsl5aVi7ITyP2JT4iT2xB+4vNOkTe5IDTeweFZXrOevy
OfH5TjN8kk5TPayKnHIZp/w+C4qtIJ1ZXGepGNYfWNasUXAL3xjg/+SGWxLN
7mqWDDdLuunnBYPkpFTSaYXVnv2Pek0CLCNN9PNQh7JhrBT8Bip9ZEs8iya2
dPA+L3CaMp1mk90Cq5zeaRE7LS5nyFdLBTeA4MdU/nA9f0glGMT516AXuCzs
Qhss++FnYNGzhl8YkAwPhv0TCc8TpylbNLN2wbqROnnMEb2zopJT2ZSWcqde
QEUgfDXVd65Kwy61hW1AwimDpWGjBnbGRruyuyOxRTMbBuRRe9KwJrEWTjvq
PvOlCngFtAeWTRnH3GR9dQiWIDf/cir/NhHZdkYdPjw44fxg2CVogC4kscU+
u9Ue6uhQ1tEl9FBbQlcH9DGpW9daCguynlMKA5jpDOk7wb+mF1wfgPVCcBkW
NFxwN5VfjPGHCD6c3h5gfz/AH07l3yciv7tmoGr1+cEJ16RhI9KwTmkYXMGr
0kl5+O7ETzSzD6EJDfaE7sxP4OpDZ2GDWKtzVphg9Jz8yxh/lLb2JsG/Xc+/
k8qnErYK5q0cQnO4DtfU8kJ8zHIdHmmt27bttNaFyXKTYuTJW+ul7ymx4yBQ
ogfLSwrzzIYiXFNSZCooNJpxeXRMbDQRHYPnlZjxlILiNZV4pVKByxRxM7IL
LFNx2UJD8RqDuQqXJ0ThckIun7rcmIvL5fjCNcX0HCeUs2JiZxFyEMts41kJ
DdGl09vSDTn73yhbEDm97L3QKeIfD6/Lid3h90bZh9N37Fy0rix0Cp5+ZAwl
/O9FOZEP3130xvTQKTLwJ7iXQqA/fr5mGcxRztpMUxOMSwfMhoSeDtuI5ESz
/1U1tYVGqMBRax8cN6TnX0mFKSUYphJLcCWVf6eFtFJ9msr4SmepZ70zTbs6
lK1I4h777Aa448FpWAaomsjpTtpjT9wFExmd7bInwaSu76DKiAHG9ms4CGT+
NoqqGNT3uEhmFZITXWp1gypBNPcLTA8LwC0CgEnwXcT8rvo0viOKWpffHkRA
YWF5UXRhSYkputyYYykxF6w1RhuLDdmFxn/3pqIg15L/7EVuQZnFXJC9xuLl
gXY4Ov+A88762krD81mnlYJWtbLBn/FRIRbAArlsjjxQyDOofC8SxEm1lUzF
8AlEjz86LAsZbmRIvgdSXAbqhXYGV03kX8C7cNVFQr+sQV081S30BXtCa6L3
yzDMl5F7SHrVrT+kvtqtP2IYtX3PJrg1gzWA59Y3qrm2wZp5cHRE/Y3NgCZH
cvWdA/kqjDdt9miX6ocaayQa48JV0TJUrMBrSFATyowDdiGKQpVNKmmtfUUN
6rM3AWBa9nchG2MGquwGAcMVWhOTaY+j+PRP+RzxT/mWSN2Qr507j+f7IrMN
xLLiXBGqPJ8662aVDPvOpiQNKMOHCw12oYQ4hiAxpn1TkO2lJqOuQd/pMiVj
vJZl+ehmRm4jCNnHdaA8m981UOPPnYaTg2ypwK3vdANItDeTqzU0Ggw2ob3d
R0249Wr+VZ/6FQyjKwIL+OKQXqA/T9YzGOJi7BHgzePxcGab/qONA6K8kIkv
imNkuzAm+pfgG/pG8vsa60P7S9AdAmNxPf4cMdzXtgnkXTNYSnmhipmjAh3+
eXrfPOKiif0B1h2QFMneGGjTkz+1T+oOUJax1fGppfdRu+8Z1Vw8sHvymg58
T/tUaj33MXihmIZiT55OttVaEQcuTrmMnW+PQkWsMSHbOmIWYacDcbGbwYTU
aRR1LYO9n7dDpI/ww4gL2H1EnBJ/DZnODMNV3S2IkMskFo3WicUqrq3tLP/T
Ab/9vIygOrFoCdeGnOCXqZaT3QEZaJBVpe5lfQw62I5gzG2yu/z0RLYeSLns
HUnMIeJL/aq2WvUgNEh/i+R0srqi2mamCrnB6avcfkSh6k0E4cVzjwN2JJuN
2fTERQ3J38/LDB5TkydYTyyqL5rkQKl99yP8T7iFnSJFVb87p6h+El8ydR5L
W35p56Y0ZNsf793Ny1A13HwckqSNxVlfnTvw1/7ji/s/08Sh6cPKVX2PHw8d
/b00CPv+yPXekT0Zqtbew0+0jsMxnRtTbL28DUMpr9gzVLm3q4p2bobS/joU
b6UUzVnSR0/vvZILWYbuJ1DC527tPXDs3JOivvo05PTWPsXrGarOvtaQkCDs
+v0NwT0WzD99uCKr79jjoSPXF6BSLVMT1ztJuLEnZWbRRC1Le6AIC8K+OaHO
UFlCd6cjwuq+XwKF8+bpeKZvfpeGCDcM3cNWcD7CdvXyuhzKU9VX2DnQsJuH
PxNDrnXV/k/lJz7u/ylI1auO01lvW4p+uJt1r4aypP8oAi35ek2JCQYnIWsS
My5MaxdVVZ9TlDy5V1wBkY+2rNydRul9gZJ8+0AaZfnaIgV8pejfuR36+9Xt
ciP094cHQt2lKdjfoRkLUzLOPppZ/AqkObqhb1sakrbhXB4MeEb/kcuUYcfW
o8EPo7pakYCIwrciZQd291evD90KRV0cOgFDt+deK4vS8rBoMZSwtnol9PT0
sXsjlJabP7Pwzgih7tbNF0nsLS3+2d9XvgPNe+eHE5Q7Vz4+jFOOrzq3l57+
JKWX4I+3Dxy7cnx31omn6/vL0GNEcoap7c3aCfWeXnxuOZ0qyqxziv4nyuJS
qHfm3/p2wFdLrgRTenuPboL5MJj0Wn8NdKT19pE/URYmlSzqUXGFbdipO/O1
0rgdt6LOaLifaqMcRBibjuTPF8+V/88TZTVPcJqn23avsujm4+reFyiB51p3
w1AMrit6A+pal/VOu9e2B7/0HTVMhcIVN+YIDUXCM+PkFy9dCEP62sOXtU3U
6i/pPwGN6extvS4Lwi5abkYuNq6gYr6lb4IjLllLaGMfC9O4p3K1p8cZubRI
B2lmfRqaEYeNo1m5bPzUsvOV8VNHXyMMRfEPjcH+DkzIO51SrRUlx14+QTnS
9ziMzqttV9YV3bxfMjQfWcw5DfdU74FTt+ds2LlqvJyzWQxvWA7+7cnBDQF1
a3C/DxPQu/2PZ3iE3Ksouvmo5F7jB9TyHXiipT6NARJDnUkAWMk21zfO6EjU
8TynC6q3SqizHVND91bqGz1OjMio/d85pT1KgzOnw+IAaxISquqoRahS19Mm
91SSUOy1ALCILha+kP5FUuSOEM7ZkOWOmSu6NXQXkfDIuDmvrXQ64rocwG87
Evhd3O5e7KneSbReNa0X9fT0CFcbl36/YrSRwWweUK1Vq+p4lYsQW6oJP4YT
C9ifvA/UMiVsoFRXyjyLT7U5sERYzRnIXwL5TPqs8I93uWTc48C72MdbRKrc
R627qeeBv1JPj03Vp1CvDeHjbGCM2SCzJ4NjuEjr1fUatj0SvZRO4iKJ7jfc
LduRkqkqzJef2zlAdazgmbrNrgnML74gPxbhXbCOY0zXoIoDZR1MB9tu9Suo
57ly6tnHMRHgzKM1gmex/wetfxmtn/JcBGNvnSizyWWOdBl7YoMqRNTJVaWJ
kE3zaJ497E3El7DpeZrOvjanKNS7PG/Om+6/tGHmGSyJw0LkFzCVnvhSxfNS
IiF4NztWuIGoR6Za+rFXl0f6fN7QVjCV2PZ2bQ6Opl/9tG3gIK+SCiWK1Ilx
AddmDf0LIl3TEWVPY8J2AWx6F7tYvyo0tRTfMlm1kv3B+25tXsRWK0/X/LDm
A14njl7ih2JtKhDJ7kJt+gG2RVWYR3TL8flUg8K57NUmTv9BJIhzRpesYIfs
amQEvr1JyZbjG2+EEvGp9ueV30HU7BLIL1vg5Qe++SSb0h8r/FzF3tOz3j6f
U1KPlDj9a/U4+TaXEHeRIjnP5skHmJ7J0zA39N8KuzAy9RO1mBfPfAPAHuwX
2FOKR7JZ0CecsxezdOCjVgnV2UcRb2e3TSLbojRDzIsEicjOIyzEjMjcLUgM
k0lcwGsZ4m55UiqRnaqEdjVNl+1nftWCpPn6IN0BBPwAgO6Thxkh3QHw465w
j4sjYnax9sCW3YlRLVvvC1cGW0D1aRL26Y9GTwXoLhKZ+wZoun1P6VwUHZHm
pTvoOhWQumgjiuhgHrxyMEl4i65F1b6fi9I6q3s/NqUI5z6qWO9PT/s9qaZY
L6CnVxrfH6PvnStZqhU+OTaJlQ7e0j5Srg+kCe59Tm/eJ0XvoDQ+fgOmQ6IC
bvU/WICzWnSd1bcVmvsBQbvord13V0gJOb7lnTZ6+kBKT09lAZq3vGh6wBk8
kBGlY6fU9lqWaC548HeLssdX0cBqFq2i7+cwWkXJzZGg8bXx+/+iTTp+cWfw
r8ps3pnxpXjxynM/ajvpdn9444yXtY8omlZ6f5finnOFnI9FOBjfsZrqd5K+
53wOke+QvCZfzx40wjq4DcIAtKGSOVYDVsN69hsIU8auMTI9pDSkLmGUY3cz
b8OX1FbeB+FLwKMLjHsPxuipHzxO0VcuXkhfD0721N4A8AxSeC48uUTDcRB4
Bmk8pNeMyfRCL345HFMHUS/0yoHHFTARPINe+mo4FoJn0Iuvh+NY8Ax67ewA
ntsaL/TiR6hzGZz3jpMDlAAMAw/eC73098bo7j2nl4t45l7oxYeMxdgLvXiq
QVFx8UIvfvYY/+zn5CyBcz/wDHrxK8boVjxHD8atJ9tr/9g5NQA8g1489VsF
c8nmyaWfqQQsN5gV8YqC4gJLgaGwYK3BUlBSrC0pNi42FBTTB8xio8GcXVVQ
bInOU8RZ8s0lFWPXAnMrc4wmijwr6/XKyiyT0VxWUgxlWKqyygma1VhpgifW
6IKY9DXFloIiY5bGbDRYjEvWFBnNBTlqs9lQNc9sNC4ej1jwK0uy8mKVeUZj
bkyWPJ4gsuLiY2OzlHlyZVZsfGyMIifXkGDMmUmZmqVZUFxekkMz0fPlZoMJ
mpSlMRQW0oi5lSbzM5olxoos77XGXLO5xFxmtDx1aKmlqtCYYSyzzDdashZn
GIvLSsyQLSf/KYXOUJwLOT3+jFFQCmh3PNPXoUCL0QwjMoaIkUcT0QRuzMvO
nanIic2VKxQ58Tk5sdkJ8vi4bEKRIFfCsUERZ5DHxeYlVCoVWYq4GaacGYXU
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority39" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "majority40" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{15}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {15}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`AtomT], "Bits" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {15}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "catenate" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input3" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input4" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input5" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input6" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input7" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input8" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input9" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input10" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input11" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input12" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input13" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input14" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input15" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input16" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input17" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input18" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input19" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input20" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input21" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input22" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input23" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input24" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input25" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input26" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input27" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input28" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input29" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input30" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input31" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input32" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input33" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input34" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input35" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input36" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input37" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input38" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input39" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT], 
                    "Input40" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority33", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority34", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority35", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority36", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority37", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority38", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority39", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority40", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input7"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input8"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input9"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input10"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input11"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input12"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input13"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input14"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input15"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input16"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input17"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input18"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input19"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input20"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input21"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input22"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input23"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input24"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input25"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input26"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input27"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input28"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input29"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input30"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input31"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input32"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input33"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority33", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input34"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority34", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input35"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority35", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input36"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority36", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input37"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority37", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input38"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority38", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input39"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority39", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input40"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority40", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}|>, 
                    "2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"majority1" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"Weights" -> <|
                    "Type" -> "NetArray", "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {40}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "WeightedBits" -> <|"Type" -> "Function", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> (Clip[Slot["Weights"] Slot["Bits"], {-1, 
                    1}]& ), "Net" -> <|"Type" -> "Threading", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[# #2, {-1, 1}]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT], "Bits" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>|>, 
                    "$InputNames" -> {"Weights", "Bits"}, 
                    "$OutputNames" -> {"Output"}|>, 
                    "Inputs" -> <|"Weights" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`AtomT], "Bits" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Majority" -> <|"Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|"LayerFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`s = Sort[
                    
                    MapIndexed[{#, Part[#2, 1] 1.}& , 
                    NeuralNetworks`Private`Compilation`input]], 
                    neurallogic`Private`i = Ceiling[Length[
                    NeuralNetworks`Private`Compilation`input]/2.]}, {
                    First[
                    Part[neurallogic`Private`s, neurallogic`Private`i]], 
                    Last[
                    Part[neurallogic`Private`s, neurallogic`Private`i]]}]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_50293f71_484c_4435_87d6_b5d450f810e7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzUvHlUU9f7L3ySQBLmgCggUyCCOAcEZBISQMUBRWr9QlUICBRUBpHJIRAI
Q7RioLWIKIrWOrRVsEUmGYUqdUAUW1BAUKxoEYIFAYmY++xzIJWu72+994/7
vu+6rlb32WcPz/x8nr0PmARGegeSMAxL2Idhrm61T220MUwRngNV2XPW+FaH
hEuLN6hsFKxDY0xUMSzfAMNUyCYYGZ5nwf+0ZFY2t1FhNZVhZf81KVXVTJGu
Z6TwVaDAYAXZ9WsV1xcMK207uu5aZatokUdUgwnLXSvjMIP7NTmokX5Vm+m2
UsT8jWQVnao732J+luWBoq3ZzFuNsO5BJoZFw79Wpo1KzKA0hW9Y51Lhr57U
M1naWuuOHFZJfbGOcbSeUWtAsvDiHcFUX9IZph1mnppm66qtJ16utnRPpX+h
TdJdg6XU8th0bXJQQb0Bl3PQ1EC92G6Zh6yGYs4zEyTnm5J5H10UFdJ0iy3I
RUlmghW3ZOP+SrwHu90NsGTM5hAW1fwdPQNbcTsKw0K9091Nud/OVn1lRfZK
vZtsHazLVG+Yd4PHOWWKYQrzGwIYjKyL2sddTbKYWmoXvY7UPWPQc9enznc1
4fxgqrq+Yf6vBQy7mY2fp9/tdi+6fm7e2dTfeg1ecmeZ/n228WBimCus9LM9
+ZVF2CGLgPGDfQcT68LMzx6fo62w/uvzIi3z02WnXh1DjU2qoQqumbtiFtS/
Sf9uq16IkNR/KEvPq1D7YDtTUOAPHTMUv4pybC5SoM2fbZJlUW/JYAbNs1J0
ZXJvJwtMg3IfLXQz9yr4UlnBYg2ZvI6ke4ZtZ+0h8//KFFubHLpP88a4TJuh
Hdh8ll778VtslqGsv2vlTZyXGLMZ+epqD2Wt8MqbmeeXWvQv6SVJC7N32ymQ
z88ID1uzydVrEU1Z+7xuJmmjLtgVGJG+qFsGf2hMVVuGKzZHX2SC5agpvEV9
FGY47xBqGGMu2EcsC1N+JVQb531AXVgqiaes4Hi03umum36t0Olovd25eqej
bvq5FKdiN7ssCk/9Wa36kJc69kxd0kx93a3+kq0RzlMfbKb2M9SHBeoC+1SK
4103eyzVsdJN/6Lb8mKYSFqeKrQrcrO/+6/pAwz1gf9huvvysnqnVKH95NZc
x1TK8gL59Frqc4ZgB8WZiWh2wQI4aPF62Mip0c3+sJsDrFCcbF/rBrPssZcM
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
g8lKPpyd/cC9gGER5GRp5Xoky+Q7O0YNNsOAh/0ncldIdEA40y0yPCpsV3A0
02qx5dLF7MWWzJDIaOa6sIjYBGaCnS3TwtZ6UWBYzDymxZqAiNiA6L1MK/uF
TCu2ldW8/wQHMa2smGtiI/BnJtvOwdLKwcYeW6pQp5rMdmM3evBSvAO2/7Jz
z2rWgj3f6Zvp/l2+f/vSb1R27rm64JsTa/fv0TdjeldMdmn+uHY7S3p27c4F
+mYW2CXwGUhJmIpytAXYIm2fT1Qu8F+PoGpzfcpLg5uAWrjIVV4iASEdz7Lu
4an3eoHpaLxABqTR66U+XCRIpu21wC07IWM3oVefqJP1dsUkx3PC5Uch9mEP
IHZQUZy763RO6HgSDBYgA+BrwNT1KPYEgGxDIJDOUIjWUgGH1oA+bYtkTcFs
CxF5XoGrRQp5QW7KfOGhAi73aC2do3mUa3/UdaO2p+XRdUozZ2quxOjslVgK
k47+G3PB3kIeKoSFTVc1Zm20be5Ee48ytMR/zkpI1olI1kk4E6zv/9nePTHB
4f7+ngFRqyOCghOCg/xX+vu7+ft7BwfssrX29wrYvjM4iBsdHbDXf3VETPCX
wdHQazmtf3Lo/36n1f9P2zowzeICoi3trWw8A8Ii/FfGRmyPCYuMmGP5r0di
nLX/pNX6+68Pjt8QuCN4e4w/vqBXQHTM5rDgeETzf2Xvv3b+w8c/LbdpLC61
murYHBkW5BEQEQSbe/n/a9P/vrrV/13UEiK2Wspe9n8p3Xb/R+m2/H+Zbsv/
u6idkrL1/1kf/P+Obptdu+LCF++KjIxaHAckR0aH7QteHBwRELgr+L+9iQ8L
ign950VQ2J6Y6LDA2JipOVCvuaua0ym6PzF+2v5rlG+jMmntZlW98z8xioN/
LQq7eyi5JW+ma+9PupUDvpYHDItTMIrzK4qLj0kq9+dAhpDttZmxvZbG76Yt
oFt1C50HhTPd9Qa5xmN1ynWqOTPr9XJJvwRyKEtDNzPCJofZEMNuzLZbQLX1
EX75azN1J3aZ2SHQGK/V2MyInBxmN7maAb5aevcTRpB+SrhbbTjDNqK+aHdr
em0744C+gqSdndB1jSu6qJayKZxhvsONSdVPWdrGKKijPlNt5tVHUUOjwult
PLdmqr6CbahQjaJfXIfORpdq1nvRzrFnbFSN5Sgv1azDHzRV3AyzbqxrYD8i
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
C683/wFhEETw
                    "]]|>, "orcInstance" -> 107539040, 
                    "orcModuleId" -> 107890512, "targetMachineId" -> 
                    93453744|>, 140715643652896, 140715643652752, 
                    140715643652832, 140715643645952, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    Block[{neurallogic`Private`i = Round[
                    Last[NeuralNetworks`Private`Compilation`output]], 
                    neurallogic`Private`g = 
                    First[NeuralNetworks`Private`Compilation`outgrad]}, 
                    Table[
                    If[
                    neurallogic`Private`i == neurallogic`Private`j, 
                    neurallogic`Private`g, 
                    If[
                    neurallogic`Private`i < neurallogic`Private`j, 0., 0.]], {
                    neurallogic`Private`j, 1, 
                    Length[NeuralNetworks`Private`Compilation`input]}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_f38feed1_2700_4733_8f28_37316cda9ec5", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
RcvyxU9vYf6vdzDRFYXRKf8rKGN58y+0bmTo
                    "]]|>, "orcInstance" -> 
                    106454976, "orcModuleId" -> 93363632, "targetMachineId" -> 
                    109376368|>, 140715643634432, 140715643634256, 
                    140715643634336, 140715643633664, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {40}, 
                    "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "040083c560375d19", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{40}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "MajorityBit" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Reshape" -> <|"Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1}]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Bits"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Weights", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "WeightedBits", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Majority", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityBit", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"]}|>, 
                    "catenate" -> <|"Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "majority1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "catenate", "Outputs", "Output"]}|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "BitLoss" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0. + 1., 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0. - 1., 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.]], 
                    0., (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, 
                    neurallogic`Private`n])^2], {
                    neurallogic`Private`n, 1, 1}]]]]], "ErrorFunction" -> 
                    Null, "InitializationName" -> 
                    "Initialization_96c921bf_5829_40d0_bf71_6ffac6ae589f", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJzkvQtYU9fWKLryIAkQICBqkIeLh4qKGhAQ5GECaLEqgrUW6oNAhWorAZG3
BhJAiFUErZuNVTS21truarHy8sGbWlqBorGGNkJQrNiNGmzQoIC5c86Vh+5/
73P+e797znfPd/0U1pprjjHHGHPMMcYcc6ylc3zyungShmHeZzEsJLS538cW
w0zAfTyT4/Z2TGNi0nj1WvMo0WrYx5mJYT+7YZg52Rkjg/tp4B9d7HqI10Fd
SWN5+R8mFTJnmTDsnKj740UOy8khh81D7rO8bP0Y7FVmXqmS8JR2Z9cwm+ID
LN5h8tYOxgVbPHSFBP+J5JVayJ7nPq/Mc0/VpkP4jx0A7z4cw8rBby+XDlN8
617qp66nC8GPwcJTZbY2qw8eMC+8v5r1qI3V7EByj+QfxJgPGCyXO7PWWM9a
3eg9+WClZ1gh431bEvttLL+Zz2HYkrdKKQsEtje1mfYtpz7bx97CPyXRrtU2
7TrLb3n7dJTkVNjpP9No97TvcCMlvP0u2PgPiS5Ml5tPm1bw7g3gk9ruU/km
8w+tcC6yOXRGZgdASTxn2oJPsEfTj+3jSMJ/1M6wpi93SdlR9ipvKLIl/2/h
X7BC94XLtF+JpKyCacux5/u7wthhpwfzSiRhLiz82l7eS60jKar933QoXCFy
GJXSZi0E1Koc5kVX2Wy3jXe33v57GWkfIy7kOC26fZ9E9NO+V8tMqHvZ1e7k
qtgds1txF0ftx25uZG/nt++xOg7Ppba6WYi9j4bh3Q487gkXB0vqvJaCsFnh
rK+ZpW+JVif4OTgVzsufw/vGWmRTdfZd6u2CLcv5Pu4bqBvyE5fzo85uoJX+
GFo3g+n+HvW2OGM5m3n2PUkbjktjrc1IZjOcB+a2cVi4y9RPPLkO5Gskx/2R
7pF/ST59fxr1SFyMO+si41uy/34Ox6batiCkORrfbhdNcY1SHT4jsZl9clcF
PUbSsd9lzssvTU0LSDFDDOkXp+d+XvjnnPNzXpp8dVSSeDiS5bfyM5e3K/bc
y/k8Fl5EejbbMGJu3qxlyhf8/XJCvSVtdAH5Y+7ddVm1BVj+NdBwYP3C1ufc
IRsH981mG8SskZ4cXMr41vfSV9iBSDZLdN8NpybsknIzv1nnBPQqio1hY+C3
vWRAC/7QcaYvKwRzs5fcRbfc37ksEj+JY0aKFn1E+WACNmJ+mANmE0kSVrX4
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
DP8Lc8scQg==
                    "]]|>, "orcInstance" -> 120149248, 
                    "orcModuleId" -> 180936032, "targetMachineId" -> 
                    121375792|>, 140715470033088, 140715470032896, 
                    140715470033024, 140715470024704, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "GradientFunction" -> 
                    NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]], 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]} -> 
                    "PackedArray"["Real64", 
                    TypeFramework`TypeLiteral[1, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 1]]}, 
                    Native`UncheckedBlock[
                    
                    Block[{neurallogic`Private`predictedBits = 
                    Take[NeuralNetworks`Private`Compilation`input, 1], 
                    neurallogic`Private`targetBits = 
                    Take[NeuralNetworks`Private`Compilation`input, -1]}, 
                    Table[
                    If[neurallogic`Private`n <= 1, 
                    If[
                    Or[
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] > 0. + 1., 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] > 0.], 
                    And[
                    Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] < 0. - 1., 
                    Part[neurallogic`Private`targetBits, 
                    neurallogic`Private`n] < 0.]], 0., 
                    2 (Part[neurallogic`Private`predictedBits, 
                    neurallogic`Private`n] - Part[
                    neurallogic`Private`targetBits, neurallogic`Private`n])], 
                    0.], {neurallogic`Private`n, 1, 2 1}]]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_552143fa_5618_40b4_9014_5ac527ba8cac", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13., 1, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
erq2FCo2bfRqcw3aqCrY7sGm8Vlr2SamzBkiWDpdg5b11C67ljTMuh6ySbNs
MLecdD+yB/YjjIH/is6CwK6oLhhrdQ9CXmfAXT5Y+1ZaXXA8E2VZ++sUXuHK
pOcO5l+CmbJ9zx3Owg/y5BcOMcC5n+mteOFAhh/k488dkmfCPEGWFBu3RjfA
68KEqKD4/Q2EQt7wlYItAuQVLnUNTh7urX/ukINPreSdgf5hX61sNBGmGJd5
5+Hzla2KD9AE6X7eNng2vajwjcyBUWsfT+4buQ98WMbr842Mh+s8hOuEg3UO
D1wq2NKEZ4MnBiZvdmQET7SGQmf7ywUpv16mqD/GZcN5w9UFVlka9uTKV88d
PrAQbGRXyK8UFEfCKScGLhd0fgA+pMsrChgRaEh6uYCxDYJLrxZ0hsHvBgGe
BvtgttvLmgvKylBwOHw6enOi1TAQF+Vk1+DlyV7fyHzI0rILvZSXMDFIOdwx
ua5PyTfoQLnp/lKF1y1l5XMHFJ3PdIynm6oPAIOvJvuWEFDgvCBNqwensnDh
YsjdZGlHPRA7QwwVcPWFwxw6zA4vdQ1PHu5TPnfIRY9wnTppxqBDDprX9/qF
Q1+Z/tRW65PZrzKUJ/93/dfPp81w3YQ4l1UUhCGpyKoKwjbBkY5LBYyZ4MRT
J/d95OAbyYeaKe3wjfwaqXVrxwyc/q2DKfXS0YLNKvlXFnTCkFu4TXoJHqmf
XiqdEKHc5WnSts24yYAp21GiN1i1B//mBorlhSD94qCBkRMnf/FXnQQmtipr
rckgwj+9DMzuOcRZfWNCtBV+8JBPiFbbgdhU+9xhNq7mygKGOYj9Xb2+CSSU
uQz4yAdfTwKLKiQAkxpPByYVpjIEoP9obAPhdjowvEPIBEuHfRPIhgDs9uC+
yUHfyBAweKVE5hu5BXwY58t9E6a3q88dEyAlPQipUGybECUhuiu3ypC1Dl4q
CFNZVk3BAx38AJGumFzXW8+n4AcXEEQn1ilrCophclHI66g5iGM4fKwDiqb3
6oW54LH2BZD8N0jgFwavoR1dWzBGVbchwVhaiWLp+/8aSyWZTmIYS81Ic2PQ
XHinCu9x52f3h7kEmvxsJ8awM/p6fqXxzBF9yh1D/wYz6JoM1R6OqA2pqfTU
cpoQ1kPDYD30gZCzQgCCqs50IZ3ZoGsGIALZmHpyGpMcybrOogO/JERXQTZO
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
BO+kftTV/FbFZk0rFYFHSne5LiDvouONzRzrZ2SPtWIy35UVV2iOLibpMzRb
scFSuLPN9VzjTNUGDqHUE26Y/kgIJSQ0bsHf/ta8BY3umwSruDPLabvbNfdN
wr2p5aTY9jn+lg9WbIFUdWuoatqmoYqzl/SDy/VucpyGKkmuVZtpDeckzSK8
E7503RiOXzSxdwMcbyAOHvIbzJlaYm2Eu9tcGzhWKmLplOEISjlpD3uVYAsL
vnjsiLzTWYLGOw2ZdF5zzrJqU99KJbFso1hrWZSNBmDBXWDBPfgrut9rX9Ed
MekHINbaV3RZtnyXtSEUvmtZ08dHyDAefaK5iKvRvkf9eNWQZTktVax+Pfwu
ISOP/Bq+bPwA/pJCp9CNMqMFvl3cg9hia98u7rYl7G1z7W+0UbWehVDsIg3O
aF9lD0yKF8bC14nRko+1S+YFim3efSP9rvBgxTXnRpuR3ySmVziW0P/W4q+X
s0/S9rVbXnJZ201RrzHvH4NyEr99TtaiMTIP6u0NWWNNqZobTsIh0j8u14co
EjptY8juckpMk6nOdIrsWWNwWQtbV3fJfraps0uISdlNmzy9tSO/sY+vSoW4
JBSNDezT9j3nkyZcrtP1T6tvS627qV5tpgLiAWDzDTZAf3nolrhpvxbkMEnp
cp2lf0YDMhS4eC1TP0q3VfcfwBrJHLKWn1ZGgRaUpn1tn6IRkmA1176c9i1X
/Ur83cbi7mZnwtzEZq6xgmALhTSmeQe/zFajlZDZjZ+1udYQnTVa2Zlww7SY
yCckCDPAQibwVwnOOQaepMW9tFVwOJkjv7CyqRmQexFVc1d8UNvieIzk7no9
Xv8cXf3CwV0917UCfRDXZ5vaQzLmEtW6eiK2t/PjZIpNwR6HuIKQVg5p9/gJ
kq/rdbH+9xpcY6vd1koALrNFpxEuVxwX5gKozQPU9iCx3KVq9vGb1SGzy2k/
NOhr7o3Ph5WTfoRbieug2UqeRM1W+sb0zG/O/vOr/dRRWzyv3Vk4n7ZkJ53R
5nrEX/tu/Denp5WTytrn6Kx7FpgP5TGkkUdTgVa135PiXK9zjfro7dWO1JLr
wpHfmJaRpx3QWxuko2+o8Pb8qEajEj1IOoZ+KGKNYE457WeWAdRoIyCdUAqS
v/L2GVmFs6Ng50fDbNx/AuFgtEzhzLy1rtfZBpV4E0Bn04IRwoW81eG0Q8eK
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
                    
                    "]]|>, "orcInstance" -> 109140992, "orcModuleId" -> 
                    120409792, "targetMachineId" -> 108128368|>, 
                    140715470012672, 140715470012480, 140715470012608, 
                    140715470004224, 
                    "{\"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]], \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]} -> \"PackedArray\"[\"Real64\", \
TypeFramework`TypeLiteral[1, \"Integer64\"]]"]], "$InputType" -> "Real", 
                    "$OutputType" -> "Real", "$InputShape" -> {2}, "$Batched" -> 
                    False, "$CompileBatchedWrapper" -> False, "$MXOpName" -> 
                    "470dc223456a9352", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "Summation", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "MajorityNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Catenate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "BitLoss", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MajorityNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "MajorityNet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "Catenate"], 
                    NeuralNetworks`NetPath["Nodes", "BitLoss"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8647940289960737`*^9, 3.86479458456325*^9, 3.8647946885772552`*^9, 
   3.864794828967071*^9, 3.8647949140594063`*^9, 3.864794981629747*^9, 
   3.8647950738630657`*^9, 3.864795104886257*^9, 3.864795183156526*^9, 
   3.864795356595887*^9, 3.8647958710939627`*^9, 3.8647961938096857`*^9, 
   3.864796445435845*^9, 3.864796696472126*^9, 3.864796932091053*^9, 
   3.864797123429097*^9, 3.864807311323687*^9, 3.864824710534513*^9, 
   3.8648249821127863`*^9, 3.8648256867679663`*^9, 3.864826208664939*^9, 
   3.864826414126713*^9, 3.8648266431271267`*^9, 3.864826728885482*^9, 
   3.86482686187794*^9, 3.8648271123132353`*^9, 3.86482742779937*^9, 
   3.864827535868453*^9, 3.864827683755685*^9, 3.864827816858424*^9, 
   3.8648278477666903`*^9, 3.864827889248179*^9, 3.864828504274651*^9, 
   3.864829313929291*^9, 3.864829493874485*^9, {3.864829634655851*^9, 
   3.864829651757187*^9}, 3.864829735085465*^9, {3.8648298557738934`*^9, 
   3.8648298984638977`*^9}, 3.864830071480295*^9, 3.8648301029183197`*^9, 
   3.864830269066882*^9, 3.8648304639273376`*^9, 3.864831053486671*^9, 
   3.864831090421762*^9, 3.8648312519197197`*^9, 3.8648315227962303`*^9, 
   3.864870845476191*^9, 3.864871528825057*^9, 3.864871641651697*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"28ab16d7-dd4f-407c-8d33-a9d9ae4e6942"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train BNN", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}},ExpressionUUID->"ad8f60ad-b03c-4795-b29f-\
2120bea29aab"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedNet", ",", "resultsObject"}], "}"}], "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"bnn", ",", "trainData", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<TrainedNet\>\"", ",", "\"\<ResultsObject\>\""}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"testData", ",", 
        RowBox[{"\"\<Interval\>\"", "->", "20"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "\[Rule]", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "\[Rule]", "16"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<ADAM\>\"", ",", 
        RowBox[{"\"\<WeightClipping\>\"", "->", "1.0"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "10000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.861526691136385*^9, 3.8615266963148317`*^9}, {
   3.861526892029048*^9, 3.861526926283662*^9}, {3.861527458190147*^9, 
   3.8615274604371557`*^9}, {3.861596326598248*^9, 3.8615963274217*^9}, {
   3.8615967956741247`*^9, 3.8615967961606627`*^9}, {3.861598174371325*^9, 
   3.8615981746979227`*^9}, {3.861598220275262*^9, 3.861598225258154*^9}, 
   3.8615983260431423`*^9, 3.861598358699059*^9, 3.86159844430643*^9, {
   3.861599169123077*^9, 3.861599174704619*^9}, 3.8615992423695927`*^9, {
   3.861600520411129*^9, 3.861600562629966*^9}, {3.8616081896592207`*^9, 
   3.8616082644326277`*^9}, {3.8616083130496693`*^9, 3.861608481636849*^9}, {
   3.861608535186941*^9, 3.861608535398024*^9}, {3.8616086046096888`*^9, 
   3.861608609360312*^9}, {3.861608739970097*^9, 3.861608740192383*^9}, 
   3.8616099667122927`*^9, {3.861614281981885*^9, 3.861614287106696*^9}, {
   3.861614365090412*^9, 3.8616143673881083`*^9}, {3.8616144695057087`*^9, 
   3.861614469732106*^9}, {3.86161505490434*^9, 3.86161505538334*^9}, {
   3.861615116680296*^9, 3.8616151171363297`*^9}, {3.8616198840202208`*^9, 
   3.861619896475774*^9}, {3.861619933949086*^9, 3.861619934436226*^9}, {
   3.8616205688654413`*^9, 3.86162056898837*^9}, {3.861621088443665*^9, 
   3.861621098667687*^9}, {3.861621218259624*^9, 3.861621225825265*^9}, 
   3.861624043980535*^9, {3.861624307531184*^9, 3.8616243076298437`*^9}, {
   3.861624687459483*^9, 3.86162468788214*^9}, {3.8616317684296827`*^9, 
   3.861631771261539*^9}, {3.861631816290057*^9, 3.8616318651050177`*^9}, {
   3.861631958566456*^9, 3.8616320059017973`*^9}, {3.861638826475503*^9, 
   3.861638863051971*^9}, {3.861638929739991*^9, 3.861638933259767*^9}, {
   3.86163909929949*^9, 3.8616391274931498`*^9}, {3.8616392874074907`*^9, 
   3.861639287788124*^9}, {3.861639342925112*^9, 3.8616393990436583`*^9}, 
   3.861639449163229*^9, {3.861639487797435*^9, 3.861639488276143*^9}, {
   3.861639520343843*^9, 3.861639615020278*^9}, 3.861639650557322*^9, {
   3.861639686197283*^9, 3.861639686348756*^9}, {3.861639721733241*^9, 
   3.861639751631373*^9}, 3.861639812613257*^9, 3.861639861214222*^9, 
   3.8616774469586077`*^9, 3.861677554774518*^9, {3.8616778506545143`*^9, 
   3.8616778521812696`*^9}, {3.861677928513179*^9, 3.861677931501341*^9}, {
   3.861678046006336*^9, 3.861678055688725*^9}, {3.8616783565669107`*^9, 
   3.861678357598217*^9}, 3.86167840465492*^9, {3.861678454463538*^9, 
   3.861678527994815*^9}, 3.8616785698992653`*^9, {3.86167862517889*^9, 
   3.861678625463068*^9}, {3.861678715451593*^9, 3.861678733335671*^9}, {
   3.861679256809675*^9, 3.861679276951795*^9}, {3.861679388201187*^9, 
   3.861679388456155*^9}, {3.8616794844013147`*^9, 3.861679484503944*^9}, 
   3.861679546193308*^9, {3.861679619851099*^9, 3.861679638016491*^9}, {
   3.861681013467979*^9, 3.86168101459874*^9}, 3.861681415909296*^9, 
   3.861681864196413*^9, {3.861682110373234*^9, 3.861682112492031*^9}, {
   3.8616863025138683`*^9, 3.861686304841498*^9}, 3.861687285337879*^9, {
   3.861689174383565*^9, 3.861689176310357*^9}, {3.861689209167395*^9, 
   3.861689214174241*^9}, 3.861689288336671*^9, {3.861689432798358*^9, 
   3.861689436373431*^9}, {3.8616895457298203`*^9, 3.861689547927351*^9}, 
   3.861690874285904*^9, {3.8616913171934137`*^9, 3.8616913362674923`*^9}, {
   3.861694913869595*^9, 3.861694931633668*^9}, {3.861761976810191*^9, 
   3.861761976961794*^9}, 3.861762475508395*^9, 3.861764987789689*^9, 
   3.861768316847867*^9, {3.8617857164782677`*^9, 3.861785780365232*^9}, {
   3.861785914277614*^9, 3.861785932239442*^9}, {3.861786088006579*^9, 
   3.861786091462006*^9}, {3.861786160342374*^9, 3.861786241983512*^9}, {
   3.861786364954378*^9, 3.861786365077137*^9}, {3.863151017817006*^9, 
   3.863151052231936*^9}, {3.863152267054907*^9, 3.8631522705590677`*^9}, {
   3.8631524024308443`*^9, 3.863152416905096*^9}, {3.863155751116795*^9, 
   3.863155797511241*^9}, {3.863159013274281*^9, 3.8631590500184107`*^9}, {
   3.863162764531417*^9, 3.8631628032353477`*^9}, {3.8631630660294247`*^9, 
   3.863163069595264*^9}, 3.863163206259715*^9, {3.863179475518319*^9, 
   3.86317957456575*^9}, {3.863179608120089*^9, 3.863179608444792*^9}, {
   3.86318927526542*^9, 3.863189277768508*^9}, {3.863234988848897*^9, 
   3.863235011991157*^9}, {3.8632401771258497`*^9, 3.863240219429329*^9}, {
   3.863240252735134*^9, 3.8632402947899647`*^9}, {3.863244122334219*^9, 
   3.863244136601095*^9}, {3.8632487772288446`*^9, 3.86324879750486*^9}, 
   3.86324887355694*^9, {3.863267289564172*^9, 3.8632672965366917`*^9}, {
   3.863267350136612*^9, 3.863267353600457*^9}, 3.863267621669776*^9, {
   3.863267668405401*^9, 3.863267703033616*^9}, {3.863267742193708*^9, 
   3.863267743881342*^9}, 3.863267824797658*^9, {3.8632679622613688`*^9, 
   3.863267962414866*^9}, 3.864825849288335*^9, {3.864872337081386*^9, 
   3.8648723399380198`*^9}, {3.8648723753220787`*^9, 
   3.8648723831139507`*^9}},ExpressionUUID->"eaa3d115-a086-4307-a3c4-\
028cf226a277"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate", "Section",
 CellChangeTimes->{{3.864793756054949*^9, 3.864793759486944*^9}, {
  3.864793999069639*^9, 3.8647940005418167`*^9}, {3.86479404330995*^9, 
  3.864794044933494*^9}, {3.864794315714326*^9, 
  3.8647943165808363`*^9}},ExpressionUUID->"b675450a-34c8-422e-899e-\
e8ac46fc9f8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExtractWeights", "[", "net_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"arrays", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"NetExtract", "[", 
             RowBox[{"#", ",", "\"\<Array\>\""}], "]"}], "&"}], "/@", 
           RowBox[{"NetExtract", "[", 
            RowBox[{"#", ",", "\"\<Arrays\>\""}], "]"}]}], "&"}], "/@", 
         RowBox[{"NetExtract", "[", 
          RowBox[{"#", ",", "\"\<Weights\>\""}], "]"}]}], "&"}], "/@", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Values", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", "\"\<catenate\>\"", "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"NetExtract", "[", 
              RowBox[{"#", ",", "All"}], "]"}], "&"}], "/@", 
            RowBox[{"NetExtract", "[", 
             RowBox[{"net", ",", "All"}], "]"}]}], ")"}]}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"#", ",", "\"\<Array\>\""}], "]"}], "]"}], "&"}], "/@", 
     "arrays"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"ec566d49-f36a-43fd-b5c3-ee142eb3b4bc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"resultsObject", "[", "\"\<RoundMeasurements\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"majorityNet", "=", 
    RowBox[{"NetExtract", "[", 
     RowBox[{"trainedNet", ",", "\"\<MajorityNet\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"TODO", ":", " ", 
    RowBox[{"we", " ", 
     RowBox[{"don", "'"}], "t", " ", "want", " ", "negative", " ", 
     "weights"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "majorityNet", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "<", 
      RowBox[{"-", "1"}]}], "||", 
     RowBox[{"#", ">", "1"}]}], "&"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.861598551906061*^9, 3.8615985567851887`*^9}, {
  3.863178625879333*^9, 3.8631786268708572`*^9}, {3.863240306853362*^9, 
  3.863240307588504*^9}, {3.8647943299915457`*^9, 3.864794330447215*^9}, {
  3.864794373237455*^9, 3.864794410229562*^9}, {3.864825813950893*^9, 
  3.8648258236291018`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.08610824587207938`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9, 
   3.864824874279098*^9, 3.864825084390379*^9, 3.8648257903081007`*^9, 
   3.8648258243477163`*^9, 3.864826317452064*^9, 3.864826707415752*^9, 
   3.8648268358911123`*^9, 3.864827667008909*^9, 3.8648277980615273`*^9, 
   3.8648279244198427`*^9, 3.864829394605691*^9, 3.864829843115088*^9, 
   3.864829959358408*^9, 3.864830393511653*^9, 3.864830567569335*^9, 
   3.864830919268218*^9, 3.86483103124896*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"eefce6af-b81f-42ce-935b-155bca92ee05"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.861598557141324*^9, 3.86159932496406*^9, 3.861600312823881*^9, 
   3.861601585970324*^9, 3.8616032957846117`*^9, {3.861608298411519*^9, 
   3.8616083183028917`*^9}, 3.8616085550848*^9, 3.861608810672841*^9, 
   3.861609187782413*^9, 3.861609263890033*^9, 3.861609731053445*^9, 
   3.8616099697238693`*^9, 3.861610658991444*^9, 3.861611766631*^9, 
   3.861616124927318*^9, 3.8616192444778347`*^9, 3.861619963378441*^9, 
   3.861620089638427*^9, 3.861620387381283*^9, 3.861622535346579*^9, 
   3.8616277717526608`*^9, 3.861627926557097*^9, 3.861628103911521*^9, 
   3.861628534853827*^9, 3.861628885555339*^9, 3.8616290173633623`*^9, 
   3.861629077343205*^9, 3.861629337131572*^9, 3.8616295320447607`*^9, 
   3.861630777186632*^9, 3.861631836724824*^9, 3.861632278357716*^9, 
   3.8616324340143414`*^9, 3.861632762075611*^9, 3.8616337118826733`*^9, 
   3.8616356725177107`*^9, 3.861635894023178*^9, 3.8616359626206903`*^9, 
   3.861636234152629*^9, 3.8616390467587633`*^9, 3.86163921854004*^9, 
   3.861639277897636*^9, 3.861639791227378*^9, 3.861639992590982*^9, 
   3.861640145823147*^9, 3.861640426707197*^9, 3.861640510279099*^9, 
   3.861640656578981*^9, 3.861676825977009*^9, 3.861679722732286*^9, 
   3.8616896456436462`*^9, 3.8616899540068693`*^9, 3.86169448702297*^9, 
   3.861697070599144*^9, 3.861709301593432*^9, 3.861761971989541*^9, 
   3.861785926291955*^9, 3.863151077609033*^9, 3.8631513568497467`*^9, 
   3.863151398896656*^9, {3.863151467773486*^9, 3.863151492099278*^9}, 
   3.8631517118208027`*^9, 3.863151759467462*^9, 3.86315191478391*^9, 
   3.863156579332025*^9, 3.8631566319872923`*^9, 3.863156726439755*^9, 
   3.863156760983041*^9, 3.863157503104232*^9, 3.86315758919571*^9, 
   3.863157726868866*^9, 3.8631578459034653`*^9, 3.863158024731306*^9, 
   3.863158066216166*^9, 3.863158149578815*^9, 3.8631582880995407`*^9, 
   3.863158383100382*^9, 3.863158562747924*^9, 3.8631624350849257`*^9, 
   3.863162696090391*^9, 3.8631628315798483`*^9, 3.8631631179441347`*^9, 
   3.863163186467744*^9, 3.863163263716269*^9, 3.863163321285037*^9, 
   3.863163433622768*^9, 3.863163575357746*^9, 3.863163656008732*^9, 
   3.863163760169982*^9, 3.863163888235806*^9, 3.863163940717307*^9, 
   3.8631639815485086`*^9, 3.8631640322806664`*^9, 3.8631640779733953`*^9, 
   3.863164153205048*^9, 3.863164248152726*^9, 3.863164376840151*^9, 
   3.863165966925852*^9, 3.863166541634058*^9, 3.8631755217262173`*^9, 
   3.863175567222314*^9, 3.863175803363757*^9, 3.8631759249798527`*^9, 
   3.8631763342580147`*^9, 3.8631763780873013`*^9, 3.863176424817193*^9, 
   3.863176475288206*^9, 3.863176540459158*^9, 3.863176635923481*^9, 
   3.86317668199907*^9, 3.863176784236801*^9, 3.863176890206065*^9, 
   3.863177186951869*^9, 3.863177371425349*^9, 3.863177561813005*^9, 
   3.8631777280287027`*^9, 3.863178465988693*^9, 3.8631786277714043`*^9, 
   3.863179130318796*^9, 3.86317964439256*^9, 3.863179722227026*^9, 
   3.863179895390327*^9, 3.863180417307391*^9, 3.8631891933581057`*^9, 
   3.863195436663931*^9, 3.8632358567559233`*^9, 3.863240307912781*^9, 
   3.863242762083191*^9, 3.863243498020275*^9, 3.8632490984269657`*^9, 
   3.863249153557783*^9, 3.863249800948948*^9, 3.863261113079543*^9, 
   3.863261258571767*^9, 3.863263767952365*^9, 3.863266487752336*^9, 
   3.863268325182302*^9, 3.864794323339487*^9, {3.8647944114753036`*^9, 
   3.864794415160467*^9}, 3.864794798872734*^9, 3.864797237733761*^9, 
   3.864824874279098*^9, 3.864825084390379*^9, 3.8648257903081007`*^9, 
   3.8648258243477163`*^9, 3.864826317452064*^9, 3.864826707415752*^9, 
   3.8648268358911123`*^9, 3.864827667008909*^9, 3.8648277980615273`*^9, 
   3.8648279244198427`*^9, 3.864829394605691*^9, 3.864829843115088*^9, 
   3.864829959358408*^9, 3.864830393511653*^9, 3.864830567569335*^9, 
   3.864830919268218*^9, 3.864831031272729*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"a3c65871-cdf9-4a51-a49b-7653da978799"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"predictionTargetPairs", "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"4.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://www.wolframcloud.com/obj/resourcesystem/\
published/FunctionRepository/resources/DynamicMap"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "DynamicMap"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
        "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
        "Version" -> "4.0.0", "Description" -> 
        "Map functions over lists while showing dynamic progress", 
        "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
        "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
     Selectable->False], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"majorityNet", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "]"}], ",", 
        RowBox[{"First", "[", 
         RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"testData", ",", 
       RowBox[{"UpTo", "[", "10000", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hardenedPredictionTargetPairs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Harden", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
    "predictionTargetPairs"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Sort", "[", 
  RowBox[{"Counts", "[", "hardenedPredictionTargetPairs", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8632403336213713`*^9, 3.863240377260723*^9}, 
   3.864794328166184*^9, {3.864794407903618*^9, 3.864794436294898*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1.`"}]}], "}"}], "\[Rule]", "10"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1.`"}], "}"}], "\[Rule]", "28"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"-", "1.`"}]}], "}"}], "\[Rule]", "479"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1.`"}], "}"}], "\[Rule]", "483"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.864794524228527*^9, 3.864794804565859*^9, 
  3.864797246176762*^9, 3.864825835032165*^9, 3.864826323518758*^9, 
  3.864826710829912*^9, 3.864826838724924*^9, 3.864827670232036*^9, 
  3.864827801553979*^9, 3.8648279285250597`*^9, 3.864829397451899*^9, 
  3.864829847364244*^9, 3.864829961745328*^9, 3.864830398122015*^9, 
  3.864830612853704*^9, 3.864830941720092*^9, 3.8648310387491426`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"1a976449-8c18-4a43-a7e0-e97ac34dde5b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.0 for Linux x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6b749efe-4de6-4ef5-81a5-e56ac96807ba"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 3, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[738, 27, 384, 8, 29, "Input",ExpressionUUID->"31a3d5b7-a862-4434-bcdf-74b6c5931123"],
Cell[CellGroupData[{
Cell[1147, 39, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1352, 44, 7516, 174, 115, "Output",ExpressionUUID->"b1271ee8-4349-41d8-b61b-2fc788a68ff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8905, 223, 156, 3, 69, "Chapter",ExpressionUUID->"e172cf77-104a-417b-9e8b-0895cfdd6efc"],
Cell[CellGroupData[{
Cell[9086, 230, 167, 3, 67, "Section",ExpressionUUID->"f58270f5-8f0f-4a1c-9f4c-0201cecf95d8"],
Cell[CellGroupData[{
Cell[9278, 237, 11642, 268, 139, "Input",ExpressionUUID->"660052dc-0b70-46b2-924e-427e0bd9ad48"],
Cell[20923, 507, 132, 3, 26, "Echo",ExpressionUUID->"51d6417b-81b6-407b-b258-d62fd4897c74"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21104, 516, 206, 4, 67, "Section",ExpressionUUID->"efe91894-6841-49a9-ab9d-fd0123575c7c"],
Cell[CellGroupData[{
Cell[21335, 524, 4203, 63, 51, "Input",ExpressionUUID->"614e558a-2732-447b-ab0f-cd04a2a854b7"],
Cell[25541, 589, 2160733, 36092, 68, "Output",ExpressionUUID->"28ab16d7-dd4f-407c-8d33-a9d9ae4e6942"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2186323, 36687, 250, 4, 67, "Section",ExpressionUUID->"ad8f60ad-b03c-4795-b29f-2120bea29aab"],
Cell[2186576, 36693, 5948, 93, 133, "Input",ExpressionUUID->"eaa3d115-a086-4307-a3c4-028cf226a277"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2192561, 36791, 300, 5, 67, "Section",ExpressionUUID->"b675450a-34c8-422e-899e-e8ac46fc9f8e"],
Cell[2192864, 36798, 1523, 40, 133, "Input",ExpressionUUID->"ec566d49-f36a-43fd-b5c3-ee142eb3b4bc"],
Cell[CellGroupData[{
Cell[2194412, 36842, 1168, 28, 92, "Input",ExpressionUUID->"17d6edff-ccbc-4c33-ae6f-0bcb97945f31"],
Cell[2195583, 36872, 4076, 59, 33, "Output",ExpressionUUID->"eefce6af-b81f-42ce-935b-155bca92ee05"],
Cell[2199662, 36933, 3975, 57, 33, "Output",ExpressionUUID->"a3c65871-cdf9-4a51-a49b-7653da978799"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2203674, 36995, 9240, 224, 76, "Input",ExpressionUUID->"7753eb95-f919-47fc-b2e2-6bd4824c7518"],
Cell[2212917, 37221, 1005, 24, 33, "Output",ExpressionUUID->"1a976449-8c18-4a43-a7e0-e97ac34dde5b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

